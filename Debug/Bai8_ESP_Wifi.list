
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a878  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007144  0800aa08  0800aa08  0001aa08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b4c  08011b4c  0003011c  2**0
                  CONTENTS
  4 .ARM          00000008  08011b4c  08011b4c  00021b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b54  08011b54  0003011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b54  08011b54  00021b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b58  08011b58  00021b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08011b5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003011c  2**0
                  CONTENTS
 10 .bss          000007a8  2000011c  2000011c  0003011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008c4  200008c4  0003011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a479  00000000  00000000  0003018f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000481c  00000000  00000000  0004a608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001850  00000000  00000000  0004ee28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012d7  00000000  00000000  00050678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006e6d  00000000  00000000  0005194f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000222da  00000000  00000000  000587bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e1618  00000000  00000000  0007aa96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006e84  00000000  00000000  0015c0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00162f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000011c 	.word	0x2000011c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a9f0 	.word	0x0800a9f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000120 	.word	0x20000120
 80001cc:	0800a9f0 	.word	0x0800a9f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000582:	463b      	mov	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800058e:	4b3d      	ldr	r3, [pc, #244]	; (8000684 <MX_ADC1_Init+0x108>)
 8000590:	4a3d      	ldr	r2, [pc, #244]	; (8000688 <MX_ADC1_Init+0x10c>)
 8000592:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000594:	4b3b      	ldr	r3, [pc, #236]	; (8000684 <MX_ADC1_Init+0x108>)
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800059a:	4b3a      	ldr	r3, [pc, #232]	; (8000684 <MX_ADC1_Init+0x108>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005a0:	4b38      	ldr	r3, [pc, #224]	; (8000684 <MX_ADC1_Init+0x108>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a6:	4b37      	ldr	r3, [pc, #220]	; (8000684 <MX_ADC1_Init+0x108>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ac:	4b35      	ldr	r3, [pc, #212]	; (8000684 <MX_ADC1_Init+0x108>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b4:	4b33      	ldr	r3, [pc, #204]	; (8000684 <MX_ADC1_Init+0x108>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ba:	4b32      	ldr	r3, [pc, #200]	; (8000684 <MX_ADC1_Init+0x108>)
 80005bc:	4a33      	ldr	r2, [pc, #204]	; (800068c <MX_ADC1_Init+0x110>)
 80005be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c0:	4b30      	ldr	r3, [pc, #192]	; (8000684 <MX_ADC1_Init+0x108>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005c6:	4b2f      	ldr	r3, [pc, #188]	; (8000684 <MX_ADC1_Init+0x108>)
 80005c8:	2205      	movs	r2, #5
 80005ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005cc:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <MX_ADC1_Init+0x108>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d4:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <MX_ADC1_Init+0x108>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005da:	482a      	ldr	r0, [pc, #168]	; (8000684 <MX_ADC1_Init+0x108>)
 80005dc:	f004 f88a 	bl	80046f4 <HAL_ADC_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005e6:	f001 fc8f 	bl	8001f08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005ea:	2308      	movs	r3, #8
 80005ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	4619      	mov	r1, r3
 80005fa:	4822      	ldr	r0, [pc, #136]	; (8000684 <MX_ADC1_Init+0x108>)
 80005fc:	f004 f9ec 	bl	80049d8 <HAL_ADC_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000606:	f001 fc7f 	bl	8001f08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800060a:	2309      	movs	r3, #9
 800060c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800060e:	2302      	movs	r3, #2
 8000610:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	4619      	mov	r1, r3
 8000616:	481b      	ldr	r0, [pc, #108]	; (8000684 <MX_ADC1_Init+0x108>)
 8000618:	f004 f9de 	bl	80049d8 <HAL_ADC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000622:	f001 fc71 	bl	8001f08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000626:	230a      	movs	r3, #10
 8000628:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800062a:	2303      	movs	r3, #3
 800062c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	4814      	ldr	r0, [pc, #80]	; (8000684 <MX_ADC1_Init+0x108>)
 8000634:	f004 f9d0 	bl	80049d8 <HAL_ADC_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800063e:	f001 fc63 	bl	8001f08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000642:	230b      	movs	r3, #11
 8000644:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000646:	2304      	movs	r3, #4
 8000648:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064a:	463b      	mov	r3, r7
 800064c:	4619      	mov	r1, r3
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_ADC1_Init+0x108>)
 8000650:	f004 f9c2 	bl	80049d8 <HAL_ADC_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800065a:	f001 fc55 	bl	8001f08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800065e:	230c      	movs	r3, #12
 8000660:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000662:	2305      	movs	r3, #5
 8000664:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_ADC1_Init+0x108>)
 800066c:	f004 f9b4 	bl	80049d8 <HAL_ADC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000676:	f001 fc47 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000138 	.word	0x20000138
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a3c      	ldr	r2, [pc, #240]	; (80007a0 <HAL_ADC_MspInit+0x110>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d171      	bne.n	8000796 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a3a      	ldr	r2, [pc, #232]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
 80006c2:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a33      	ldr	r2, [pc, #204]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a2c      	ldr	r2, [pc, #176]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000706:	2307      	movs	r3, #7
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	4823      	ldr	r0, [pc, #140]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 800071a:	f005 f911 	bl	8005940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800071e:	2303      	movs	r3, #3
 8000720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000722:	2303      	movs	r3, #3
 8000724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	481e      	ldr	r0, [pc, #120]	; (80007ac <HAL_ADC_MspInit+0x11c>)
 8000732:	f005 f905 	bl	8005940 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000736:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000738:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <HAL_ADC_MspInit+0x124>)
 800073a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800073c:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000754:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800075c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000760:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000764:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800076c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800077c:	f004 fcde 	bl	800513c <HAL_DMA_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000786:	f001 fbbf 	bl	8001f08 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800078e:	639a      	str	r2, [r3, #56]	; 0x38
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	; 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40012000 	.word	0x40012000
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020800 	.word	0x40020800
 80007ac:	40020400 	.word	0x40020400
 80007b0:	20000180 	.word	0x20000180
 80007b4:	40026410 	.word	0x40026410

080007b8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007bc:	2201      	movs	r2, #1
 80007be:	2108      	movs	r1, #8
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <button_init+0x14>)
 80007c2:	f005 fa59 	bl	8005c78 <HAL_GPIO_WritePin>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40020c00 	.word	0x40020c00

080007d0 <button_Scan>:

void button_Scan(){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	482f      	ldr	r0, [pc, #188]	; (8000898 <button_Scan+0xc8>)
 80007dc:	f005 fa4c 	bl	8005c78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2108      	movs	r1, #8
 80007e4:	482c      	ldr	r0, [pc, #176]	; (8000898 <button_Scan+0xc8>)
 80007e6:	f005 fa47 	bl	8005c78 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80007ea:	230a      	movs	r3, #10
 80007ec:	2202      	movs	r2, #2
 80007ee:	492b      	ldr	r1, [pc, #172]	; (800089c <button_Scan+0xcc>)
 80007f0:	482b      	ldr	r0, [pc, #172]	; (80008a0 <button_Scan+0xd0>)
 80007f2:	f006 f9fc 	bl	8006bee <HAL_SPI_Receive>
	  int button_index = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80007fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007fe:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	e03f      	b.n	8000886 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db06      	blt.n	800081a <button_Scan+0x4a>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b03      	cmp	r3, #3
 8000810:	dc03      	bgt.n	800081a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3304      	adds	r3, #4
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	e018      	b.n	800084c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b03      	cmp	r3, #3
 800081e:	dd07      	ble.n	8000830 <button_Scan+0x60>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b07      	cmp	r3, #7
 8000824:	dc04      	bgt.n	8000830 <button_Scan+0x60>
			  button_index = 7 - i;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f1c3 0307 	rsb	r3, r3, #7
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	e00d      	b.n	800084c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b07      	cmp	r3, #7
 8000834:	dd06      	ble.n	8000844 <button_Scan+0x74>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b0b      	cmp	r3, #11
 800083a:	dc03      	bgt.n	8000844 <button_Scan+0x74>
			  button_index = i + 4;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3304      	adds	r3, #4
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	e003      	b.n	800084c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f1c3 0317 	rsb	r3, r3, #23
 800084a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <button_Scan+0xcc>)
 800084e:	881a      	ldrh	r2, [r3, #0]
 8000850:	897b      	ldrh	r3, [r7, #10]
 8000852:	4013      	ands	r3, r2
 8000854:	b29b      	uxth	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d005      	beq.n	8000866 <button_Scan+0x96>
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <button_Scan+0xd4>)
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	2100      	movs	r1, #0
 8000860:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000864:	e009      	b.n	800087a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000866:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <button_Scan+0xd4>)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800086e:	3301      	adds	r3, #1
 8000870:	b299      	uxth	r1, r3
 8000872:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <button_Scan+0xd4>)
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800087a:	897b      	ldrh	r3, [r7, #10]
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b0f      	cmp	r3, #15
 800088a:	ddbc      	ble.n	8000806 <button_Scan+0x36>
	  }
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40020c00 	.word	0x40020c00
 800089c:	20000200 	.word	0x20000200
 80008a0:	200005b4 	.word	0x200005b4
 80008a4:	200001e0 	.word	0x200001e0

080008a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_DMA_Init+0x3c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <MX_DMA_Init+0x3c>)
 80008b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_DMA_Init+0x3c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	2038      	movs	r0, #56	; 0x38
 80008d0:	f004 fbfd 	bl	80050ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008d4:	2038      	movs	r0, #56	; 0x38
 80008d6:	f004 fc16 	bl	8005106 <HAL_NVIC_EnableIRQ>

}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
 80008fe:	615a      	str	r2, [r3, #20]
 8000900:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000902:	463b      	mov	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
 8000910:	615a      	str	r2, [r3, #20]
 8000912:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000914:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000916:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800091a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800091c:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <MX_FSMC_Init+0xec>)
 800091e:	4a2e      	ldr	r2, [pc, #184]	; (80009d8 <MX_FSMC_Init+0xf0>)
 8000920:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000922:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000928:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <MX_FSMC_Init+0xec>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800092e:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000934:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000936:	2210      	movs	r2, #16
 8000938:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800093a:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <MX_FSMC_Init+0xec>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000940:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000946:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800094c:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_FSMC_Init+0xec>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000954:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800095a:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_FSMC_Init+0xec>)
 800095c:	2200      	movs	r2, #0
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000966:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_FSMC_Init+0xec>)
 800096a:	2200      	movs	r2, #0
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000970:	2200      	movs	r2, #0
 8000972:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000976:	2200      	movs	r2, #0
 8000978:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800097a:	230f      	movs	r3, #15
 800097c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800097e:	230f      	movs	r3, #15
 8000980:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000982:	233c      	movs	r3, #60	; 0x3c
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800098a:	2310      	movs	r3, #16
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800098e:	2311      	movs	r3, #17
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000992:	2300      	movs	r3, #0
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000996:	2308      	movs	r3, #8
 8000998:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800099a:	230f      	movs	r3, #15
 800099c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800099e:	2309      	movs	r3, #9
 80009a0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80009a6:	2310      	movs	r3, #16
 80009a8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80009aa:	2311      	movs	r3, #17
 80009ac:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80009b2:	463a      	mov	r2, r7
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <MX_FSMC_Init+0xec>)
 80009bc:	f006 fcfa 	bl	80073b4 <HAL_SRAM_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80009c6:	f001 fa9f 	bl	8001f08 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80009ca:	bf00      	nop
 80009cc:	3738      	adds	r7, #56	; 0x38
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000204 	.word	0x20000204
 80009d8:	a0000104 	.word	0xa0000104

080009dc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <HAL_FSMC_MspInit+0x88>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d131      	bne.n	8000a5c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <HAL_FSMC_MspInit+0x88>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_FSMC_MspInit+0x8c>)
 8000a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a06:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <HAL_FSMC_MspInit+0x8c>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6393      	str	r3, [r2, #56]	; 0x38
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <HAL_FSMC_MspInit+0x8c>)
 8000a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000a1a:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000a1e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <HAL_FSMC_MspInit+0x90>)
 8000a36:	f004 ff83 	bl	8005940 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000a3a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000a3e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <HAL_FSMC_MspInit+0x94>)
 8000a56:	f004 ff73 	bl	8005940 <HAL_GPIO_Init>
 8000a5a:	e000      	b.n	8000a5e <HAL_FSMC_MspInit+0x82>
    return;
 8000a5c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000254 	.word	0x20000254
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40020c00 	.word	0x40020c00

08000a74 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000a7c:	f7ff ffae 	bl	80009dc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08e      	sub	sp, #56	; 0x38
 8000a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
 8000aa2:	4b8f      	ldr	r3, [pc, #572]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a8e      	ldr	r2, [pc, #568]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000aa8:	f043 0310 	orr.w	r3, r3, #16
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b8c      	ldr	r3, [pc, #560]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	623b      	str	r3, [r7, #32]
 8000ab8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
 8000abe:	4b88      	ldr	r3, [pc, #544]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a87      	ldr	r2, [pc, #540]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b85      	ldr	r3, [pc, #532]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
 8000ada:	4b81      	ldr	r3, [pc, #516]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a80      	ldr	r2, [pc, #512]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000ae0:	f043 0320 	orr.w	r3, r3, #32
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b7e      	ldr	r3, [pc, #504]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0320 	and.w	r3, r3, #32
 8000aee:	61bb      	str	r3, [r7, #24]
 8000af0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	4b7a      	ldr	r3, [pc, #488]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a79      	ldr	r2, [pc, #484]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b77      	ldr	r3, [pc, #476]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b73      	ldr	r3, [pc, #460]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a72      	ldr	r2, [pc, #456]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b70      	ldr	r3, [pc, #448]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b6c      	ldr	r3, [pc, #432]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a6b      	ldr	r2, [pc, #428]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b69      	ldr	r3, [pc, #420]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	4b65      	ldr	r3, [pc, #404]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a64      	ldr	r2, [pc, #400]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b62      	ldr	r3, [pc, #392]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0308 	and.w	r3, r3, #8
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b5e      	ldr	r3, [pc, #376]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a5d      	ldr	r2, [pc, #372]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b5b      	ldr	r3, [pc, #364]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2170      	movs	r1, #112	; 0x70
 8000b82:	4858      	ldr	r0, [pc, #352]	; (8000ce4 <MX_GPIO_Init+0x25c>)
 8000b84:	f005 f878 	bl	8005c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8000b8e:	4856      	ldr	r0, [pc, #344]	; (8000ce8 <MX_GPIO_Init+0x260>)
 8000b90:	f005 f872 	bl	8005c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9a:	4854      	ldr	r0, [pc, #336]	; (8000cec <MX_GPIO_Init+0x264>)
 8000b9c:	f005 f86c 	bl	8005c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000ba6:	4852      	ldr	r0, [pc, #328]	; (8000cf0 <MX_GPIO_Init+0x268>)
 8000ba8:	f005 f866 	bl	8005c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb2:	4850      	ldr	r0, [pc, #320]	; (8000cf4 <MX_GPIO_Init+0x26c>)
 8000bb4:	f005 f860 	bl	8005c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2108      	movs	r1, #8
 8000bbc:	484e      	ldr	r0, [pc, #312]	; (8000cf8 <MX_GPIO_Init+0x270>)
 8000bbe:	f005 f85b 	bl	8005c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000bc2:	2370      	movs	r3, #112	; 0x70
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4842      	ldr	r0, [pc, #264]	; (8000ce4 <MX_GPIO_Init+0x25c>)
 8000bda:	f004 feb1 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000bde:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	483c      	ldr	r0, [pc, #240]	; (8000ce8 <MX_GPIO_Init+0x260>)
 8000bf8:	f004 fea2 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8000bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4836      	ldr	r0, [pc, #216]	; (8000cec <MX_GPIO_Init+0x264>)
 8000c12:	f004 fe95 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	482f      	ldr	r0, [pc, #188]	; (8000cec <MX_GPIO_Init+0x264>)
 8000c30:	f004 fe86 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000c34:	23c0      	movs	r3, #192	; 0xc0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	482b      	ldr	r0, [pc, #172]	; (8000cf4 <MX_GPIO_Init+0x26c>)
 8000c48:	f004 fe7a 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000c4c:	2330      	movs	r3, #48	; 0x30
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4822      	ldr	r0, [pc, #136]	; (8000ce8 <MX_GPIO_Init+0x260>)
 8000c60:	f004 fe6e 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000c64:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481c      	ldr	r0, [pc, #112]	; (8000cf0 <MX_GPIO_Init+0x268>)
 8000c7e:	f004 fe5f 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8000c82:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4814      	ldr	r0, [pc, #80]	; (8000ce8 <MX_GPIO_Init+0x260>)
 8000c98:	f004 fe52 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <MX_GPIO_Init+0x26c>)
 8000cb6:	f004 fe43 	bl	8005940 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000cba:	2308      	movs	r3, #8
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <MX_GPIO_Init+0x270>)
 8000cd2:	f004 fe35 	bl	8005940 <HAL_GPIO_Init>

}
 8000cd6:	bf00      	nop
 8000cd8:	3738      	adds	r7, #56	; 0x38
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40021400 	.word	0x40021400
 8000cf0:	40021800 	.word	0x40021800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020c00 	.word	0x40020c00

08000cfc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d02:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <MX_I2C1_Init+0x54>)
 8000d04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d08:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <MX_I2C1_Init+0x58>)
 8000d0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d3a:	f004 ffb7 	bl	8005cac <HAL_I2C_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d44:	f001 f8e0 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000258 	.word	0x20000258
 8000d50:	40005400 	.word	0x40005400
 8000d54:	000186a0 	.word	0x000186a0

08000d58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_I2C_MspInit+0x84>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12b      	bne.n	8000dd2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d96:	23c0      	movs	r3, #192	; 0xc0
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9a:	2312      	movs	r3, #18
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da6:	2304      	movs	r3, #4
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <HAL_I2C_MspInit+0x8c>)
 8000db2:	f004 fdc5 	bl	8005940 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020400 	.word	0x40020400

08000de8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <LCD_WR_REG+0x1c>)
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	8013      	strh	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	600ffffe 	.word	0x600ffffe

08000e08 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <LCD_WR_DATA+0x1c>)
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	8053      	strh	r3, [r2, #2]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	600ffffe 	.word	0x600ffffe

08000e28 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <LCD_RD_DATA+0x20>)
 8000e30:	885b      	ldrh	r3, [r3, #2]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	b29b      	uxth	r3, r3
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	600ffffe 	.word	0x600ffffe

08000e4c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4604      	mov	r4, r0
 8000e54:	4608      	mov	r0, r1
 8000e56:	4611      	mov	r1, r2
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	80fb      	strh	r3, [r7, #6]
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80bb      	strh	r3, [r7, #4]
 8000e62:	460b      	mov	r3, r1
 8000e64:	807b      	strh	r3, [r7, #2]
 8000e66:	4613      	mov	r3, r2
 8000e68:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000e6a:	202a      	movs	r0, #42	; 0x2a
 8000e6c:	f7ff ffbc 	bl	8000de8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	0a1b      	lsrs	r3, r3, #8
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ffc6 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ffc0 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000e88:	887b      	ldrh	r3, [r7, #2]
 8000e8a:	0a1b      	lsrs	r3, r3, #8
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ffba 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000e94:	887b      	ldrh	r3, [r7, #2]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ffb4 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000ea0:	202b      	movs	r0, #43	; 0x2b
 8000ea2:	f7ff ffa1 	bl	8000de8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000ea6:	88bb      	ldrh	r3, [r7, #4]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ffab 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000eb2:	88bb      	ldrh	r3, [r7, #4]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ffa5 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000ebe:	883b      	ldrh	r3, [r7, #0]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff9f 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000eca:	883b      	ldrh	r3, [r7, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff99 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000ed6:	202c      	movs	r0, #44	; 0x2c
 8000ed8:	f7ff ff86 	bl	8000de8 <LCD_WR_REG>
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd90      	pop	{r4, r7, pc}

08000ee4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <lcd_Clear+0x60>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <lcd_Clear+0x60>)
 8000ef8:	885b      	ldrh	r3, [r3, #2]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	2000      	movs	r0, #0
 8000f02:	f7ff ffa3 	bl	8000e4c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	81fb      	strh	r3, [r7, #14]
 8000f0a:	e011      	b.n	8000f30 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	81bb      	strh	r3, [r7, #12]
 8000f10:	e006      	b.n	8000f20 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff77 	bl	8000e08 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000f1a:	89bb      	ldrh	r3, [r7, #12]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	81bb      	strh	r3, [r7, #12]
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <lcd_Clear+0x60>)
 8000f22:	885b      	ldrh	r3, [r3, #2]
 8000f24:	89ba      	ldrh	r2, [r7, #12]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d3f3      	bcc.n	8000f12 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	81fb      	strh	r3, [r7, #14]
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <lcd_Clear+0x60>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	89fa      	ldrh	r2, [r7, #14]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3e8      	bcc.n	8000f0c <lcd_Clear+0x28>
		}
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200002ac 	.word	0x200002ac

08000f48 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4608      	mov	r0, r1
 8000f52:	4611      	mov	r1, r2
 8000f54:	461a      	mov	r2, r3
 8000f56:	4623      	mov	r3, r4
 8000f58:	80fb      	strh	r3, [r7, #6]
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80bb      	strh	r3, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	807b      	strh	r3, [r7, #2]
 8000f62:	4613      	mov	r3, r2
 8000f64:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	883b      	ldrh	r3, [r7, #0]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	88b9      	ldrh	r1, [r7, #4]
 8000f74:	88f8      	ldrh	r0, [r7, #6]
 8000f76:	f7ff ff69 	bl	8000e4c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	81fb      	strh	r3, [r7, #14]
 8000f7e:	e010      	b.n	8000fa2 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	81bb      	strh	r3, [r7, #12]
 8000f84:	e006      	b.n	8000f94 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000f86:	8c3b      	ldrh	r3, [r7, #32]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff3d 	bl	8000e08 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000f8e:	89bb      	ldrh	r3, [r7, #12]
 8000f90:	3301      	adds	r3, #1
 8000f92:	81bb      	strh	r3, [r7, #12]
 8000f94:	89ba      	ldrh	r2, [r7, #12]
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d3f4      	bcc.n	8000f86 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000f9c:	89fb      	ldrh	r3, [r7, #14]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	81fb      	strh	r3, [r7, #14]
 8000fa2:	89fa      	ldrh	r2, [r7, #14]
 8000fa4:	883b      	ldrh	r3, [r7, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d3ea      	bcc.n	8000f80 <lcd_Fill+0x38>
		}
	}
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd90      	pop	{r4, r7, pc}

08000fb4 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	80bb      	strh	r3, [r7, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	88fa      	ldrh	r2, [r7, #6]
 8000fca:	88b9      	ldrh	r1, [r7, #4]
 8000fcc:	88f8      	ldrh	r0, [r7, #6]
 8000fce:	f7ff ff3d 	bl	8000e4c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff17 	bl	8000e08 <LCD_WR_DATA>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8000fe2:	b590      	push	{r4, r7, lr}
 8000fe4:	b08d      	sub	sp, #52	; 0x34
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4604      	mov	r4, r0
 8000fea:	4608      	mov	r0, r1
 8000fec:	4611      	mov	r1, r2
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4623      	mov	r3, r4
 8000ff2:	80fb      	strh	r3, [r7, #6]
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	80bb      	strh	r3, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001008:	887a      	ldrh	r2, [r7, #2]
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001010:	883a      	ldrh	r2, [r7, #0]
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 800101c:	88bb      	ldrh	r3, [r7, #4]
 800101e:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	2b00      	cmp	r3, #0
 8001024:	dd02      	ble.n	800102c <lcd_DrawLine+0x4a>
 8001026:	2301      	movs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	e00b      	b.n	8001044 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <lcd_DrawLine+0x56>
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e005      	b.n	8001044 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	425b      	negs	r3, r3
 8001042:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dd02      	ble.n	8001050 <lcd_DrawLine+0x6e>
 800104a:	2301      	movs	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	e00b      	b.n	8001068 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <lcd_DrawLine+0x7a>
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	e005      	b.n	8001068 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	425b      	negs	r3, r3
 8001066:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001068:	6a3a      	ldr	r2, [r7, #32]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	429a      	cmp	r2, r3
 800106e:	dd02      	ble.n	8001076 <lcd_DrawLine+0x94>
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	e001      	b.n	800107a <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 800107a:	2300      	movs	r3, #0
 800107c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800107e:	e02b      	b.n	80010d8 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	b29b      	uxth	r3, r3
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	b291      	uxth	r1, r2
 8001088:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff91 	bl	8000fb4 <lcd_DrawPoint>
		xerr+=delta_x;
 8001092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	4413      	add	r3, r2
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 800109a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	4413      	add	r3, r2
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 80010a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dd07      	ble.n	80010ba <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 80010aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80010ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	429a      	cmp	r2, r3
 80010c0:	dd07      	ble.n	80010d2 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80010c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4413      	add	r3, r2
 80010d0:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80010d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010d4:	3301      	adds	r3, #1
 80010d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80010d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dacf      	bge.n	8001080 <lcd_DrawLine+0x9e>
		}
	}
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3734      	adds	r7, #52	; 0x34
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd90      	pop	{r4, r7, pc}

080010ea <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 80010ea:	b590      	push	{r4, r7, lr}
 80010ec:	b085      	sub	sp, #20
 80010ee:	af02      	add	r7, sp, #8
 80010f0:	4604      	mov	r4, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4611      	mov	r1, r2
 80010f6:	461a      	mov	r2, r3
 80010f8:	4623      	mov	r3, r4
 80010fa:	80fb      	strh	r3, [r7, #6]
 80010fc:	4603      	mov	r3, r0
 80010fe:	80bb      	strh	r3, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
 8001104:	4613      	mov	r3, r2
 8001106:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001108:	88bc      	ldrh	r4, [r7, #4]
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	88b9      	ldrh	r1, [r7, #4]
 800110e:	88f8      	ldrh	r0, [r7, #6]
 8001110:	8b3b      	ldrh	r3, [r7, #24]
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	4623      	mov	r3, r4
 8001116:	f7ff ff64 	bl	8000fe2 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 800111a:	883c      	ldrh	r4, [r7, #0]
 800111c:	88fa      	ldrh	r2, [r7, #6]
 800111e:	88b9      	ldrh	r1, [r7, #4]
 8001120:	88f8      	ldrh	r0, [r7, #6]
 8001122:	8b3b      	ldrh	r3, [r7, #24]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	4623      	mov	r3, r4
 8001128:	f7ff ff5b 	bl	8000fe2 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 800112c:	883c      	ldrh	r4, [r7, #0]
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	8839      	ldrh	r1, [r7, #0]
 8001132:	88f8      	ldrh	r0, [r7, #6]
 8001134:	8b3b      	ldrh	r3, [r7, #24]
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	4623      	mov	r3, r4
 800113a:	f7ff ff52 	bl	8000fe2 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 800113e:	883c      	ldrh	r4, [r7, #0]
 8001140:	887a      	ldrh	r2, [r7, #2]
 8001142:	88b9      	ldrh	r1, [r7, #4]
 8001144:	8878      	ldrh	r0, [r7, #2]
 8001146:	8b3b      	ldrh	r3, [r7, #24]
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	4623      	mov	r3, r4
 800114c:	f7ff ff49 	bl	8000fe2 <lcd_DrawLine>
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bd90      	pop	{r4, r7, pc}

08001158 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	4604      	mov	r4, r0
 8001160:	4608      	mov	r0, r1
 8001162:	4611      	mov	r1, r2
 8001164:	461a      	mov	r2, r3
 8001166:	4623      	mov	r3, r4
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	4603      	mov	r3, r0
 800116c:	80bb      	strh	r3, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]
 8001172:	4613      	mov	r3, r2
 8001174:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001176:	2300      	movs	r3, #0
 8001178:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800117e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001182:	085b      	lsrs	r3, r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	08db      	lsrs	r3, r3, #3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	461a      	mov	r2, r3
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf14      	ite	ne
 800119a:	2301      	movne	r3, #1
 800119c:	2300      	moveq	r3, #0
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4413      	add	r3, r2
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	fb12 f303 	smulbb	r3, r2, r3
 80011ae:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	3b20      	subs	r3, #32
 80011b4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	4413      	add	r3, r2
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b29c      	uxth	r4, r3
 80011c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	88bb      	ldrh	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	3b01      	subs	r3, #1
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	88b9      	ldrh	r1, [r7, #4]
 80011d6:	88f8      	ldrh	r0, [r7, #6]
 80011d8:	4622      	mov	r2, r4
 80011da:	f7ff fe37 	bl	8000e4c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80011de:	2300      	movs	r3, #0
 80011e0:	827b      	strh	r3, [r7, #18]
 80011e2:	e07a      	b.n	80012da <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80011e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011e8:	2b0c      	cmp	r3, #12
 80011ea:	d028      	beq.n	800123e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 80011ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011f0:	2b10      	cmp	r3, #16
 80011f2:	d108      	bne.n	8001206 <lcd_ShowChar+0xae>
 80011f4:	78fa      	ldrb	r2, [r7, #3]
 80011f6:	8a7b      	ldrh	r3, [r7, #18]
 80011f8:	493c      	ldr	r1, [pc, #240]	; (80012ec <lcd_ShowChar+0x194>)
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	440a      	add	r2, r1
 80011fe:	4413      	add	r3, r2
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	75fb      	strb	r3, [r7, #23]
 8001204:	e01b      	b.n	800123e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001206:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800120a:	2b18      	cmp	r3, #24
 800120c:	d10b      	bne.n	8001226 <lcd_ShowChar+0xce>
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	8a79      	ldrh	r1, [r7, #18]
 8001212:	4837      	ldr	r0, [pc, #220]	; (80012f0 <lcd_ShowChar+0x198>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	4403      	add	r3, r0
 800121e:	440b      	add	r3, r1
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	75fb      	strb	r3, [r7, #23]
 8001224:	e00b      	b.n	800123e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001226:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800122a:	2b20      	cmp	r3, #32
 800122c:	d15a      	bne.n	80012e4 <lcd_ShowChar+0x18c>
 800122e:	78fa      	ldrb	r2, [r7, #3]
 8001230:	8a7b      	ldrh	r3, [r7, #18]
 8001232:	4930      	ldr	r1, [pc, #192]	; (80012f4 <lcd_ShowChar+0x19c>)
 8001234:	0192      	lsls	r2, r2, #6
 8001236:	440a      	add	r2, r1
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800123e:	2300      	movs	r3, #0
 8001240:	75bb      	strb	r3, [r7, #22]
 8001242:	e044      	b.n	80012ce <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001244:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001248:	2b00      	cmp	r3, #0
 800124a:	d120      	bne.n	800128e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 800124c:	7dfa      	ldrb	r2, [r7, #23]
 800124e:	7dbb      	ldrb	r3, [r7, #22]
 8001250:	fa42 f303 	asr.w	r3, r2, r3
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <lcd_ShowChar+0x10e>
 800125c:	883b      	ldrh	r3, [r7, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fdd2 	bl	8000e08 <LCD_WR_DATA>
 8001264:	e003      	b.n	800126e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001266:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fdcd 	bl	8000e08 <LCD_WR_DATA>
				m++;
 800126e:	7d7b      	ldrb	r3, [r7, #21]
 8001270:	3301      	adds	r3, #1
 8001272:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001274:	7d7b      	ldrb	r3, [r7, #21]
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	fbb3 f1f2 	udiv	r1, r3, r2
 800127c:	fb01 f202 	mul.w	r2, r1, r2
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d11f      	bne.n	80012c8 <lcd_ShowChar+0x170>
				{
					m=0;
 8001288:	2300      	movs	r3, #0
 800128a:	757b      	strb	r3, [r7, #21]
					break;
 800128c:	e022      	b.n	80012d4 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800128e:	7dfa      	ldrb	r2, [r7, #23]
 8001290:	7dbb      	ldrb	r3, [r7, #22]
 8001292:	fa42 f303 	asr.w	r3, r2, r3
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <lcd_ShowChar+0x152>
 800129e:	883a      	ldrh	r2, [r7, #0]
 80012a0:	88b9      	ldrh	r1, [r7, #4]
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe85 	bl	8000fb4 <lcd_DrawPoint>
				x++;
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	3301      	adds	r3, #1
 80012ae:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80012b0:	88fa      	ldrh	r2, [r7, #6]
 80012b2:	8a3b      	ldrh	r3, [r7, #16]
 80012b4:	1ad2      	subs	r2, r2, r3
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d105      	bne.n	80012c8 <lcd_ShowChar+0x170>
				{
					x=x0;
 80012bc:	8a3b      	ldrh	r3, [r7, #16]
 80012be:	80fb      	strh	r3, [r7, #6]
					y++;
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	3301      	adds	r3, #1
 80012c4:	80bb      	strh	r3, [r7, #4]
					break;
 80012c6:	e005      	b.n	80012d4 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80012c8:	7dbb      	ldrb	r3, [r7, #22]
 80012ca:	3301      	adds	r3, #1
 80012cc:	75bb      	strb	r3, [r7, #22]
 80012ce:	7dbb      	ldrb	r3, [r7, #22]
 80012d0:	2b07      	cmp	r3, #7
 80012d2:	d9b7      	bls.n	8001244 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80012d4:	8a7b      	ldrh	r3, [r7, #18]
 80012d6:	3301      	adds	r3, #1
 80012d8:	827b      	strh	r3, [r7, #18]
 80012da:	8a7a      	ldrh	r2, [r7, #18]
 80012dc:	89bb      	ldrh	r3, [r7, #12]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d380      	bcc.n	80011e4 <lcd_ShowChar+0x8c>
 80012e2:	e000      	b.n	80012e6 <lcd_ShowChar+0x18e>
		else return;
 80012e4:	bf00      	nop
				}
			}
		}
	}
}
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	0800ab84 	.word	0x0800ab84
 80012f0:	0800b174 	.word	0x0800b174
 80012f4:	0800c344 	.word	0x0800c344

080012f8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	460a      	mov	r2, r1
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	4613      	mov	r3, r2
 8001306:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001308:	2301      	movs	r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800130c:	e004      	b.n	8001318 <mypow+0x20>
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	79bb      	ldrb	r3, [r7, #6]
 800131a:	1e5a      	subs	r2, r3, #1
 800131c:	71ba      	strb	r2, [r7, #6]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f5      	bne.n	800130e <mypow+0x16>
	return result;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af04      	add	r7, sp, #16
 8001336:	4604      	mov	r4, r0
 8001338:	4608      	mov	r0, r1
 800133a:	4611      	mov	r1, r2
 800133c:	461a      	mov	r2, r3
 800133e:	4623      	mov	r3, r4
 8001340:	80fb      	strh	r3, [r7, #6]
 8001342:	4603      	mov	r3, r0
 8001344:	80bb      	strh	r3, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	807b      	strh	r3, [r7, #2]
 800134a:	4613      	mov	r3, r2
 800134c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800134e:	2300      	movs	r3, #0
 8001350:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001352:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001356:	085b      	lsrs	r3, r3, #1
 8001358:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800135a:	2300      	movs	r3, #0
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	e059      	b.n	8001414 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001360:	887c      	ldrh	r4, [r7, #2]
 8001362:	787a      	ldrb	r2, [r7, #1]
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	3b01      	subs	r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	200a      	movs	r0, #10
 8001372:	f7ff ffc1 	bl	80012f8 <mypow>
 8001376:	4603      	mov	r3, r0
 8001378:	fbb4 f1f3 	udiv	r1, r4, r3
 800137c:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <lcd_ShowIntNum+0xf8>)
 800137e:	fba3 2301 	umull	r2, r3, r3, r1
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	1aca      	subs	r2, r1, r3
 800138e:	4613      	mov	r3, r2
 8001390:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001392:	7bbb      	ldrb	r3, [r7, #14]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d121      	bne.n	80013dc <lcd_ShowIntNum+0xac>
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	787b      	ldrb	r3, [r7, #1]
 800139c:	3b01      	subs	r3, #1
 800139e:	429a      	cmp	r2, r3
 80013a0:	da1c      	bge.n	80013dc <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80013a2:	7b3b      	ldrb	r3, [r7, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d117      	bne.n	80013d8 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	7b7b      	ldrb	r3, [r7, #13]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	fb12 f303 	smulbb	r3, r2, r3
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	4413      	add	r3, r2
 80013ba:	b298      	uxth	r0, r3
 80013bc:	8c3a      	ldrh	r2, [r7, #32]
 80013be:	88b9      	ldrh	r1, [r7, #4]
 80013c0:	2300      	movs	r3, #0
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	4613      	mov	r3, r2
 80013d0:	2220      	movs	r2, #32
 80013d2:	f7ff fec1 	bl	8001158 <lcd_ShowChar>
				continue;
 80013d6:	e01a      	b.n	800140e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80013d8:	2301      	movs	r3, #1
 80013da:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	7b7b      	ldrb	r3, [r7, #13]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	fb12 f303 	smulbb	r3, r2, r3
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	4413      	add	r3, r2
 80013ee:	b298      	uxth	r0, r3
 80013f0:	7b3b      	ldrb	r3, [r7, #12]
 80013f2:	3330      	adds	r3, #48	; 0x30
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	8c3c      	ldrh	r4, [r7, #32]
 80013f8:	88b9      	ldrh	r1, [r7, #4]
 80013fa:	2300      	movs	r3, #0
 80013fc:	9302      	str	r3, [sp, #8]
 80013fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4623      	mov	r3, r4
 800140a:	f7ff fea5 	bl	8001158 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	3301      	adds	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	787b      	ldrb	r3, [r7, #1]
 8001418:	429a      	cmp	r2, r3
 800141a:	d3a1      	bcc.n	8001360 <lcd_ShowIntNum+0x30>
	}
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bd90      	pop	{r4, r7, pc}
 8001426:	bf00      	nop
 8001428:	cccccccd 	.word	0xcccccccd

0800142c <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	4604      	mov	r4, r0
 8001434:	4608      	mov	r0, r1
 8001436:	4611      	mov	r1, r2
 8001438:	461a      	mov	r2, r3
 800143a:	4623      	mov	r3, r4
 800143c:	80fb      	strh	r3, [r7, #6]
 800143e:	4603      	mov	r3, r0
 8001440:	80bb      	strh	r3, [r7, #4]
 8001442:	460b      	mov	r3, r1
 8001444:	807b      	strh	r3, [r7, #2]
 8001446:	4613      	mov	r3, r2
 8001448:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 800144e:	88fa      	ldrh	r2, [r7, #6]
 8001450:	887b      	ldrh	r3, [r7, #2]
 8001452:	4413      	add	r3, r2
 8001454:	b29b      	uxth	r3, r3
 8001456:	3b01      	subs	r3, #1
 8001458:	b29c      	uxth	r4, r3
 800145a:	88ba      	ldrh	r2, [r7, #4]
 800145c:	883b      	ldrh	r3, [r7, #0]
 800145e:	4413      	add	r3, r2
 8001460:	b29b      	uxth	r3, r3
 8001462:	3b01      	subs	r3, #1
 8001464:	b29b      	uxth	r3, r3
 8001466:	88b9      	ldrh	r1, [r7, #4]
 8001468:	88f8      	ldrh	r0, [r7, #6]
 800146a:	4622      	mov	r2, r4
 800146c:	f7ff fcee 	bl	8000e4c <lcd_AddressSet>
	for(i=0;i<length;i++)
 8001470:	2300      	movs	r3, #0
 8001472:	82fb      	strh	r3, [r7, #22]
 8001474:	e027      	b.n	80014c6 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8001476:	2300      	movs	r3, #0
 8001478:	82bb      	strh	r3, [r7, #20]
 800147a:	e01d      	b.n	80014b8 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001482:	4413      	add	r3, r2
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	3301      	adds	r3, #1
 800148e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001490:	4413      	add	r3, r2
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b21a      	sxth	r2, r3
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fcae 	bl	8000e08 <LCD_WR_DATA>
			k++;
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	3301      	adds	r3, #1
 80014b0:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 80014b2:	8abb      	ldrh	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	82bb      	strh	r3, [r7, #20]
 80014b8:	8aba      	ldrh	r2, [r7, #20]
 80014ba:	883b      	ldrh	r3, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3dd      	bcc.n	800147c <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 80014c0:	8afb      	ldrh	r3, [r7, #22]
 80014c2:	3301      	adds	r3, #1
 80014c4:	82fb      	strh	r3, [r7, #22]
 80014c6:	8afa      	ldrh	r2, [r7, #22]
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d3d3      	bcc.n	8001476 <lcd_ShowPicture+0x4a>
		}
	}
}
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}

080014d8 <lcd_SetDir>:



void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <lcd_SetDir+0x44>)
 80014f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014f8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <lcd_SetDir+0x44>)
 80014fc:	22f0      	movs	r2, #240	; 0xf0
 80014fe:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001500:	e006      	b.n	8001510 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <lcd_SetDir+0x44>)
 8001504:	22f0      	movs	r2, #240	; 0xf0
 8001506:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <lcd_SetDir+0x44>)
 800150a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800150e:	805a      	strh	r2, [r3, #2]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	200002ac 	.word	0x200002ac

08001520 <lcd_init>:


void lcd_init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152a:	48aa      	ldr	r0, [pc, #680]	; (80017d4 <lcd_init+0x2b4>)
 800152c:	f004 fba4 	bl	8005c78 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001530:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001534:	f003 f8ba 	bl	80046ac <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153e:	48a5      	ldr	r0, [pc, #660]	; (80017d4 <lcd_init+0x2b4>)
 8001540:	f004 fb9a 	bl	8005c78 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001544:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001548:	f003 f8b0 	bl	80046ac <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff ffc3 	bl	80014d8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001552:	20d3      	movs	r0, #211	; 0xd3
 8001554:	f7ff fc48 	bl	8000de8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001558:	f7ff fc66 	bl	8000e28 <LCD_RD_DATA>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b9d      	ldr	r3, [pc, #628]	; (80017d8 <lcd_init+0x2b8>)
 8001562:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001564:	f7ff fc60 	bl	8000e28 <LCD_RD_DATA>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	4b9a      	ldr	r3, [pc, #616]	; (80017d8 <lcd_init+0x2b8>)
 800156e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001570:	f7ff fc5a 	bl	8000e28 <LCD_RD_DATA>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	4b97      	ldr	r3, [pc, #604]	; (80017d8 <lcd_init+0x2b8>)
 800157a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800157c:	4b96      	ldr	r3, [pc, #600]	; (80017d8 <lcd_init+0x2b8>)
 800157e:	889b      	ldrh	r3, [r3, #4]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b94      	ldr	r3, [pc, #592]	; (80017d8 <lcd_init+0x2b8>)
 8001586:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001588:	f7ff fc4e 	bl	8000e28 <LCD_RD_DATA>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	4b91      	ldr	r3, [pc, #580]	; (80017d8 <lcd_init+0x2b8>)
 8001592:	889b      	ldrh	r3, [r3, #4]
 8001594:	4313      	orrs	r3, r2
 8001596:	b29a      	uxth	r2, r3
 8001598:	4b8f      	ldr	r3, [pc, #572]	; (80017d8 <lcd_init+0x2b8>)
 800159a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800159c:	20cf      	movs	r0, #207	; 0xcf
 800159e:	f7ff fc23 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff fc30 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80015a8:	20c1      	movs	r0, #193	; 0xc1
 80015aa:	f7ff fc2d 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80015ae:	2030      	movs	r0, #48	; 0x30
 80015b0:	f7ff fc2a 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80015b4:	20ed      	movs	r0, #237	; 0xed
 80015b6:	f7ff fc17 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80015ba:	2064      	movs	r0, #100	; 0x64
 80015bc:	f7ff fc24 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f7ff fc21 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80015c6:	2012      	movs	r0, #18
 80015c8:	f7ff fc1e 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80015cc:	2081      	movs	r0, #129	; 0x81
 80015ce:	f7ff fc1b 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80015d2:	20e8      	movs	r0, #232	; 0xe8
 80015d4:	f7ff fc08 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80015d8:	2085      	movs	r0, #133	; 0x85
 80015da:	f7ff fc15 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80015de:	2010      	movs	r0, #16
 80015e0:	f7ff fc12 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80015e4:	207a      	movs	r0, #122	; 0x7a
 80015e6:	f7ff fc0f 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80015ea:	20cb      	movs	r0, #203	; 0xcb
 80015ec:	f7ff fbfc 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80015f0:	2039      	movs	r0, #57	; 0x39
 80015f2:	f7ff fc09 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80015f6:	202c      	movs	r0, #44	; 0x2c
 80015f8:	f7ff fc06 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff fc03 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001602:	2034      	movs	r0, #52	; 0x34
 8001604:	f7ff fc00 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001608:	2002      	movs	r0, #2
 800160a:	f7ff fbfd 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800160e:	20f7      	movs	r0, #247	; 0xf7
 8001610:	f7ff fbea 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001614:	2020      	movs	r0, #32
 8001616:	f7ff fbf7 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800161a:	20ea      	movs	r0, #234	; 0xea
 800161c:	f7ff fbe4 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff fbf1 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001626:	2000      	movs	r0, #0
 8001628:	f7ff fbee 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800162c:	20c0      	movs	r0, #192	; 0xc0
 800162e:	f7ff fbdb 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001632:	201b      	movs	r0, #27
 8001634:	f7ff fbe8 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001638:	20c1      	movs	r0, #193	; 0xc1
 800163a:	f7ff fbd5 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800163e:	2001      	movs	r0, #1
 8001640:	f7ff fbe2 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001644:	20c5      	movs	r0, #197	; 0xc5
 8001646:	f7ff fbcf 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800164a:	2030      	movs	r0, #48	; 0x30
 800164c:	f7ff fbdc 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001650:	2030      	movs	r0, #48	; 0x30
 8001652:	f7ff fbd9 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001656:	20c7      	movs	r0, #199	; 0xc7
 8001658:	f7ff fbc6 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800165c:	20b7      	movs	r0, #183	; 0xb7
 800165e:	f7ff fbd3 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001662:	2036      	movs	r0, #54	; 0x36
 8001664:	f7ff fbc0 	bl	8000de8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001668:	2008      	movs	r0, #8
 800166a:	f7ff fbcd 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800166e:	203a      	movs	r0, #58	; 0x3a
 8001670:	f7ff fbba 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001674:	2055      	movs	r0, #85	; 0x55
 8001676:	f7ff fbc7 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800167a:	20b1      	movs	r0, #177	; 0xb1
 800167c:	f7ff fbb4 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff fbc1 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001686:	201a      	movs	r0, #26
 8001688:	f7ff fbbe 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800168c:	20b6      	movs	r0, #182	; 0xb6
 800168e:	f7ff fbab 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001692:	200a      	movs	r0, #10
 8001694:	f7ff fbb8 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001698:	20a2      	movs	r0, #162	; 0xa2
 800169a:	f7ff fbb5 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800169e:	20f2      	movs	r0, #242	; 0xf2
 80016a0:	f7ff fba2 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f7ff fbaf 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80016aa:	2026      	movs	r0, #38	; 0x26
 80016ac:	f7ff fb9c 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff fba9 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80016b6:	20e0      	movs	r0, #224	; 0xe0
 80016b8:	f7ff fb96 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80016bc:	200f      	movs	r0, #15
 80016be:	f7ff fba3 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80016c2:	202a      	movs	r0, #42	; 0x2a
 80016c4:	f7ff fba0 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80016c8:	2028      	movs	r0, #40	; 0x28
 80016ca:	f7ff fb9d 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80016ce:	2008      	movs	r0, #8
 80016d0:	f7ff fb9a 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80016d4:	200e      	movs	r0, #14
 80016d6:	f7ff fb97 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80016da:	2008      	movs	r0, #8
 80016dc:	f7ff fb94 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80016e0:	2054      	movs	r0, #84	; 0x54
 80016e2:	f7ff fb91 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80016e6:	20a9      	movs	r0, #169	; 0xa9
 80016e8:	f7ff fb8e 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80016ec:	2043      	movs	r0, #67	; 0x43
 80016ee:	f7ff fb8b 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80016f2:	200a      	movs	r0, #10
 80016f4:	f7ff fb88 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80016f8:	200f      	movs	r0, #15
 80016fa:	f7ff fb85 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016fe:	2000      	movs	r0, #0
 8001700:	f7ff fb82 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff fb7f 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fb7c 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fb79 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001716:	20e1      	movs	r0, #225	; 0xe1
 8001718:	f7ff fb66 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff fb73 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001722:	2015      	movs	r0, #21
 8001724:	f7ff fb70 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001728:	2017      	movs	r0, #23
 800172a:	f7ff fb6d 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800172e:	2007      	movs	r0, #7
 8001730:	f7ff fb6a 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001734:	2011      	movs	r0, #17
 8001736:	f7ff fb67 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800173a:	2006      	movs	r0, #6
 800173c:	f7ff fb64 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001740:	202b      	movs	r0, #43	; 0x2b
 8001742:	f7ff fb61 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001746:	2056      	movs	r0, #86	; 0x56
 8001748:	f7ff fb5e 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800174c:	203c      	movs	r0, #60	; 0x3c
 800174e:	f7ff fb5b 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001752:	2005      	movs	r0, #5
 8001754:	f7ff fb58 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001758:	2010      	movs	r0, #16
 800175a:	f7ff fb55 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800175e:	200f      	movs	r0, #15
 8001760:	f7ff fb52 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001764:	203f      	movs	r0, #63	; 0x3f
 8001766:	f7ff fb4f 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800176a:	203f      	movs	r0, #63	; 0x3f
 800176c:	f7ff fb4c 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001770:	200f      	movs	r0, #15
 8001772:	f7ff fb49 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001776:	202b      	movs	r0, #43	; 0x2b
 8001778:	f7ff fb36 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fb43 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001782:	2000      	movs	r0, #0
 8001784:	f7ff fb40 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001788:	2001      	movs	r0, #1
 800178a:	f7ff fb3d 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800178e:	203f      	movs	r0, #63	; 0x3f
 8001790:	f7ff fb3a 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001794:	202a      	movs	r0, #42	; 0x2a
 8001796:	f7ff fb27 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff fb34 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff fb31 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7ff fb2e 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80017ac:	20ef      	movs	r0, #239	; 0xef
 80017ae:	f7ff fb2b 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80017b2:	2011      	movs	r0, #17
 80017b4:	f7ff fb18 	bl	8000de8 <LCD_WR_REG>
	HAL_Delay(120);
 80017b8:	2078      	movs	r0, #120	; 0x78
 80017ba:	f002 ff77 	bl	80046ac <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80017be:	2029      	movs	r0, #41	; 0x29
 80017c0:	f7ff fb12 	bl	8000de8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80017c4:	2201      	movs	r2, #1
 80017c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ca:	4804      	ldr	r0, [pc, #16]	; (80017dc <lcd_init+0x2bc>)
 80017cc:	f004 fa54 	bl	8005c78 <HAL_GPIO_WritePin>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40020800 	.word	0x40020800
 80017d8:	200002ac 	.word	0x200002ac
 80017dc:	40020000 	.word	0x40020000

080017e0 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b08b      	sub	sp, #44	; 0x2c
 80017e4:	af04      	add	r7, sp, #16
 80017e6:	60ba      	str	r2, [r7, #8]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	81fb      	strh	r3, [r7, #14]
 80017ee:	460b      	mov	r3, r1
 80017f0:	81bb      	strh	r3, [r7, #12]
 80017f2:	4613      	mov	r3, r2
 80017f4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80017f6:	89fb      	ldrh	r3, [r7, #14]
 80017f8:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80017fe:	e048      	b.n	8001892 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d145      	bne.n	8001892 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001806:	89fa      	ldrh	r2, [r7, #14]
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <lcd_ShowStr+0xc4>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001812:	085b      	lsrs	r3, r3, #1
 8001814:	b2db      	uxtb	r3, r3
 8001816:	1acb      	subs	r3, r1, r3
 8001818:	429a      	cmp	r2, r3
 800181a:	dc3f      	bgt.n	800189c <lcd_ShowStr+0xbc>
 800181c:	89ba      	ldrh	r2, [r7, #12]
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <lcd_ShowStr+0xc4>)
 8001820:	885b      	ldrh	r3, [r3, #2]
 8001822:	4619      	mov	r1, r3
 8001824:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001828:	1acb      	subs	r3, r1, r3
 800182a:	429a      	cmp	r2, r3
 800182c:	dc36      	bgt.n	800189c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b80      	cmp	r3, #128	; 0x80
 8001834:	d902      	bls.n	800183c <lcd_ShowStr+0x5c>
 8001836:	2301      	movs	r3, #1
 8001838:	75fb      	strb	r3, [r7, #23]
 800183a:	e02a      	b.n	8001892 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b0d      	cmp	r3, #13
 8001842:	d10b      	bne.n	800185c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001844:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001848:	b29a      	uxth	r2, r3
 800184a:	89bb      	ldrh	r3, [r7, #12]
 800184c:	4413      	add	r3, r2
 800184e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001850:	8abb      	ldrh	r3, [r7, #20]
 8001852:	81fb      	strh	r3, [r7, #14]
					str++;
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	3301      	adds	r3, #1
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	e017      	b.n	800188c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	88fc      	ldrh	r4, [r7, #6]
 8001862:	89b9      	ldrh	r1, [r7, #12]
 8001864:	89f8      	ldrh	r0, [r7, #14]
 8001866:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800186a:	9302      	str	r3, [sp, #8]
 800186c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	4623      	mov	r3, r4
 8001878:	f7ff fc6e 	bl	8001158 <lcd_ShowChar>
					x+=sizey/2;
 800187c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001880:	085b      	lsrs	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	b29a      	uxth	r2, r3
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	4413      	add	r3, r2
 800188a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	3301      	adds	r3, #1
 8001890:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1b2      	bne.n	8001800 <lcd_ShowStr+0x20>
 800189a:	e000      	b.n	800189e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800189c:	bf00      	nop
			}
		}
	}
}
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}
 80018a4:	200002ac 	.word	0x200002ac

080018a8 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80018ac:	2201      	movs	r2, #1
 80018ae:	2140      	movs	r1, #64	; 0x40
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <led7_init+0x14>)
 80018b2:	f004 f9e1 	bl	8005c78 <HAL_GPIO_WritePin>
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40021800 	.word	0x40021800

080018c0 <led7_Scan>:

void led7_Scan(){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <led7_Scan+0x104>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <led7_Scan+0x104>)
 80018ce:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80018d0:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <led7_Scan+0x108>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a3d      	ldr	r2, [pc, #244]	; (80019cc <led7_Scan+0x10c>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	b21a      	sxth	r2, r3
 80018dc:	4b39      	ldr	r3, [pc, #228]	; (80019c4 <led7_Scan+0x104>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <led7_Scan+0x104>)
 80018ea:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80018ec:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <led7_Scan+0x108>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d847      	bhi.n	8001984 <led7_Scan+0xc4>
 80018f4:	a201      	add	r2, pc, #4	; (adr r2, 80018fc <led7_Scan+0x3c>)
 80018f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fa:	bf00      	nop
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	0800192b 	.word	0x0800192b
 8001904:	08001949 	.word	0x08001949
 8001908:	08001967 	.word	0x08001967
	case 0:
		spi_buffer |= 0x00b0;
 800190c:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <led7_Scan+0x104>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001914:	b29a      	uxth	r2, r3
 8001916:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <led7_Scan+0x104>)
 8001918:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <led7_Scan+0x104>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <led7_Scan+0x104>)
 8001926:	801a      	strh	r2, [r3, #0]
		break;
 8001928:	e02d      	b.n	8001986 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <led7_Scan+0x104>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <led7_Scan+0x104>)
 8001936:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001938:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <led7_Scan+0x104>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	f023 0320 	bic.w	r3, r3, #32
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <led7_Scan+0x104>)
 8001944:	801a      	strh	r2, [r3, #0]
		break;
 8001946:	e01e      	b.n	8001986 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <led7_Scan+0x104>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001950:	b29a      	uxth	r2, r3
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <led7_Scan+0x104>)
 8001954:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <led7_Scan+0x104>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	f023 0310 	bic.w	r3, r3, #16
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <led7_Scan+0x104>)
 8001962:	801a      	strh	r2, [r3, #0]
		break;
 8001964:	e00f      	b.n	8001986 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <led7_Scan+0x104>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <led7_Scan+0x104>)
 8001972:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <led7_Scan+0x104>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <led7_Scan+0x104>)
 8001980:	801a      	strh	r2, [r3, #0]
		break;
 8001982:	e000      	b.n	8001986 <led7_Scan+0xc6>
	default:
		break;
 8001984:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <led7_Scan+0x108>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	425a      	negs	r2, r3
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	f002 0203 	and.w	r2, r2, #3
 8001996:	bf58      	it	pl
 8001998:	4253      	negpl	r3, r2
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <led7_Scan+0x108>)
 800199c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2140      	movs	r1, #64	; 0x40
 80019a2:	480b      	ldr	r0, [pc, #44]	; (80019d0 <led7_Scan+0x110>)
 80019a4:	f004 f968 	bl	8005c78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80019a8:	2301      	movs	r3, #1
 80019aa:	2202      	movs	r2, #2
 80019ac:	4905      	ldr	r1, [pc, #20]	; (80019c4 <led7_Scan+0x104>)
 80019ae:	4809      	ldr	r0, [pc, #36]	; (80019d4 <led7_Scan+0x114>)
 80019b0:	f004 ffe1 	bl	8006976 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80019b4:	2201      	movs	r2, #1
 80019b6:	2140      	movs	r1, #64	; 0x40
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <led7_Scan+0x110>)
 80019ba:	f004 f95d 	bl	8005c78 <HAL_GPIO_WritePin>
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000000e 	.word	0x2000000e
 80019c8:	200002b4 	.word	0x200002b4
 80019cc:	20000000 	.word	0x20000000
 80019d0:	40021800 	.word	0x40021800
 80019d4:	200005b4 	.word	0x200005b4

080019d8 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	4613      	mov	r3, r2
 80019e4:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0e      	blt.n	8001a0a <led7_SetDigit+0x32>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b09      	cmp	r3, #9
 80019f0:	dc0b      	bgt.n	8001a0a <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <led7_SetDigit+0x40>)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	781a      	ldrb	r2, [r3, #0]
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	b2d9      	uxtb	r1, r3
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <led7_SetDigit+0x44>)
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	4413      	add	r3, r2
 8001a06:	460a      	mov	r2, r1
 8001a08:	701a      	strb	r2, [r3, #0]
	}
}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	20000000 	.word	0x20000000

08001a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a24:	f002 fdd0 	bl	80045c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a28:	f000 f87e 	bl	8001b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a2c:	f7ff f82c 	bl	8000a88 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001a30:	f002 fab0 	bl	8003f94 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001a34:	f002 f88e 	bl	8003b54 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001a38:	f7fe ff56 	bl	80008e8 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001a3c:	f7ff f95e 	bl	8000cfc <MX_I2C1_Init>
  MX_TIM13_Init();
 8001a40:	f002 faf4 	bl	800402c <MX_TIM13_Init>
  MX_DMA_Init();
 8001a44:	f7fe ff30 	bl	80008a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a48:	f7fe fd98 	bl	800057c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001a4c:	f002 fa52 	bl	8003ef4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001a50:	f002 fcda 	bl	8004408 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001a54:	f002 fcae 	bl	80043b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001a58:	f000 f8d0 	bl	8001bfc <system_init>
  lcd_Clear(WHITE);
 8001a5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a60:	f7ff fa40 	bl	8000ee4 <lcd_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1)
    {
  	  while(!flag_timer2);
 8001a64:	bf00      	nop
 8001a66:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <main+0xf0>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0fb      	beq.n	8001a66 <main+0x46>
	  flag_timer2 = 0;
 8001a6e:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <main+0xf0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8001a74:	f7fe feac 	bl	80007d0 <button_Scan>

	  if(flag_Sensor == 1) {
 8001a78:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <main+0xf4>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d107      	bne.n	8001a90 <main+0x70>
		  sensor_Read();
 8001a80:	f000 fa56 	bl	8001f30 <sensor_Read>
		  uartSendSensor();
 8001a84:	f002 fc1e 	bl	80042c4 <uartSendSensor>
		  setTimerSendSensor(15000);
 8001a88:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001a8c:	f002 f800 	bl	8003a90 <setTimerSendSensor>
	  }

//	  test_button();
//	  test_7seg();
	  switch (status) {
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <main+0xf8>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d034      	beq.n	8001b02 <main+0xe2>
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	dce3      	bgt.n	8001a64 <main+0x44>
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <main+0x86>
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d010      	beq.n	8001ac6 <main+0xa6>
 8001aa4:	e033      	b.n	8001b0e <main+0xee>
	  case 0:
		  display_UI();
 8001aa6:	f000 f8d1 	bl	8001c4c <display_UI>
		  if(button_count[0] == 1) {
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <main+0xfc>)
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d12a      	bne.n	8001b08 <main+0xe8>
			  status = 2;
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <main+0xf8>)
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	801a      	strh	r2, [r3, #0]
			  lcd_Clear(BLACK);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff fa13 	bl	8000ee4 <lcd_Clear>
			  button_count[0] = 0;
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <main+0xfc>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	801a      	strh	r2, [r3, #0]
		  }
		  break;
 8001ac4:	e020      	b.n	8001b08 <main+0xe8>
	  case 1:

		  wall(difficult%3);
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <main+0x100>)
 8001ac8:	881a      	ldrh	r2, [r3, #0]
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <main+0x104>)
 8001acc:	fba3 1302 	umull	r1, r3, r3, r2
 8001ad0:	0859      	lsrs	r1, r3, #1
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	440b      	add	r3, r1
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	f001 ff03 	bl	80038e8 <wall>
		  move();
 8001ae2:	f001 fe31 	bl	8003748 <move>

		  if(button_count[12] == 1) {
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <main+0xfc>)
 8001ae8:	8b1b      	ldrh	r3, [r3, #24]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d10e      	bne.n	8001b0c <main+0xec>
			  status = 2;
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <main+0xf8>)
 8001af0:	2202      	movs	r2, #2
 8001af2:	801a      	strh	r2, [r3, #0]
			  lcd_Clear(BLACK);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff f9f5 	bl	8000ee4 <lcd_Clear>
			  button_count[12] = 0;
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <main+0xfc>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	831a      	strh	r2, [r3, #24]
		  }
		  break;
 8001b00:	e004      	b.n	8001b0c <main+0xec>
	  case 2:
		  display_UI_Snake_Game();
 8001b02:	f000 f99d 	bl	8001e40 <display_UI_Snake_Game>
		  break;
 8001b06:	e002      	b.n	8001b0e <main+0xee>
		  break;
 8001b08:	bf00      	nop
 8001b0a:	e7ab      	b.n	8001a64 <main+0x44>
		  break;
 8001b0c:	bf00      	nop
  	  while(!flag_timer2);
 8001b0e:	e7a9      	b.n	8001a64 <main+0x44>
 8001b10:	200005a8 	.word	0x200005a8
 8001b14:	200005ae 	.word	0x200005ae
 8001b18:	200002ba 	.word	0x200002ba
 8001b1c:	200001e0 	.word	0x200001e0
 8001b20:	20000010 	.word	0x20000010
 8001b24:	aaaaaaab 	.word	0xaaaaaaab

08001b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b094      	sub	sp, #80	; 0x50
 8001b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2e:	f107 0320 	add.w	r3, r7, #32
 8001b32:	2230      	movs	r2, #48	; 0x30
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f007 fef1 	bl	800991e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <SystemClock_Config+0xcc>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a27      	ldr	r2, [pc, #156]	; (8001bf4 <SystemClock_Config+0xcc>)
 8001b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <SystemClock_Config+0xcc>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <SystemClock_Config+0xd0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a21      	ldr	r2, [pc, #132]	; (8001bf8 <SystemClock_Config+0xd0>)
 8001b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <SystemClock_Config+0xd0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b84:	2302      	movs	r3, #2
 8001b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b8c:	2310      	movs	r3, #16
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b90:	2302      	movs	r3, #2
 8001b92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b94:	2300      	movs	r3, #0
 8001b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b9c:	23a8      	movs	r3, #168	; 0xa8
 8001b9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba8:	f107 0320 	add.w	r3, r7, #32
 8001bac:	4618      	mov	r0, r3
 8001bae:	f004 f9c1 	bl	8005f34 <HAL_RCC_OscConfig>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bb8:	f000 f9a6 	bl	8001f08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001bce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	2105      	movs	r1, #5
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f004 fc22 	bl	8006424 <HAL_RCC_ClockConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001be6:	f000 f98f 	bl	8001f08 <Error_Handler>
  }
}
 8001bea:	bf00      	nop
 8001bec:	3750      	adds	r7, #80	; 0x50
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40007000 	.word	0x40007000

08001bfc <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2120      	movs	r1, #32
 8001c04:	4810      	ldr	r0, [pc, #64]	; (8001c48 <system_init+0x4c>)
 8001c06:	f004 f837 	bl	8005c78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2140      	movs	r1, #64	; 0x40
 8001c0e:	480e      	ldr	r0, [pc, #56]	; (8001c48 <system_init+0x4c>)
 8001c10:	f004 f832 	bl	8005c78 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2110      	movs	r1, #16
 8001c18:	480b      	ldr	r0, [pc, #44]	; (8001c48 <system_init+0x4c>)
 8001c1a:	f004 f82d 	bl	8005c78 <HAL_GPIO_WritePin>
	  timer_init();
 8001c1e:	f001 ff0d 	bl	8003a3c <timer_init>
	  led7_init();
 8001c22:	f7ff fe41 	bl	80018a8 <led7_init>
	  button_init();
 8001c26:	f7fe fdc7 	bl	80007b8 <button_init>
	  lcd_init();
 8001c2a:	f7ff fc79 	bl	8001520 <lcd_init>
	  sensor_init();
 8001c2e:	f000 f971 	bl	8001f14 <sensor_init>
	  uart_init_esp();
 8001c32:	f002 fad5 	bl	80041e0 <uart_init_esp>
	  setTimer2(50);
 8001c36:	2032      	movs	r0, #50	; 0x32
 8001c38:	f001 ff0e 	bl	8003a58 <setTimer2>
	  setTimerSendSensor(15000);
 8001c3c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001c40:	f001 ff26 	bl	8003a90 <setTimerSendSensor>
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000

08001c4c <display_UI>:
	snake_init();

	move();
}

void display_UI() {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af04      	add	r7, sp, #16
	lcd_ShowPicture(80,20, 90, 90, gImage_logo);
 8001c52:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <display_UI+0xd4>)
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	235a      	movs	r3, #90	; 0x5a
 8001c58:	225a      	movs	r2, #90	; 0x5a
 8001c5a:	2114      	movs	r1, #20
 8001c5c:	2050      	movs	r0, #80	; 0x50
 8001c5e:	f7ff fbe5 	bl	800142c <lcd_ShowPicture>
	lcd_ShowStr(50, 115, "LOGIC DESIGN", RED, WHITE, 24, 1);
 8001c62:	2301      	movs	r3, #1
 8001c64:	9302      	str	r3, [sp, #8]
 8001c66:	2318      	movs	r3, #24
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c74:	4a2b      	ldr	r2, [pc, #172]	; (8001d24 <display_UI+0xd8>)
 8001c76:	2173      	movs	r1, #115	; 0x73
 8001c78:	2032      	movs	r0, #50	; 0x32
 8001c7a:	f7ff fdb1 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(42, 150, "GVHD: Vu Trong Thien", BLACK, WHITE, 16, 1);
 8001c7e:	2301      	movs	r3, #1
 8001c80:	9302      	str	r3, [sp, #8]
 8001c82:	2310      	movs	r3, #16
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	4a26      	ldr	r2, [pc, #152]	; (8001d28 <display_UI+0xdc>)
 8001c90:	2196      	movs	r1, #150	; 0x96
 8001c92:	202a      	movs	r0, #42	; 0x2a
 8001c94:	f7ff fda4 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(42, 168, "--------------------", BLACK, WHITE, 16, 1);
 8001c98:	2301      	movs	r3, #1
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	2310      	movs	r3, #16
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	4a20      	ldr	r2, [pc, #128]	; (8001d2c <display_UI+0xe0>)
 8001caa:	21a8      	movs	r1, #168	; 0xa8
 8001cac:	202a      	movs	r0, #42	; 0x2a
 8001cae:	f7ff fd97 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(48, 190, "Nhom 2", BLACK, WHITE, 16, 1);
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	9302      	str	r3, [sp, #8]
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <display_UI+0xe4>)
 8001cc4:	21be      	movs	r1, #190	; 0xbe
 8001cc6:	2030      	movs	r0, #48	; 0x30
 8001cc8:	f7ff fd8a 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(48, 210, "Huynh Gia Qui", BLACK, WHITE, 16, 1);
 8001ccc:	2301      	movs	r3, #1
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	4a15      	ldr	r2, [pc, #84]	; (8001d34 <display_UI+0xe8>)
 8001cde:	21d2      	movs	r1, #210	; 0xd2
 8001ce0:	2030      	movs	r0, #48	; 0x30
 8001ce2:	f7ff fd7d 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(48, 230, "Dao Duy Thanh", BLACK, WHITE, 16, 1);
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	9302      	str	r3, [sp, #8]
 8001cea:	2310      	movs	r3, #16
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	4a10      	ldr	r2, [pc, #64]	; (8001d38 <display_UI+0xec>)
 8001cf8:	21e6      	movs	r1, #230	; 0xe6
 8001cfa:	2030      	movs	r0, #48	; 0x30
 8001cfc:	f7ff fd70 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(48, 250, "Pham Dinh Quoc Thai", BLACK, WHITE, 16, 1);
 8001d00:	2301      	movs	r3, #1
 8001d02:	9302      	str	r3, [sp, #8]
 8001d04:	2310      	movs	r3, #16
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <display_UI+0xf0>)
 8001d12:	21fa      	movs	r1, #250	; 0xfa
 8001d14:	2030      	movs	r0, #48	; 0x30
 8001d16:	f7ff fd63 	bl	80017e0 <lcd_ShowStr>
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	0800db04 	.word	0x0800db04
 8001d24:	0800aa08 	.word	0x0800aa08
 8001d28:	0800aa18 	.word	0x0800aa18
 8001d2c:	0800aa30 	.word	0x0800aa30
 8001d30:	0800aa48 	.word	0x0800aa48
 8001d34:	0800aa50 	.word	0x0800aa50
 8001d38:	0800aa60 	.word	0x0800aa60
 8001d3c:	0800aa70 	.word	0x0800aa70

08001d40 <choose_level>:
void choose_level() {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af04      	add	r7, sp, #16
	if(button_count[3] == 1)
 8001d46:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <choose_level+0xe8>)
 8001d48:	88db      	ldrh	r3, [r3, #6]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d105      	bne.n	8001d5a <choose_level+0x1a>
		difficult++;
 8001d4e:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <choose_level+0xec>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <choose_level+0xec>)
 8001d58:	801a      	strh	r2, [r3, #0]
	if(button_count[7] == 1)
 8001d5a:	4b33      	ldr	r3, [pc, #204]	; (8001e28 <choose_level+0xe8>)
 8001d5c:	89db      	ldrh	r3, [r3, #14]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d105      	bne.n	8001d6e <choose_level+0x2e>
		difficult--;
 8001d62:	4b32      	ldr	r3, [pc, #200]	; (8001e2c <choose_level+0xec>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <choose_level+0xec>)
 8001d6c:	801a      	strh	r2, [r3, #0]

	switch(difficult%3) {
 8001d6e:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <choose_level+0xec>)
 8001d70:	881a      	ldrh	r2, [r3, #0]
 8001d72:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <choose_level+0xf0>)
 8001d74:	fba3 1302 	umull	r1, r3, r3, r2
 8001d78:	0859      	lsrs	r1, r3, #1
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	440b      	add	r3, r1
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d034      	beq.n	8001df2 <choose_level+0xb2>
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	dc49      	bgt.n	8001e20 <choose_level+0xe0>
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <choose_level+0x56>
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d017      	beq.n	8001dc4 <choose_level+0x84>
	case 2:
		lcd_Fill(100, 230, 200, 260, BLACK);
		lcd_ShowStr(100,230,"HARD",WHITE,BLACK,16,0);
		break;
	}
}
 8001d94:	e044      	b.n	8001e20 <choose_level+0xe0>
		lcd_Fill(100, 230, 200, 260, BLACK);
 8001d96:	2300      	movs	r3, #0
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001d9e:	22c8      	movs	r2, #200	; 0xc8
 8001da0:	21e6      	movs	r1, #230	; 0xe6
 8001da2:	2064      	movs	r0, #100	; 0x64
 8001da4:	f7ff f8d0 	bl	8000f48 <lcd_Fill>
		lcd_ShowStr(100,230,"EASY",WHITE,BLACK,16,0);
 8001da8:	2300      	movs	r3, #0
 8001daa:	9302      	str	r3, [sp, #8]
 8001dac:	2310      	movs	r3, #16
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2300      	movs	r3, #0
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <choose_level+0xf4>)
 8001dba:	21e6      	movs	r1, #230	; 0xe6
 8001dbc:	2064      	movs	r0, #100	; 0x64
 8001dbe:	f7ff fd0f 	bl	80017e0 <lcd_ShowStr>
		break;
 8001dc2:	e02d      	b.n	8001e20 <choose_level+0xe0>
		lcd_Fill(100, 230, 200, 260, BLACK);
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001dcc:	22c8      	movs	r2, #200	; 0xc8
 8001dce:	21e6      	movs	r1, #230	; 0xe6
 8001dd0:	2064      	movs	r0, #100	; 0x64
 8001dd2:	f7ff f8b9 	bl	8000f48 <lcd_Fill>
		lcd_ShowStr(100,230,"NORMAL",WHITE,BLACK,16,0);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	9302      	str	r3, [sp, #8]
 8001dda:	2310      	movs	r3, #16
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	2300      	movs	r3, #0
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de6:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <choose_level+0xf8>)
 8001de8:	21e6      	movs	r1, #230	; 0xe6
 8001dea:	2064      	movs	r0, #100	; 0x64
 8001dec:	f7ff fcf8 	bl	80017e0 <lcd_ShowStr>
		break;
 8001df0:	e016      	b.n	8001e20 <choose_level+0xe0>
		lcd_Fill(100, 230, 200, 260, BLACK);
 8001df2:	2300      	movs	r3, #0
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001dfa:	22c8      	movs	r2, #200	; 0xc8
 8001dfc:	21e6      	movs	r1, #230	; 0xe6
 8001dfe:	2064      	movs	r0, #100	; 0x64
 8001e00:	f7ff f8a2 	bl	8000f48 <lcd_Fill>
		lcd_ShowStr(100,230,"HARD",WHITE,BLACK,16,0);
 8001e04:	2300      	movs	r3, #0
 8001e06:	9302      	str	r3, [sp, #8]
 8001e08:	2310      	movs	r3, #16
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e14:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <choose_level+0xfc>)
 8001e16:	21e6      	movs	r1, #230	; 0xe6
 8001e18:	2064      	movs	r0, #100	; 0x64
 8001e1a:	f7ff fce1 	bl	80017e0 <lcd_ShowStr>
		break;
 8001e1e:	bf00      	nop
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200001e0 	.word	0x200001e0
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	aaaaaaab 	.word	0xaaaaaaab
 8001e34:	0800aa84 	.word	0x0800aa84
 8001e38:	0800aa8c 	.word	0x0800aa8c
 8001e3c:	0800aa94 	.word	0x0800aa94

08001e40 <display_UI_Snake_Game>:
void display_UI_Snake_Game() {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af04      	add	r7, sp, #16
	lcd_ShowStr(40,50,"SNAKE ",WHITE,BLACK,32,0);
 8001e46:	2300      	movs	r3, #0
 8001e48:	9302      	str	r3, [sp, #8]
 8001e4a:	2320      	movs	r3, #32
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e56:	4a25      	ldr	r2, [pc, #148]	; (8001eec <display_UI_Snake_Game+0xac>)
 8001e58:	2132      	movs	r1, #50	; 0x32
 8001e5a:	2028      	movs	r0, #40	; 0x28
 8001e5c:	f7ff fcc0 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(120,100,"GAME",WHITE,BLACK,32,0);
 8001e60:	2300      	movs	r3, #0
 8001e62:	9302      	str	r3, [sp, #8]
 8001e64:	2320      	movs	r3, #32
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e70:	4a1f      	ldr	r2, [pc, #124]	; (8001ef0 <display_UI_Snake_Game+0xb0>)
 8001e72:	2164      	movs	r1, #100	; 0x64
 8001e74:	2078      	movs	r0, #120	; 0x78
 8001e76:	f7ff fcb3 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(50,200,"Chon do kho!",WHITE,BLACK,16,0);
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	9302      	str	r3, [sp, #8]
 8001e7e:	2310      	movs	r3, #16
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	2300      	movs	r3, #0
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e8a:	4a1a      	ldr	r2, [pc, #104]	; (8001ef4 <display_UI_Snake_Game+0xb4>)
 8001e8c:	21c8      	movs	r1, #200	; 0xc8
 8001e8e:	2032      	movs	r0, #50	; 0x32
 8001e90:	f7ff fca6 	bl	80017e0 <lcd_ShowStr>
	choose_level();
 8001e94:	f7ff ff54 	bl	8001d40 <choose_level>
	if(button_count[4] == 1) {
 8001e98:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <display_UI_Snake_Game+0xb8>)
 8001e9a:	891b      	ldrh	r3, [r3, #8]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d121      	bne.n	8001ee4 <display_UI_Snake_Game+0xa4>
		status = 1;
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <display_UI_Snake_Game+0xbc>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	801a      	strh	r2, [r3, #0]
		lcd_Clear(WHITE);
 8001ea6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001eaa:	f7ff f81b 	bl	8000ee4 <lcd_Clear>
		lcd_Fill(0, 0, 240, 100, BLACK);
 8001eae:	2300      	movs	r3, #0
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2364      	movs	r3, #100	; 0x64
 8001eb4:	22f0      	movs	r2, #240	; 0xf0
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff f845 	bl	8000f48 <lcd_Fill>
		reset_game();
 8001ebe:	f000 f8fd 	bl	80020bc <reset_game>
		snake_init();
 8001ec2:	f000 f8df 	bl	8002084 <snake_init>
		if(difficult%3 >= 1) {
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <display_UI_Snake_Game+0xc0>)
 8001ec8:	881a      	ldrh	r2, [r3, #0]
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <display_UI_Snake_Game+0xc4>)
 8001ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8001ed0:	0859      	lsrs	r1, r3, #1
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	440b      	add	r3, r1
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <display_UI_Snake_Game+0xa4>
			createWall();
 8001ee0:	f000 f89e 	bl	8002020 <createWall>
		}
	}

//	lcd_ShowStr(0,220,"",WHITE,BLACK,16,0);

}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	0800aa9c 	.word	0x0800aa9c
 8001ef0:	0800aaa4 	.word	0x0800aaa4
 8001ef4:	0800aaac 	.word	0x0800aaac
 8001ef8:	200001e0 	.word	0x200001e0
 8001efc:	200002ba 	.word	0x200002ba
 8001f00:	20000010 	.word	0x20000010
 8001f04:	aaaaaaab 	.word	0xaaaaaaab

08001f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0c:	b672      	cpsid	i
}
 8001f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <Error_Handler+0x8>
	...

08001f14 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8001f18:	2205      	movs	r2, #5
 8001f1a:	4903      	ldr	r1, [pc, #12]	; (8001f28 <sensor_init+0x14>)
 8001f1c:	4803      	ldr	r0, [pc, #12]	; (8001f2c <sensor_init+0x18>)
 8001f1e:	f002 fc2d 	bl	800477c <HAL_ADC_Start_DMA>
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200002bc 	.word	0x200002bc
 8001f2c:	20000138 	.word	0x20000138

08001f30 <sensor_Read>:

void sensor_Read(){
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8001f34:	2205      	movs	r2, #5
 8001f36:	4903      	ldr	r1, [pc, #12]	; (8001f44 <sensor_Read+0x14>)
 8001f38:	4803      	ldr	r0, [pc, #12]	; (8001f48 <sensor_Read+0x18>)
 8001f3a:	f002 fc1f 	bl	800477c <HAL_ADC_Start_DMA>
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200002bc 	.word	0x200002bc
 8001f48:	20000138 	.word	0x20000138

08001f4c <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <sensor_GetLight+0x14>)
 8001f52:	889b      	ldrh	r3, [r3, #4]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	200002bc 	.word	0x200002bc

08001f64 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <sensor_GetPotentiometer+0x14>)
 8001f6a:	88db      	ldrh	r3, [r3, #6]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	200002bc 	.word	0x200002bc

08001f7c <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <sensor_GetTemperature+0x30>)
 8001f82:	891b      	ldrh	r3, [r3, #8]
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f8c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001fb0 <sensor_GetTemperature+0x34>
 8001f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f94:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001fb4 <sensor_GetTemperature+0x38>
 8001f98:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f9c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	200002bc 	.word	0x200002bc
 8001fb0:	43a50000 	.word	0x43a50000
 8001fb4:	457ff000 	.word	0x457ff000

08001fb8 <random_eat>:
uint8_t flag2 = 0;
uint16_t x1 = 160, y1 = 160, x2 = 170, y2 = 170;
enum state firstState = goDown;
enum state prevState = goRight;

uint16_t random_eat(uint16_t minN, uint16_t maxN) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	80fb      	strh	r3, [r7, #6]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	80bb      	strh	r3, [r7, #4]
	return minN + rand()%(maxN + 1 - minN);
 8001fc8:	f007 fb32 	bl	8009630 <rand>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	88bb      	ldrh	r3, [r7, #4]
 8001fd0:	1c59      	adds	r1, r3, #1
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	1acb      	subs	r3, r1, r3
 8001fd6:	fb92 f1f3 	sdiv	r1, r2, r3
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	b29b      	uxth	r3, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <createWall_color>:
        {190, 220, 200, 285},    // Wall 6
        {130, 275, 200, 285},
		{90, 150, 140, 160},
		{115, 150, 125, 200}
    };
void createWall_color(int32_t X1, int32_t Y1, int32_t X2, int32_t Y2) {
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
    // Replace this with the appropriate function in your graphics library
    lcd_Fill(X1, Y1, X2, Y2, MAGENTA);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	b298      	uxth	r0, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	b299      	uxth	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	b29a      	uxth	r2, r3
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8002012:	9400      	str	r4, [sp, #0]
 8002014:	f7fe ff98 	bl	8000f48 <lcd_Fill>
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	bd90      	pop	{r4, r7, pc}

08002020 <createWall>:
void createWall() {
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
	for (int8_t i = 0; i < 9; ++i) {
 8002026:	2300      	movs	r3, #0
 8002028:	71fb      	strb	r3, [r7, #7]
 800202a:	e020      	b.n	800206e <createWall+0x4e>
		createWall_color(obstacles[i].x1, obstacles[i].y1, obstacles[i].x2, obstacles[i].y2);
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	4a13      	ldr	r2, [pc, #76]	; (8002080 <createWall+0x60>)
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	4413      	add	r3, r2
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	4a10      	ldr	r2, [pc, #64]	; (8002080 <createWall+0x60>)
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	4413      	add	r3, r2
 8002042:	3304      	adds	r3, #4
 8002044:	6819      	ldr	r1, [r3, #0]
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <createWall+0x60>)
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	4413      	add	r3, r2
 8002050:	3308      	adds	r3, #8
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	4c09      	ldr	r4, [pc, #36]	; (8002080 <createWall+0x60>)
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	4423      	add	r3, r4
 800205e:	330c      	adds	r3, #12
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f7ff ffc5 	bl	8001ff0 <createWall_color>
	for (int8_t i = 0; i < 9; ++i) {
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	3301      	adds	r3, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	71fb      	strb	r3, [r7, #7]
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	2b08      	cmp	r3, #8
 8002074:	ddda      	ble.n	800202c <createWall+0xc>
	}
}
 8002076:	bf00      	nop
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	bd90      	pop	{r4, r7, pc}
 8002080:	20000024 	.word	0x20000024

08002084 <snake_init>:
void snake_init() {
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b083      	sub	sp, #12
 8002088:	af02      	add	r7, sp, #8
	lcd_Fill(x1, y1, x2, y2, BLUE);
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <snake_init+0x28>)
 800208c:	8818      	ldrh	r0, [r3, #0]
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <snake_init+0x2c>)
 8002090:	8819      	ldrh	r1, [r3, #0]
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <snake_init+0x30>)
 8002094:	881a      	ldrh	r2, [r3, #0]
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <snake_init+0x34>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	241f      	movs	r4, #31
 800209c:	9400      	str	r4, [sp, #0]
 800209e:	f7fe ff53 	bl	8000f48 <lcd_Fill>
}
 80020a2:	bf00      	nop
 80020a4:	3704      	adds	r7, #4
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd90      	pop	{r4, r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000012 	.word	0x20000012
 80020b0:	20000014 	.word	0x20000014
 80020b4:	20000016 	.word	0x20000016
 80020b8:	20000018 	.word	0x20000018

080020bc <reset_game>:

void reset_game() {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af02      	add	r7, sp, #8
	count = 0;
 80020c2:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <reset_game+0x134>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	801a      	strh	r2, [r3, #0]
	max_count = 0;
 80020c8:	4b4a      	ldr	r3, [pc, #296]	; (80021f4 <reset_game+0x138>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	801a      	strh	r2, [r3, #0]
	lcd_Clear(WHITE);
 80020ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020d2:	f7fe ff07 	bl	8000ee4 <lcd_Clear>
	x1 = 160, y1 = 190, x2 = 170, y2 = 200;
 80020d6:	4b48      	ldr	r3, [pc, #288]	; (80021f8 <reset_game+0x13c>)
 80020d8:	22a0      	movs	r2, #160	; 0xa0
 80020da:	801a      	strh	r2, [r3, #0]
 80020dc:	4b47      	ldr	r3, [pc, #284]	; (80021fc <reset_game+0x140>)
 80020de:	22be      	movs	r2, #190	; 0xbe
 80020e0:	801a      	strh	r2, [r3, #0]
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <reset_game+0x144>)
 80020e4:	22aa      	movs	r2, #170	; 0xaa
 80020e6:	801a      	strh	r2, [r3, #0]
 80020e8:	4b46      	ldr	r3, [pc, #280]	; (8002204 <reset_game+0x148>)
 80020ea:	22c8      	movs	r2, #200	; 0xc8
 80020ec:	801a      	strh	r2, [r3, #0]
	CREATE_FOOD = 1;
 80020ee:	4b46      	ldr	r3, [pc, #280]	; (8002208 <reset_game+0x14c>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	801a      	strh	r2, [r3, #0]

	lcd_Fill(0, 0, 240, 100, BLACK);
 80020f4:	2300      	movs	r3, #0
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2364      	movs	r3, #100	; 0x64
 80020fa:	22f0      	movs	r2, #240	; 0xf0
 80020fc:	2100      	movs	r1, #0
 80020fe:	2000      	movs	r0, #0
 8002100:	f7fe ff22 	bl	8000f48 <lcd_Fill>
	currentIndex = 0;
 8002104:	4b41      	ldr	r3, [pc, #260]	; (800220c <reset_game+0x150>)
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 30; i++) {
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	e047      	b.n	80021a0 <reset_game+0xe4>
	        allPath[i].currentState = goDown;
 8002110:	493f      	ldr	r1, [pc, #252]	; (8002210 <reset_game+0x154>)
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
	        allPath[i].isTail = 0;
 8002122:	493b      	ldr	r1, [pc, #236]	; (8002210 <reset_game+0x154>)
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	3301      	adds	r3, #1
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
	        allPath[i].length = 0;
 8002136:	4936      	ldr	r1, [pc, #216]	; (8002210 <reset_game+0x154>)
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	3304      	adds	r3, #4
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
	        allPath[i].x1 = 0;
 800214a:	4931      	ldr	r1, [pc, #196]	; (8002210 <reset_game+0x154>)
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	3308      	adds	r3, #8
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
	        allPath[i].x2 = 0;
 800215e:	492c      	ldr	r1, [pc, #176]	; (8002210 <reset_game+0x154>)
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	330c      	adds	r3, #12
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
	        allPath[i].y1 = 0;
 8002172:	4927      	ldr	r1, [pc, #156]	; (8002210 <reset_game+0x154>)
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	3310      	adds	r3, #16
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
	        allPath[i].y2 = 0;
 8002186:	4922      	ldr	r1, [pc, #136]	; (8002210 <reset_game+0x154>)
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	440b      	add	r3, r1
 8002194:	3314      	adds	r3, #20
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 30; i++) {
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3301      	adds	r3, #1
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b1d      	cmp	r3, #29
 80021a4:	ddb4      	ble.n	8002110 <reset_game+0x54>
	    }
	init_len = 10;
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <reset_game+0x158>)
 80021a8:	220a      	movs	r2, #10
 80021aa:	801a      	strh	r2, [r3, #0]
	snakeTailLen = 10;
 80021ac:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <reset_game+0x15c>)
 80021ae:	220a      	movs	r2, #10
 80021b0:	801a      	strh	r2, [r3, #0]
	flag = 0;
 80021b2:	4b1a      	ldr	r3, [pc, #104]	; (800221c <reset_game+0x160>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
	flag1 = 0;
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <reset_game+0x164>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
	flag2 = 0;
 80021be:	4b19      	ldr	r3, [pc, #100]	; (8002224 <reset_game+0x168>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
	speed = 2;
 80021c4:	4b18      	ldr	r3, [pc, #96]	; (8002228 <reset_game+0x16c>)
 80021c6:	2202      	movs	r2, #2
 80021c8:	801a      	strh	r2, [r3, #0]
	firstState = goDown;
 80021ca:	4b18      	ldr	r3, [pc, #96]	; (800222c <reset_game+0x170>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
	prevState = goRight;
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <reset_game+0x174>)
 80021d2:	2203      	movs	r2, #3
 80021d4:	701a      	strb	r2, [r3, #0]
	snake_init();
 80021d6:	f7ff ff55 	bl	8002084 <snake_init>
	if(level >= 1) {
 80021da:	4b16      	ldr	r3, [pc, #88]	; (8002234 <reset_game+0x178>)
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <reset_game+0x12a>
		createWall();
 80021e2:	f7ff ff1d 	bl	8002020 <createWall>

	}
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200005a4 	.word	0x200005a4
 80021f4:	200005a6 	.word	0x200005a6
 80021f8:	20000012 	.word	0x20000012
 80021fc:	20000014 	.word	0x20000014
 8002200:	20000016 	.word	0x20000016
 8002204:	20000018 	.word	0x20000018
 8002208:	20000022 	.word	0x20000022
 800220c:	200002c8 	.word	0x200002c8
 8002210:	200002cc 	.word	0x200002cc
 8002214:	2000001c 	.word	0x2000001c
 8002218:	2000001e 	.word	0x2000001e
 800221c:	2000059c 	.word	0x2000059c
 8002220:	2000059d 	.word	0x2000059d
 8002224:	2000059e 	.word	0x2000059e
 8002228:	20000020 	.word	0x20000020
 800222c:	2000001a 	.word	0x2000001a
 8002230:	2000001b 	.word	0x2000001b
 8002234:	200002c6 	.word	0x200002c6

08002238 <game_over>:
void game_over(){
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af04      	add	r7, sp, #16

	lcd_ShowStr(50,175,"Diem cua ban la: ",RED,WHITE,16,0);
 800223e:	2300      	movs	r3, #0
 8002240:	9302      	str	r3, [sp, #8]
 8002242:	2310      	movs	r3, #16
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002250:	4a30      	ldr	r2, [pc, #192]	; (8002314 <game_over+0xdc>)
 8002252:	21af      	movs	r1, #175	; 0xaf
 8002254:	2032      	movs	r0, #50	; 0x32
 8002256:	f7ff fac3 	bl	80017e0 <lcd_ShowStr>
	if(count < 10)
 800225a:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <game_over+0xe0>)
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	2b09      	cmp	r3, #9
 8002260:	d80f      	bhi.n	8002282 <game_over+0x4a>
		lcd_ShowIntNum(185,175,count,1,RED,WHITE,16);
 8002262:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <game_over+0xe0>)
 8002264:	881a      	ldrh	r2, [r3, #0]
 8002266:	2310      	movs	r3, #16
 8002268:	9302      	str	r3, [sp, #8]
 800226a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2301      	movs	r3, #1
 8002278:	21af      	movs	r1, #175	; 0xaf
 800227a:	20b9      	movs	r0, #185	; 0xb9
 800227c:	f7ff f858 	bl	8001330 <lcd_ShowIntNum>
 8002280:	e00e      	b.n	80022a0 <game_over+0x68>
	else
		lcd_ShowIntNum(185,175,count,2,RED,WHITE,16);
 8002282:	4b25      	ldr	r3, [pc, #148]	; (8002318 <game_over+0xe0>)
 8002284:	881a      	ldrh	r2, [r3, #0]
 8002286:	2310      	movs	r3, #16
 8002288:	9302      	str	r3, [sp, #8]
 800228a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	2302      	movs	r3, #2
 8002298:	21af      	movs	r1, #175	; 0xaf
 800229a:	20b9      	movs	r0, #185	; 0xb9
 800229c:	f7ff f848 	bl	8001330 <lcd_ShowIntNum>

//	lcd_Fill(x1, y1, x2, y2, WHITE);
//	lcd_Fill(x_food, y_food, x_food+5, y_food+5, WHITE);

	lcd_ShowStr(10,230,"Nhan phim 9 de choi lai!",BLACK,WHITE,16,0);
 80022a0:	2300      	movs	r3, #0
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	2310      	movs	r3, #16
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2300      	movs	r3, #0
 80022b0:	4a1a      	ldr	r2, [pc, #104]	; (800231c <game_over+0xe4>)
 80022b2:	21e6      	movs	r1, #230	; 0xe6
 80022b4:	200a      	movs	r0, #10
 80022b6:	f7ff fa93 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(10,250,"Nhan phim E de thoat game!",BLACK,WHITE,16,0);
 80022ba:	2300      	movs	r3, #0
 80022bc:	9302      	str	r3, [sp, #8]
 80022be:	2310      	movs	r3, #16
 80022c0:	9301      	str	r3, [sp, #4]
 80022c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2300      	movs	r3, #0
 80022ca:	4a15      	ldr	r2, [pc, #84]	; (8002320 <game_over+0xe8>)
 80022cc:	21fa      	movs	r1, #250	; 0xfa
 80022ce:	200a      	movs	r0, #10
 80022d0:	f7ff fa86 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(50,130,"Game Over!!!",BLUE,YELLOW,24,0);
 80022d4:	2300      	movs	r3, #0
 80022d6:	9302      	str	r3, [sp, #8]
 80022d8:	2318      	movs	r3, #24
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	231f      	movs	r3, #31
 80022e4:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <game_over+0xec>)
 80022e6:	2182      	movs	r1, #130	; 0x82
 80022e8:	2032      	movs	r0, #50	; 0x32
 80022ea:	f7ff fa79 	bl	80017e0 <lcd_ShowStr>
	if(count > max_count) {
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <game_over+0xe0>)
 80022f0:	881a      	ldrh	r2, [r3, #0]
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <game_over+0xf0>)
 80022f4:	881b      	ldrh	r3, [r3, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d903      	bls.n	8002302 <game_over+0xca>
		max_count = count;
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <game_over+0xe0>)
 80022fc:	881a      	ldrh	r2, [r3, #0]
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <game_over+0xf0>)
 8002300:	801a      	strh	r2, [r3, #0]
	}

	if(button_count[10] == 1) {
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <game_over+0xf4>)
 8002304:	8a9b      	ldrh	r3, [r3, #20]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <game_over+0xd6>
		reset_game();
 800230a:	f7ff fed7 	bl	80020bc <reset_game>
//		wall();
//		move();
	}

}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	0800aabc 	.word	0x0800aabc
 8002318:	200005a4 	.word	0x200005a4
 800231c:	0800aad0 	.word	0x0800aad0
 8002320:	0800aaec 	.word	0x0800aaec
 8002324:	0800ab08 	.word	0x0800ab08
 8002328:	200005a6 	.word	0x200005a6
 800232c:	200001e0 	.word	0x200001e0

08002330 <checkBite>:

uint8_t checkBite (int16_t X1 , int16_t Y1, int16_t X2, int16_t Y2,int8_t count) {
 8002330:	b490      	push	{r4, r7}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	4604      	mov	r4, r0
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4623      	mov	r3, r4
 8002340:	80fb      	strh	r3, [r7, #6]
 8002342:	4603      	mov	r3, r0
 8002344:	80bb      	strh	r3, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	807b      	strh	r3, [r7, #2]
 800234a:	4613      	mov	r3, r2
 800234c:	803b      	strh	r3, [r7, #0]
	for (int8_t i = count; i < currentIndex; i++) {
 800234e:	7e3b      	ldrb	r3, [r7, #24]
 8002350:	73fb      	strb	r3, [r7, #15]
 8002352:	e0b8      	b.n	80024c6 <checkBite+0x196>
		if (X1 >= allPath[i].x1 && X1 <= allPath[i].x2) {
 8002354:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002358:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800235c:	4860      	ldr	r0, [pc, #384]	; (80024e0 <checkBite+0x1b0>)
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4403      	add	r3, r0
 8002368:	3308      	adds	r3, #8
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4299      	cmp	r1, r3
 800236e:	db4b      	blt.n	8002408 <checkBite+0xd8>
 8002370:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002374:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002378:	4859      	ldr	r0, [pc, #356]	; (80024e0 <checkBite+0x1b0>)
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4403      	add	r3, r0
 8002384:	330c      	adds	r3, #12
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4299      	cmp	r1, r3
 800238a:	dc3d      	bgt.n	8002408 <checkBite+0xd8>
			if (Y1 >= allPath[i].y1 && Y1 <= allPath[i].y2) {
 800238c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002390:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002394:	4852      	ldr	r0, [pc, #328]	; (80024e0 <checkBite+0x1b0>)
 8002396:	4613      	mov	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4403      	add	r3, r0
 80023a0:	3310      	adds	r3, #16
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4299      	cmp	r1, r3
 80023a6:	db0f      	blt.n	80023c8 <checkBite+0x98>
 80023a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80023ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80023b0:	484b      	ldr	r0, [pc, #300]	; (80024e0 <checkBite+0x1b0>)
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4403      	add	r3, r0
 80023bc:	3314      	adds	r3, #20
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4299      	cmp	r1, r3
 80023c2:	dc01      	bgt.n	80023c8 <checkBite+0x98>

				return 1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e086      	b.n	80024d6 <checkBite+0x1a6>
			} else if (y2 >= allPath[i].y1 && y2 <= allPath[i].y2) {
 80023c8:	4b46      	ldr	r3, [pc, #280]	; (80024e4 <checkBite+0x1b4>)
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80023d2:	4943      	ldr	r1, [pc, #268]	; (80024e0 <checkBite+0x1b0>)
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	440b      	add	r3, r1
 80023de:	3310      	adds	r3, #16
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4298      	cmp	r0, r3
 80023e4:	db68      	blt.n	80024b8 <checkBite+0x188>
 80023e6:	4b3f      	ldr	r3, [pc, #252]	; (80024e4 <checkBite+0x1b4>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80023f0:	493b      	ldr	r1, [pc, #236]	; (80024e0 <checkBite+0x1b0>)
 80023f2:	4613      	mov	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	4413      	add	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	440b      	add	r3, r1
 80023fc:	3314      	adds	r3, #20
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4298      	cmp	r0, r3
 8002402:	dc59      	bgt.n	80024b8 <checkBite+0x188>

				return 1;
 8002404:	2301      	movs	r3, #1
 8002406:	e066      	b.n	80024d6 <checkBite+0x1a6>
			}
		} else if (X2 >= allPath[i].x1 && X2 <= allPath[i].x2) {
 8002408:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800240c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002410:	4833      	ldr	r0, [pc, #204]	; (80024e0 <checkBite+0x1b0>)
 8002412:	4613      	mov	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4403      	add	r3, r0
 800241c:	3308      	adds	r3, #8
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4299      	cmp	r1, r3
 8002422:	db4a      	blt.n	80024ba <checkBite+0x18a>
 8002424:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002428:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800242c:	482c      	ldr	r0, [pc, #176]	; (80024e0 <checkBite+0x1b0>)
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4403      	add	r3, r0
 8002438:	330c      	adds	r3, #12
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4299      	cmp	r1, r3
 800243e:	dc3c      	bgt.n	80024ba <checkBite+0x18a>
			if (Y1 >= allPath[i].y1 && Y1 <= allPath[i].y2) {
 8002440:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002444:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002448:	4825      	ldr	r0, [pc, #148]	; (80024e0 <checkBite+0x1b0>)
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	4403      	add	r3, r0
 8002454:	3310      	adds	r3, #16
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4299      	cmp	r1, r3
 800245a:	db0f      	blt.n	800247c <checkBite+0x14c>
 800245c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002460:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002464:	481e      	ldr	r0, [pc, #120]	; (80024e0 <checkBite+0x1b0>)
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4403      	add	r3, r0
 8002470:	3314      	adds	r3, #20
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4299      	cmp	r1, r3
 8002476:	dc01      	bgt.n	800247c <checkBite+0x14c>

				return 1;
 8002478:	2301      	movs	r3, #1
 800247a:	e02c      	b.n	80024d6 <checkBite+0x1a6>
			} else if (Y2 >= allPath[i].y1 && Y2 <= allPath[i].y2) {
 800247c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002480:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002484:	4816      	ldr	r0, [pc, #88]	; (80024e0 <checkBite+0x1b0>)
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4403      	add	r3, r0
 8002490:	3310      	adds	r3, #16
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4299      	cmp	r1, r3
 8002496:	db10      	blt.n	80024ba <checkBite+0x18a>
 8002498:	f9b7 1000 	ldrsh.w	r1, [r7]
 800249c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80024a0:	480f      	ldr	r0, [pc, #60]	; (80024e0 <checkBite+0x1b0>)
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4403      	add	r3, r0
 80024ac:	3314      	adds	r3, #20
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4299      	cmp	r1, r3
 80024b2:	dc02      	bgt.n	80024ba <checkBite+0x18a>

				return 1;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e00e      	b.n	80024d6 <checkBite+0x1a6>
			if (Y1 >= allPath[i].y1 && Y1 <= allPath[i].y2) {
 80024b8:	bf00      	nop
	for (int8_t i = count; i < currentIndex; i++) {
 80024ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	3301      	adds	r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	73fb      	strb	r3, [r7, #15]
 80024c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ca:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <checkBite+0x1b8>)
 80024cc:	7812      	ldrb	r2, [r2, #0]
 80024ce:	4293      	cmp	r3, r2
 80024d0:	f6ff af40 	blt.w	8002354 <checkBite+0x24>
			}
		}
	}
	return 0;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc90      	pop	{r4, r7}
 80024de:	4770      	bx	lr
 80024e0:	200002cc 	.word	0x200002cc
 80024e4:	20000018 	.word	0x20000018
 80024e8:	200002c8 	.word	0x200002c8

080024ec <snakeSelfBite>:
uint8_t snakeSelfBite (int16_t X1 , int16_t Y1, int16_t X2, int16_t Y2,int8_t flag3){
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af02      	add	r7, sp, #8
 80024f2:	4604      	mov	r4, r0
 80024f4:	4608      	mov	r0, r1
 80024f6:	4611      	mov	r1, r2
 80024f8:	461a      	mov	r2, r3
 80024fa:	4623      	mov	r3, r4
 80024fc:	80fb      	strh	r3, [r7, #6]
 80024fe:	4603      	mov	r3, r0
 8002500:	80bb      	strh	r3, [r7, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	807b      	strh	r3, [r7, #2]
 8002506:	4613      	mov	r3, r2
 8002508:	803b      	strh	r3, [r7, #0]
	if (flag3 == 1) {
 800250a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d112      	bne.n	8002538 <snakeSelfBite+0x4c>
		if(checkBite(X1, Y1, X2, Y2, 0) == 1)
 8002512:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002516:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800251a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800251e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002522:	2400      	movs	r4, #0
 8002524:	9400      	str	r4, [sp, #0]
 8002526:	f7ff ff03 	bl	8002330 <checkBite>
 800252a:	4603      	mov	r3, r0
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <snakeSelfBite+0x48>
			return 1;
 8002530:	2301      	movs	r3, #1
 8002532:	e017      	b.n	8002564 <snakeSelfBite+0x78>
		return 0;
 8002534:	2300      	movs	r3, #0
 8002536:	e015      	b.n	8002564 <snakeSelfBite+0x78>
	}
	else {
		if (currentIndex >= 4) {
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <snakeSelfBite+0x80>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b03      	cmp	r3, #3
 800253e:	d910      	bls.n	8002562 <snakeSelfBite+0x76>
			if(checkBite(X1, Y1, X2, Y2, 3) == 1) {
 8002540:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002544:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002548:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800254c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002550:	2403      	movs	r4, #3
 8002552:	9400      	str	r4, [sp, #0]
 8002554:	f7ff feec 	bl	8002330 <checkBite>
 8002558:	4603      	mov	r3, r0
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <snakeSelfBite+0x76>
				return 1;
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <snakeSelfBite+0x78>
			}
		}
		return 0;
 8002562:	2300      	movs	r3, #0
	}

}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	bd90      	pop	{r4, r7, pc}
 800256c:	200002c8 	.word	0x200002c8

08002570 <moveWall>:
void moveWall() {
 8002570:	b590      	push	{r4, r7, lr}
 8002572:	b083      	sub	sp, #12
 8002574:	af02      	add	r7, sp, #8
	if (flag1 == 0) {
 8002576:	4b7b      	ldr	r3, [pc, #492]	; (8002764 <moveWall+0x1f4>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d14a      	bne.n	8002614 <moveWall+0xa4>
		lcd_Fill(obstacles[7].x2-2, obstacles[7].y1, obstacles[7].x2, obstacles[7].y2, WHITE);
 800257e:	4b7a      	ldr	r3, [pc, #488]	; (8002768 <moveWall+0x1f8>)
 8002580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002582:	b29b      	uxth	r3, r3
 8002584:	3b02      	subs	r3, #2
 8002586:	b298      	uxth	r0, r3
 8002588:	4b77      	ldr	r3, [pc, #476]	; (8002768 <moveWall+0x1f8>)
 800258a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258c:	b299      	uxth	r1, r3
 800258e:	4b76      	ldr	r3, [pc, #472]	; (8002768 <moveWall+0x1f8>)
 8002590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002592:	b29a      	uxth	r2, r3
 8002594:	4b74      	ldr	r3, [pc, #464]	; (8002768 <moveWall+0x1f8>)
 8002596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002598:	b29b      	uxth	r3, r3
 800259a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800259e:	9400      	str	r4, [sp, #0]
 80025a0:	f7fe fcd2 	bl	8000f48 <lcd_Fill>
		obstacles[7].x1-=2;
 80025a4:	4b70      	ldr	r3, [pc, #448]	; (8002768 <moveWall+0x1f8>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	3b02      	subs	r3, #2
 80025aa:	4a6f      	ldr	r2, [pc, #444]	; (8002768 <moveWall+0x1f8>)
 80025ac:	6713      	str	r3, [r2, #112]	; 0x70
		obstacles[7].x2-=2;
 80025ae:	4b6e      	ldr	r3, [pc, #440]	; (8002768 <moveWall+0x1f8>)
 80025b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025b2:	3b02      	subs	r3, #2
 80025b4:	4a6c      	ldr	r2, [pc, #432]	; (8002768 <moveWall+0x1f8>)
 80025b6:	6793      	str	r3, [r2, #120]	; 0x78
		lcd_Fill(obstacles[7].x1, obstacles[7].y1, obstacles[7].x1+2, obstacles[7].y2, MAGENTA);
 80025b8:	4b6b      	ldr	r3, [pc, #428]	; (8002768 <moveWall+0x1f8>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	b298      	uxth	r0, r3
 80025be:	4b6a      	ldr	r3, [pc, #424]	; (8002768 <moveWall+0x1f8>)
 80025c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c2:	b299      	uxth	r1, r3
 80025c4:	4b68      	ldr	r3, [pc, #416]	; (8002768 <moveWall+0x1f8>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3302      	adds	r3, #2
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	4b66      	ldr	r3, [pc, #408]	; (8002768 <moveWall+0x1f8>)
 80025d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80025d8:	9400      	str	r4, [sp, #0]
 80025da:	f7fe fcb5 	bl	8000f48 <lcd_Fill>

		snakeSelfBite(obstacles[7].x1,obstacles[7].y1,obstacles[7].x1+10,obstacles[7].y2, 1);
 80025de:	4b62      	ldr	r3, [pc, #392]	; (8002768 <moveWall+0x1f8>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	b218      	sxth	r0, r3
 80025e4:	4b60      	ldr	r3, [pc, #384]	; (8002768 <moveWall+0x1f8>)
 80025e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e8:	b219      	sxth	r1, r3
 80025ea:	4b5f      	ldr	r3, [pc, #380]	; (8002768 <moveWall+0x1f8>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	330a      	adds	r3, #10
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	b21a      	sxth	r2, r3
 80025f6:	4b5c      	ldr	r3, [pc, #368]	; (8002768 <moveWall+0x1f8>)
 80025f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025fa:	b21b      	sxth	r3, r3
 80025fc:	2401      	movs	r4, #1
 80025fe:	9400      	str	r4, [sp, #0]
 8002600:	f7ff ff74 	bl	80024ec <snakeSelfBite>
		if (obstacles[7].x1 <= 10) flag1 = 1;
 8002604:	4b58      	ldr	r3, [pc, #352]	; (8002768 <moveWall+0x1f8>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	2b0a      	cmp	r3, #10
 800260a:	dc4d      	bgt.n	80026a8 <moveWall+0x138>
 800260c:	4b55      	ldr	r3, [pc, #340]	; (8002764 <moveWall+0x1f4>)
 800260e:	2201      	movs	r2, #1
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	e049      	b.n	80026a8 <moveWall+0x138>
	} else {
		lcd_Fill(obstacles[7].x1, obstacles[7].y1, obstacles[7].x1+2, obstacles[7].y2, WHITE);
 8002614:	4b54      	ldr	r3, [pc, #336]	; (8002768 <moveWall+0x1f8>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	b298      	uxth	r0, r3
 800261a:	4b53      	ldr	r3, [pc, #332]	; (8002768 <moveWall+0x1f8>)
 800261c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261e:	b299      	uxth	r1, r3
 8002620:	4b51      	ldr	r3, [pc, #324]	; (8002768 <moveWall+0x1f8>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	b29b      	uxth	r3, r3
 8002626:	3302      	adds	r3, #2
 8002628:	b29a      	uxth	r2, r3
 800262a:	4b4f      	ldr	r3, [pc, #316]	; (8002768 <moveWall+0x1f8>)
 800262c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800262e:	b29b      	uxth	r3, r3
 8002630:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002634:	9400      	str	r4, [sp, #0]
 8002636:	f7fe fc87 	bl	8000f48 <lcd_Fill>
		obstacles[7].x1+=2;
 800263a:	4b4b      	ldr	r3, [pc, #300]	; (8002768 <moveWall+0x1f8>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	3302      	adds	r3, #2
 8002640:	4a49      	ldr	r2, [pc, #292]	; (8002768 <moveWall+0x1f8>)
 8002642:	6713      	str	r3, [r2, #112]	; 0x70
		obstacles[7].x2+=2;
 8002644:	4b48      	ldr	r3, [pc, #288]	; (8002768 <moveWall+0x1f8>)
 8002646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002648:	3302      	adds	r3, #2
 800264a:	4a47      	ldr	r2, [pc, #284]	; (8002768 <moveWall+0x1f8>)
 800264c:	6793      	str	r3, [r2, #120]	; 0x78
		lcd_Fill(obstacles[7].x2-2, obstacles[7].y1, obstacles[7].x2, obstacles[7].y2, MAGENTA);
 800264e:	4b46      	ldr	r3, [pc, #280]	; (8002768 <moveWall+0x1f8>)
 8002650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b02      	subs	r3, #2
 8002656:	b298      	uxth	r0, r3
 8002658:	4b43      	ldr	r3, [pc, #268]	; (8002768 <moveWall+0x1f8>)
 800265a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265c:	b299      	uxth	r1, r3
 800265e:	4b42      	ldr	r3, [pc, #264]	; (8002768 <moveWall+0x1f8>)
 8002660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002662:	b29a      	uxth	r2, r3
 8002664:	4b40      	ldr	r3, [pc, #256]	; (8002768 <moveWall+0x1f8>)
 8002666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002668:	b29b      	uxth	r3, r3
 800266a:	f64f 041f 	movw	r4, #63519	; 0xf81f
 800266e:	9400      	str	r4, [sp, #0]
 8002670:	f7fe fc6a 	bl	8000f48 <lcd_Fill>
		snakeSelfBite(obstacles[7].x2-10,obstacles[7].y1,obstacles[7].x2,obstacles[7].y2, 1);
 8002674:	4b3c      	ldr	r3, [pc, #240]	; (8002768 <moveWall+0x1f8>)
 8002676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b0a      	subs	r3, #10
 800267c:	b29b      	uxth	r3, r3
 800267e:	b218      	sxth	r0, r3
 8002680:	4b39      	ldr	r3, [pc, #228]	; (8002768 <moveWall+0x1f8>)
 8002682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002684:	b219      	sxth	r1, r3
 8002686:	4b38      	ldr	r3, [pc, #224]	; (8002768 <moveWall+0x1f8>)
 8002688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800268a:	b21a      	sxth	r2, r3
 800268c:	4b36      	ldr	r3, [pc, #216]	; (8002768 <moveWall+0x1f8>)
 800268e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002690:	b21b      	sxth	r3, r3
 8002692:	2401      	movs	r4, #1
 8002694:	9400      	str	r4, [sp, #0]
 8002696:	f7ff ff29 	bl	80024ec <snakeSelfBite>
		if (obstacles[7].x2 >= 230) flag1 = 0;
 800269a:	4b33      	ldr	r3, [pc, #204]	; (8002768 <moveWall+0x1f8>)
 800269c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800269e:	2be5      	cmp	r3, #229	; 0xe5
 80026a0:	dd02      	ble.n	80026a8 <moveWall+0x138>
 80026a2:	4b30      	ldr	r3, [pc, #192]	; (8002764 <moveWall+0x1f4>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
	}

	if (flag2 == 0) {
 80026a8:	4b30      	ldr	r3, [pc, #192]	; (800276c <moveWall+0x1fc>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d15f      	bne.n	8002770 <moveWall+0x200>
		lcd_Fill(obstacles[8].x1, obstacles[8].y2-2, obstacles[8].x2, obstacles[8].y2, WHITE);
 80026b0:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <moveWall+0x1f8>)
 80026b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026b6:	b298      	uxth	r0, r3
 80026b8:	4b2b      	ldr	r3, [pc, #172]	; (8002768 <moveWall+0x1f8>)
 80026ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b02      	subs	r3, #2
 80026c2:	b299      	uxth	r1, r3
 80026c4:	4b28      	ldr	r3, [pc, #160]	; (8002768 <moveWall+0x1f8>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	4b26      	ldr	r3, [pc, #152]	; (8002768 <moveWall+0x1f8>)
 80026ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80026d8:	9400      	str	r4, [sp, #0]
 80026da:	f7fe fc35 	bl	8000f48 <lcd_Fill>
		obstacles[8].y1-=2;
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <moveWall+0x1f8>)
 80026e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e4:	3b02      	subs	r3, #2
 80026e6:	4a20      	ldr	r2, [pc, #128]	; (8002768 <moveWall+0x1f8>)
 80026e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		obstacles[8].y2-=2;
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <moveWall+0x1f8>)
 80026ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026f2:	3b02      	subs	r3, #2
 80026f4:	4a1c      	ldr	r2, [pc, #112]	; (8002768 <moveWall+0x1f8>)
 80026f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		lcd_Fill(obstacles[8].x1, obstacles[8].y1, obstacles[8].x2, obstacles[8].y1+2, MAGENTA);
 80026fa:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <moveWall+0x1f8>)
 80026fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002700:	b298      	uxth	r0, r3
 8002702:	4b19      	ldr	r3, [pc, #100]	; (8002768 <moveWall+0x1f8>)
 8002704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002708:	b299      	uxth	r1, r3
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <moveWall+0x1f8>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002710:	b29a      	uxth	r2, r3
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <moveWall+0x1f8>)
 8002714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002718:	b29b      	uxth	r3, r3
 800271a:	3302      	adds	r3, #2
 800271c:	b29b      	uxth	r3, r3
 800271e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8002722:	9400      	str	r4, [sp, #0]
 8002724:	f7fe fc10 	bl	8000f48 <lcd_Fill>
		snakeSelfBite(obstacles[7].x1,obstacles[7].y1,obstacles[7].x2,obstacles[7].y1+10, 1);
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <moveWall+0x1f8>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	b218      	sxth	r0, r3
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <moveWall+0x1f8>)
 8002730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002732:	b219      	sxth	r1, r3
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <moveWall+0x1f8>)
 8002736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002738:	b21a      	sxth	r2, r3
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <moveWall+0x1f8>)
 800273c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273e:	b29b      	uxth	r3, r3
 8002740:	330a      	adds	r3, #10
 8002742:	b29b      	uxth	r3, r3
 8002744:	b21b      	sxth	r3, r3
 8002746:	2401      	movs	r4, #1
 8002748:	9400      	str	r4, [sp, #0]
 800274a:	f7ff fecf 	bl	80024ec <snakeSelfBite>
		if (obstacles[8].y1 <= y_min) flag2 = 1;
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <moveWall+0x1f8>)
 8002750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002754:	2264      	movs	r2, #100	; 0x64
 8002756:	4293      	cmp	r3, r2
 8002758:	dc62      	bgt.n	8002820 <moveWall+0x2b0>
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <moveWall+0x1fc>)
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
		lcd_Fill(obstacles[8].x1, obstacles[8].y2-2, obstacles[8].x2, obstacles[8].y2, MAGENTA);
		snakeSelfBite(obstacles[7].x1,obstacles[7].y2-10,obstacles[7].x2,obstacles[7].y2, 1);
		if (obstacles[8].y2 >= 310) flag2 = 0;
	}

}
 8002760:	e05e      	b.n	8002820 <moveWall+0x2b0>
 8002762:	bf00      	nop
 8002764:	2000059d 	.word	0x2000059d
 8002768:	20000024 	.word	0x20000024
 800276c:	2000059e 	.word	0x2000059e
		lcd_Fill(obstacles[8].x1, obstacles[8].y1, obstacles[8].x2, obstacles[8].y1+2, WHITE);
 8002770:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <moveWall+0x2b8>)
 8002772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002776:	b298      	uxth	r0, r3
 8002778:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <moveWall+0x2b8>)
 800277a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800277e:	b299      	uxth	r1, r3
 8002780:	4b29      	ldr	r3, [pc, #164]	; (8002828 <moveWall+0x2b8>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	b29a      	uxth	r2, r3
 8002788:	4b27      	ldr	r3, [pc, #156]	; (8002828 <moveWall+0x2b8>)
 800278a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800278e:	b29b      	uxth	r3, r3
 8002790:	3302      	adds	r3, #2
 8002792:	b29b      	uxth	r3, r3
 8002794:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002798:	9400      	str	r4, [sp, #0]
 800279a:	f7fe fbd5 	bl	8000f48 <lcd_Fill>
		obstacles[8].y1+=2;
 800279e:	4b22      	ldr	r3, [pc, #136]	; (8002828 <moveWall+0x2b8>)
 80027a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a4:	3302      	adds	r3, #2
 80027a6:	4a20      	ldr	r2, [pc, #128]	; (8002828 <moveWall+0x2b8>)
 80027a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		obstacles[8].y2+=2;
 80027ac:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <moveWall+0x2b8>)
 80027ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027b2:	3302      	adds	r3, #2
 80027b4:	4a1c      	ldr	r2, [pc, #112]	; (8002828 <moveWall+0x2b8>)
 80027b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		lcd_Fill(obstacles[8].x1, obstacles[8].y2-2, obstacles[8].x2, obstacles[8].y2, MAGENTA);
 80027ba:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <moveWall+0x2b8>)
 80027bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c0:	b298      	uxth	r0, r3
 80027c2:	4b19      	ldr	r3, [pc, #100]	; (8002828 <moveWall+0x2b8>)
 80027c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b02      	subs	r3, #2
 80027cc:	b299      	uxth	r1, r3
 80027ce:	4b16      	ldr	r3, [pc, #88]	; (8002828 <moveWall+0x2b8>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <moveWall+0x2b8>)
 80027d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027dc:	b29b      	uxth	r3, r3
 80027de:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80027e2:	9400      	str	r4, [sp, #0]
 80027e4:	f7fe fbb0 	bl	8000f48 <lcd_Fill>
		snakeSelfBite(obstacles[7].x1,obstacles[7].y2-10,obstacles[7].x2,obstacles[7].y2, 1);
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <moveWall+0x2b8>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	b218      	sxth	r0, r3
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <moveWall+0x2b8>)
 80027f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b0a      	subs	r3, #10
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	b219      	sxth	r1, r3
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <moveWall+0x2b8>)
 80027fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027fe:	b21a      	sxth	r2, r3
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <moveWall+0x2b8>)
 8002802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002804:	b21b      	sxth	r3, r3
 8002806:	2401      	movs	r4, #1
 8002808:	9400      	str	r4, [sp, #0]
 800280a:	f7ff fe6f 	bl	80024ec <snakeSelfBite>
		if (obstacles[8].y2 >= 310) flag2 = 0;
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <moveWall+0x2b8>)
 8002810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002814:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8002818:	db02      	blt.n	8002820 <moveWall+0x2b0>
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <moveWall+0x2bc>)
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
}
 8002820:	bf00      	nop
 8002822:	3704      	adds	r7, #4
 8002824:	46bd      	mov	sp, r7
 8002826:	bd90      	pop	{r4, r7, pc}
 8002828:	20000024 	.word	0x20000024
 800282c:	2000059e 	.word	0x2000059e

08002830 <checkCollision>:

uint8_t checkCollision() {
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
	if(level == 0)
 8002836:	4b58      	ldr	r3, [pc, #352]	; (8002998 <checkCollision+0x168>)
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <checkCollision+0x12>
		return 0;
 800283e:	2300      	movs	r3, #0
 8002840:	e0a3      	b.n	800298a <checkCollision+0x15a>
	for (int8_t i = 0; i < 9; ++i) {
 8002842:	2300      	movs	r3, #0
 8002844:	71fb      	strb	r3, [r7, #7]
 8002846:	e09a      	b.n	800297e <checkCollision+0x14e>
		if (x1 >= obstacles[i].x1 && x1 <= obstacles[i].x2) {
 8002848:	4b54      	ldr	r3, [pc, #336]	; (800299c <checkCollision+0x16c>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	4619      	mov	r1, r3
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	4a53      	ldr	r2, [pc, #332]	; (80029a0 <checkCollision+0x170>)
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	4413      	add	r3, r2
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4299      	cmp	r1, r3
 800285c:	db3f      	blt.n	80028de <checkCollision+0xae>
 800285e:	4b4f      	ldr	r3, [pc, #316]	; (800299c <checkCollision+0x16c>)
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	4619      	mov	r1, r3
 8002864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002868:	4a4d      	ldr	r2, [pc, #308]	; (80029a0 <checkCollision+0x170>)
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	4413      	add	r3, r2
 800286e:	3308      	adds	r3, #8
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4299      	cmp	r1, r3
 8002874:	dc33      	bgt.n	80028de <checkCollision+0xae>
			if (y1 >= obstacles[i].y1 && y1 <= obstacles[i].y2) {
 8002876:	4b4b      	ldr	r3, [pc, #300]	; (80029a4 <checkCollision+0x174>)
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	4619      	mov	r1, r3
 800287c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002880:	4a47      	ldr	r2, [pc, #284]	; (80029a0 <checkCollision+0x170>)
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	4413      	add	r3, r2
 8002886:	3304      	adds	r3, #4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4299      	cmp	r1, r3
 800288c:	db0d      	blt.n	80028aa <checkCollision+0x7a>
 800288e:	4b45      	ldr	r3, [pc, #276]	; (80029a4 <checkCollision+0x174>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	4619      	mov	r1, r3
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	4a41      	ldr	r2, [pc, #260]	; (80029a0 <checkCollision+0x170>)
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	4413      	add	r3, r2
 800289e:	330c      	adds	r3, #12
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4299      	cmp	r1, r3
 80028a4:	dc01      	bgt.n	80028aa <checkCollision+0x7a>

				return 1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e06f      	b.n	800298a <checkCollision+0x15a>
			} else if (y2 >= obstacles[i].y1 && y2 <= obstacles[i].y2) {
 80028aa:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <checkCollision+0x178>)
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	4619      	mov	r1, r3
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	4a3a      	ldr	r2, [pc, #232]	; (80029a0 <checkCollision+0x170>)
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	4413      	add	r3, r2
 80028ba:	3304      	adds	r3, #4
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4299      	cmp	r1, r3
 80028c0:	db58      	blt.n	8002974 <checkCollision+0x144>
 80028c2:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <checkCollision+0x178>)
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	4619      	mov	r1, r3
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	4a34      	ldr	r2, [pc, #208]	; (80029a0 <checkCollision+0x170>)
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	4413      	add	r3, r2
 80028d2:	330c      	adds	r3, #12
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4299      	cmp	r1, r3
 80028d8:	dc4c      	bgt.n	8002974 <checkCollision+0x144>

				return 1;
 80028da:	2301      	movs	r3, #1
 80028dc:	e055      	b.n	800298a <checkCollision+0x15a>
			}
		} else if (x2 >= obstacles[i].x1 && x2 <= obstacles[i].x2) {
 80028de:	4b33      	ldr	r3, [pc, #204]	; (80029ac <checkCollision+0x17c>)
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	4619      	mov	r1, r3
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	4a2d      	ldr	r2, [pc, #180]	; (80029a0 <checkCollision+0x170>)
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	4413      	add	r3, r2
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4299      	cmp	r1, r3
 80028f2:	db40      	blt.n	8002976 <checkCollision+0x146>
 80028f4:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <checkCollision+0x17c>)
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	4619      	mov	r1, r3
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	4a28      	ldr	r2, [pc, #160]	; (80029a0 <checkCollision+0x170>)
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	4413      	add	r3, r2
 8002904:	3308      	adds	r3, #8
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4299      	cmp	r1, r3
 800290a:	dc34      	bgt.n	8002976 <checkCollision+0x146>
			if (y1 >= obstacles[i].y1 && y1 <= obstacles[i].y2) {
 800290c:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <checkCollision+0x174>)
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	4619      	mov	r1, r3
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	4a22      	ldr	r2, [pc, #136]	; (80029a0 <checkCollision+0x170>)
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	4413      	add	r3, r2
 800291c:	3304      	adds	r3, #4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4299      	cmp	r1, r3
 8002922:	db0d      	blt.n	8002940 <checkCollision+0x110>
 8002924:	4b1f      	ldr	r3, [pc, #124]	; (80029a4 <checkCollision+0x174>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	4619      	mov	r1, r3
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <checkCollision+0x170>)
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	4413      	add	r3, r2
 8002934:	330c      	adds	r3, #12
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4299      	cmp	r1, r3
 800293a:	dc01      	bgt.n	8002940 <checkCollision+0x110>

				return 1;
 800293c:	2301      	movs	r3, #1
 800293e:	e024      	b.n	800298a <checkCollision+0x15a>
			} else if (y2 >= obstacles[i].y1 && y2 <= obstacles[i].y2) {
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <checkCollision+0x178>)
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	4a15      	ldr	r2, [pc, #84]	; (80029a0 <checkCollision+0x170>)
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	4413      	add	r3, r2
 8002950:	3304      	adds	r3, #4
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4299      	cmp	r1, r3
 8002956:	db0e      	blt.n	8002976 <checkCollision+0x146>
 8002958:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <checkCollision+0x178>)
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	4619      	mov	r1, r3
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <checkCollision+0x170>)
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	4413      	add	r3, r2
 8002968:	330c      	adds	r3, #12
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4299      	cmp	r1, r3
 800296e:	dc02      	bgt.n	8002976 <checkCollision+0x146>

				return 1;
 8002970:	2301      	movs	r3, #1
 8002972:	e00a      	b.n	800298a <checkCollision+0x15a>
			if (y1 >= obstacles[i].y1 && y1 <= obstacles[i].y2) {
 8002974:	bf00      	nop
	for (int8_t i = 0; i < 9; ++i) {
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	3301      	adds	r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	71fb      	strb	r3, [r7, #7]
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	2b08      	cmp	r3, #8
 8002984:	f77f af60 	ble.w	8002848 <checkCollision+0x18>
			}
		}
	}
	return 0;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	200002c6 	.word	0x200002c6
 800299c:	20000012 	.word	0x20000012
 80029a0:	20000024 	.word	0x20000024
 80029a4:	20000014 	.word	0x20000014
 80029a8:	20000018 	.word	0x20000018
 80029ac:	20000016 	.word	0x20000016

080029b0 <delete_path>:
void delete_path() {
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af02      	add	r7, sp, #8
    // Assuming lcd_Fill is a function to clear the specified area on the LCD with white color
    	if (allPath[0].isTail == 0) {
 80029b6:	4b81      	ldr	r3, [pc, #516]	; (8002bbc <delete_path+0x20c>)
 80029b8:	785b      	ldrb	r3, [r3, #1]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 808d 	bne.w	8002ada <delete_path+0x12a>
    		//if (allPath[0].currentState == goRight) lcd_Fill(x1,0, x2, y2, RED);
    		if (allPath[0].length >= snakeTailLen) {
 80029c0:	4b7e      	ldr	r3, [pc, #504]	; (8002bbc <delete_path+0x20c>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4a7e      	ldr	r2, [pc, #504]	; (8002bc0 <delete_path+0x210>)
 80029c6:	8812      	ldrh	r2, [r2, #0]
 80029c8:	4293      	cmp	r3, r2
 80029ca:	f2c0 815a 	blt.w	8002c82 <delete_path+0x2d2>
    			if (allPath[0].currentState == goUp) {
 80029ce:	4b7b      	ldr	r3, [pc, #492]	; (8002bbc <delete_path+0x20c>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d11c      	bne.n	8002a10 <delete_path+0x60>
					lcd_Fill(allPath[0].x1, allPath[0].y2-speed, allPath[0].x2, allPath[0].y2, WHITE);
 80029d6:	4b79      	ldr	r3, [pc, #484]	; (8002bbc <delete_path+0x20c>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	b298      	uxth	r0, r3
 80029dc:	4b77      	ldr	r3, [pc, #476]	; (8002bbc <delete_path+0x20c>)
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	4b78      	ldr	r3, [pc, #480]	; (8002bc4 <delete_path+0x214>)
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	b299      	uxth	r1, r3
 80029ea:	4b74      	ldr	r3, [pc, #464]	; (8002bbc <delete_path+0x20c>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	4b72      	ldr	r3, [pc, #456]	; (8002bbc <delete_path+0x20c>)
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80029fa:	9400      	str	r4, [sp, #0]
 80029fc:	f7fe faa4 	bl	8000f48 <lcd_Fill>
					allPath[0].y2 -= speed;
 8002a00:	4b6e      	ldr	r3, [pc, #440]	; (8002bbc <delete_path+0x20c>)
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	4a6f      	ldr	r2, [pc, #444]	; (8002bc4 <delete_path+0x214>)
 8002a06:	8812      	ldrh	r2, [r2, #0]
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	4a6c      	ldr	r2, [pc, #432]	; (8002bbc <delete_path+0x20c>)
 8002a0c:	6153      	str	r3, [r2, #20]



    	}

}
 8002a0e:	e138      	b.n	8002c82 <delete_path+0x2d2>
				} else if (allPath[0].currentState == goDown) {
 8002a10:	4b6a      	ldr	r3, [pc, #424]	; (8002bbc <delete_path+0x20c>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d11d      	bne.n	8002a54 <delete_path+0xa4>
					lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x2, allPath[0].y1 + speed, WHITE);
 8002a18:	4b68      	ldr	r3, [pc, #416]	; (8002bbc <delete_path+0x20c>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	b298      	uxth	r0, r3
 8002a1e:	4b67      	ldr	r3, [pc, #412]	; (8002bbc <delete_path+0x20c>)
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	b299      	uxth	r1, r3
 8002a24:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <delete_path+0x20c>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	b29c      	uxth	r4, r3
 8002a2a:	4b64      	ldr	r3, [pc, #400]	; (8002bbc <delete_path+0x20c>)
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	4b64      	ldr	r3, [pc, #400]	; (8002bc4 <delete_path+0x214>)
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	4413      	add	r3, r2
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a3c:	9200      	str	r2, [sp, #0]
 8002a3e:	4622      	mov	r2, r4
 8002a40:	f7fe fa82 	bl	8000f48 <lcd_Fill>
					allPath[0].y1 += speed;
 8002a44:	4b5d      	ldr	r3, [pc, #372]	; (8002bbc <delete_path+0x20c>)
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	4a5e      	ldr	r2, [pc, #376]	; (8002bc4 <delete_path+0x214>)
 8002a4a:	8812      	ldrh	r2, [r2, #0]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	4a5b      	ldr	r2, [pc, #364]	; (8002bbc <delete_path+0x20c>)
 8002a50:	6113      	str	r3, [r2, #16]
}
 8002a52:	e116      	b.n	8002c82 <delete_path+0x2d2>
				} else if (allPath[0].currentState == goLeft) {
 8002a54:	4b59      	ldr	r3, [pc, #356]	; (8002bbc <delete_path+0x20c>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d11c      	bne.n	8002a96 <delete_path+0xe6>
					lcd_Fill(allPath[0].x2-speed, allPath[0].y1, allPath[0].x2, allPath[0].y2, WHITE);
 8002a5c:	4b57      	ldr	r3, [pc, #348]	; (8002bbc <delete_path+0x20c>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	4b58      	ldr	r3, [pc, #352]	; (8002bc4 <delete_path+0x214>)
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	b298      	uxth	r0, r3
 8002a6a:	4b54      	ldr	r3, [pc, #336]	; (8002bbc <delete_path+0x20c>)
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	b299      	uxth	r1, r3
 8002a70:	4b52      	ldr	r3, [pc, #328]	; (8002bbc <delete_path+0x20c>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	4b51      	ldr	r3, [pc, #324]	; (8002bbc <delete_path+0x20c>)
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002a80:	9400      	str	r4, [sp, #0]
 8002a82:	f7fe fa61 	bl	8000f48 <lcd_Fill>
					allPath[0].x2 -= speed;
 8002a86:	4b4d      	ldr	r3, [pc, #308]	; (8002bbc <delete_path+0x20c>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	4a4e      	ldr	r2, [pc, #312]	; (8002bc4 <delete_path+0x214>)
 8002a8c:	8812      	ldrh	r2, [r2, #0]
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	4a4a      	ldr	r2, [pc, #296]	; (8002bbc <delete_path+0x20c>)
 8002a92:	60d3      	str	r3, [r2, #12]
}
 8002a94:	e0f5      	b.n	8002c82 <delete_path+0x2d2>
				} else if (allPath[0].currentState == goRight) {
 8002a96:	4b49      	ldr	r3, [pc, #292]	; (8002bbc <delete_path+0x20c>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	f040 80f1 	bne.w	8002c82 <delete_path+0x2d2>
					lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x1+speed, allPath[0].y2, WHITE);
 8002aa0:	4b46      	ldr	r3, [pc, #280]	; (8002bbc <delete_path+0x20c>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	b298      	uxth	r0, r3
 8002aa6:	4b45      	ldr	r3, [pc, #276]	; (8002bbc <delete_path+0x20c>)
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	b299      	uxth	r1, r3
 8002aac:	4b43      	ldr	r3, [pc, #268]	; (8002bbc <delete_path+0x20c>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	4b44      	ldr	r3, [pc, #272]	; (8002bc4 <delete_path+0x214>)
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <delete_path+0x20c>)
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002ac4:	9400      	str	r4, [sp, #0]
 8002ac6:	f7fe fa3f 	bl	8000f48 <lcd_Fill>
					allPath[0].x1 += speed;
 8002aca:	4b3c      	ldr	r3, [pc, #240]	; (8002bbc <delete_path+0x20c>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	4a3d      	ldr	r2, [pc, #244]	; (8002bc4 <delete_path+0x214>)
 8002ad0:	8812      	ldrh	r2, [r2, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	4a39      	ldr	r2, [pc, #228]	; (8002bbc <delete_path+0x20c>)
 8002ad6:	6093      	str	r3, [r2, #8]
}
 8002ad8:	e0d3      	b.n	8002c82 <delete_path+0x2d2>
    	} else if (allPath[0].isTail == 1) {
 8002ada:	4b38      	ldr	r3, [pc, #224]	; (8002bbc <delete_path+0x20c>)
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	f040 80cf 	bne.w	8002c82 <delete_path+0x2d2>
    		allPath[0].length -= speed;
 8002ae4:	4b35      	ldr	r3, [pc, #212]	; (8002bbc <delete_path+0x20c>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	4a36      	ldr	r2, [pc, #216]	; (8002bc4 <delete_path+0x214>)
 8002aea:	8812      	ldrh	r2, [r2, #0]
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	4a33      	ldr	r2, [pc, #204]	; (8002bbc <delete_path+0x20c>)
 8002af0:	6053      	str	r3, [r2, #4]
    		if (allPath[0].currentState == goUp) {
 8002af2:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <delete_path+0x20c>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d11c      	bne.n	8002b34 <delete_path+0x184>
				lcd_Fill(allPath[0].x1, allPath[0].y2-speed, allPath[0].x2, allPath[0].y2, WHITE);
 8002afa:	4b30      	ldr	r3, [pc, #192]	; (8002bbc <delete_path+0x20c>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	b298      	uxth	r0, r3
 8002b00:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <delete_path+0x20c>)
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <delete_path+0x214>)
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	b299      	uxth	r1, r3
 8002b0e:	4b2b      	ldr	r3, [pc, #172]	; (8002bbc <delete_path+0x20c>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <delete_path+0x20c>)
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002b1e:	9400      	str	r4, [sp, #0]
 8002b20:	f7fe fa12 	bl	8000f48 <lcd_Fill>
				allPath[0].y2 -= speed;
 8002b24:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <delete_path+0x20c>)
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	4a26      	ldr	r2, [pc, #152]	; (8002bc4 <delete_path+0x214>)
 8002b2a:	8812      	ldrh	r2, [r2, #0]
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	4a23      	ldr	r2, [pc, #140]	; (8002bbc <delete_path+0x20c>)
 8002b30:	6153      	str	r3, [r2, #20]
 8002b32:	e069      	b.n	8002c08 <delete_path+0x258>
			} else if (allPath[0].currentState == goDown) {
 8002b34:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <delete_path+0x20c>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d11d      	bne.n	8002b78 <delete_path+0x1c8>
				lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x2, allPath[0].y1 + speed, WHITE);
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <delete_path+0x20c>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	b298      	uxth	r0, r3
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <delete_path+0x20c>)
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	b299      	uxth	r1, r3
 8002b48:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <delete_path+0x20c>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	b29c      	uxth	r4, r3
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <delete_path+0x20c>)
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <delete_path+0x214>)
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	4413      	add	r3, r2
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b60:	9200      	str	r2, [sp, #0]
 8002b62:	4622      	mov	r2, r4
 8002b64:	f7fe f9f0 	bl	8000f48 <lcd_Fill>
				allPath[0].y1 += speed;
 8002b68:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <delete_path+0x20c>)
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	4a15      	ldr	r2, [pc, #84]	; (8002bc4 <delete_path+0x214>)
 8002b6e:	8812      	ldrh	r2, [r2, #0]
 8002b70:	4413      	add	r3, r2
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <delete_path+0x20c>)
 8002b74:	6113      	str	r3, [r2, #16]
 8002b76:	e047      	b.n	8002c08 <delete_path+0x258>
			} else if (allPath[0].currentState == goLeft) {
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <delete_path+0x20c>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d123      	bne.n	8002bc8 <delete_path+0x218>
				lcd_Fill(allPath[0].x2-speed, allPath[0].y1, allPath[0].x2, allPath[0].y2, WHITE);
 8002b80:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <delete_path+0x20c>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <delete_path+0x214>)
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	b298      	uxth	r0, r3
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <delete_path+0x20c>)
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	b299      	uxth	r1, r3
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <delete_path+0x20c>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <delete_path+0x20c>)
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002ba4:	9400      	str	r4, [sp, #0]
 8002ba6:	f7fe f9cf 	bl	8000f48 <lcd_Fill>
				allPath[0].x2 -= speed;
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <delete_path+0x20c>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <delete_path+0x214>)
 8002bb0:	8812      	ldrh	r2, [r2, #0]
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	4a01      	ldr	r2, [pc, #4]	; (8002bbc <delete_path+0x20c>)
 8002bb6:	60d3      	str	r3, [r2, #12]
 8002bb8:	e026      	b.n	8002c08 <delete_path+0x258>
 8002bba:	bf00      	nop
 8002bbc:	200002cc 	.word	0x200002cc
 8002bc0:	2000001e 	.word	0x2000001e
 8002bc4:	20000020 	.word	0x20000020
			} else if (allPath[0].currentState == goRight) {
 8002bc8:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <delete_path+0x2dc>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d11b      	bne.n	8002c08 <delete_path+0x258>
				lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x1+speed, allPath[0].y2, WHITE);
 8002bd0:	4b2e      	ldr	r3, [pc, #184]	; (8002c8c <delete_path+0x2dc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	b298      	uxth	r0, r3
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <delete_path+0x2dc>)
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	b299      	uxth	r1, r3
 8002bdc:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <delete_path+0x2dc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <delete_path+0x2e0>)
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	4413      	add	r3, r2
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <delete_path+0x2dc>)
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002bf4:	9400      	str	r4, [sp, #0]
 8002bf6:	f7fe f9a7 	bl	8000f48 <lcd_Fill>
				allPath[0].x1 += speed;
 8002bfa:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <delete_path+0x2dc>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	4a24      	ldr	r2, [pc, #144]	; (8002c90 <delete_path+0x2e0>)
 8002c00:	8812      	ldrh	r2, [r2, #0]
 8002c02:	4413      	add	r3, r2
 8002c04:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <delete_path+0x2dc>)
 8002c06:	6093      	str	r3, [r2, #8]
    		if (flag == 0) {
 8002c08:	4b22      	ldr	r3, [pc, #136]	; (8002c94 <delete_path+0x2e4>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d138      	bne.n	8002c82 <delete_path+0x2d2>
				if (allPath[0].length == 0 || allPath[0].length < 0) {
 8002c10:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <delete_path+0x2dc>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <delete_path+0x270>
 8002c18:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <delete_path+0x2dc>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	da30      	bge.n	8002c82 <delete_path+0x2d2>
						flag = 1;
 8002c20:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <delete_path+0x2e4>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
						delete_path();
 8002c26:	f7ff fec3 	bl	80029b0 <delete_path>
						flag = 0;
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <delete_path+0x2e4>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
					for (uint8_t i = 0; i < currentIndex - 1; i++) {
 8002c30:	2300      	movs	r3, #0
 8002c32:	71fb      	strb	r3, [r7, #7]
 8002c34:	e019      	b.n	8002c6a <delete_path+0x2ba>
						allPath[i] = allPath[i + 1];
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	79f9      	ldrb	r1, [r7, #7]
 8002c3c:	4813      	ldr	r0, [pc, #76]	; (8002c8c <delete_path+0x2dc>)
 8002c3e:	460b      	mov	r3, r1
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	440b      	add	r3, r1
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4418      	add	r0, r3
 8002c48:	4910      	ldr	r1, [pc, #64]	; (8002c8c <delete_path+0x2dc>)
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	4604      	mov	r4, r0
 8002c56:	461d      	mov	r5, r3
 8002c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c60:	e884 0003 	stmia.w	r4, {r0, r1}
					for (uint8_t i = 0; i < currentIndex - 1; i++) {
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	3301      	adds	r3, #1
 8002c68:	71fb      	strb	r3, [r7, #7]
 8002c6a:	79fa      	ldrb	r2, [r7, #7]
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <delete_path+0x2e8>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	429a      	cmp	r2, r3
 8002c74:	dbdf      	blt.n	8002c36 <delete_path+0x286>
					currentIndex--;
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <delete_path+0x2e8>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <delete_path+0x2e8>)
 8002c80:	701a      	strb	r2, [r3, #0]
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bdb0      	pop	{r4, r5, r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200002cc 	.word	0x200002cc
 8002c90:	20000020 	.word	0x20000020
 8002c94:	2000059c 	.word	0x2000059c
 8002c98:	200002c8 	.word	0x200002c8

08002c9c <right>:
void right() {
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af02      	add	r7, sp, #8

	if (prevState == goRight) {
 8002ca2:	4b75      	ldr	r3, [pc, #468]	; (8002e78 <right+0x1dc>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d137      	bne.n	8002d1a <right+0x7e>
				if (allPath[currentIndex-1].length <= snakeTailLen) {
 8002caa:	4b74      	ldr	r3, [pc, #464]	; (8002e7c <right+0x1e0>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	1e5a      	subs	r2, r3, #1
 8002cb0:	4973      	ldr	r1, [pc, #460]	; (8002e80 <right+0x1e4>)
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a70      	ldr	r2, [pc, #448]	; (8002e84 <right+0x1e8>)
 8002cc2:	8812      	ldrh	r2, [r2, #0]
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	dc19      	bgt.n	8002cfc <right+0x60>
					allPath[currentIndex-1].length +=speed;
 8002cc8:	4b6c      	ldr	r3, [pc, #432]	; (8002e7c <right+0x1e0>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	1e5a      	subs	r2, r3, #1
 8002cce:	496c      	ldr	r1, [pc, #432]	; (8002e80 <right+0x1e4>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	3304      	adds	r3, #4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a6a      	ldr	r2, [pc, #424]	; (8002e88 <right+0x1ec>)
 8002ce0:	8812      	ldrh	r2, [r2, #0]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4a65      	ldr	r2, [pc, #404]	; (8002e7c <right+0x1e0>)
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	3a01      	subs	r2, #1
 8002cea:	4419      	add	r1, r3
 8002cec:	4864      	ldr	r0, [pc, #400]	; (8002e80 <right+0x1e4>)
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4403      	add	r3, r0
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	6019      	str	r1, [r3, #0]
				}
				allPath[currentIndex-1].x2 = x2;
 8002cfc:	4b63      	ldr	r3, [pc, #396]	; (8002e8c <right+0x1f0>)
 8002cfe:	8819      	ldrh	r1, [r3, #0]
 8002d00:	4b5e      	ldr	r3, [pc, #376]	; (8002e7c <right+0x1e0>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	1e5a      	subs	r2, r3, #1
 8002d06:	4608      	mov	r0, r1
 8002d08:	495d      	ldr	r1, [pc, #372]	; (8002e80 <right+0x1e4>)
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	330c      	adds	r3, #12
 8002d16:	6018      	str	r0, [r3, #0]
 8002d18:	e089      	b.n	8002e2e <right+0x192>
			} else {
				if (currentIndex == 0) allPath[0].isTail = 0;
 8002d1a:	4b58      	ldr	r3, [pc, #352]	; (8002e7c <right+0x1e0>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <right+0x8e>
 8002d22:	4b57      	ldr	r3, [pc, #348]	; (8002e80 <right+0x1e4>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	705a      	strb	r2, [r3, #1]
 8002d28:	e00b      	b.n	8002d42 <right+0xa6>
				else allPath[currentIndex-1].isTail = 1;
 8002d2a:	4b54      	ldr	r3, [pc, #336]	; (8002e7c <right+0x1e0>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	1e5a      	subs	r2, r3, #1
 8002d30:	4953      	ldr	r1, [pc, #332]	; (8002e80 <right+0x1e4>)
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
				allPath[currentIndex].isTail = 0;
 8002d42:	4b4e      	ldr	r3, [pc, #312]	; (8002e7c <right+0x1e0>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	4619      	mov	r1, r3
 8002d48:	4a4d      	ldr	r2, [pc, #308]	; (8002e80 <right+0x1e4>)
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	440b      	add	r3, r1
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	3301      	adds	r3, #1
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]
				if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 8002d5a:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <right+0x1e8>)
 8002d5c:	881a      	ldrh	r2, [r3, #0]
 8002d5e:	4b4c      	ldr	r3, [pc, #304]	; (8002e90 <right+0x1f4>)
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d10e      	bne.n	8002d84 <right+0xe8>
 8002d66:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <right+0x1e8>)
 8002d68:	881a      	ldrh	r2, [r3, #0]
 8002d6a:	4b44      	ldr	r3, [pc, #272]	; (8002e7c <right+0x1e0>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4610      	mov	r0, r2
 8002d72:	4a43      	ldr	r2, [pc, #268]	; (8002e80 <right+0x1e4>)
 8002d74:	460b      	mov	r3, r1
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	440b      	add	r3, r1
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3304      	adds	r3, #4
 8002d80:	6018      	str	r0, [r3, #0]
 8002d82:	e00b      	b.n	8002d9c <right+0x100>
				else allPath[currentIndex].length = 0;
 8002d84:	4b3d      	ldr	r3, [pc, #244]	; (8002e7c <right+0x1e0>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4a3d      	ldr	r2, [pc, #244]	; (8002e80 <right+0x1e4>)
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	440b      	add	r3, r1
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	3304      	adds	r3, #4
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
				allPath[currentIndex].currentState = goRight;
 8002d9c:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <right+0x1e0>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	4619      	mov	r1, r3
 8002da2:	4a37      	ldr	r2, [pc, #220]	; (8002e80 <right+0x1e4>)
 8002da4:	460b      	mov	r3, r1
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	440b      	add	r3, r1
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	2203      	movs	r2, #3
 8002db0:	701a      	strb	r2, [r3, #0]
				allPath[currentIndex].x1 = x1;
 8002db2:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <right+0x1f8>)
 8002db4:	881a      	ldrh	r2, [r3, #0]
 8002db6:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <right+0x1e0>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4a30      	ldr	r2, [pc, #192]	; (8002e80 <right+0x1e4>)
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	440b      	add	r3, r1
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4413      	add	r3, r2
 8002dca:	3308      	adds	r3, #8
 8002dcc:	6018      	str	r0, [r3, #0]
				allPath[currentIndex].x2 = x2;
 8002dce:	4b2f      	ldr	r3, [pc, #188]	; (8002e8c <right+0x1f0>)
 8002dd0:	881a      	ldrh	r2, [r3, #0]
 8002dd2:	4b2a      	ldr	r3, [pc, #168]	; (8002e7c <right+0x1e0>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4a29      	ldr	r2, [pc, #164]	; (8002e80 <right+0x1e4>)
 8002ddc:	460b      	mov	r3, r1
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	440b      	add	r3, r1
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	330c      	adds	r3, #12
 8002de8:	6018      	str	r0, [r3, #0]
				allPath[currentIndex].y1 = y1;
 8002dea:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <right+0x1fc>)
 8002dec:	881a      	ldrh	r2, [r3, #0]
 8002dee:	4b23      	ldr	r3, [pc, #140]	; (8002e7c <right+0x1e0>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	4619      	mov	r1, r3
 8002df4:	4610      	mov	r0, r2
 8002df6:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <right+0x1e4>)
 8002df8:	460b      	mov	r3, r1
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	440b      	add	r3, r1
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	3310      	adds	r3, #16
 8002e04:	6018      	str	r0, [r3, #0]
				allPath[currentIndex].y2 = y2;
 8002e06:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <right+0x200>)
 8002e08:	881a      	ldrh	r2, [r3, #0]
 8002e0a:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <right+0x1e0>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4610      	mov	r0, r2
 8002e12:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <right+0x1e4>)
 8002e14:	460b      	mov	r3, r1
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	440b      	add	r3, r1
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3314      	adds	r3, #20
 8002e20:	6018      	str	r0, [r3, #0]

				currentIndex++;
 8002e22:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <right+0x1e0>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	3301      	adds	r3, #1
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <right+0x1e0>)
 8002e2c:	701a      	strb	r2, [r3, #0]
			}
			prevState = goRight;
 8002e2e:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <right+0x1dc>)
 8002e30:	2203      	movs	r2, #3
 8002e32:	701a      	strb	r2, [r3, #0]
			//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;
			x1 += speed;
 8002e34:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <right+0x1f8>)
 8002e36:	881a      	ldrh	r2, [r3, #0]
 8002e38:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <right+0x1ec>)
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <right+0x1f8>)
 8002e42:	801a      	strh	r2, [r3, #0]
			x2 += speed;
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <right+0x1f0>)
 8002e46:	881a      	ldrh	r2, [r3, #0]
 8002e48:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <right+0x1ec>)
 8002e4a:	881b      	ldrh	r3, [r3, #0]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <right+0x1f0>)
 8002e52:	801a      	strh	r2, [r3, #0]


			lcd_Fill(x1, y1, x2, y2, BLUE);
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <right+0x1f8>)
 8002e56:	8818      	ldrh	r0, [r3, #0]
 8002e58:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <right+0x1fc>)
 8002e5a:	8819      	ldrh	r1, [r3, #0]
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <right+0x1f0>)
 8002e5e:	881a      	ldrh	r2, [r3, #0]
 8002e60:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <right+0x200>)
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	241f      	movs	r4, #31
 8002e66:	9400      	str	r4, [sp, #0]
 8002e68:	f7fe f86e 	bl	8000f48 <lcd_Fill>
			delete_path();
 8002e6c:	f7ff fda0 	bl	80029b0 <delete_path>
}
 8002e70:	bf00      	nop
 8002e72:	3704      	adds	r7, #4
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd90      	pop	{r4, r7, pc}
 8002e78:	2000001b 	.word	0x2000001b
 8002e7c:	200002c8 	.word	0x200002c8
 8002e80:	200002cc 	.word	0x200002cc
 8002e84:	2000001e 	.word	0x2000001e
 8002e88:	20000020 	.word	0x20000020
 8002e8c:	20000016 	.word	0x20000016
 8002e90:	2000001c 	.word	0x2000001c
 8002e94:	20000012 	.word	0x20000012
 8002e98:	20000014 	.word	0x20000014
 8002e9c:	20000018 	.word	0x20000018

08002ea0 <left>:
void left() {
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af02      	add	r7, sp, #8
	if (prevState == goLeft) {
 8002ea6:	4b75      	ldr	r3, [pc, #468]	; (800307c <left+0x1dc>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d137      	bne.n	8002f1e <left+0x7e>
		if (allPath[currentIndex-1].length <= snakeTailLen) {
 8002eae:	4b74      	ldr	r3, [pc, #464]	; (8003080 <left+0x1e0>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	1e5a      	subs	r2, r3, #1
 8002eb4:	4973      	ldr	r1, [pc, #460]	; (8003084 <left+0x1e4>)
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a70      	ldr	r2, [pc, #448]	; (8003088 <left+0x1e8>)
 8002ec6:	8812      	ldrh	r2, [r2, #0]
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	dc19      	bgt.n	8002f00 <left+0x60>

							allPath[currentIndex-1].length +=speed;
 8002ecc:	4b6c      	ldr	r3, [pc, #432]	; (8003080 <left+0x1e0>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	1e5a      	subs	r2, r3, #1
 8002ed2:	496c      	ldr	r1, [pc, #432]	; (8003084 <left+0x1e4>)
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	440b      	add	r3, r1
 8002ede:	3304      	adds	r3, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a6a      	ldr	r2, [pc, #424]	; (800308c <left+0x1ec>)
 8002ee4:	8812      	ldrh	r2, [r2, #0]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4a65      	ldr	r2, [pc, #404]	; (8003080 <left+0x1e0>)
 8002eea:	7812      	ldrb	r2, [r2, #0]
 8002eec:	3a01      	subs	r2, #1
 8002eee:	4419      	add	r1, r3
 8002ef0:	4864      	ldr	r0, [pc, #400]	; (8003084 <left+0x1e4>)
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4403      	add	r3, r0
 8002efc:	3304      	adds	r3, #4
 8002efe:	6019      	str	r1, [r3, #0]
						}

			allPath[currentIndex-1].x1 = x1;
 8002f00:	4b63      	ldr	r3, [pc, #396]	; (8003090 <left+0x1f0>)
 8002f02:	8819      	ldrh	r1, [r3, #0]
 8002f04:	4b5e      	ldr	r3, [pc, #376]	; (8003080 <left+0x1e0>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	1e5a      	subs	r2, r3, #1
 8002f0a:	4608      	mov	r0, r1
 8002f0c:	495d      	ldr	r1, [pc, #372]	; (8003084 <left+0x1e4>)
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	440b      	add	r3, r1
 8002f18:	3308      	adds	r3, #8
 8002f1a:	6018      	str	r0, [r3, #0]
 8002f1c:	e089      	b.n	8003032 <left+0x192>

		} else {
			if (currentIndex == 0) allPath[0].isTail = 0;
 8002f1e:	4b58      	ldr	r3, [pc, #352]	; (8003080 <left+0x1e0>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d103      	bne.n	8002f2e <left+0x8e>
 8002f26:	4b57      	ldr	r3, [pc, #348]	; (8003084 <left+0x1e4>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	705a      	strb	r2, [r3, #1]
 8002f2c:	e00b      	b.n	8002f46 <left+0xa6>
			else allPath[currentIndex-1].isTail = 1;
 8002f2e:	4b54      	ldr	r3, [pc, #336]	; (8003080 <left+0x1e0>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	1e5a      	subs	r2, r3, #1
 8002f34:	4953      	ldr	r1, [pc, #332]	; (8003084 <left+0x1e4>)
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	440b      	add	r3, r1
 8002f40:	3301      	adds	r3, #1
 8002f42:	2201      	movs	r2, #1
 8002f44:	701a      	strb	r2, [r3, #0]
			allPath[currentIndex].isTail = 0;
 8002f46:	4b4e      	ldr	r3, [pc, #312]	; (8003080 <left+0x1e0>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4a4d      	ldr	r2, [pc, #308]	; (8003084 <left+0x1e4>)
 8002f4e:	460b      	mov	r3, r1
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	440b      	add	r3, r1
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	3301      	adds	r3, #1
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
			if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 8002f5e:	4b4a      	ldr	r3, [pc, #296]	; (8003088 <left+0x1e8>)
 8002f60:	881a      	ldrh	r2, [r3, #0]
 8002f62:	4b4c      	ldr	r3, [pc, #304]	; (8003094 <left+0x1f4>)
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d10e      	bne.n	8002f88 <left+0xe8>
 8002f6a:	4b47      	ldr	r3, [pc, #284]	; (8003088 <left+0x1e8>)
 8002f6c:	881a      	ldrh	r2, [r3, #0]
 8002f6e:	4b44      	ldr	r3, [pc, #272]	; (8003080 <left+0x1e0>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	4610      	mov	r0, r2
 8002f76:	4a43      	ldr	r2, [pc, #268]	; (8003084 <left+0x1e4>)
 8002f78:	460b      	mov	r3, r1
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	440b      	add	r3, r1
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	3304      	adds	r3, #4
 8002f84:	6018      	str	r0, [r3, #0]
 8002f86:	e00b      	b.n	8002fa0 <left+0x100>
			else allPath[currentIndex].length = 0;
 8002f88:	4b3d      	ldr	r3, [pc, #244]	; (8003080 <left+0x1e0>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4a3d      	ldr	r2, [pc, #244]	; (8003084 <left+0x1e4>)
 8002f90:	460b      	mov	r3, r1
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	440b      	add	r3, r1
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
			allPath[currentIndex].currentState = goLeft;
 8002fa0:	4b37      	ldr	r3, [pc, #220]	; (8003080 <left+0x1e0>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4a37      	ldr	r2, [pc, #220]	; (8003084 <left+0x1e4>)
 8002fa8:	460b      	mov	r3, r1
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	440b      	add	r3, r1
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	701a      	strb	r2, [r3, #0]
			allPath[currentIndex].x1 = x1;
 8002fb6:	4b36      	ldr	r3, [pc, #216]	; (8003090 <left+0x1f0>)
 8002fb8:	881a      	ldrh	r2, [r3, #0]
 8002fba:	4b31      	ldr	r3, [pc, #196]	; (8003080 <left+0x1e0>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4a30      	ldr	r2, [pc, #192]	; (8003084 <left+0x1e4>)
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	440b      	add	r3, r1
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	3308      	adds	r3, #8
 8002fd0:	6018      	str	r0, [r3, #0]
			allPath[currentIndex].x2 = x2;
 8002fd2:	4b31      	ldr	r3, [pc, #196]	; (8003098 <left+0x1f8>)
 8002fd4:	881a      	ldrh	r2, [r3, #0]
 8002fd6:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <left+0x1e0>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4a29      	ldr	r2, [pc, #164]	; (8003084 <left+0x1e4>)
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	440b      	add	r3, r1
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4413      	add	r3, r2
 8002fea:	330c      	adds	r3, #12
 8002fec:	6018      	str	r0, [r3, #0]
			allPath[currentIndex].y1 = y1;
 8002fee:	4b2b      	ldr	r3, [pc, #172]	; (800309c <left+0x1fc>)
 8002ff0:	881a      	ldrh	r2, [r3, #0]
 8002ff2:	4b23      	ldr	r3, [pc, #140]	; (8003080 <left+0x1e0>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4a22      	ldr	r2, [pc, #136]	; (8003084 <left+0x1e4>)
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	440b      	add	r3, r1
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	3310      	adds	r3, #16
 8003008:	6018      	str	r0, [r3, #0]
			allPath[currentIndex].y2 = y2;
 800300a:	4b25      	ldr	r3, [pc, #148]	; (80030a0 <left+0x200>)
 800300c:	881a      	ldrh	r2, [r3, #0]
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <left+0x1e0>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	4619      	mov	r1, r3
 8003014:	4610      	mov	r0, r2
 8003016:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <left+0x1e4>)
 8003018:	460b      	mov	r3, r1
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	440b      	add	r3, r1
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	3314      	adds	r3, #20
 8003024:	6018      	str	r0, [r3, #0]
			currentIndex++;
 8003026:	4b16      	ldr	r3, [pc, #88]	; (8003080 <left+0x1e0>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	3301      	adds	r3, #1
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4b14      	ldr	r3, [pc, #80]	; (8003080 <left+0x1e0>)
 8003030:	701a      	strb	r2, [r3, #0]
		}
		prevState = goLeft;
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <left+0x1dc>)
 8003034:	2202      	movs	r2, #2
 8003036:	701a      	strb	r2, [r3, #0]
		//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;
		x1 -= speed;
 8003038:	4b15      	ldr	r3, [pc, #84]	; (8003090 <left+0x1f0>)
 800303a:	881a      	ldrh	r2, [r3, #0]
 800303c:	4b13      	ldr	r3, [pc, #76]	; (800308c <left+0x1ec>)
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	b29a      	uxth	r2, r3
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <left+0x1f0>)
 8003046:	801a      	strh	r2, [r3, #0]
		x2 -= speed;
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <left+0x1f8>)
 800304a:	881a      	ldrh	r2, [r3, #0]
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <left+0x1ec>)
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	b29a      	uxth	r2, r3
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <left+0x1f8>)
 8003056:	801a      	strh	r2, [r3, #0]


		lcd_Fill(x1, y1, x2, y2, BLUE);
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <left+0x1f0>)
 800305a:	8818      	ldrh	r0, [r3, #0]
 800305c:	4b0f      	ldr	r3, [pc, #60]	; (800309c <left+0x1fc>)
 800305e:	8819      	ldrh	r1, [r3, #0]
 8003060:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <left+0x1f8>)
 8003062:	881a      	ldrh	r2, [r3, #0]
 8003064:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <left+0x200>)
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	241f      	movs	r4, #31
 800306a:	9400      	str	r4, [sp, #0]
 800306c:	f7fd ff6c 	bl	8000f48 <lcd_Fill>
		delete_path();
 8003070:	f7ff fc9e 	bl	80029b0 <delete_path>

}
 8003074:	bf00      	nop
 8003076:	3704      	adds	r7, #4
 8003078:	46bd      	mov	sp, r7
 800307a:	bd90      	pop	{r4, r7, pc}
 800307c:	2000001b 	.word	0x2000001b
 8003080:	200002c8 	.word	0x200002c8
 8003084:	200002cc 	.word	0x200002cc
 8003088:	2000001e 	.word	0x2000001e
 800308c:	20000020 	.word	0x20000020
 8003090:	20000012 	.word	0x20000012
 8003094:	2000001c 	.word	0x2000001c
 8003098:	20000016 	.word	0x20000016
 800309c:	20000014 	.word	0x20000014
 80030a0:	20000018 	.word	0x20000018

080030a4 <up>:


void up() {
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af02      	add	r7, sp, #8

	if (prevState == goUp) {
 80030aa:	4b7b      	ldr	r3, [pc, #492]	; (8003298 <up+0x1f4>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d143      	bne.n	800313a <up+0x96>
		if (allPath[currentIndex-1].length <= snakeTailLen) {
 80030b2:	4b7a      	ldr	r3, [pc, #488]	; (800329c <up+0x1f8>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	1e5a      	subs	r2, r3, #1
 80030b8:	4979      	ldr	r1, [pc, #484]	; (80032a0 <up+0x1fc>)
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	440b      	add	r3, r1
 80030c4:	3304      	adds	r3, #4
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a76      	ldr	r2, [pc, #472]	; (80032a4 <up+0x200>)
 80030ca:	8812      	ldrh	r2, [r2, #0]
 80030cc:	4293      	cmp	r3, r2
 80030ce:	dc19      	bgt.n	8003104 <up+0x60>

					allPath[currentIndex-1].length += speed;
 80030d0:	4b72      	ldr	r3, [pc, #456]	; (800329c <up+0x1f8>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	1e5a      	subs	r2, r3, #1
 80030d6:	4972      	ldr	r1, [pc, #456]	; (80032a0 <up+0x1fc>)
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	440b      	add	r3, r1
 80030e2:	3304      	adds	r3, #4
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a70      	ldr	r2, [pc, #448]	; (80032a8 <up+0x204>)
 80030e8:	8812      	ldrh	r2, [r2, #0]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4a6b      	ldr	r2, [pc, #428]	; (800329c <up+0x1f8>)
 80030ee:	7812      	ldrb	r2, [r2, #0]
 80030f0:	3a01      	subs	r2, #1
 80030f2:	4419      	add	r1, r3
 80030f4:	486a      	ldr	r0, [pc, #424]	; (80032a0 <up+0x1fc>)
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	4403      	add	r3, r0
 8003100:	3304      	adds	r3, #4
 8003102:	6019      	str	r1, [r3, #0]
				}

		allPath[currentIndex-1].y1 -= y1 ;
 8003104:	4b65      	ldr	r3, [pc, #404]	; (800329c <up+0x1f8>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	1e5a      	subs	r2, r3, #1
 800310a:	4965      	ldr	r1, [pc, #404]	; (80032a0 <up+0x1fc>)
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	440b      	add	r3, r1
 8003116:	3310      	adds	r3, #16
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a64      	ldr	r2, [pc, #400]	; (80032ac <up+0x208>)
 800311c:	8812      	ldrh	r2, [r2, #0]
 800311e:	4611      	mov	r1, r2
 8003120:	4a5e      	ldr	r2, [pc, #376]	; (800329c <up+0x1f8>)
 8003122:	7812      	ldrb	r2, [r2, #0]
 8003124:	3a01      	subs	r2, #1
 8003126:	1a59      	subs	r1, r3, r1
 8003128:	485d      	ldr	r0, [pc, #372]	; (80032a0 <up+0x1fc>)
 800312a:	4613      	mov	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	4413      	add	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4403      	add	r3, r0
 8003134:	3310      	adds	r3, #16
 8003136:	6019      	str	r1, [r3, #0]
 8003138:	e089      	b.n	800324e <up+0x1aa>


	} else {
		if (currentIndex == 0) allPath[0].isTail = 0;
 800313a:	4b58      	ldr	r3, [pc, #352]	; (800329c <up+0x1f8>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d103      	bne.n	800314a <up+0xa6>
 8003142:	4b57      	ldr	r3, [pc, #348]	; (80032a0 <up+0x1fc>)
 8003144:	2200      	movs	r2, #0
 8003146:	705a      	strb	r2, [r3, #1]
 8003148:	e00b      	b.n	8003162 <up+0xbe>
		else allPath[currentIndex-1].isTail = 1;
 800314a:	4b54      	ldr	r3, [pc, #336]	; (800329c <up+0x1f8>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	1e5a      	subs	r2, r3, #1
 8003150:	4953      	ldr	r1, [pc, #332]	; (80032a0 <up+0x1fc>)
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	440b      	add	r3, r1
 800315c:	3301      	adds	r3, #1
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].isTail = 0;
 8003162:	4b4e      	ldr	r3, [pc, #312]	; (800329c <up+0x1f8>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	4619      	mov	r1, r3
 8003168:	4a4d      	ldr	r2, [pc, #308]	; (80032a0 <up+0x1fc>)
 800316a:	460b      	mov	r3, r1
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	440b      	add	r3, r1
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	3301      	adds	r3, #1
 8003176:	2200      	movs	r2, #0
 8003178:	701a      	strb	r2, [r3, #0]
		if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 800317a:	4b4a      	ldr	r3, [pc, #296]	; (80032a4 <up+0x200>)
 800317c:	881a      	ldrh	r2, [r3, #0]
 800317e:	4b4c      	ldr	r3, [pc, #304]	; (80032b0 <up+0x20c>)
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d10e      	bne.n	80031a4 <up+0x100>
 8003186:	4b47      	ldr	r3, [pc, #284]	; (80032a4 <up+0x200>)
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	4b44      	ldr	r3, [pc, #272]	; (800329c <up+0x1f8>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	4a43      	ldr	r2, [pc, #268]	; (80032a0 <up+0x1fc>)
 8003194:	460b      	mov	r3, r1
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	440b      	add	r3, r1
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	3304      	adds	r3, #4
 80031a0:	6018      	str	r0, [r3, #0]
 80031a2:	e00b      	b.n	80031bc <up+0x118>
		else allPath[currentIndex].length = 0;
 80031a4:	4b3d      	ldr	r3, [pc, #244]	; (800329c <up+0x1f8>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	4619      	mov	r1, r3
 80031aa:	4a3d      	ldr	r2, [pc, #244]	; (80032a0 <up+0x1fc>)
 80031ac:	460b      	mov	r3, r1
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	440b      	add	r3, r1
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	3304      	adds	r3, #4
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
		allPath[currentIndex].currentState = goUp;
 80031bc:	4b37      	ldr	r3, [pc, #220]	; (800329c <up+0x1f8>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	4619      	mov	r1, r3
 80031c2:	4a37      	ldr	r2, [pc, #220]	; (80032a0 <up+0x1fc>)
 80031c4:	460b      	mov	r3, r1
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	440b      	add	r3, r1
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	4413      	add	r3, r2
 80031ce:	2200      	movs	r2, #0
 80031d0:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].x1 = x1;
 80031d2:	4b38      	ldr	r3, [pc, #224]	; (80032b4 <up+0x210>)
 80031d4:	881a      	ldrh	r2, [r3, #0]
 80031d6:	4b31      	ldr	r3, [pc, #196]	; (800329c <up+0x1f8>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	4a30      	ldr	r2, [pc, #192]	; (80032a0 <up+0x1fc>)
 80031e0:	460b      	mov	r3, r1
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	440b      	add	r3, r1
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	3308      	adds	r3, #8
 80031ec:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].x2 = x2;
 80031ee:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <up+0x214>)
 80031f0:	881a      	ldrh	r2, [r3, #0]
 80031f2:	4b2a      	ldr	r3, [pc, #168]	; (800329c <up+0x1f8>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	4619      	mov	r1, r3
 80031f8:	4610      	mov	r0, r2
 80031fa:	4a29      	ldr	r2, [pc, #164]	; (80032a0 <up+0x1fc>)
 80031fc:	460b      	mov	r3, r1
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	440b      	add	r3, r1
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	330c      	adds	r3, #12
 8003208:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y1 = y1;
 800320a:	4b28      	ldr	r3, [pc, #160]	; (80032ac <up+0x208>)
 800320c:	881a      	ldrh	r2, [r3, #0]
 800320e:	4b23      	ldr	r3, [pc, #140]	; (800329c <up+0x1f8>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	4619      	mov	r1, r3
 8003214:	4610      	mov	r0, r2
 8003216:	4a22      	ldr	r2, [pc, #136]	; (80032a0 <up+0x1fc>)
 8003218:	460b      	mov	r3, r1
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	440b      	add	r3, r1
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	3310      	adds	r3, #16
 8003224:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y2 = y2;
 8003226:	4b25      	ldr	r3, [pc, #148]	; (80032bc <up+0x218>)
 8003228:	881a      	ldrh	r2, [r3, #0]
 800322a:	4b1c      	ldr	r3, [pc, #112]	; (800329c <up+0x1f8>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	4619      	mov	r1, r3
 8003230:	4610      	mov	r0, r2
 8003232:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <up+0x1fc>)
 8003234:	460b      	mov	r3, r1
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	440b      	add	r3, r1
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4413      	add	r3, r2
 800323e:	3314      	adds	r3, #20
 8003240:	6018      	str	r0, [r3, #0]
		currentIndex++;
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <up+0x1f8>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	3301      	adds	r3, #1
 8003248:	b2da      	uxtb	r2, r3
 800324a:	4b14      	ldr	r3, [pc, #80]	; (800329c <up+0x1f8>)
 800324c:	701a      	strb	r2, [r3, #0]
	}
	prevState = goUp;
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <up+0x1f4>)
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
	//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;

	y1 -= speed;
 8003254:	4b15      	ldr	r3, [pc, #84]	; (80032ac <up+0x208>)
 8003256:	881a      	ldrh	r2, [r3, #0]
 8003258:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <up+0x204>)
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	b29a      	uxth	r2, r3
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <up+0x208>)
 8003262:	801a      	strh	r2, [r3, #0]
	y2 -= speed;
 8003264:	4b15      	ldr	r3, [pc, #84]	; (80032bc <up+0x218>)
 8003266:	881a      	ldrh	r2, [r3, #0]
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <up+0x204>)
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	b29a      	uxth	r2, r3
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <up+0x218>)
 8003272:	801a      	strh	r2, [r3, #0]


	lcd_Fill(x1, y1, x2, y2, BLUE);
 8003274:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <up+0x210>)
 8003276:	8818      	ldrh	r0, [r3, #0]
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <up+0x208>)
 800327a:	8819      	ldrh	r1, [r3, #0]
 800327c:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <up+0x214>)
 800327e:	881a      	ldrh	r2, [r3, #0]
 8003280:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <up+0x218>)
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	241f      	movs	r4, #31
 8003286:	9400      	str	r4, [sp, #0]
 8003288:	f7fd fe5e 	bl	8000f48 <lcd_Fill>
	delete_path();
 800328c:	f7ff fb90 	bl	80029b0 <delete_path>
}
 8003290:	bf00      	nop
 8003292:	3704      	adds	r7, #4
 8003294:	46bd      	mov	sp, r7
 8003296:	bd90      	pop	{r4, r7, pc}
 8003298:	2000001b 	.word	0x2000001b
 800329c:	200002c8 	.word	0x200002c8
 80032a0:	200002cc 	.word	0x200002cc
 80032a4:	2000001e 	.word	0x2000001e
 80032a8:	20000020 	.word	0x20000020
 80032ac:	20000014 	.word	0x20000014
 80032b0:	2000001c 	.word	0x2000001c
 80032b4:	20000012 	.word	0x20000012
 80032b8:	20000016 	.word	0x20000016
 80032bc:	20000018 	.word	0x20000018

080032c0 <down>:


void down() {
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af02      	add	r7, sp, #8

	if (prevState == goDown) {
 80032c6:	4b75      	ldr	r3, [pc, #468]	; (800349c <down+0x1dc>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d137      	bne.n	800333e <down+0x7e>
		if (allPath[currentIndex-1].length <= snakeTailLen) {
 80032ce:	4b74      	ldr	r3, [pc, #464]	; (80034a0 <down+0x1e0>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	1e5a      	subs	r2, r3, #1
 80032d4:	4973      	ldr	r1, [pc, #460]	; (80034a4 <down+0x1e4>)
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	440b      	add	r3, r1
 80032e0:	3304      	adds	r3, #4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a70      	ldr	r2, [pc, #448]	; (80034a8 <down+0x1e8>)
 80032e6:	8812      	ldrh	r2, [r2, #0]
 80032e8:	4293      	cmp	r3, r2
 80032ea:	dc19      	bgt.n	8003320 <down+0x60>

			allPath[currentIndex-1].length += speed;
 80032ec:	4b6c      	ldr	r3, [pc, #432]	; (80034a0 <down+0x1e0>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	1e5a      	subs	r2, r3, #1
 80032f2:	496c      	ldr	r1, [pc, #432]	; (80034a4 <down+0x1e4>)
 80032f4:	4613      	mov	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	4413      	add	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	440b      	add	r3, r1
 80032fe:	3304      	adds	r3, #4
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a6a      	ldr	r2, [pc, #424]	; (80034ac <down+0x1ec>)
 8003304:	8812      	ldrh	r2, [r2, #0]
 8003306:	4611      	mov	r1, r2
 8003308:	4a65      	ldr	r2, [pc, #404]	; (80034a0 <down+0x1e0>)
 800330a:	7812      	ldrb	r2, [r2, #0]
 800330c:	3a01      	subs	r2, #1
 800330e:	4419      	add	r1, r3
 8003310:	4864      	ldr	r0, [pc, #400]	; (80034a4 <down+0x1e4>)
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4403      	add	r3, r0
 800331c:	3304      	adds	r3, #4
 800331e:	6019      	str	r1, [r3, #0]
		}

		allPath[currentIndex-1].y2 = y2;
 8003320:	4b63      	ldr	r3, [pc, #396]	; (80034b0 <down+0x1f0>)
 8003322:	8819      	ldrh	r1, [r3, #0]
 8003324:	4b5e      	ldr	r3, [pc, #376]	; (80034a0 <down+0x1e0>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	1e5a      	subs	r2, r3, #1
 800332a:	4608      	mov	r0, r1
 800332c:	495d      	ldr	r1, [pc, #372]	; (80034a4 <down+0x1e4>)
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	440b      	add	r3, r1
 8003338:	3314      	adds	r3, #20
 800333a:	6018      	str	r0, [r3, #0]
 800333c:	e089      	b.n	8003452 <down+0x192>
	} else {
		if (currentIndex == 0) allPath[0].isTail = 0;
 800333e:	4b58      	ldr	r3, [pc, #352]	; (80034a0 <down+0x1e0>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <down+0x8e>
 8003346:	4b57      	ldr	r3, [pc, #348]	; (80034a4 <down+0x1e4>)
 8003348:	2200      	movs	r2, #0
 800334a:	705a      	strb	r2, [r3, #1]
 800334c:	e00b      	b.n	8003366 <down+0xa6>
		else allPath[currentIndex-1].isTail = 1;
 800334e:	4b54      	ldr	r3, [pc, #336]	; (80034a0 <down+0x1e0>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	1e5a      	subs	r2, r3, #1
 8003354:	4953      	ldr	r1, [pc, #332]	; (80034a4 <down+0x1e4>)
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	440b      	add	r3, r1
 8003360:	3301      	adds	r3, #1
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].isTail = 0;
 8003366:	4b4e      	ldr	r3, [pc, #312]	; (80034a0 <down+0x1e0>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	4619      	mov	r1, r3
 800336c:	4a4d      	ldr	r2, [pc, #308]	; (80034a4 <down+0x1e4>)
 800336e:	460b      	mov	r3, r1
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	440b      	add	r3, r1
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	3301      	adds	r3, #1
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
		if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 800337e:	4b4a      	ldr	r3, [pc, #296]	; (80034a8 <down+0x1e8>)
 8003380:	881a      	ldrh	r2, [r3, #0]
 8003382:	4b4c      	ldr	r3, [pc, #304]	; (80034b4 <down+0x1f4>)
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d10e      	bne.n	80033a8 <down+0xe8>
 800338a:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <down+0x1e8>)
 800338c:	881a      	ldrh	r2, [r3, #0]
 800338e:	4b44      	ldr	r3, [pc, #272]	; (80034a0 <down+0x1e0>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	4619      	mov	r1, r3
 8003394:	4610      	mov	r0, r2
 8003396:	4a43      	ldr	r2, [pc, #268]	; (80034a4 <down+0x1e4>)
 8003398:	460b      	mov	r3, r1
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	440b      	add	r3, r1
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	3304      	adds	r3, #4
 80033a4:	6018      	str	r0, [r3, #0]
 80033a6:	e00b      	b.n	80033c0 <down+0x100>
		else allPath[currentIndex].length = 0;
 80033a8:	4b3d      	ldr	r3, [pc, #244]	; (80034a0 <down+0x1e0>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	4619      	mov	r1, r3
 80033ae:	4a3d      	ldr	r2, [pc, #244]	; (80034a4 <down+0x1e4>)
 80033b0:	460b      	mov	r3, r1
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	440b      	add	r3, r1
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4413      	add	r3, r2
 80033ba:	3304      	adds	r3, #4
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
		allPath[currentIndex].currentState = goDown;
 80033c0:	4b37      	ldr	r3, [pc, #220]	; (80034a0 <down+0x1e0>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	4619      	mov	r1, r3
 80033c6:	4a37      	ldr	r2, [pc, #220]	; (80034a4 <down+0x1e4>)
 80033c8:	460b      	mov	r3, r1
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	440b      	add	r3, r1
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	2201      	movs	r2, #1
 80033d4:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].x1 = x1;
 80033d6:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <down+0x1f8>)
 80033d8:	881a      	ldrh	r2, [r3, #0]
 80033da:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <down+0x1e0>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	4a30      	ldr	r2, [pc, #192]	; (80034a4 <down+0x1e4>)
 80033e4:	460b      	mov	r3, r1
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	440b      	add	r3, r1
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4413      	add	r3, r2
 80033ee:	3308      	adds	r3, #8
 80033f0:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].x2 = x2;
 80033f2:	4b32      	ldr	r3, [pc, #200]	; (80034bc <down+0x1fc>)
 80033f4:	881a      	ldrh	r2, [r3, #0]
 80033f6:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <down+0x1e0>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	4619      	mov	r1, r3
 80033fc:	4610      	mov	r0, r2
 80033fe:	4a29      	ldr	r2, [pc, #164]	; (80034a4 <down+0x1e4>)
 8003400:	460b      	mov	r3, r1
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	440b      	add	r3, r1
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	330c      	adds	r3, #12
 800340c:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y1 = y1;
 800340e:	4b2c      	ldr	r3, [pc, #176]	; (80034c0 <down+0x200>)
 8003410:	881a      	ldrh	r2, [r3, #0]
 8003412:	4b23      	ldr	r3, [pc, #140]	; (80034a0 <down+0x1e0>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	4a22      	ldr	r2, [pc, #136]	; (80034a4 <down+0x1e4>)
 800341c:	460b      	mov	r3, r1
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	440b      	add	r3, r1
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	3310      	adds	r3, #16
 8003428:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y2 = y2;
 800342a:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <down+0x1f0>)
 800342c:	881a      	ldrh	r2, [r3, #0]
 800342e:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <down+0x1e0>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	4619      	mov	r1, r3
 8003434:	4610      	mov	r0, r2
 8003436:	4a1b      	ldr	r2, [pc, #108]	; (80034a4 <down+0x1e4>)
 8003438:	460b      	mov	r3, r1
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	440b      	add	r3, r1
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4413      	add	r3, r2
 8003442:	3314      	adds	r3, #20
 8003444:	6018      	str	r0, [r3, #0]
		currentIndex++;
 8003446:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <down+0x1e0>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	3301      	adds	r3, #1
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <down+0x1e0>)
 8003450:	701a      	strb	r2, [r3, #0]
	}
	prevState = goDown;
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <down+0x1dc>)
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
	//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;
		y1 += speed;
 8003458:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <down+0x200>)
 800345a:	881a      	ldrh	r2, [r3, #0]
 800345c:	4b13      	ldr	r3, [pc, #76]	; (80034ac <down+0x1ec>)
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	4413      	add	r3, r2
 8003462:	b29a      	uxth	r2, r3
 8003464:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <down+0x200>)
 8003466:	801a      	strh	r2, [r3, #0]
		y2 += speed;
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <down+0x1f0>)
 800346a:	881a      	ldrh	r2, [r3, #0]
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <down+0x1ec>)
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	4413      	add	r3, r2
 8003472:	b29a      	uxth	r2, r3
 8003474:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <down+0x1f0>)
 8003476:	801a      	strh	r2, [r3, #0]

		lcd_Fill(x1, y1, x2, y2, BLUE);
 8003478:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <down+0x1f8>)
 800347a:	8818      	ldrh	r0, [r3, #0]
 800347c:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <down+0x200>)
 800347e:	8819      	ldrh	r1, [r3, #0]
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <down+0x1fc>)
 8003482:	881a      	ldrh	r2, [r3, #0]
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <down+0x1f0>)
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	241f      	movs	r4, #31
 800348a:	9400      	str	r4, [sp, #0]
 800348c:	f7fd fd5c 	bl	8000f48 <lcd_Fill>
		delete_path();
 8003490:	f7ff fa8e 	bl	80029b0 <delete_path>
}
 8003494:	bf00      	nop
 8003496:	3704      	adds	r7, #4
 8003498:	46bd      	mov	sp, r7
 800349a:	bd90      	pop	{r4, r7, pc}
 800349c:	2000001b 	.word	0x2000001b
 80034a0:	200002c8 	.word	0x200002c8
 80034a4:	200002cc 	.word	0x200002cc
 80034a8:	2000001e 	.word	0x2000001e
 80034ac:	20000020 	.word	0x20000020
 80034b0:	20000018 	.word	0x20000018
 80034b4:	2000001c 	.word	0x2000001c
 80034b8:	20000012 	.word	0x20000012
 80034bc:	20000016 	.word	0x20000016
 80034c0:	20000014 	.word	0x20000014

080034c4 <eat_food_success>:

void eat_food_success() {
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af02      	add	r7, sp, #8
	CREATE_FOOD = 1; //QUAY LAI HÀM TẠO FRUIT
 80034ca:	4b12      	ldr	r3, [pc, #72]	; (8003514 <eat_food_success+0x50>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	801a      	strh	r2, [r3, #0]
	count++; //tăng số điểm
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <eat_food_success+0x54>)
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	3301      	adds	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <eat_food_success+0x54>)
 80034da:	801a      	strh	r2, [r3, #0]
	snakeTailLen += 10;
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <eat_food_success+0x58>)
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	330a      	adds	r3, #10
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	4b0d      	ldr	r3, [pc, #52]	; (800351c <eat_food_success+0x58>)
 80034e6:	801a      	strh	r2, [r3, #0]
	lcd_Fill(x_food, y_food, x_food+5, y_food+5, WHITE);
 80034e8:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <eat_food_success+0x5c>)
 80034ea:	8818      	ldrh	r0, [r3, #0]
 80034ec:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <eat_food_success+0x60>)
 80034ee:	8819      	ldrh	r1, [r3, #0]
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <eat_food_success+0x5c>)
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	3305      	adds	r3, #5
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <eat_food_success+0x60>)
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	3305      	adds	r3, #5
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003504:	9400      	str	r4, [sp, #0]
 8003506:	f7fd fd1f 	bl	8000f48 <lcd_Fill>
}
 800350a:	bf00      	nop
 800350c:	3704      	adds	r7, #4
 800350e:	46bd      	mov	sp, r7
 8003510:	bd90      	pop	{r4, r7, pc}
 8003512:	bf00      	nop
 8003514:	20000022 	.word	0x20000022
 8003518:	200005a4 	.word	0x200005a4
 800351c:	2000001e 	.word	0x2000001e
 8003520:	200005a0 	.word	0x200005a0
 8003524:	200005a2 	.word	0x200005a2

08003528 <food>:

void food() {
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b083      	sub	sp, #12
 800352c:	af02      	add	r7, sp, #8
	if(CREATE_FOOD == 1) { // Tạo mồi nhậu
 800352e:	4b7f      	ldr	r3, [pc, #508]	; (800372c <food+0x204>)
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d12d      	bne.n	8003592 <food+0x6a>
		x_food = random_eat(0,x_max-5);
 8003536:	23ef      	movs	r3, #239	; 0xef
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b05      	subs	r3, #5
 800353c:	b29b      	uxth	r3, r3
 800353e:	4619      	mov	r1, r3
 8003540:	2000      	movs	r0, #0
 8003542:	f7fe fd39 	bl	8001fb8 <random_eat>
 8003546:	4603      	mov	r3, r0
 8003548:	461a      	mov	r2, r3
 800354a:	4b79      	ldr	r3, [pc, #484]	; (8003730 <food+0x208>)
 800354c:	801a      	strh	r2, [r3, #0]
		y_food = random_eat(100,y_max-5);
 800354e:	f240 133f 	movw	r3, #319	; 0x13f
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b05      	subs	r3, #5
 8003556:	b29b      	uxth	r3, r3
 8003558:	4619      	mov	r1, r3
 800355a:	2064      	movs	r0, #100	; 0x64
 800355c:	f7fe fd2c 	bl	8001fb8 <random_eat>
 8003560:	4603      	mov	r3, r0
 8003562:	461a      	mov	r2, r3
 8003564:	4b73      	ldr	r3, [pc, #460]	; (8003734 <food+0x20c>)
 8003566:	801a      	strh	r2, [r3, #0]
		lcd_Fill(x_food, y_food, x_food+5, y_food+5, RED);
 8003568:	4b71      	ldr	r3, [pc, #452]	; (8003730 <food+0x208>)
 800356a:	8818      	ldrh	r0, [r3, #0]
 800356c:	4b71      	ldr	r3, [pc, #452]	; (8003734 <food+0x20c>)
 800356e:	8819      	ldrh	r1, [r3, #0]
 8003570:	4b6f      	ldr	r3, [pc, #444]	; (8003730 <food+0x208>)
 8003572:	881b      	ldrh	r3, [r3, #0]
 8003574:	3305      	adds	r3, #5
 8003576:	b29a      	uxth	r2, r3
 8003578:	4b6e      	ldr	r3, [pc, #440]	; (8003734 <food+0x20c>)
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	3305      	adds	r3, #5
 800357e:	b29b      	uxth	r3, r3
 8003580:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8003584:	9400      	str	r4, [sp, #0]
 8003586:	f7fd fcdf 	bl	8000f48 <lcd_Fill>
		CREATE_FOOD = 0; // tránh tạo mồi liên tục
 800358a:	4b68      	ldr	r3, [pc, #416]	; (800372c <food+0x204>)
 800358c:	2200      	movs	r2, #0
 800358e:	801a      	strh	r2, [r3, #0]
			)
			) {
			eat_food_success();
		}
	}
}
 8003590:	e0c7      	b.n	8003722 <food+0x1fa>
		if((x2 == x_food) && (
 8003592:	4b69      	ldr	r3, [pc, #420]	; (8003738 <food+0x210>)
 8003594:	881a      	ldrh	r2, [r3, #0]
 8003596:	4b66      	ldr	r3, [pc, #408]	; (8003730 <food+0x208>)
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	429a      	cmp	r2, r3
 800359c:	d12a      	bne.n	80035f4 <food+0xcc>
				(y1 >= y_food && y1 <= y_food+5)
 800359e:	4b67      	ldr	r3, [pc, #412]	; (800373c <food+0x214>)
 80035a0:	881a      	ldrh	r2, [r3, #0]
 80035a2:	4b64      	ldr	r3, [pc, #400]	; (8003734 <food+0x20c>)
 80035a4:	881b      	ldrh	r3, [r3, #0]
		if((x2 == x_food) && (
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d307      	bcc.n	80035ba <food+0x92>
				(y1 >= y_food && y1 <= y_food+5)
 80035aa:	4b64      	ldr	r3, [pc, #400]	; (800373c <food+0x214>)
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	4b60      	ldr	r3, [pc, #384]	; (8003734 <food+0x20c>)
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	3305      	adds	r3, #5
 80035b6:	429a      	cmp	r2, r3
 80035b8:	dd1a      	ble.n	80035f0 <food+0xc8>
			||	(y2 >= y_food && y2 <= y_food+5)
 80035ba:	4b61      	ldr	r3, [pc, #388]	; (8003740 <food+0x218>)
 80035bc:	881a      	ldrh	r2, [r3, #0]
 80035be:	4b5d      	ldr	r3, [pc, #372]	; (8003734 <food+0x20c>)
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d307      	bcc.n	80035d6 <food+0xae>
 80035c6:	4b5e      	ldr	r3, [pc, #376]	; (8003740 <food+0x218>)
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	4b59      	ldr	r3, [pc, #356]	; (8003734 <food+0x20c>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	3305      	adds	r3, #5
 80035d2:	429a      	cmp	r2, r3
 80035d4:	dd0c      	ble.n	80035f0 <food+0xc8>
			||  (y1 <= y_food && y2 >= y_food+5)
 80035d6:	4b59      	ldr	r3, [pc, #356]	; (800373c <food+0x214>)
 80035d8:	881a      	ldrh	r2, [r3, #0]
 80035da:	4b56      	ldr	r3, [pc, #344]	; (8003734 <food+0x20c>)
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d808      	bhi.n	80035f4 <food+0xcc>
 80035e2:	4b54      	ldr	r3, [pc, #336]	; (8003734 <food+0x20c>)
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4a55      	ldr	r2, [pc, #340]	; (8003740 <food+0x218>)
 80035ea:	8812      	ldrh	r2, [r2, #0]
 80035ec:	4293      	cmp	r3, r2
 80035ee:	da01      	bge.n	80035f4 <food+0xcc>
			eat_food_success();
 80035f0:	f7ff ff68 	bl	80034c4 <eat_food_success>
		if((x1 == x_food+5) && (
 80035f4:	4b53      	ldr	r3, [pc, #332]	; (8003744 <food+0x21c>)
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	4b4d      	ldr	r3, [pc, #308]	; (8003730 <food+0x208>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	3305      	adds	r3, #5
 8003600:	429a      	cmp	r2, r3
 8003602:	d12a      	bne.n	800365a <food+0x132>
				(y1 >= y_food && y1 <= y_food+5)
 8003604:	4b4d      	ldr	r3, [pc, #308]	; (800373c <food+0x214>)
 8003606:	881a      	ldrh	r2, [r3, #0]
 8003608:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <food+0x20c>)
 800360a:	881b      	ldrh	r3, [r3, #0]
		if((x1 == x_food+5) && (
 800360c:	429a      	cmp	r2, r3
 800360e:	d307      	bcc.n	8003620 <food+0xf8>
				(y1 >= y_food && y1 <= y_food+5)
 8003610:	4b4a      	ldr	r3, [pc, #296]	; (800373c <food+0x214>)
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	4b47      	ldr	r3, [pc, #284]	; (8003734 <food+0x20c>)
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	3305      	adds	r3, #5
 800361c:	429a      	cmp	r2, r3
 800361e:	dd1a      	ble.n	8003656 <food+0x12e>
			||	(y2 >= y_food && y2 <= y_food+5)
 8003620:	4b47      	ldr	r3, [pc, #284]	; (8003740 <food+0x218>)
 8003622:	881a      	ldrh	r2, [r3, #0]
 8003624:	4b43      	ldr	r3, [pc, #268]	; (8003734 <food+0x20c>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d307      	bcc.n	800363c <food+0x114>
 800362c:	4b44      	ldr	r3, [pc, #272]	; (8003740 <food+0x218>)
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	461a      	mov	r2, r3
 8003632:	4b40      	ldr	r3, [pc, #256]	; (8003734 <food+0x20c>)
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	3305      	adds	r3, #5
 8003638:	429a      	cmp	r2, r3
 800363a:	dd0c      	ble.n	8003656 <food+0x12e>
			||  (y1 <= y_food && y2 >= y_food+5)
 800363c:	4b3f      	ldr	r3, [pc, #252]	; (800373c <food+0x214>)
 800363e:	881a      	ldrh	r2, [r3, #0]
 8003640:	4b3c      	ldr	r3, [pc, #240]	; (8003734 <food+0x20c>)
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d808      	bhi.n	800365a <food+0x132>
 8003648:	4b3a      	ldr	r3, [pc, #232]	; (8003734 <food+0x20c>)
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	3304      	adds	r3, #4
 800364e:	4a3c      	ldr	r2, [pc, #240]	; (8003740 <food+0x218>)
 8003650:	8812      	ldrh	r2, [r2, #0]
 8003652:	4293      	cmp	r3, r2
 8003654:	da01      	bge.n	800365a <food+0x132>
			eat_food_success();
 8003656:	f7ff ff35 	bl	80034c4 <eat_food_success>
		if((y2 == y_food) && (
 800365a:	4b39      	ldr	r3, [pc, #228]	; (8003740 <food+0x218>)
 800365c:	881a      	ldrh	r2, [r3, #0]
 800365e:	4b35      	ldr	r3, [pc, #212]	; (8003734 <food+0x20c>)
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d12a      	bne.n	80036bc <food+0x194>
				(x1 >= x_food && x1 <= x_food+5)
 8003666:	4b37      	ldr	r3, [pc, #220]	; (8003744 <food+0x21c>)
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	4b31      	ldr	r3, [pc, #196]	; (8003730 <food+0x208>)
 800366c:	881b      	ldrh	r3, [r3, #0]
		if((y2 == y_food) && (
 800366e:	429a      	cmp	r2, r3
 8003670:	d307      	bcc.n	8003682 <food+0x15a>
				(x1 >= x_food && x1 <= x_food+5)
 8003672:	4b34      	ldr	r3, [pc, #208]	; (8003744 <food+0x21c>)
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <food+0x208>)
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	3305      	adds	r3, #5
 800367e:	429a      	cmp	r2, r3
 8003680:	dd1a      	ble.n	80036b8 <food+0x190>
			||	(x2 >= x_food && x2 <= x_food+5)
 8003682:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <food+0x210>)
 8003684:	881a      	ldrh	r2, [r3, #0]
 8003686:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <food+0x208>)
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d307      	bcc.n	800369e <food+0x176>
 800368e:	4b2a      	ldr	r3, [pc, #168]	; (8003738 <food+0x210>)
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	4b26      	ldr	r3, [pc, #152]	; (8003730 <food+0x208>)
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	3305      	adds	r3, #5
 800369a:	429a      	cmp	r2, r3
 800369c:	dd0c      	ble.n	80036b8 <food+0x190>
			||  (x1 <= x_food && x2 >= x_food+5)
 800369e:	4b29      	ldr	r3, [pc, #164]	; (8003744 <food+0x21c>)
 80036a0:	881a      	ldrh	r2, [r3, #0]
 80036a2:	4b23      	ldr	r3, [pc, #140]	; (8003730 <food+0x208>)
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d808      	bhi.n	80036bc <food+0x194>
 80036aa:	4b21      	ldr	r3, [pc, #132]	; (8003730 <food+0x208>)
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	3304      	adds	r3, #4
 80036b0:	4a21      	ldr	r2, [pc, #132]	; (8003738 <food+0x210>)
 80036b2:	8812      	ldrh	r2, [r2, #0]
 80036b4:	4293      	cmp	r3, r2
 80036b6:	da01      	bge.n	80036bc <food+0x194>
			eat_food_success();
 80036b8:	f7ff ff04 	bl	80034c4 <eat_food_success>
		if((y1 == y_food+5) && (
 80036bc:	4b1f      	ldr	r3, [pc, #124]	; (800373c <food+0x214>)
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <food+0x20c>)
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	3305      	adds	r3, #5
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d12a      	bne.n	8003722 <food+0x1fa>
				(x1 >= x_food && x1 <= x_food+5)
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <food+0x21c>)
 80036ce:	881a      	ldrh	r2, [r3, #0]
 80036d0:	4b17      	ldr	r3, [pc, #92]	; (8003730 <food+0x208>)
 80036d2:	881b      	ldrh	r3, [r3, #0]
		if((y1 == y_food+5) && (
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d307      	bcc.n	80036e8 <food+0x1c0>
				(x1 >= x_food && x1 <= x_food+5)
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <food+0x21c>)
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <food+0x208>)
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	3305      	adds	r3, #5
 80036e4:	429a      	cmp	r2, r3
 80036e6:	dd1a      	ble.n	800371e <food+0x1f6>
			||	(x2 >= x_food && x2 <= x_food+5)
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <food+0x210>)
 80036ea:	881a      	ldrh	r2, [r3, #0]
 80036ec:	4b10      	ldr	r3, [pc, #64]	; (8003730 <food+0x208>)
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d307      	bcc.n	8003704 <food+0x1dc>
 80036f4:	4b10      	ldr	r3, [pc, #64]	; (8003738 <food+0x210>)
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <food+0x208>)
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	3305      	adds	r3, #5
 8003700:	429a      	cmp	r2, r3
 8003702:	dd0c      	ble.n	800371e <food+0x1f6>
			||  (x1 <= x_food && x2 >= x_food+5)
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <food+0x21c>)
 8003706:	881a      	ldrh	r2, [r3, #0]
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <food+0x208>)
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d808      	bhi.n	8003722 <food+0x1fa>
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <food+0x208>)
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	3304      	adds	r3, #4
 8003716:	4a08      	ldr	r2, [pc, #32]	; (8003738 <food+0x210>)
 8003718:	8812      	ldrh	r2, [r2, #0]
 800371a:	4293      	cmp	r3, r2
 800371c:	da01      	bge.n	8003722 <food+0x1fa>
			eat_food_success();
 800371e:	f7ff fed1 	bl	80034c4 <eat_food_success>
}
 8003722:	bf00      	nop
 8003724:	3704      	adds	r7, #4
 8003726:	46bd      	mov	sp, r7
 8003728:	bd90      	pop	{r4, r7, pc}
 800372a:	bf00      	nop
 800372c:	20000022 	.word	0x20000022
 8003730:	200005a0 	.word	0x200005a0
 8003734:	200005a2 	.word	0x200005a2
 8003738:	20000016 	.word	0x20000016
 800373c:	20000014 	.word	0x20000014
 8003740:	20000018 	.word	0x20000018
 8003744:	20000012 	.word	0x20000012

08003748 <move>:


void move() {
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b083      	sub	sp, #12
 800374c:	af02      	add	r7, sp, #8
	if(x1 <= 2 || x1 >= x_max-2 || x2 <= 2 || x2 >= x_max -2
 800374e:	4b5d      	ldr	r3, [pc, #372]	; (80038c4 <move+0x17c>)
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d929      	bls.n	80037aa <move+0x62>
 8003756:	4b5b      	ldr	r3, [pc, #364]	; (80038c4 <move+0x17c>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	461a      	mov	r2, r3
 800375c:	23ef      	movs	r3, #239	; 0xef
 800375e:	3b02      	subs	r3, #2
 8003760:	429a      	cmp	r2, r3
 8003762:	da22      	bge.n	80037aa <move+0x62>
 8003764:	4b58      	ldr	r3, [pc, #352]	; (80038c8 <move+0x180>)
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d91e      	bls.n	80037aa <move+0x62>
 800376c:	4b56      	ldr	r3, [pc, #344]	; (80038c8 <move+0x180>)
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	23ef      	movs	r3, #239	; 0xef
 8003774:	3b02      	subs	r3, #2
 8003776:	429a      	cmp	r2, r3
 8003778:	da17      	bge.n	80037aa <move+0x62>
	|| y1 <= 100 || y1 >= y_max - 2 || y2 <= 100 || y2 >= y_max - 2) { //đụng tường
 800377a:	4b54      	ldr	r3, [pc, #336]	; (80038cc <move+0x184>)
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d913      	bls.n	80037aa <move+0x62>
 8003782:	4b52      	ldr	r3, [pc, #328]	; (80038cc <move+0x184>)
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	f240 133f 	movw	r3, #319	; 0x13f
 800378c:	3b02      	subs	r3, #2
 800378e:	429a      	cmp	r2, r3
 8003790:	da0b      	bge.n	80037aa <move+0x62>
 8003792:	4b4f      	ldr	r3, [pc, #316]	; (80038d0 <move+0x188>)
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d907      	bls.n	80037aa <move+0x62>
 800379a:	4b4d      	ldr	r3, [pc, #308]	; (80038d0 <move+0x188>)
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	f240 133f 	movw	r3, #319	; 0x13f
 80037a4:	3b02      	subs	r3, #2
 80037a6:	429a      	cmp	r2, r3
 80037a8:	db02      	blt.n	80037b0 <move+0x68>
			game_over();
 80037aa:	f7fe fd45 	bl	8002238 <game_over>
			return;
 80037ae:	e086      	b.n	80038be <move+0x176>
	}
	led7_SetDigit(0, 0, 0);
 80037b0:	2200      	movs	r2, #0
 80037b2:	2100      	movs	r1, #0
 80037b4:	2000      	movs	r0, #0
 80037b6:	f7fe f90f 	bl	80019d8 <led7_SetDigit>
	led7_SetDigit(0, 1, 0);
 80037ba:	2200      	movs	r2, #0
 80037bc:	2101      	movs	r1, #1
 80037be:	2000      	movs	r0, #0
 80037c0:	f7fe f90a 	bl	80019d8 <led7_SetDigit>
	led7_SetDigit(count/10, 2, 0);
 80037c4:	4b43      	ldr	r3, [pc, #268]	; (80038d4 <move+0x18c>)
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	4a43      	ldr	r2, [pc, #268]	; (80038d8 <move+0x190>)
 80037ca:	fba2 2303 	umull	r2, r3, r2, r3
 80037ce:	08db      	lsrs	r3, r3, #3
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2200      	movs	r2, #0
 80037d4:	2102      	movs	r1, #2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe f8fe 	bl	80019d8 <led7_SetDigit>
	led7_SetDigit(count%10, 3, 0); //hiển thị điểm số
 80037dc:	4b3d      	ldr	r3, [pc, #244]	; (80038d4 <move+0x18c>)
 80037de:	881a      	ldrh	r2, [r3, #0]
 80037e0:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <move+0x190>)
 80037e2:	fba3 1302 	umull	r1, r3, r3, r2
 80037e6:	08d9      	lsrs	r1, r3, #3
 80037e8:	460b      	mov	r3, r1
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2200      	movs	r2, #0
 80037f6:	2103      	movs	r1, #3
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe f8ed 	bl	80019d8 <led7_SetDigit>
//	count++;

	food();
 80037fe:	f7ff fe93 	bl	8003528 <food>
	if (snakeSelfBite(x1,y1,x2,y2,0)) {
 8003802:	4b30      	ldr	r3, [pc, #192]	; (80038c4 <move+0x17c>)
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	b218      	sxth	r0, r3
 8003808:	4b30      	ldr	r3, [pc, #192]	; (80038cc <move+0x184>)
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	b219      	sxth	r1, r3
 800380e:	4b2e      	ldr	r3, [pc, #184]	; (80038c8 <move+0x180>)
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	b21a      	sxth	r2, r3
 8003814:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <move+0x188>)
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	b21b      	sxth	r3, r3
 800381a:	2400      	movs	r4, #0
 800381c:	9400      	str	r4, [sp, #0]
 800381e:	f7fe fe65 	bl	80024ec <snakeSelfBite>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <move+0xe6>
		game_over();
 8003828:	f7fe fd06 	bl	8002238 <game_over>
		return;
 800382c:	e047      	b.n	80038be <move+0x176>
	}
	if (level >= 1) {
 800382e:	4b2b      	ldr	r3, [pc, #172]	; (80038dc <move+0x194>)
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <move+0xfe>
		if (checkCollision()) {
 8003836:	f7fe fffb 	bl	8002830 <checkCollision>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <move+0xfe>
			game_over();
 8003840:	f7fe fcfa 	bl	8002238 <game_over>
			return;
 8003844:	e03b      	b.n	80038be <move+0x176>
		}
	}
	if(level == 2) {
 8003846:	4b25      	ldr	r3, [pc, #148]	; (80038dc <move+0x194>)
 8003848:	881b      	ldrh	r3, [r3, #0]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d101      	bne.n	8003852 <move+0x10a>
		moveWall();
 800384e:	f7fe fe8f 	bl	8002570 <moveWall>

	}
		 // mode 3
	 //mode 2 va 3
	//snake move with button
	if (button_count[6] == 1) {
 8003852:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <move+0x198>)
 8003854:	899b      	ldrh	r3, [r3, #12]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d103      	bne.n	8003862 <move+0x11a>
		firstState = goUp;
 800385a:	4b22      	ldr	r3, [pc, #136]	; (80038e4 <move+0x19c>)
 800385c:	2200      	movs	r2, #0
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	e016      	b.n	8003890 <move+0x148>
	}
	else if (button_count[14] == 1) {
 8003862:	4b1f      	ldr	r3, [pc, #124]	; (80038e0 <move+0x198>)
 8003864:	8b9b      	ldrh	r3, [r3, #28]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d103      	bne.n	8003872 <move+0x12a>
		firstState = goDown;
 800386a:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <move+0x19c>)
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e00e      	b.n	8003890 <move+0x148>
	}
	else if (button_count[11] == 1) {
 8003872:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <move+0x198>)
 8003874:	8adb      	ldrh	r3, [r3, #22]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d103      	bne.n	8003882 <move+0x13a>
		firstState = goRight;
 800387a:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <move+0x19c>)
 800387c:	2203      	movs	r2, #3
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e006      	b.n	8003890 <move+0x148>
	}
	else if (button_count[9] == 1) {
 8003882:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <move+0x198>)
 8003884:	8a5b      	ldrh	r3, [r3, #18]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d102      	bne.n	8003890 <move+0x148>
		firstState = goLeft;
 800388a:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <move+0x19c>)
 800388c:	2202      	movs	r2, #2
 800388e:	701a      	strb	r2, [r3, #0]
	}
	switch (firstState) {
 8003890:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <move+0x19c>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b03      	cmp	r3, #3
 8003896:	d00c      	beq.n	80038b2 <move+0x16a>
 8003898:	2b03      	cmp	r3, #3
 800389a:	dc0d      	bgt.n	80038b8 <move+0x170>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <move+0x15e>
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d003      	beq.n	80038ac <move+0x164>
 80038a4:	e008      	b.n	80038b8 <move+0x170>
		case goUp:
			up();
 80038a6:	f7ff fbfd 	bl	80030a4 <up>
			break;
 80038aa:	e008      	b.n	80038be <move+0x176>
		case goDown:
			down();
 80038ac:	f7ff fd08 	bl	80032c0 <down>
			break;
 80038b0:	e005      	b.n	80038be <move+0x176>
		case goRight:
			right();
 80038b2:	f7ff f9f3 	bl	8002c9c <right>
			break;
 80038b6:	e002      	b.n	80038be <move+0x176>
		default:
			left();
 80038b8:	f7ff faf2 	bl	8002ea0 <left>
			break;
 80038bc:	bf00      	nop
	}
}
 80038be:	3704      	adds	r7, #4
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd90      	pop	{r4, r7, pc}
 80038c4:	20000012 	.word	0x20000012
 80038c8:	20000016 	.word	0x20000016
 80038cc:	20000014 	.word	0x20000014
 80038d0:	20000018 	.word	0x20000018
 80038d4:	200005a4 	.word	0x200005a4
 80038d8:	cccccccd 	.word	0xcccccccd
 80038dc:	200002c6 	.word	0x200002c6
 80038e0:	200001e0 	.word	0x200001e0
 80038e4:	2000001a 	.word	0x2000001a

080038e8 <wall>:

void wall(uint16_t difficult) {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af04      	add	r7, sp, #16
 80038ee:	4603      	mov	r3, r0
 80038f0:	80fb      	strh	r3, [r7, #6]
	level = difficult;
 80038f2:	4a4b      	ldr	r2, [pc, #300]	; (8003a20 <wall+0x138>)
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	8013      	strh	r3, [r2, #0]


	lcd_ShowStr(10,10,"SNAKE GAME!!!",WHITE,BLACK,16,0);
 80038f8:	2300      	movs	r3, #0
 80038fa:	9302      	str	r3, [sp, #8]
 80038fc:	2310      	movs	r3, #16
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	2300      	movs	r3, #0
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003908:	4a46      	ldr	r2, [pc, #280]	; (8003a24 <wall+0x13c>)
 800390a:	210a      	movs	r1, #10
 800390c:	200a      	movs	r0, #10
 800390e:	f7fd ff67 	bl	80017e0 <lcd_ShowStr>


//	hiện thị score hiện tại
	lcd_ShowStr(10,30,"Diem so cua ban la: ",WHITE,BLACK,16,0);
 8003912:	2300      	movs	r3, #0
 8003914:	9302      	str	r3, [sp, #8]
 8003916:	2310      	movs	r3, #16
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	2300      	movs	r3, #0
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003922:	4a41      	ldr	r2, [pc, #260]	; (8003a28 <wall+0x140>)
 8003924:	211e      	movs	r1, #30
 8003926:	200a      	movs	r0, #10
 8003928:	f7fd ff5a 	bl	80017e0 <lcd_ShowStr>
	if(count < 10)
 800392c:	4b3f      	ldr	r3, [pc, #252]	; (8003a2c <wall+0x144>)
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	2b09      	cmp	r3, #9
 8003932:	d80e      	bhi.n	8003952 <wall+0x6a>
		lcd_ShowIntNum(164,30,count,1,WHITE,BLACK,16);
 8003934:	4b3d      	ldr	r3, [pc, #244]	; (8003a2c <wall+0x144>)
 8003936:	881a      	ldrh	r2, [r3, #0]
 8003938:	2310      	movs	r3, #16
 800393a:	9302      	str	r3, [sp, #8]
 800393c:	2300      	movs	r3, #0
 800393e:	9301      	str	r3, [sp, #4]
 8003940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	2301      	movs	r3, #1
 8003948:	211e      	movs	r1, #30
 800394a:	20a4      	movs	r0, #164	; 0xa4
 800394c:	f7fd fcf0 	bl	8001330 <lcd_ShowIntNum>
 8003950:	e00d      	b.n	800396e <wall+0x86>
	else
		lcd_ShowIntNum(164,30,count,2,WHITE,BLACK,16);
 8003952:	4b36      	ldr	r3, [pc, #216]	; (8003a2c <wall+0x144>)
 8003954:	881a      	ldrh	r2, [r3, #0]
 8003956:	2310      	movs	r3, #16
 8003958:	9302      	str	r3, [sp, #8]
 800395a:	2300      	movs	r3, #0
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	2302      	movs	r3, #2
 8003966:	211e      	movs	r1, #30
 8003968:	20a4      	movs	r0, #164	; 0xa4
 800396a:	f7fd fce1 	bl	8001330 <lcd_ShowIntNum>


	// hiển thị max score
	lcd_ShowStr(10,50,"Diem so cao nhat la: ",WHITE,BLACK,16,0);
 800396e:	2300      	movs	r3, #0
 8003970:	9302      	str	r3, [sp, #8]
 8003972:	2310      	movs	r3, #16
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	2300      	movs	r3, #0
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800397e:	4a2c      	ldr	r2, [pc, #176]	; (8003a30 <wall+0x148>)
 8003980:	2132      	movs	r1, #50	; 0x32
 8003982:	200a      	movs	r0, #10
 8003984:	f7fd ff2c 	bl	80017e0 <lcd_ShowStr>
	if(max_count < 10)
 8003988:	4b2a      	ldr	r3, [pc, #168]	; (8003a34 <wall+0x14c>)
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	2b09      	cmp	r3, #9
 800398e:	d80e      	bhi.n	80039ae <wall+0xc6>
		lcd_ShowIntNum(173,50,max_count,1,WHITE,BLACK,16);
 8003990:	4b28      	ldr	r3, [pc, #160]	; (8003a34 <wall+0x14c>)
 8003992:	881a      	ldrh	r2, [r3, #0]
 8003994:	2310      	movs	r3, #16
 8003996:	9302      	str	r3, [sp, #8]
 8003998:	2300      	movs	r3, #0
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	2301      	movs	r3, #1
 80039a4:	2132      	movs	r1, #50	; 0x32
 80039a6:	20ad      	movs	r0, #173	; 0xad
 80039a8:	f7fd fcc2 	bl	8001330 <lcd_ShowIntNum>
 80039ac:	e00d      	b.n	80039ca <wall+0xe2>
	else
		lcd_ShowIntNum(173,50,max_count,2,WHITE,BLACK,16);
 80039ae:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <wall+0x14c>)
 80039b0:	881a      	ldrh	r2, [r3, #0]
 80039b2:	2310      	movs	r3, #16
 80039b4:	9302      	str	r3, [sp, #8]
 80039b6:	2300      	movs	r3, #0
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	2302      	movs	r3, #2
 80039c2:	2132      	movs	r1, #50	; 0x32
 80039c4:	20ad      	movs	r0, #173	; 0xad
 80039c6:	f7fd fcb3 	bl	8001330 <lcd_ShowIntNum>


	lcd_ShowStr(10,70,"Do kho: ",WHITE,BLACK,16,0);
 80039ca:	2300      	movs	r3, #0
 80039cc:	9302      	str	r3, [sp, #8]
 80039ce:	2310      	movs	r3, #16
 80039d0:	9301      	str	r3, [sp, #4]
 80039d2:	2300      	movs	r3, #0
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039da:	4a17      	ldr	r2, [pc, #92]	; (8003a38 <wall+0x150>)
 80039dc:	2146      	movs	r1, #70	; 0x46
 80039de:	200a      	movs	r0, #10
 80039e0:	f7fd fefe 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowIntNum(70,70,difficult,1,WHITE,BLACK,16);
 80039e4:	88fa      	ldrh	r2, [r7, #6]
 80039e6:	2310      	movs	r3, #16
 80039e8:	9302      	str	r3, [sp, #8]
 80039ea:	2300      	movs	r3, #0
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	2301      	movs	r3, #1
 80039f6:	2146      	movs	r1, #70	; 0x46
 80039f8:	2046      	movs	r0, #70	; 0x46
 80039fa:	f7fd fc99 	bl	8001330 <lcd_ShowIntNum>

	lcd_DrawRectangle(0, 100, x_max, y_max, RED); //TẠO TƯỜNG
 80039fe:	23ef      	movs	r3, #239	; 0xef
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	f240 133f 	movw	r3, #319	; 0x13f
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8003a0c:	9100      	str	r1, [sp, #0]
 8003a0e:	2164      	movs	r1, #100	; 0x64
 8003a10:	2000      	movs	r0, #0
 8003a12:	f7fd fb6a 	bl	80010ea <lcd_DrawRectangle>
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	200002c6 	.word	0x200002c6
 8003a24:	0800ab18 	.word	0x0800ab18
 8003a28:	0800ab28 	.word	0x0800ab28
 8003a2c:	200005a4 	.word	0x200005a4
 8003a30:	0800ab40 	.word	0x0800ab40
 8003a34:	200005a6 	.word	0x200005a6
 8003a38:	0800ab58 	.word	0x0800ab58

08003a3c <timer_init>:

uint16_t flag_Sensor = 0;
uint16_t timer_Sensor = 0;
uint16_t timer_Sensor_MUL = 0;

void timer_init(){
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003a40:	4803      	ldr	r0, [pc, #12]	; (8003a50 <timer_init+0x14>)
 8003a42:	f003 fdb3 	bl	80075ac <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8003a46:	4803      	ldr	r0, [pc, #12]	; (8003a54 <timer_init+0x18>)
 8003a48:	f003 fd48 	bl	80074dc <HAL_TIM_Base_Start>
}
 8003a4c:	bf00      	nop
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000658 	.word	0x20000658
 8003a54:	20000610 	.word	0x20000610

08003a58 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8003a62:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <setTimer2+0x2c>)
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <setTimer2+0x2c>)
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <setTimer2+0x30>)
 8003a6e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <setTimer2+0x34>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	801a      	strh	r2, [r3, #0]
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	200005ac 	.word	0x200005ac
 8003a88:	200005aa 	.word	0x200005aa
 8003a8c:	200005a8 	.word	0x200005a8

08003a90 <setTimerSendSensor>:

void setTimerSendSensor(uint16_t duration)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	80fb      	strh	r3, [r7, #6]
	timer_Sensor_MUL = duration/TIMER_CYCLE_2;
 8003a9a:	4a08      	ldr	r2, [pc, #32]	; (8003abc <setTimerSendSensor+0x2c>)
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	8013      	strh	r3, [r2, #0]
	timer_Sensor = timer_Sensor_MUL;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <setTimerSendSensor+0x2c>)
 8003aa2:	881a      	ldrh	r2, [r3, #0]
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <setTimerSendSensor+0x30>)
 8003aa6:	801a      	strh	r2, [r3, #0]
	flag_Sensor = 0;
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <setTimerSendSensor+0x34>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	801a      	strh	r2, [r3, #0]
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	200005b2 	.word	0x200005b2
 8003ac0:	200005b0 	.word	0x200005b0
 8003ac4:	200005ae 	.word	0x200005ae

08003ac8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad8:	d12b      	bne.n	8003b32 <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(timer2_counter > 0){
 8003ada:	4b18      	ldr	r3, [pc, #96]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d010      	beq.n	8003b04 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8003ae2:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003aec:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8003aee:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8003af6:	4b12      	ldr	r3, [pc, #72]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8003afc:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003afe:	881a      	ldrh	r2, [r3, #0]
 8003b00:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003b02:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timer_Sensor > 0)
 8003b04:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d010      	beq.n	8003b2e <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timer_Sensor--;
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b16:	801a      	strh	r2, [r3, #0]
			if (timer_Sensor <= 0)
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				flag_Sensor = 1;
 8003b20:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	801a      	strh	r2, [r3, #0]
				timer_Sensor = timer_Sensor_MUL;
 8003b26:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003b28:	881a      	ldrh	r2, [r3, #0]
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b2c:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8003b2e:	f7fd fec7 	bl	80018c0 <led7_Scan>
	}
}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	200005aa 	.word	0x200005aa
 8003b40:	200005a8 	.word	0x200005a8
 8003b44:	200005ac 	.word	0x200005ac
 8003b48:	200005b0 	.word	0x200005b0
 8003b4c:	200005ae 	.word	0x200005ae
 8003b50:	200005b2 	.word	0x200005b2

08003b54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003b58:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <MX_SPI1_Init+0x64>)
 8003b5a:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <MX_SPI1_Init+0x68>)
 8003b5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b5e:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <MX_SPI1_Init+0x64>)
 8003b60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b66:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <MX_SPI1_Init+0x64>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b6c:	4b12      	ldr	r3, [pc, #72]	; (8003bb8 <MX_SPI1_Init+0x64>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b72:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <MX_SPI1_Init+0x64>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b78:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <MX_SPI1_Init+0x64>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <MX_SPI1_Init+0x64>)
 8003b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b86:	4b0c      	ldr	r3, [pc, #48]	; (8003bb8 <MX_SPI1_Init+0x64>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <MX_SPI1_Init+0x64>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <MX_SPI1_Init+0x64>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b98:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <MX_SPI1_Init+0x64>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <MX_SPI1_Init+0x64>)
 8003ba0:	220a      	movs	r2, #10
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ba4:	4804      	ldr	r0, [pc, #16]	; (8003bb8 <MX_SPI1_Init+0x64>)
 8003ba6:	f002 fe5d 	bl	8006864 <HAL_SPI_Init>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003bb0:	f7fe f9aa 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003bb4:	bf00      	nop
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	200005b4 	.word	0x200005b4
 8003bbc:	40013000 	.word	0x40013000

08003bc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc8:	f107 0314 	add.w	r3, r7, #20
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a19      	ldr	r2, [pc, #100]	; (8003c44 <HAL_SPI_MspInit+0x84>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d12b      	bne.n	8003c3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <HAL_SPI_MspInit+0x88>)
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	4a17      	ldr	r2, [pc, #92]	; (8003c48 <HAL_SPI_MspInit+0x88>)
 8003bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <HAL_SPI_MspInit+0x88>)
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_SPI_MspInit+0x88>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	4a10      	ldr	r2, [pc, #64]	; (8003c48 <HAL_SPI_MspInit+0x88>)
 8003c08:	f043 0302 	orr.w	r3, r3, #2
 8003c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <HAL_SPI_MspInit+0x88>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003c1a:	2338      	movs	r3, #56	; 0x38
 8003c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c26:	2303      	movs	r3, #3
 8003c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c2a:	2305      	movs	r3, #5
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c2e:	f107 0314 	add.w	r3, r7, #20
 8003c32:	4619      	mov	r1, r3
 8003c34:	4805      	ldr	r0, [pc, #20]	; (8003c4c <HAL_SPI_MspInit+0x8c>)
 8003c36:	f001 fe83 	bl	8005940 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003c3a:	bf00      	nop
 8003c3c:	3728      	adds	r7, #40	; 0x28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40013000 	.word	0x40013000
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40020400 	.word	0x40020400

08003c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <HAL_MspInit+0x4c>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5e:	4a0f      	ldr	r2, [pc, #60]	; (8003c9c <HAL_MspInit+0x4c>)
 8003c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c64:	6453      	str	r3, [r2, #68]	; 0x44
 8003c66:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <HAL_MspInit+0x4c>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	603b      	str	r3, [r7, #0]
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <HAL_MspInit+0x4c>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	4a08      	ldr	r2, [pc, #32]	; (8003c9c <HAL_MspInit+0x4c>)
 8003c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c80:	6413      	str	r3, [r2, #64]	; 0x40
 8003c82:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_MspInit+0x4c>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800

08003ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ca4:	e7fe      	b.n	8003ca4 <NMI_Handler+0x4>

08003ca6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003caa:	e7fe      	b.n	8003caa <HardFault_Handler+0x4>

08003cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cb0:	e7fe      	b.n	8003cb0 <MemManage_Handler+0x4>

08003cb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cb6:	e7fe      	b.n	8003cb6 <BusFault_Handler+0x4>

08003cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cbc:	e7fe      	b.n	8003cbc <UsageFault_Handler+0x4>

08003cbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cd0:	bf00      	nop
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cec:	f000 fcbe 	bl	800466c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cf0:	bf00      	nop
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003cf8:	4802      	ldr	r0, [pc, #8]	; (8003d04 <TIM2_IRQHandler+0x10>)
 8003cfa:	f003 fd20 	bl	800773e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000658 	.word	0x20000658

08003d08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d0c:	4802      	ldr	r0, [pc, #8]	; (8003d18 <USART1_IRQHandler+0x10>)
 8003d0e:	f004 fc5b 	bl	80085c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	200006ec 	.word	0x200006ec

08003d1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d20:	4802      	ldr	r0, [pc, #8]	; (8003d2c <USART2_IRQHandler+0x10>)
 8003d22:	f004 fc51 	bl	80085c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d26:	bf00      	nop
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000730 	.word	0x20000730

08003d30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d34:	4802      	ldr	r0, [pc, #8]	; (8003d40 <DMA2_Stream0_IRQHandler+0x10>)
 8003d36:	f001 fb99 	bl	800546c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000180 	.word	0x20000180

08003d44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
	return 1;
 8003d48:	2301      	movs	r3, #1
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <_kill>:

int _kill(int pid, int sig)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d5e:	f005 fe3b 	bl	80099d8 <__errno>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2216      	movs	r2, #22
 8003d66:	601a      	str	r2, [r3, #0]
	return -1;
 8003d68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <_exit>:

void _exit (int status)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ffe7 	bl	8003d54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d86:	e7fe      	b.n	8003d86 <_exit+0x12>

08003d88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	e00a      	b.n	8003db0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d9a:	f3af 8000 	nop.w
 8003d9e:	4601      	mov	r1, r0
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	60ba      	str	r2, [r7, #8]
 8003da6:	b2ca      	uxtb	r2, r1
 8003da8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	3301      	adds	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	dbf0      	blt.n	8003d9a <_read+0x12>
	}

return len;
 8003db8:	687b      	ldr	r3, [r7, #4]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b086      	sub	sp, #24
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	e009      	b.n	8003de8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	60ba      	str	r2, [r7, #8]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	3301      	adds	r3, #1
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	dbf1      	blt.n	8003dd4 <_write+0x12>
	}
	return len;
 8003df0:	687b      	ldr	r3, [r7, #4]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <_close>:

int _close(int file)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
	return -1;
 8003e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e22:	605a      	str	r2, [r3, #4]
	return 0;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <_isatty>:

int _isatty(int file)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
	return 1;
 8003e3a:	2301      	movs	r3, #1
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
	return 0;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e6c:	4a14      	ldr	r2, [pc, #80]	; (8003ec0 <_sbrk+0x5c>)
 8003e6e:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <_sbrk+0x60>)
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e78:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <_sbrk+0x64>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e80:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <_sbrk+0x64>)
 8003e82:	4a12      	ldr	r2, [pc, #72]	; (8003ecc <_sbrk+0x68>)
 8003e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e86:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <_sbrk+0x64>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d207      	bcs.n	8003ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e94:	f005 fda0 	bl	80099d8 <__errno>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	220c      	movs	r2, #12
 8003e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	e009      	b.n	8003eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ea4:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <_sbrk+0x64>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eaa:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <_sbrk+0x64>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	4a05      	ldr	r2, [pc, #20]	; (8003ec8 <_sbrk+0x64>)
 8003eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20020000 	.word	0x20020000
 8003ec4:	00000400 	.word	0x00000400
 8003ec8:	2000060c 	.word	0x2000060c
 8003ecc:	200008c8 	.word	0x200008c8

08003ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <SystemInit+0x20>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <SystemInit+0x20>)
 8003edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003efa:	f107 0308 	add.w	r3, r7, #8
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	605a      	str	r2, [r3, #4]
 8003f04:	609a      	str	r2, [r3, #8]
 8003f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f08:	463b      	mov	r3, r7
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f10:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <MX_TIM1_Init+0x98>)
 8003f12:	4a1f      	ldr	r2, [pc, #124]	; (8003f90 <MX_TIM1_Init+0x9c>)
 8003f14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8003f16:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <MX_TIM1_Init+0x98>)
 8003f18:	2253      	movs	r2, #83	; 0x53
 8003f1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <MX_TIM1_Init+0x98>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003f22:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <MX_TIM1_Init+0x98>)
 8003f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f2a:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <MX_TIM1_Init+0x98>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f30:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <MX_TIM1_Init+0x98>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f36:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <MX_TIM1_Init+0x98>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f3c:	4813      	ldr	r0, [pc, #76]	; (8003f8c <MX_TIM1_Init+0x98>)
 8003f3e:	f003 fa7d 	bl	800743c <HAL_TIM_Base_Init>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003f48:	f7fd ffde 	bl	8001f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f52:	f107 0308 	add.w	r3, r7, #8
 8003f56:	4619      	mov	r1, r3
 8003f58:	480c      	ldr	r0, [pc, #48]	; (8003f8c <MX_TIM1_Init+0x98>)
 8003f5a:	f003 fdbb 	bl	8007ad4 <HAL_TIM_ConfigClockSource>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003f64:	f7fd ffd0 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f70:	463b      	mov	r3, r7
 8003f72:	4619      	mov	r1, r3
 8003f74:	4805      	ldr	r0, [pc, #20]	; (8003f8c <MX_TIM1_Init+0x98>)
 8003f76:	f004 f987 	bl	8008288 <HAL_TIMEx_MasterConfigSynchronization>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003f80:	f7fd ffc2 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003f84:	bf00      	nop
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000610 	.word	0x20000610
 8003f90:	40010000 	.word	0x40010000

08003f94 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f9a:	f107 0308 	add.w	r3, r7, #8
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	605a      	str	r2, [r3, #4]
 8003fa4:	609a      	str	r2, [r3, #8]
 8003fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fa8:	463b      	mov	r3, r7
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <MX_TIM2_Init+0x94>)
 8003fb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <MX_TIM2_Init+0x94>)
 8003fba:	f240 3247 	movw	r2, #839	; 0x347
 8003fbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc0:	4b19      	ldr	r3, [pc, #100]	; (8004028 <MX_TIM2_Init+0x94>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003fc6:	4b18      	ldr	r3, [pc, #96]	; (8004028 <MX_TIM2_Init+0x94>)
 8003fc8:	2263      	movs	r2, #99	; 0x63
 8003fca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fcc:	4b16      	ldr	r3, [pc, #88]	; (8004028 <MX_TIM2_Init+0x94>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <MX_TIM2_Init+0x94>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003fd8:	4813      	ldr	r0, [pc, #76]	; (8004028 <MX_TIM2_Init+0x94>)
 8003fda:	f003 fa2f 	bl	800743c <HAL_TIM_Base_Init>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003fe4:	f7fd ff90 	bl	8001f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003fee:	f107 0308 	add.w	r3, r7, #8
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	480c      	ldr	r0, [pc, #48]	; (8004028 <MX_TIM2_Init+0x94>)
 8003ff6:	f003 fd6d 	bl	8007ad4 <HAL_TIM_ConfigClockSource>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004000:	f7fd ff82 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004004:	2300      	movs	r3, #0
 8004006:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004008:	2300      	movs	r3, #0
 800400a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800400c:	463b      	mov	r3, r7
 800400e:	4619      	mov	r1, r3
 8004010:	4805      	ldr	r0, [pc, #20]	; (8004028 <MX_TIM2_Init+0x94>)
 8004012:	f004 f939 	bl	8008288 <HAL_TIMEx_MasterConfigSynchronization>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800401c:	f7fd ff74 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004020:	bf00      	nop
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000658 	.word	0x20000658

0800402c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	60da      	str	r2, [r3, #12]
 800403e:	611a      	str	r2, [r3, #16]
 8004040:	615a      	str	r2, [r3, #20]
 8004042:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004044:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <MX_TIM13_Init+0x94>)
 8004046:	4a1f      	ldr	r2, [pc, #124]	; (80040c4 <MX_TIM13_Init+0x98>)
 8004048:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800404a:	4b1d      	ldr	r3, [pc, #116]	; (80040c0 <MX_TIM13_Init+0x94>)
 800404c:	f240 3247 	movw	r2, #839	; 0x347
 8004050:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004052:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <MX_TIM13_Init+0x94>)
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <MX_TIM13_Init+0x94>)
 800405a:	2263      	movs	r2, #99	; 0x63
 800405c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800405e:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <MX_TIM13_Init+0x94>)
 8004060:	2200      	movs	r2, #0
 8004062:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004064:	4b16      	ldr	r3, [pc, #88]	; (80040c0 <MX_TIM13_Init+0x94>)
 8004066:	2200      	movs	r2, #0
 8004068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800406a:	4815      	ldr	r0, [pc, #84]	; (80040c0 <MX_TIM13_Init+0x94>)
 800406c:	f003 f9e6 	bl	800743c <HAL_TIM_Base_Init>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8004076:	f7fd ff47 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800407a:	4811      	ldr	r0, [pc, #68]	; (80040c0 <MX_TIM13_Init+0x94>)
 800407c:	f003 fb06 	bl	800768c <HAL_TIM_PWM_Init>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8004086:	f7fd ff3f 	bl	8001f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800408a:	2360      	movs	r3, #96	; 0x60
 800408c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800409a:	1d3b      	adds	r3, r7, #4
 800409c:	2200      	movs	r2, #0
 800409e:	4619      	mov	r1, r3
 80040a0:	4807      	ldr	r0, [pc, #28]	; (80040c0 <MX_TIM13_Init+0x94>)
 80040a2:	f003 fc55 	bl	8007950 <HAL_TIM_PWM_ConfigChannel>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80040ac:	f7fd ff2c 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80040b0:	4803      	ldr	r0, [pc, #12]	; (80040c0 <MX_TIM13_Init+0x94>)
 80040b2:	f000 f85b 	bl	800416c <HAL_TIM_MspPostInit>

}
 80040b6:	bf00      	nop
 80040b8:	3720      	adds	r7, #32
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	200006a0 	.word	0x200006a0
 80040c4:	40001c00 	.word	0x40001c00

080040c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a22      	ldr	r2, [pc, #136]	; (8004160 <HAL_TIM_Base_MspInit+0x98>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d10e      	bne.n	80040f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	4b21      	ldr	r3, [pc, #132]	; (8004164 <HAL_TIM_Base_MspInit+0x9c>)
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	4a20      	ldr	r2, [pc, #128]	; (8004164 <HAL_TIM_Base_MspInit+0x9c>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	6453      	str	r3, [r2, #68]	; 0x44
 80040ea:	4b1e      	ldr	r3, [pc, #120]	; (8004164 <HAL_TIM_Base_MspInit+0x9c>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 80040f6:	e02e      	b.n	8004156 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004100:	d116      	bne.n	8004130 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	4b17      	ldr	r3, [pc, #92]	; (8004164 <HAL_TIM_Base_MspInit+0x9c>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	4a16      	ldr	r2, [pc, #88]	; (8004164 <HAL_TIM_Base_MspInit+0x9c>)
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	6413      	str	r3, [r2, #64]	; 0x40
 8004112:	4b14      	ldr	r3, [pc, #80]	; (8004164 <HAL_TIM_Base_MspInit+0x9c>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800411e:	2200      	movs	r2, #0
 8004120:	2100      	movs	r1, #0
 8004122:	201c      	movs	r0, #28
 8004124:	f000 ffd3 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004128:	201c      	movs	r0, #28
 800412a:	f000 ffec 	bl	8005106 <HAL_NVIC_EnableIRQ>
}
 800412e:	e012      	b.n	8004156 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a0c      	ldr	r2, [pc, #48]	; (8004168 <HAL_TIM_Base_MspInit+0xa0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d10d      	bne.n	8004156 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <HAL_TIM_Base_MspInit+0x9c>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	4a08      	ldr	r2, [pc, #32]	; (8004164 <HAL_TIM_Base_MspInit+0x9c>)
 8004144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004148:	6413      	str	r3, [r2, #64]	; 0x40
 800414a:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_TIM_Base_MspInit+0x9c>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]
}
 8004156:	bf00      	nop
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40010000 	.word	0x40010000
 8004164:	40023800 	.word	0x40023800
 8004168:	40001c00 	.word	0x40001c00

0800416c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004174:	f107 030c 	add.w	r3, r7, #12
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	605a      	str	r2, [r3, #4]
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	60da      	str	r2, [r3, #12]
 8004182:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a12      	ldr	r2, [pc, #72]	; (80041d4 <HAL_TIM_MspPostInit+0x68>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d11e      	bne.n	80041cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	4b11      	ldr	r3, [pc, #68]	; (80041d8 <HAL_TIM_MspPostInit+0x6c>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	4a10      	ldr	r2, [pc, #64]	; (80041d8 <HAL_TIM_MspPostInit+0x6c>)
 8004198:	f043 0320 	orr.w	r3, r3, #32
 800419c:	6313      	str	r3, [r2, #48]	; 0x30
 800419e:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <HAL_TIM_MspPostInit+0x6c>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	60bb      	str	r3, [r7, #8]
 80041a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b0:	2302      	movs	r3, #2
 80041b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80041bc:	2309      	movs	r3, #9
 80041be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041c0:	f107 030c 	add.w	r3, r7, #12
 80041c4:	4619      	mov	r1, r3
 80041c6:	4805      	ldr	r0, [pc, #20]	; (80041dc <HAL_TIM_MspPostInit+0x70>)
 80041c8:	f001 fbba 	bl	8005940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80041cc:	bf00      	nop
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40001c00 	.word	0x40001c00
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40021400 	.word	0x40021400

080041e0 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 80041e4:	2201      	movs	r2, #1
 80041e6:	4906      	ldr	r1, [pc, #24]	; (8004200 <uart_init_esp+0x20>)
 80041e8:	4806      	ldr	r0, [pc, #24]	; (8004204 <uart_init_esp+0x24>)
 80041ea:	f004 f9bc 	bl	8008566 <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 80041ee:	2201      	movs	r2, #1
 80041f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80041f4:	4804      	ldr	r0, [pc, #16]	; (8004208 <uart_init_esp+0x28>)
 80041f6:	f001 fd3f 	bl	8005c78 <HAL_GPIO_WritePin>
}
 80041fa:	bf00      	nop
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	200006e9 	.word	0x200006e9
 8004204:	20000730 	.word	0x20000730
 8004208:	40021400 	.word	0x40021400

0800420c <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8004218:	887a      	ldrh	r2, [r7, #2]
 800421a:	230a      	movs	r3, #10
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4803      	ldr	r0, [pc, #12]	; (800422c <uart_EspSendBytes+0x20>)
 8004220:	f004 f90f 	bl	8008442 <HAL_UART_Transmit>
}
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000730 	.word	0x20000730

08004230 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a19      	ldr	r2, [pc, #100]	; (80042a4 <HAL_UART_RxCpltCallback+0x74>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d10a      	bne.n	8004258 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8004242:	230a      	movs	r3, #10
 8004244:	2201      	movs	r2, #1
 8004246:	4918      	ldr	r1, [pc, #96]	; (80042a8 <HAL_UART_RxCpltCallback+0x78>)
 8004248:	4818      	ldr	r0, [pc, #96]	; (80042ac <HAL_UART_RxCpltCallback+0x7c>)
 800424a:	f004 f8fa 	bl	8008442 <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800424e:	2201      	movs	r2, #1
 8004250:	4915      	ldr	r1, [pc, #84]	; (80042a8 <HAL_UART_RxCpltCallback+0x78>)
 8004252:	4816      	ldr	r0, [pc, #88]	; (80042ac <HAL_UART_RxCpltCallback+0x7c>)
 8004254:	f004 f987 	bl	8008566 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a14      	ldr	r2, [pc, #80]	; (80042b0 <HAL_UART_RxCpltCallback+0x80>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d11b      	bne.n	800429a <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <HAL_UART_RxCpltCallback+0x84>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b4f      	cmp	r3, #79	; 0x4f
 8004268:	d103      	bne.n	8004272 <HAL_UART_RxCpltCallback+0x42>
 800426a:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <HAL_UART_RxCpltCallback+0x88>)
 800426c:	2201      	movs	r2, #1
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	e00e      	b.n	8004290 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <HAL_UART_RxCpltCallback+0x84>)
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b61      	cmp	r3, #97	; 0x61
 8004278:	d103      	bne.n	8004282 <HAL_UART_RxCpltCallback+0x52>
 800427a:	4b10      	ldr	r3, [pc, #64]	; (80042bc <HAL_UART_RxCpltCallback+0x8c>)
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]
 8004280:	e006      	b.n	8004290 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8004282:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <HAL_UART_RxCpltCallback+0x84>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b41      	cmp	r3, #65	; 0x41
 8004288:	d102      	bne.n	8004290 <HAL_UART_RxCpltCallback+0x60>
 800428a:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <HAL_UART_RxCpltCallback+0x8c>)
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8004290:	2201      	movs	r2, #1
 8004292:	4908      	ldr	r1, [pc, #32]	; (80042b4 <HAL_UART_RxCpltCallback+0x84>)
 8004294:	480a      	ldr	r0, [pc, #40]	; (80042c0 <HAL_UART_RxCpltCallback+0x90>)
 8004296:	f004 f966 	bl	8008566 <HAL_UART_Receive_IT>
	}
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40011000 	.word	0x40011000
 80042a8:	200006e8 	.word	0x200006e8
 80042ac:	200006ec 	.word	0x200006ec
 80042b0:	40004400 	.word	0x40004400
 80042b4:	200006e9 	.word	0x200006e9
 80042b8:	200006ea 	.word	0x200006ea
 80042bc:	200002b8 	.word	0x200002b8
 80042c0:	20000730 	.word	0x20000730

080042c4 <uartSendSensor>:
	if(check_esp == 1) return 1;
	return 0;
}
//snprintf(str2, sizeof(str2), "%d", val);

void uartSendSensor() {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80042ca:	af00      	add	r7, sp, #0
	char *str = "#";
 80042cc:	4b36      	ldr	r3, [pc, #216]	; (80043a8 <uartSendSensor+0xe4>)
 80042ce:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
	char str1[50] = "SENSOR#";
 80042d2:	4a36      	ldr	r2, [pc, #216]	; (80043ac <uartSendSensor+0xe8>)
 80042d4:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80042d8:	6810      	ldr	r0, [r2, #0]
 80042da:	6851      	ldr	r1, [r2, #4]
 80042dc:	c303      	stmia	r3!, {r0, r1}
 80042de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042e2:	222a      	movs	r2, #42	; 0x2a
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f005 fb19 	bl	800991e <memset>
//	char str3[60] = "Temperature: ";
	char *str2[50];
	snprintf(str2, sizeof(str2), "%d", (uint16_t)sensor_GetTemperature());
 80042ec:	f7fd fe46 	bl	8001f7c <sensor_GetTemperature>
 80042f0:	eef0 7a40 	vmov.f32	s15, s0
 80042f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f8:	ee17 3a90 	vmov	r3, s15
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8004302:	4a2b      	ldr	r2, [pc, #172]	; (80043b0 <uartSendSensor+0xec>)
 8004304:	21c8      	movs	r1, #200	; 0xc8
 8004306:	f005 fa93 	bl	8009830 <sniprintf>
	strcat(str1, str2);
 800430a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800430e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004312:	4611      	mov	r1, r2
 8004314:	4618      	mov	r0, r3
 8004316:	f005 fb0a 	bl	800992e <strcat>
	strcat(str1,str);
 800431a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800431e:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8004322:	4618      	mov	r0, r3
 8004324:	f005 fb03 	bl	800992e <strcat>
	//get ánh sáng
	char *str3[50];
	snprintf(str3, sizeof(str3), "%d", (uint16_t)sensor_GetLight());
 8004328:	f7fd fe10 	bl	8001f4c <sensor_GetLight>
 800432c:	4603      	mov	r3, r0
 800432e:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8004332:	4a1f      	ldr	r2, [pc, #124]	; (80043b0 <uartSendSensor+0xec>)
 8004334:	21c8      	movs	r1, #200	; 0xc8
 8004336:	f005 fa7b 	bl	8009830 <sniprintf>
	strcat(str1, str3);
 800433a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 800433e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004342:	4611      	mov	r1, r2
 8004344:	4618      	mov	r0, r3
 8004346:	f005 faf2 	bl	800992e <strcat>
	strcat(str1,str);
 800434a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800434e:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8004352:	4618      	mov	r0, r3
 8004354:	f005 faeb 	bl	800992e <strcat>
	// get Power
	char *str4[50];

	snprintf(str4, sizeof(str4), "%d", (uint16_t)sensor_GetPotentiometer());
 8004358:	f7fd fe04 	bl	8001f64 <sensor_GetPotentiometer>
 800435c:	4603      	mov	r3, r0
 800435e:	4638      	mov	r0, r7
 8004360:	4a13      	ldr	r2, [pc, #76]	; (80043b0 <uartSendSensor+0xec>)
 8004362:	21c8      	movs	r1, #200	; 0xc8
 8004364:	f005 fa64 	bl	8009830 <sniprintf>
	strcat(str1, str4);
 8004368:	463a      	mov	r2, r7
 800436a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800436e:	4611      	mov	r1, r2
 8004370:	4618      	mov	r0, r3
 8004372:	f005 fadc 	bl	800992e <strcat>
	strcat(str1,str);
 8004376:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800437a:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 800437e:	4618      	mov	r0, r3
 8004380:	f005 fad5 	bl	800992e <strcat>
	// gửi data
	uart_EspSendBytes(str1, strlen(str1));
 8004384:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004388:	4618      	mov	r0, r3
 800438a:	f7fb ff21 	bl	80001d0 <strlen>
 800438e:	4603      	mov	r3, r0
 8004390:	b29a      	uxth	r2, r3
 8004392:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff ff37 	bl	800420c <uart_EspSendBytes>
}
 800439e:	bf00      	nop
 80043a0:	f507 7724 	add.w	r7, r7, #656	; 0x290
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	0800ab78 	.word	0x0800ab78
 80043ac:	0800ab7c 	.word	0x0800ab7c
 80043b0:	0800ab6c 	.word	0x0800ab6c

080043b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043ba:	4a12      	ldr	r2, [pc, #72]	; (8004404 <MX_USART1_UART_Init+0x50>)
 80043bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043c6:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043d8:	4b09      	ldr	r3, [pc, #36]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043da:	220c      	movs	r2, #12
 80043dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043ea:	4805      	ldr	r0, [pc, #20]	; (8004400 <MX_USART1_UART_Init+0x4c>)
 80043ec:	f003 ffdc 	bl	80083a8 <HAL_UART_Init>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80043f6:	f7fd fd87 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	200006ec 	.word	0x200006ec
 8004404:	40011000 	.word	0x40011000

08004408 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <MX_USART2_UART_Init+0x50>)
 8004410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 8004414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 800441c:	2200      	movs	r2, #0
 800441e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 8004422:	2200      	movs	r2, #0
 8004424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 8004428:	2200      	movs	r2, #0
 800442a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 800442e:	220c      	movs	r2, #12
 8004430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 8004434:	2200      	movs	r2, #0
 8004436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 800443a:	2200      	movs	r2, #0
 800443c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800443e:	4805      	ldr	r0, [pc, #20]	; (8004454 <MX_USART2_UART_Init+0x4c>)
 8004440:	f003 ffb2 	bl	80083a8 <HAL_UART_Init>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800444a:	f7fd fd5d 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000730 	.word	0x20000730
 8004458:	40004400 	.word	0x40004400

0800445c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08c      	sub	sp, #48	; 0x30
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004464:	f107 031c 	add.w	r3, r7, #28
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]
 800446c:	605a      	str	r2, [r3, #4]
 800446e:	609a      	str	r2, [r3, #8]
 8004470:	60da      	str	r2, [r3, #12]
 8004472:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a3a      	ldr	r2, [pc, #232]	; (8004564 <HAL_UART_MspInit+0x108>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d135      	bne.n	80044ea <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	4b39      	ldr	r3, [pc, #228]	; (8004568 <HAL_UART_MspInit+0x10c>)
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	4a38      	ldr	r2, [pc, #224]	; (8004568 <HAL_UART_MspInit+0x10c>)
 8004488:	f043 0310 	orr.w	r3, r3, #16
 800448c:	6453      	str	r3, [r2, #68]	; 0x44
 800448e:	4b36      	ldr	r3, [pc, #216]	; (8004568 <HAL_UART_MspInit+0x10c>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	4b32      	ldr	r3, [pc, #200]	; (8004568 <HAL_UART_MspInit+0x10c>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	4a31      	ldr	r2, [pc, #196]	; (8004568 <HAL_UART_MspInit+0x10c>)
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	6313      	str	r3, [r2, #48]	; 0x30
 80044aa:	4b2f      	ldr	r3, [pc, #188]	; (8004568 <HAL_UART_MspInit+0x10c>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80044ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044bc:	2302      	movs	r3, #2
 80044be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c0:	2300      	movs	r3, #0
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c4:	2303      	movs	r3, #3
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044c8:	2307      	movs	r3, #7
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044cc:	f107 031c 	add.w	r3, r7, #28
 80044d0:	4619      	mov	r1, r3
 80044d2:	4826      	ldr	r0, [pc, #152]	; (800456c <HAL_UART_MspInit+0x110>)
 80044d4:	f001 fa34 	bl	8005940 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80044d8:	2200      	movs	r2, #0
 80044da:	2100      	movs	r1, #0
 80044dc:	2025      	movs	r0, #37	; 0x25
 80044de:	f000 fdf6 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80044e2:	2025      	movs	r0, #37	; 0x25
 80044e4:	f000 fe0f 	bl	8005106 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80044e8:	e038      	b.n	800455c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a20      	ldr	r2, [pc, #128]	; (8004570 <HAL_UART_MspInit+0x114>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d133      	bne.n	800455c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80044f4:	2300      	movs	r3, #0
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <HAL_UART_MspInit+0x10c>)
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	4a1a      	ldr	r2, [pc, #104]	; (8004568 <HAL_UART_MspInit+0x10c>)
 80044fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004502:	6413      	str	r3, [r2, #64]	; 0x40
 8004504:	4b18      	ldr	r3, [pc, #96]	; (8004568 <HAL_UART_MspInit+0x10c>)
 8004506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	4b14      	ldr	r3, [pc, #80]	; (8004568 <HAL_UART_MspInit+0x10c>)
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	4a13      	ldr	r2, [pc, #76]	; (8004568 <HAL_UART_MspInit+0x10c>)
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	6313      	str	r3, [r2, #48]	; 0x30
 8004520:	4b11      	ldr	r3, [pc, #68]	; (8004568 <HAL_UART_MspInit+0x10c>)
 8004522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800452c:	230c      	movs	r3, #12
 800452e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004530:	2302      	movs	r3, #2
 8004532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004534:	2300      	movs	r3, #0
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004538:	2303      	movs	r3, #3
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800453c:	2307      	movs	r3, #7
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004540:	f107 031c 	add.w	r3, r7, #28
 8004544:	4619      	mov	r1, r3
 8004546:	4809      	ldr	r0, [pc, #36]	; (800456c <HAL_UART_MspInit+0x110>)
 8004548:	f001 f9fa 	bl	8005940 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800454c:	2200      	movs	r2, #0
 800454e:	2100      	movs	r1, #0
 8004550:	2026      	movs	r0, #38	; 0x26
 8004552:	f000 fdbc 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004556:	2026      	movs	r0, #38	; 0x26
 8004558:	f000 fdd5 	bl	8005106 <HAL_NVIC_EnableIRQ>
}
 800455c:	bf00      	nop
 800455e:	3730      	adds	r7, #48	; 0x30
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40011000 	.word	0x40011000
 8004568:	40023800 	.word	0x40023800
 800456c:	40020000 	.word	0x40020000
 8004570:	40004400 	.word	0x40004400

08004574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004578:	480d      	ldr	r0, [pc, #52]	; (80045b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800457a:	490e      	ldr	r1, [pc, #56]	; (80045b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800457c:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800457e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004580:	e002      	b.n	8004588 <LoopCopyDataInit>

08004582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004586:	3304      	adds	r3, #4

08004588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800458a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800458c:	d3f9      	bcc.n	8004582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800458e:	4a0b      	ldr	r2, [pc, #44]	; (80045bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004590:	4c0b      	ldr	r4, [pc, #44]	; (80045c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004594:	e001      	b.n	800459a <LoopFillZerobss>

08004596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004598:	3204      	adds	r2, #4

0800459a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800459a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800459c:	d3fb      	bcc.n	8004596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800459e:	f7ff fc97 	bl	8003ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045a2:	f005 fa1f 	bl	80099e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045a6:	f7fd fa3b 	bl	8001a20 <main>
  bx  lr    
 80045aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80045ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80045b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045b4:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 80045b8:	08011b5c 	.word	0x08011b5c
  ldr r2, =_sbss
 80045bc:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 80045c0:	200008c4 	.word	0x200008c4

080045c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045c4:	e7fe      	b.n	80045c4 <ADC_IRQHandler>
	...

080045c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045cc:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <HAL_Init+0x40>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0d      	ldr	r2, [pc, #52]	; (8004608 <HAL_Init+0x40>)
 80045d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_Init+0x40>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a0a      	ldr	r2, [pc, #40]	; (8004608 <HAL_Init+0x40>)
 80045de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045e4:	4b08      	ldr	r3, [pc, #32]	; (8004608 <HAL_Init+0x40>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a07      	ldr	r2, [pc, #28]	; (8004608 <HAL_Init+0x40>)
 80045ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045f0:	2003      	movs	r0, #3
 80045f2:	f000 fd61 	bl	80050b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045f6:	200f      	movs	r0, #15
 80045f8:	f000 f808 	bl	800460c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045fc:	f7ff fb28 	bl	8003c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40023c00 	.word	0x40023c00

0800460c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004614:	4b12      	ldr	r3, [pc, #72]	; (8004660 <HAL_InitTick+0x54>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4b12      	ldr	r3, [pc, #72]	; (8004664 <HAL_InitTick+0x58>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	4619      	mov	r1, r3
 800461e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004622:	fbb3 f3f1 	udiv	r3, r3, r1
 8004626:	fbb2 f3f3 	udiv	r3, r2, r3
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fd79 	bl	8005122 <HAL_SYSTICK_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e00e      	b.n	8004658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b0f      	cmp	r3, #15
 800463e:	d80a      	bhi.n	8004656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004640:	2200      	movs	r2, #0
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	f000 fd41 	bl	80050ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800464c:	4a06      	ldr	r2, [pc, #24]	; (8004668 <HAL_InitTick+0x5c>)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	e000      	b.n	8004658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	200000b4 	.word	0x200000b4
 8004664:	200000bc 	.word	0x200000bc
 8004668:	200000b8 	.word	0x200000b8

0800466c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004670:	4b06      	ldr	r3, [pc, #24]	; (800468c <HAL_IncTick+0x20>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	4b06      	ldr	r3, [pc, #24]	; (8004690 <HAL_IncTick+0x24>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4413      	add	r3, r2
 800467c:	4a04      	ldr	r2, [pc, #16]	; (8004690 <HAL_IncTick+0x24>)
 800467e:	6013      	str	r3, [r2, #0]
}
 8004680:	bf00      	nop
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	200000bc 	.word	0x200000bc
 8004690:	20000774 	.word	0x20000774

08004694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  return uwTick;
 8004698:	4b03      	ldr	r3, [pc, #12]	; (80046a8 <HAL_GetTick+0x14>)
 800469a:	681b      	ldr	r3, [r3, #0]
}
 800469c:	4618      	mov	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	20000774 	.word	0x20000774

080046ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046b4:	f7ff ffee 	bl	8004694 <HAL_GetTick>
 80046b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c4:	d005      	beq.n	80046d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046c6:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <HAL_Delay+0x44>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046d2:	bf00      	nop
 80046d4:	f7ff ffde 	bl	8004694 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d8f7      	bhi.n	80046d4 <HAL_Delay+0x28>
  {
  }
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200000bc 	.word	0x200000bc

080046f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e033      	b.n	8004772 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fb ffbc 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f003 0310 	and.w	r3, r3, #16
 800472e:	2b00      	cmp	r3, #0
 8004730:	d118      	bne.n	8004764 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800473a:	f023 0302 	bic.w	r3, r3, #2
 800473e:	f043 0202 	orr.w	r2, r3, #2
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fa68 	bl	8004c1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f023 0303 	bic.w	r3, r3, #3
 800475a:	f043 0201 	orr.w	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	641a      	str	r2, [r3, #64]	; 0x40
 8004762:	e001      	b.n	8004768 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004770:	7bfb      	ldrb	r3, [r7, #15]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_ADC_Start_DMA+0x1e>
 8004796:	2302      	movs	r3, #2
 8004798:	e0e9      	b.n	800496e <HAL_ADC_Start_DMA+0x1f2>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d018      	beq.n	80047e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80047c0:	4b6d      	ldr	r3, [pc, #436]	; (8004978 <HAL_ADC_Start_DMA+0x1fc>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a6d      	ldr	r2, [pc, #436]	; (800497c <HAL_ADC_Start_DMA+0x200>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	0c9a      	lsrs	r2, r3, #18
 80047cc:	4613      	mov	r3, r2
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	4413      	add	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80047d4:	e002      	b.n	80047dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	3b01      	subs	r3, #1
 80047da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f9      	bne.n	80047d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f0:	d107      	bne.n	8004802 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004800:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b01      	cmp	r3, #1
 800480e:	f040 80a1 	bne.w	8004954 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800481a:	f023 0301 	bic.w	r3, r3, #1
 800481e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004830:	2b00      	cmp	r3, #0
 8004832:	d007      	beq.n	8004844 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800483c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800484c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004850:	d106      	bne.n	8004860 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	f023 0206 	bic.w	r2, r3, #6
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	645a      	str	r2, [r3, #68]	; 0x44
 800485e:	e002      	b.n	8004866 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800486e:	4b44      	ldr	r3, [pc, #272]	; (8004980 <HAL_ADC_Start_DMA+0x204>)
 8004870:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	4a43      	ldr	r2, [pc, #268]	; (8004984 <HAL_ADC_Start_DMA+0x208>)
 8004878:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	4a42      	ldr	r2, [pc, #264]	; (8004988 <HAL_ADC_Start_DMA+0x20c>)
 8004880:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	4a41      	ldr	r2, [pc, #260]	; (800498c <HAL_ADC_Start_DMA+0x210>)
 8004888:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004892:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80048a2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	334c      	adds	r3, #76	; 0x4c
 80048be:	4619      	mov	r1, r3
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f000 fce8 	bl	8005298 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 031f 	and.w	r3, r3, #31
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d12a      	bne.n	800492a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a2d      	ldr	r2, [pc, #180]	; (8004990 <HAL_ADC_Start_DMA+0x214>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d015      	beq.n	800490a <HAL_ADC_Start_DMA+0x18e>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a2c      	ldr	r2, [pc, #176]	; (8004994 <HAL_ADC_Start_DMA+0x218>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d105      	bne.n	80048f4 <HAL_ADC_Start_DMA+0x178>
 80048e8:	4b25      	ldr	r3, [pc, #148]	; (8004980 <HAL_ADC_Start_DMA+0x204>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a27      	ldr	r2, [pc, #156]	; (8004998 <HAL_ADC_Start_DMA+0x21c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d136      	bne.n	800496c <HAL_ADC_Start_DMA+0x1f0>
 80048fe:	4b20      	ldr	r3, [pc, #128]	; (8004980 <HAL_ADC_Start_DMA+0x204>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b00      	cmp	r3, #0
 8004908:	d130      	bne.n	800496c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d129      	bne.n	800496c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004926:	609a      	str	r2, [r3, #8]
 8004928:	e020      	b.n	800496c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a18      	ldr	r2, [pc, #96]	; (8004990 <HAL_ADC_Start_DMA+0x214>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d11b      	bne.n	800496c <HAL_ADC_Start_DMA+0x1f0>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d114      	bne.n	800496c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004950:	609a      	str	r2, [r3, #8]
 8004952:	e00b      	b.n	800496c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	f043 0210 	orr.w	r2, r3, #16
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004964:	f043 0201 	orr.w	r2, r3, #1
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	200000b4 	.word	0x200000b4
 800497c:	431bde83 	.word	0x431bde83
 8004980:	40012300 	.word	0x40012300
 8004984:	08004e15 	.word	0x08004e15
 8004988:	08004ecf 	.word	0x08004ecf
 800498c:	08004eeb 	.word	0x08004eeb
 8004990:	40012000 	.word	0x40012000
 8004994:	40012100 	.word	0x40012100
 8004998:	40012200 	.word	0x40012200

0800499c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0x1c>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e105      	b.n	8004c00 <HAL_ADC_ConfigChannel+0x228>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b09      	cmp	r3, #9
 8004a02:	d925      	bls.n	8004a50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68d9      	ldr	r1, [r3, #12]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	4613      	mov	r3, r2
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	4413      	add	r3, r2
 8004a18:	3b1e      	subs	r3, #30
 8004a1a:	2207      	movs	r2, #7
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	43da      	mvns	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	400a      	ands	r2, r1
 8004a28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68d9      	ldr	r1, [r3, #12]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	4403      	add	r3, r0
 8004a42:	3b1e      	subs	r3, #30
 8004a44:	409a      	lsls	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	e022      	b.n	8004a96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6919      	ldr	r1, [r3, #16]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	4613      	mov	r3, r2
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	4413      	add	r3, r2
 8004a64:	2207      	movs	r2, #7
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43da      	mvns	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	400a      	ands	r2, r1
 8004a72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6919      	ldr	r1, [r3, #16]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	4618      	mov	r0, r3
 8004a86:	4603      	mov	r3, r0
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	4403      	add	r3, r0
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b06      	cmp	r3, #6
 8004a9c:	d824      	bhi.n	8004ae8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	3b05      	subs	r3, #5
 8004ab0:	221f      	movs	r2, #31
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	43da      	mvns	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	400a      	ands	r2, r1
 8004abe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	4618      	mov	r0, r3
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	3b05      	subs	r3, #5
 8004ada:	fa00 f203 	lsl.w	r2, r0, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ae6:	e04c      	b.n	8004b82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b0c      	cmp	r3, #12
 8004aee:	d824      	bhi.n	8004b3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	3b23      	subs	r3, #35	; 0x23
 8004b02:	221f      	movs	r2, #31
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	43da      	mvns	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	400a      	ands	r2, r1
 8004b10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	4618      	mov	r0, r3
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	3b23      	subs	r3, #35	; 0x23
 8004b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30
 8004b38:	e023      	b.n	8004b82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	3b41      	subs	r3, #65	; 0x41
 8004b4c:	221f      	movs	r2, #31
 8004b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b52:	43da      	mvns	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	400a      	ands	r2, r1
 8004b5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	4618      	mov	r0, r3
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	3b41      	subs	r3, #65	; 0x41
 8004b76:	fa00 f203 	lsl.w	r2, r0, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b82:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <HAL_ADC_ConfigChannel+0x234>)
 8004b84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a21      	ldr	r2, [pc, #132]	; (8004c10 <HAL_ADC_ConfigChannel+0x238>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d109      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x1cc>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b12      	cmp	r3, #18
 8004b96:	d105      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <HAL_ADC_ConfigChannel+0x238>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d123      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x21e>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b10      	cmp	r3, #16
 8004bb4:	d003      	beq.n	8004bbe <HAL_ADC_ConfigChannel+0x1e6>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b11      	cmp	r3, #17
 8004bbc:	d11b      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2b10      	cmp	r3, #16
 8004bd0:	d111      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004bd2:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <HAL_ADC_ConfigChannel+0x23c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a10      	ldr	r2, [pc, #64]	; (8004c18 <HAL_ADC_ConfigChannel+0x240>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	0c9a      	lsrs	r2, r3, #18
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004be8:	e002      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f9      	bne.n	8004bea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	40012300 	.word	0x40012300
 8004c10:	40012000 	.word	0x40012000
 8004c14:	200000b4 	.word	0x200000b4
 8004c18:	431bde83 	.word	0x431bde83

08004c1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c24:	4b79      	ldr	r3, [pc, #484]	; (8004e0c <ADC_Init+0x1f0>)
 8004c26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6859      	ldr	r1, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	021a      	lsls	r2, r3, #8
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004c74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6859      	ldr	r1, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6899      	ldr	r1, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cae:	4a58      	ldr	r2, [pc, #352]	; (8004e10 <ADC_Init+0x1f4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d022      	beq.n	8004cfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6899      	ldr	r1, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ce4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6899      	ldr	r1, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	609a      	str	r2, [r3, #8]
 8004cf8:	e00f      	b.n	8004d1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0202 	bic.w	r2, r2, #2
 8004d28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6899      	ldr	r1, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	7e1b      	ldrb	r3, [r3, #24]
 8004d34:	005a      	lsls	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01b      	beq.n	8004d80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6859      	ldr	r1, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	3b01      	subs	r3, #1
 8004d74:	035a      	lsls	r2, r3, #13
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	e007      	b.n	8004d90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	051a      	lsls	r2, r3, #20
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	430a      	orrs	r2, r1
 8004db4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004dc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6899      	ldr	r1, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004dd2:	025a      	lsls	r2, r3, #9
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6899      	ldr	r1, [r3, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	029a      	lsls	r2, r3, #10
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	609a      	str	r2, [r3, #8]
}
 8004e00:	bf00      	nop
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	40012300 	.word	0x40012300
 8004e10:	0f000001 	.word	0x0f000001

08004e14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d13c      	bne.n	8004ea8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d12b      	bne.n	8004ea0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d127      	bne.n	8004ea0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d006      	beq.n	8004e6c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d119      	bne.n	8004ea0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0220 	bic.w	r2, r2, #32
 8004e7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d105      	bne.n	8004ea0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	f043 0201 	orr.w	r2, r3, #1
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7ff fd7b 	bl	800499c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ea6:	e00e      	b.n	8004ec6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	f003 0310 	and.w	r3, r3, #16
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff fd85 	bl	80049c4 <HAL_ADC_ErrorCallback>
}
 8004eba:	e004      	b.n	8004ec6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	4798      	blx	r3
}
 8004ec6:	bf00      	nop
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff fd67 	bl	80049b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ee2:	bf00      	nop
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b084      	sub	sp, #16
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2240      	movs	r2, #64	; 0x40
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	f043 0204 	orr.w	r2, r3, #4
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f7ff fd5a 	bl	80049c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f28:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <__NVIC_SetPriorityGrouping+0x44>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f34:	4013      	ands	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f4a:	4a04      	ldr	r2, [pc, #16]	; (8004f5c <__NVIC_SetPriorityGrouping+0x44>)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	60d3      	str	r3, [r2, #12]
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	e000ed00 	.word	0xe000ed00

08004f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f64:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <__NVIC_GetPriorityGrouping+0x18>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	0a1b      	lsrs	r3, r3, #8
 8004f6a:	f003 0307 	and.w	r3, r3, #7
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	e000ed00 	.word	0xe000ed00

08004f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	db0b      	blt.n	8004fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	f003 021f 	and.w	r2, r3, #31
 8004f94:	4907      	ldr	r1, [pc, #28]	; (8004fb4 <__NVIC_EnableIRQ+0x38>)
 8004f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	e000e100 	.word	0xe000e100

08004fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	6039      	str	r1, [r7, #0]
 8004fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	db0a      	blt.n	8004fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	490c      	ldr	r1, [pc, #48]	; (8005004 <__NVIC_SetPriority+0x4c>)
 8004fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd6:	0112      	lsls	r2, r2, #4
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	440b      	add	r3, r1
 8004fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fe0:	e00a      	b.n	8004ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	4908      	ldr	r1, [pc, #32]	; (8005008 <__NVIC_SetPriority+0x50>)
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	3b04      	subs	r3, #4
 8004ff0:	0112      	lsls	r2, r2, #4
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	761a      	strb	r2, [r3, #24]
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	e000e100 	.word	0xe000e100
 8005008:	e000ed00 	.word	0xe000ed00

0800500c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800500c:	b480      	push	{r7}
 800500e:	b089      	sub	sp, #36	; 0x24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f1c3 0307 	rsb	r3, r3, #7
 8005026:	2b04      	cmp	r3, #4
 8005028:	bf28      	it	cs
 800502a:	2304      	movcs	r3, #4
 800502c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3304      	adds	r3, #4
 8005032:	2b06      	cmp	r3, #6
 8005034:	d902      	bls.n	800503c <NVIC_EncodePriority+0x30>
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	3b03      	subs	r3, #3
 800503a:	e000      	b.n	800503e <NVIC_EncodePriority+0x32>
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005040:	f04f 32ff 	mov.w	r2, #4294967295
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	43da      	mvns	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	401a      	ands	r2, r3
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005054:	f04f 31ff 	mov.w	r1, #4294967295
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	fa01 f303 	lsl.w	r3, r1, r3
 800505e:	43d9      	mvns	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005064:	4313      	orrs	r3, r2
         );
}
 8005066:	4618      	mov	r0, r3
 8005068:	3724      	adds	r7, #36	; 0x24
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3b01      	subs	r3, #1
 8005080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005084:	d301      	bcc.n	800508a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005086:	2301      	movs	r3, #1
 8005088:	e00f      	b.n	80050aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800508a:	4a0a      	ldr	r2, [pc, #40]	; (80050b4 <SysTick_Config+0x40>)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3b01      	subs	r3, #1
 8005090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005092:	210f      	movs	r1, #15
 8005094:	f04f 30ff 	mov.w	r0, #4294967295
 8005098:	f7ff ff8e 	bl	8004fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800509c:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <SysTick_Config+0x40>)
 800509e:	2200      	movs	r2, #0
 80050a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050a2:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <SysTick_Config+0x40>)
 80050a4:	2207      	movs	r2, #7
 80050a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	e000e010 	.word	0xe000e010

080050b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ff29 	bl	8004f18 <__NVIC_SetPriorityGrouping>
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b086      	sub	sp, #24
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	4603      	mov	r3, r0
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050e0:	f7ff ff3e 	bl	8004f60 <__NVIC_GetPriorityGrouping>
 80050e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	6978      	ldr	r0, [r7, #20]
 80050ec:	f7ff ff8e 	bl	800500c <NVIC_EncodePriority>
 80050f0:	4602      	mov	r2, r0
 80050f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f6:	4611      	mov	r1, r2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff ff5d 	bl	8004fb8 <__NVIC_SetPriority>
}
 80050fe:	bf00      	nop
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	4603      	mov	r3, r0
 800510e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff ff31 	bl	8004f7c <__NVIC_EnableIRQ>
}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff ffa2 	bl	8005074 <SysTick_Config>
 8005130:	4603      	mov	r3, r0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005148:	f7ff faa4 	bl	8004694 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e099      	b.n	800528c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005178:	e00f      	b.n	800519a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800517a:	f7ff fa8b 	bl	8004694 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b05      	cmp	r3, #5
 8005186:	d908      	bls.n	800519a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2203      	movs	r2, #3
 8005192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e078      	b.n	800528c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e8      	bne.n	800517a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4b38      	ldr	r3, [pc, #224]	; (8005294 <HAL_DMA_Init+0x158>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d107      	bne.n	8005204 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	4313      	orrs	r3, r2
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0307 	bic.w	r3, r3, #7
 800521a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	2b04      	cmp	r3, #4
 800522c:	d117      	bne.n	800525e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00e      	beq.n	800525e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fb01 	bl	8005848 <DMA_CheckFifoParam>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2240      	movs	r2, #64	; 0x40
 8005250:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800525a:	2301      	movs	r3, #1
 800525c:	e016      	b.n	800528c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fab8 	bl	80057dc <DMA_CalcBaseAndBitshift>
 800526c:	4603      	mov	r3, r0
 800526e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005274:	223f      	movs	r2, #63	; 0x3f
 8005276:	409a      	lsls	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	f010803f 	.word	0xf010803f

08005298 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_DMA_Start_IT+0x26>
 80052ba:	2302      	movs	r3, #2
 80052bc:	e040      	b.n	8005340 <HAL_DMA_Start_IT+0xa8>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d12f      	bne.n	8005332 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fa4a 	bl	8005780 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f0:	223f      	movs	r2, #63	; 0x3f
 80052f2:	409a      	lsls	r2, r3
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0216 	orr.w	r2, r2, #22
 8005306:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d007      	beq.n	8005320 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0208 	orr.w	r2, r2, #8
 800531e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	e005      	b.n	800533e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800533a:	2302      	movs	r3, #2
 800533c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800533e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005354:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005356:	f7ff f99d 	bl	8004694 <HAL_GetTick>
 800535a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d008      	beq.n	800537a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2280      	movs	r2, #128	; 0x80
 800536c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e052      	b.n	8005420 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0216 	bic.w	r2, r2, #22
 8005388:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005398:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <HAL_DMA_Abort+0x62>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d007      	beq.n	80053ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0208 	bic.w	r2, r2, #8
 80053b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0201 	bic.w	r2, r2, #1
 80053c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053ca:	e013      	b.n	80053f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053cc:	f7ff f962 	bl	8004694 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b05      	cmp	r3, #5
 80053d8:	d90c      	bls.n	80053f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2203      	movs	r2, #3
 80053e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e015      	b.n	8005420 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e4      	bne.n	80053cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005406:	223f      	movs	r2, #63	; 0x3f
 8005408:	409a      	lsls	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d004      	beq.n	8005446 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2280      	movs	r2, #128	; 0x80
 8005440:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e00c      	b.n	8005460 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2205      	movs	r2, #5
 800544a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0201 	bic.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005478:	4b8e      	ldr	r3, [pc, #568]	; (80056b4 <HAL_DMA_IRQHandler+0x248>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a8e      	ldr	r2, [pc, #568]	; (80056b8 <HAL_DMA_IRQHandler+0x24c>)
 800547e:	fba2 2303 	umull	r2, r3, r2, r3
 8005482:	0a9b      	lsrs	r3, r3, #10
 8005484:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005496:	2208      	movs	r2, #8
 8005498:	409a      	lsls	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4013      	ands	r3, r2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d01a      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d013      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0204 	bic.w	r2, r2, #4
 80054be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c4:	2208      	movs	r2, #8
 80054c6:	409a      	lsls	r2, r3
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d0:	f043 0201 	orr.w	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054dc:	2201      	movs	r2, #1
 80054de:	409a      	lsls	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4013      	ands	r3, r2
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d012      	beq.n	800550e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00b      	beq.n	800550e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fa:	2201      	movs	r2, #1
 80054fc:	409a      	lsls	r2, r3
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005506:	f043 0202 	orr.w	r2, r3, #2
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005512:	2204      	movs	r2, #4
 8005514:	409a      	lsls	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4013      	ands	r3, r2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d012      	beq.n	8005544 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0302 	and.w	r3, r3, #2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00b      	beq.n	8005544 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005530:	2204      	movs	r2, #4
 8005532:	409a      	lsls	r2, r3
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553c:	f043 0204 	orr.w	r2, r3, #4
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005548:	2210      	movs	r2, #16
 800554a:	409a      	lsls	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4013      	ands	r3, r2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d043      	beq.n	80055dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d03c      	beq.n	80055dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005566:	2210      	movs	r2, #16
 8005568:	409a      	lsls	r2, r3
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d018      	beq.n	80055ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d108      	bne.n	800559c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d024      	beq.n	80055dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	4798      	blx	r3
 800559a:	e01f      	b.n	80055dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01b      	beq.n	80055dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	4798      	blx	r3
 80055ac:	e016      	b.n	80055dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d107      	bne.n	80055cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0208 	bic.w	r2, r2, #8
 80055ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e0:	2220      	movs	r2, #32
 80055e2:	409a      	lsls	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4013      	ands	r3, r2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 808f 	beq.w	800570c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8087 	beq.w	800570c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005602:	2220      	movs	r2, #32
 8005604:	409a      	lsls	r2, r3
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b05      	cmp	r3, #5
 8005614:	d136      	bne.n	8005684 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0216 	bic.w	r2, r2, #22
 8005624:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695a      	ldr	r2, [r3, #20]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005634:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d103      	bne.n	8005646 <HAL_DMA_IRQHandler+0x1da>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0208 	bic.w	r2, r2, #8
 8005654:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565a:	223f      	movs	r2, #63	; 0x3f
 800565c:	409a      	lsls	r2, r3
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005676:	2b00      	cmp	r3, #0
 8005678:	d07e      	beq.n	8005778 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	4798      	blx	r3
        }
        return;
 8005682:	e079      	b.n	8005778 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01d      	beq.n	80056ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10d      	bne.n	80056bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d031      	beq.n	800570c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4798      	blx	r3
 80056b0:	e02c      	b.n	800570c <HAL_DMA_IRQHandler+0x2a0>
 80056b2:	bf00      	nop
 80056b4:	200000b4 	.word	0x200000b4
 80056b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d023      	beq.n	800570c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	4798      	blx	r3
 80056cc:	e01e      	b.n	800570c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10f      	bne.n	80056fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0210 	bic.w	r2, r2, #16
 80056ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005710:	2b00      	cmp	r3, #0
 8005712:	d032      	beq.n	800577a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d022      	beq.n	8005766 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2205      	movs	r2, #5
 8005724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0201 	bic.w	r2, r2, #1
 8005736:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	3301      	adds	r3, #1
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	429a      	cmp	r2, r3
 8005742:	d307      	bcc.n	8005754 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0301 	and.w	r3, r3, #1
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f2      	bne.n	8005738 <HAL_DMA_IRQHandler+0x2cc>
 8005752:	e000      	b.n	8005756 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005754:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2201      	movs	r2, #1
 800575a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	4798      	blx	r3
 8005776:	e000      	b.n	800577a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005778:	bf00      	nop
    }
  }
}
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800579c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d108      	bne.n	80057c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80057be:	e007      	b.n	80057d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	60da      	str	r2, [r3, #12]
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	3b10      	subs	r3, #16
 80057ec:	4a14      	ldr	r2, [pc, #80]	; (8005840 <DMA_CalcBaseAndBitshift+0x64>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	091b      	lsrs	r3, r3, #4
 80057f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80057f6:	4a13      	ldr	r2, [pc, #76]	; (8005844 <DMA_CalcBaseAndBitshift+0x68>)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b03      	cmp	r3, #3
 8005808:	d909      	bls.n	800581e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005812:	f023 0303 	bic.w	r3, r3, #3
 8005816:	1d1a      	adds	r2, r3, #4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	659a      	str	r2, [r3, #88]	; 0x58
 800581c:	e007      	b.n	800582e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005826:	f023 0303 	bic.w	r3, r3, #3
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	aaaaaaab 	.word	0xaaaaaaab
 8005844:	08011a64 	.word	0x08011a64

08005848 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005850:	2300      	movs	r3, #0
 8005852:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005858:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d11f      	bne.n	80058a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	2b03      	cmp	r3, #3
 8005866:	d856      	bhi.n	8005916 <DMA_CheckFifoParam+0xce>
 8005868:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <DMA_CheckFifoParam+0x28>)
 800586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586e:	bf00      	nop
 8005870:	08005881 	.word	0x08005881
 8005874:	08005893 	.word	0x08005893
 8005878:	08005881 	.word	0x08005881
 800587c:	08005917 	.word	0x08005917
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d046      	beq.n	800591a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005890:	e043      	b.n	800591a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800589a:	d140      	bne.n	800591e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058a0:	e03d      	b.n	800591e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058aa:	d121      	bne.n	80058f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d837      	bhi.n	8005922 <DMA_CheckFifoParam+0xda>
 80058b2:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <DMA_CheckFifoParam+0x70>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	080058c9 	.word	0x080058c9
 80058bc:	080058cf 	.word	0x080058cf
 80058c0:	080058c9 	.word	0x080058c9
 80058c4:	080058e1 	.word	0x080058e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	73fb      	strb	r3, [r7, #15]
      break;
 80058cc:	e030      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d025      	beq.n	8005926 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058de:	e022      	b.n	8005926 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058e8:	d11f      	bne.n	800592a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80058ee:	e01c      	b.n	800592a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d903      	bls.n	80058fe <DMA_CheckFifoParam+0xb6>
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d003      	beq.n	8005904 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80058fc:	e018      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	73fb      	strb	r3, [r7, #15]
      break;
 8005902:	e015      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00e      	beq.n	800592e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
      break;
 8005914:	e00b      	b.n	800592e <DMA_CheckFifoParam+0xe6>
      break;
 8005916:	bf00      	nop
 8005918:	e00a      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      break;
 800591a:	bf00      	nop
 800591c:	e008      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      break;
 800591e:	bf00      	nop
 8005920:	e006      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      break;
 8005922:	bf00      	nop
 8005924:	e004      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      break;
 8005926:	bf00      	nop
 8005928:	e002      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      break;   
 800592a:	bf00      	nop
 800592c:	e000      	b.n	8005930 <DMA_CheckFifoParam+0xe8>
      break;
 800592e:	bf00      	nop
    }
  } 
  
  return status; 
 8005930:	7bfb      	ldrb	r3, [r7, #15]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop

08005940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	; 0x24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800594e:	2300      	movs	r3, #0
 8005950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	e16b      	b.n	8005c34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800595c:	2201      	movs	r2, #1
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4013      	ands	r3, r2
 800596e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	429a      	cmp	r2, r3
 8005976:	f040 815a 	bne.w	8005c2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d005      	beq.n	8005992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800598e:	2b02      	cmp	r3, #2
 8005990:	d130      	bne.n	80059f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	2203      	movs	r2, #3
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059c8:	2201      	movs	r2, #1
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4013      	ands	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	091b      	lsrs	r3, r3, #4
 80059de:	f003 0201 	and.w	r2, r3, #1
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d017      	beq.n	8005a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	43db      	mvns	r3, r3
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	4013      	ands	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d123      	bne.n	8005a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	08da      	lsrs	r2, r3, #3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3208      	adds	r2, #8
 8005a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	220f      	movs	r2, #15
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	08da      	lsrs	r2, r3, #3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3208      	adds	r2, #8
 8005a7e:	69b9      	ldr	r1, [r7, #24]
 8005a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	2203      	movs	r2, #3
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	43db      	mvns	r3, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f003 0203 	and.w	r2, r3, #3
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80b4 	beq.w	8005c2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	4b60      	ldr	r3, [pc, #384]	; (8005c4c <HAL_GPIO_Init+0x30c>)
 8005acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ace:	4a5f      	ldr	r2, [pc, #380]	; (8005c4c <HAL_GPIO_Init+0x30c>)
 8005ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ad6:	4b5d      	ldr	r3, [pc, #372]	; (8005c4c <HAL_GPIO_Init+0x30c>)
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ae2:	4a5b      	ldr	r2, [pc, #364]	; (8005c50 <HAL_GPIO_Init+0x310>)
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	089b      	lsrs	r3, r3, #2
 8005ae8:	3302      	adds	r3, #2
 8005aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	220f      	movs	r2, #15
 8005afa:	fa02 f303 	lsl.w	r3, r2, r3
 8005afe:	43db      	mvns	r3, r3
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4013      	ands	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a52      	ldr	r2, [pc, #328]	; (8005c54 <HAL_GPIO_Init+0x314>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d02b      	beq.n	8005b66 <HAL_GPIO_Init+0x226>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a51      	ldr	r2, [pc, #324]	; (8005c58 <HAL_GPIO_Init+0x318>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d025      	beq.n	8005b62 <HAL_GPIO_Init+0x222>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a50      	ldr	r2, [pc, #320]	; (8005c5c <HAL_GPIO_Init+0x31c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d01f      	beq.n	8005b5e <HAL_GPIO_Init+0x21e>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a4f      	ldr	r2, [pc, #316]	; (8005c60 <HAL_GPIO_Init+0x320>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d019      	beq.n	8005b5a <HAL_GPIO_Init+0x21a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a4e      	ldr	r2, [pc, #312]	; (8005c64 <HAL_GPIO_Init+0x324>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <HAL_GPIO_Init+0x216>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a4d      	ldr	r2, [pc, #308]	; (8005c68 <HAL_GPIO_Init+0x328>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00d      	beq.n	8005b52 <HAL_GPIO_Init+0x212>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a4c      	ldr	r2, [pc, #304]	; (8005c6c <HAL_GPIO_Init+0x32c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d007      	beq.n	8005b4e <HAL_GPIO_Init+0x20e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a4b      	ldr	r2, [pc, #300]	; (8005c70 <HAL_GPIO_Init+0x330>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d101      	bne.n	8005b4a <HAL_GPIO_Init+0x20a>
 8005b46:	2307      	movs	r3, #7
 8005b48:	e00e      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b4a:	2308      	movs	r3, #8
 8005b4c:	e00c      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b4e:	2306      	movs	r3, #6
 8005b50:	e00a      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b52:	2305      	movs	r3, #5
 8005b54:	e008      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b56:	2304      	movs	r3, #4
 8005b58:	e006      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e004      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e002      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <HAL_GPIO_Init+0x228>
 8005b66:	2300      	movs	r3, #0
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	f002 0203 	and.w	r2, r2, #3
 8005b6e:	0092      	lsls	r2, r2, #2
 8005b70:	4093      	lsls	r3, r2
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b78:	4935      	ldr	r1, [pc, #212]	; (8005c50 <HAL_GPIO_Init+0x310>)
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	089b      	lsrs	r3, r3, #2
 8005b7e:	3302      	adds	r3, #2
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b86:	4b3b      	ldr	r3, [pc, #236]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	43db      	mvns	r3, r3
 8005b90:	69ba      	ldr	r2, [r7, #24]
 8005b92:	4013      	ands	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005baa:	4a32      	ldr	r2, [pc, #200]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005bb0:	4b30      	ldr	r3, [pc, #192]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005bd4:	4a27      	ldr	r2, [pc, #156]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bda:	4b26      	ldr	r3, [pc, #152]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bfe:	4a1d      	ldr	r2, [pc, #116]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c04:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4013      	ands	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c28:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <HAL_GPIO_Init+0x334>)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	3301      	adds	r3, #1
 8005c32:	61fb      	str	r3, [r7, #28]
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	2b0f      	cmp	r3, #15
 8005c38:	f67f ae90 	bls.w	800595c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	3724      	adds	r7, #36	; 0x24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	40013800 	.word	0x40013800
 8005c54:	40020000 	.word	0x40020000
 8005c58:	40020400 	.word	0x40020400
 8005c5c:	40020800 	.word	0x40020800
 8005c60:	40020c00 	.word	0x40020c00
 8005c64:	40021000 	.word	0x40021000
 8005c68:	40021400 	.word	0x40021400
 8005c6c:	40021800 	.word	0x40021800
 8005c70:	40021c00 	.word	0x40021c00
 8005c74:	40013c00 	.word	0x40013c00

08005c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	807b      	strh	r3, [r7, #2]
 8005c84:	4613      	mov	r3, r2
 8005c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c88:	787b      	ldrb	r3, [r7, #1]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c8e:	887a      	ldrh	r2, [r7, #2]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c94:	e003      	b.n	8005c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c96:	887b      	ldrh	r3, [r7, #2]
 8005c98:	041a      	lsls	r2, r3, #16
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	619a      	str	r2, [r3, #24]
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
	...

08005cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e12b      	b.n	8005f16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d106      	bne.n	8005cd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7fb f840 	bl	8000d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2224      	movs	r2, #36	; 0x24
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d10:	f000 fd80 	bl	8006814 <HAL_RCC_GetPCLK1Freq>
 8005d14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	4a81      	ldr	r2, [pc, #516]	; (8005f20 <HAL_I2C_Init+0x274>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d807      	bhi.n	8005d30 <HAL_I2C_Init+0x84>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a80      	ldr	r2, [pc, #512]	; (8005f24 <HAL_I2C_Init+0x278>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	bf94      	ite	ls
 8005d28:	2301      	movls	r3, #1
 8005d2a:	2300      	movhi	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	e006      	b.n	8005d3e <HAL_I2C_Init+0x92>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4a7d      	ldr	r2, [pc, #500]	; (8005f28 <HAL_I2C_Init+0x27c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	bf94      	ite	ls
 8005d38:	2301      	movls	r3, #1
 8005d3a:	2300      	movhi	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e0e7      	b.n	8005f16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4a78      	ldr	r2, [pc, #480]	; (8005f2c <HAL_I2C_Init+0x280>)
 8005d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4e:	0c9b      	lsrs	r3, r3, #18
 8005d50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	4a6a      	ldr	r2, [pc, #424]	; (8005f20 <HAL_I2C_Init+0x274>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d802      	bhi.n	8005d80 <HAL_I2C_Init+0xd4>
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	e009      	b.n	8005d94 <HAL_I2C_Init+0xe8>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d86:	fb02 f303 	mul.w	r3, r2, r3
 8005d8a:	4a69      	ldr	r2, [pc, #420]	; (8005f30 <HAL_I2C_Init+0x284>)
 8005d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d90:	099b      	lsrs	r3, r3, #6
 8005d92:	3301      	adds	r3, #1
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005da6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	495c      	ldr	r1, [pc, #368]	; (8005f20 <HAL_I2C_Init+0x274>)
 8005db0:	428b      	cmp	r3, r1
 8005db2:	d819      	bhi.n	8005de8 <HAL_I2C_Init+0x13c>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	1e59      	subs	r1, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dc2:	1c59      	adds	r1, r3, #1
 8005dc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005dc8:	400b      	ands	r3, r1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00a      	beq.n	8005de4 <HAL_I2C_Init+0x138>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1e59      	subs	r1, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	005b      	lsls	r3, r3, #1
 8005dd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ddc:	3301      	adds	r3, #1
 8005dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de2:	e051      	b.n	8005e88 <HAL_I2C_Init+0x1dc>
 8005de4:	2304      	movs	r3, #4
 8005de6:	e04f      	b.n	8005e88 <HAL_I2C_Init+0x1dc>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d111      	bne.n	8005e14 <HAL_I2C_Init+0x168>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	1e58      	subs	r0, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6859      	ldr	r1, [r3, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	440b      	add	r3, r1
 8005dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e02:	3301      	adds	r3, #1
 8005e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	bf0c      	ite	eq
 8005e0c:	2301      	moveq	r3, #1
 8005e0e:	2300      	movne	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	e012      	b.n	8005e3a <HAL_I2C_Init+0x18e>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	1e58      	subs	r0, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6859      	ldr	r1, [r3, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	440b      	add	r3, r1
 8005e22:	0099      	lsls	r1, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bf0c      	ite	eq
 8005e34:	2301      	moveq	r3, #1
 8005e36:	2300      	movne	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_I2C_Init+0x196>
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e022      	b.n	8005e88 <HAL_I2C_Init+0x1dc>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10e      	bne.n	8005e68 <HAL_I2C_Init+0x1bc>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	1e58      	subs	r0, r3, #1
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6859      	ldr	r1, [r3, #4]
 8005e52:	460b      	mov	r3, r1
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	440b      	add	r3, r1
 8005e58:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e66:	e00f      	b.n	8005e88 <HAL_I2C_Init+0x1dc>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	1e58      	subs	r0, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6859      	ldr	r1, [r3, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	440b      	add	r3, r1
 8005e76:	0099      	lsls	r1, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e7e:	3301      	adds	r3, #1
 8005e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	6809      	ldr	r1, [r1, #0]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005eb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6911      	ldr	r1, [r2, #16]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	68d2      	ldr	r2, [r2, #12]
 8005ec2:	4311      	orrs	r1, r2
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6812      	ldr	r2, [r2, #0]
 8005ec8:	430b      	orrs	r3, r1
 8005eca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695a      	ldr	r2, [r3, #20]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	000186a0 	.word	0x000186a0
 8005f24:	001e847f 	.word	0x001e847f
 8005f28:	003d08ff 	.word	0x003d08ff
 8005f2c:	431bde83 	.word	0x431bde83
 8005f30:	10624dd3 	.word	0x10624dd3

08005f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e267      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d075      	beq.n	800603e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f52:	4b88      	ldr	r3, [pc, #544]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 030c 	and.w	r3, r3, #12
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d00c      	beq.n	8005f78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f5e:	4b85      	ldr	r3, [pc, #532]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f66:	2b08      	cmp	r3, #8
 8005f68:	d112      	bne.n	8005f90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f6a:	4b82      	ldr	r3, [pc, #520]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f76:	d10b      	bne.n	8005f90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f78:	4b7e      	ldr	r3, [pc, #504]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d05b      	beq.n	800603c <HAL_RCC_OscConfig+0x108>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d157      	bne.n	800603c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e242      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f98:	d106      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x74>
 8005f9a:	4b76      	ldr	r3, [pc, #472]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a75      	ldr	r2, [pc, #468]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8005fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	e01d      	b.n	8005fe4 <HAL_RCC_OscConfig+0xb0>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fb0:	d10c      	bne.n	8005fcc <HAL_RCC_OscConfig+0x98>
 8005fb2:	4b70      	ldr	r3, [pc, #448]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a6f      	ldr	r2, [pc, #444]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8005fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fbc:	6013      	str	r3, [r2, #0]
 8005fbe:	4b6d      	ldr	r3, [pc, #436]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a6c      	ldr	r2, [pc, #432]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc8:	6013      	str	r3, [r2, #0]
 8005fca:	e00b      	b.n	8005fe4 <HAL_RCC_OscConfig+0xb0>
 8005fcc:	4b69      	ldr	r3, [pc, #420]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a68      	ldr	r2, [pc, #416]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8005fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	4b66      	ldr	r3, [pc, #408]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a65      	ldr	r2, [pc, #404]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8005fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d013      	beq.n	8006014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fec:	f7fe fb52 	bl	8004694 <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ff4:	f7fe fb4e 	bl	8004694 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b64      	cmp	r3, #100	; 0x64
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e207      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006006:	4b5b      	ldr	r3, [pc, #364]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f0      	beq.n	8005ff4 <HAL_RCC_OscConfig+0xc0>
 8006012:	e014      	b.n	800603e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006014:	f7fe fb3e 	bl	8004694 <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800601c:	f7fe fb3a 	bl	8004694 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b64      	cmp	r3, #100	; 0x64
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e1f3      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800602e:	4b51      	ldr	r3, [pc, #324]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1f0      	bne.n	800601c <HAL_RCC_OscConfig+0xe8>
 800603a:	e000      	b.n	800603e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800603c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d063      	beq.n	8006112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800604a:	4b4a      	ldr	r3, [pc, #296]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 030c 	and.w	r3, r3, #12
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00b      	beq.n	800606e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006056:	4b47      	ldr	r3, [pc, #284]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800605e:	2b08      	cmp	r3, #8
 8006060:	d11c      	bne.n	800609c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006062:	4b44      	ldr	r3, [pc, #272]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d116      	bne.n	800609c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800606e:	4b41      	ldr	r3, [pc, #260]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d005      	beq.n	8006086 <HAL_RCC_OscConfig+0x152>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d001      	beq.n	8006086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e1c7      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006086:	4b3b      	ldr	r3, [pc, #236]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	4937      	ldr	r1, [pc, #220]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8006096:	4313      	orrs	r3, r2
 8006098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800609a:	e03a      	b.n	8006112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d020      	beq.n	80060e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060a4:	4b34      	ldr	r3, [pc, #208]	; (8006178 <HAL_RCC_OscConfig+0x244>)
 80060a6:	2201      	movs	r2, #1
 80060a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060aa:	f7fe faf3 	bl	8004694 <HAL_GetTick>
 80060ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060b0:	e008      	b.n	80060c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060b2:	f7fe faef 	bl	8004694 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d901      	bls.n	80060c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e1a8      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060c4:	4b2b      	ldr	r3, [pc, #172]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0f0      	beq.n	80060b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060d0:	4b28      	ldr	r3, [pc, #160]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	4925      	ldr	r1, [pc, #148]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	600b      	str	r3, [r1, #0]
 80060e4:	e015      	b.n	8006112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060e6:	4b24      	ldr	r3, [pc, #144]	; (8006178 <HAL_RCC_OscConfig+0x244>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ec:	f7fe fad2 	bl	8004694 <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060f4:	f7fe face 	bl	8004694 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e187      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006106:	4b1b      	ldr	r3, [pc, #108]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1f0      	bne.n	80060f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0308 	and.w	r3, r3, #8
 800611a:	2b00      	cmp	r3, #0
 800611c:	d036      	beq.n	800618c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d016      	beq.n	8006154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006126:	4b15      	ldr	r3, [pc, #84]	; (800617c <HAL_RCC_OscConfig+0x248>)
 8006128:	2201      	movs	r2, #1
 800612a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800612c:	f7fe fab2 	bl	8004694 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006134:	f7fe faae 	bl	8004694 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e167      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006146:	4b0b      	ldr	r3, [pc, #44]	; (8006174 <HAL_RCC_OscConfig+0x240>)
 8006148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0f0      	beq.n	8006134 <HAL_RCC_OscConfig+0x200>
 8006152:	e01b      	b.n	800618c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006154:	4b09      	ldr	r3, [pc, #36]	; (800617c <HAL_RCC_OscConfig+0x248>)
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800615a:	f7fe fa9b 	bl	8004694 <HAL_GetTick>
 800615e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006160:	e00e      	b.n	8006180 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006162:	f7fe fa97 	bl	8004694 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d907      	bls.n	8006180 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e150      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
 8006174:	40023800 	.word	0x40023800
 8006178:	42470000 	.word	0x42470000
 800617c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006180:	4b88      	ldr	r3, [pc, #544]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 8006182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1ea      	bne.n	8006162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 8097 	beq.w	80062c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800619a:	2300      	movs	r3, #0
 800619c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800619e:	4b81      	ldr	r3, [pc, #516]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10f      	bne.n	80061ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061aa:	2300      	movs	r3, #0
 80061ac:	60bb      	str	r3, [r7, #8]
 80061ae:	4b7d      	ldr	r3, [pc, #500]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	4a7c      	ldr	r2, [pc, #496]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 80061b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b8:	6413      	str	r3, [r2, #64]	; 0x40
 80061ba:	4b7a      	ldr	r3, [pc, #488]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c2:	60bb      	str	r3, [r7, #8]
 80061c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061c6:	2301      	movs	r3, #1
 80061c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ca:	4b77      	ldr	r3, [pc, #476]	; (80063a8 <HAL_RCC_OscConfig+0x474>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d118      	bne.n	8006208 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061d6:	4b74      	ldr	r3, [pc, #464]	; (80063a8 <HAL_RCC_OscConfig+0x474>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a73      	ldr	r2, [pc, #460]	; (80063a8 <HAL_RCC_OscConfig+0x474>)
 80061dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061e2:	f7fe fa57 	bl	8004694 <HAL_GetTick>
 80061e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e8:	e008      	b.n	80061fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ea:	f7fe fa53 	bl	8004694 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e10c      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061fc:	4b6a      	ldr	r3, [pc, #424]	; (80063a8 <HAL_RCC_OscConfig+0x474>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0f0      	beq.n	80061ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d106      	bne.n	800621e <HAL_RCC_OscConfig+0x2ea>
 8006210:	4b64      	ldr	r3, [pc, #400]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 8006212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006214:	4a63      	ldr	r2, [pc, #396]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 8006216:	f043 0301 	orr.w	r3, r3, #1
 800621a:	6713      	str	r3, [r2, #112]	; 0x70
 800621c:	e01c      	b.n	8006258 <HAL_RCC_OscConfig+0x324>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	2b05      	cmp	r3, #5
 8006224:	d10c      	bne.n	8006240 <HAL_RCC_OscConfig+0x30c>
 8006226:	4b5f      	ldr	r3, [pc, #380]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 8006228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622a:	4a5e      	ldr	r2, [pc, #376]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 800622c:	f043 0304 	orr.w	r3, r3, #4
 8006230:	6713      	str	r3, [r2, #112]	; 0x70
 8006232:	4b5c      	ldr	r3, [pc, #368]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 8006234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006236:	4a5b      	ldr	r2, [pc, #364]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 8006238:	f043 0301 	orr.w	r3, r3, #1
 800623c:	6713      	str	r3, [r2, #112]	; 0x70
 800623e:	e00b      	b.n	8006258 <HAL_RCC_OscConfig+0x324>
 8006240:	4b58      	ldr	r3, [pc, #352]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 8006242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006244:	4a57      	ldr	r2, [pc, #348]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 8006246:	f023 0301 	bic.w	r3, r3, #1
 800624a:	6713      	str	r3, [r2, #112]	; 0x70
 800624c:	4b55      	ldr	r3, [pc, #340]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 800624e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006250:	4a54      	ldr	r2, [pc, #336]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 8006252:	f023 0304 	bic.w	r3, r3, #4
 8006256:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d015      	beq.n	800628c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006260:	f7fe fa18 	bl	8004694 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006266:	e00a      	b.n	800627e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006268:	f7fe fa14 	bl	8004694 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	f241 3288 	movw	r2, #5000	; 0x1388
 8006276:	4293      	cmp	r3, r2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e0cb      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800627e:	4b49      	ldr	r3, [pc, #292]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 8006280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0ee      	beq.n	8006268 <HAL_RCC_OscConfig+0x334>
 800628a:	e014      	b.n	80062b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800628c:	f7fe fa02 	bl	8004694 <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006292:	e00a      	b.n	80062aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006294:	f7fe f9fe 	bl	8004694 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e0b5      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062aa:	4b3e      	ldr	r3, [pc, #248]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 80062ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1ee      	bne.n	8006294 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062b6:	7dfb      	ldrb	r3, [r7, #23]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d105      	bne.n	80062c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062bc:	4b39      	ldr	r3, [pc, #228]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 80062be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c0:	4a38      	ldr	r2, [pc, #224]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 80062c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 80a1 	beq.w	8006414 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062d2:	4b34      	ldr	r3, [pc, #208]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 030c 	and.w	r3, r3, #12
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d05c      	beq.n	8006398 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d141      	bne.n	800636a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e6:	4b31      	ldr	r3, [pc, #196]	; (80063ac <HAL_RCC_OscConfig+0x478>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ec:	f7fe f9d2 	bl	8004694 <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062f4:	f7fe f9ce 	bl	8004694 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e087      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006306:	4b27      	ldr	r3, [pc, #156]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f0      	bne.n	80062f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69da      	ldr	r2, [r3, #28]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	431a      	orrs	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	019b      	lsls	r3, r3, #6
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006328:	085b      	lsrs	r3, r3, #1
 800632a:	3b01      	subs	r3, #1
 800632c:	041b      	lsls	r3, r3, #16
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	061b      	lsls	r3, r3, #24
 8006336:	491b      	ldr	r1, [pc, #108]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 8006338:	4313      	orrs	r3, r2
 800633a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800633c:	4b1b      	ldr	r3, [pc, #108]	; (80063ac <HAL_RCC_OscConfig+0x478>)
 800633e:	2201      	movs	r2, #1
 8006340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006342:	f7fe f9a7 	bl	8004694 <HAL_GetTick>
 8006346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006348:	e008      	b.n	800635c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800634a:	f7fe f9a3 	bl	8004694 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d901      	bls.n	800635c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e05c      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800635c:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0f0      	beq.n	800634a <HAL_RCC_OscConfig+0x416>
 8006368:	e054      	b.n	8006414 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800636a:	4b10      	ldr	r3, [pc, #64]	; (80063ac <HAL_RCC_OscConfig+0x478>)
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006370:	f7fe f990 	bl	8004694 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006378:	f7fe f98c 	bl	8004694 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e045      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800638a:	4b06      	ldr	r3, [pc, #24]	; (80063a4 <HAL_RCC_OscConfig+0x470>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1f0      	bne.n	8006378 <HAL_RCC_OscConfig+0x444>
 8006396:	e03d      	b.n	8006414 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d107      	bne.n	80063b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e038      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
 80063a4:	40023800 	.word	0x40023800
 80063a8:	40007000 	.word	0x40007000
 80063ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80063b0:	4b1b      	ldr	r3, [pc, #108]	; (8006420 <HAL_RCC_OscConfig+0x4ec>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d028      	beq.n	8006410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d121      	bne.n	8006410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d11a      	bne.n	8006410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063e0:	4013      	ands	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d111      	bne.n	8006410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	085b      	lsrs	r3, r3, #1
 80063f8:	3b01      	subs	r3, #1
 80063fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d107      	bne.n	8006410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800640c:	429a      	cmp	r2, r3
 800640e:	d001      	beq.n	8006414 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e000      	b.n	8006416 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	40023800 	.word	0x40023800

08006424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e0cc      	b.n	80065d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006438:	4b68      	ldr	r3, [pc, #416]	; (80065dc <HAL_RCC_ClockConfig+0x1b8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d90c      	bls.n	8006460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006446:	4b65      	ldr	r3, [pc, #404]	; (80065dc <HAL_RCC_ClockConfig+0x1b8>)
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800644e:	4b63      	ldr	r3, [pc, #396]	; (80065dc <HAL_RCC_ClockConfig+0x1b8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	429a      	cmp	r2, r3
 800645a:	d001      	beq.n	8006460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e0b8      	b.n	80065d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0302 	and.w	r3, r3, #2
 8006468:	2b00      	cmp	r3, #0
 800646a:	d020      	beq.n	80064ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006478:	4b59      	ldr	r3, [pc, #356]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	4a58      	ldr	r2, [pc, #352]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 800647e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006482:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b00      	cmp	r3, #0
 800648e:	d005      	beq.n	800649c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006490:	4b53      	ldr	r3, [pc, #332]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	4a52      	ldr	r2, [pc, #328]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006496:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800649a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800649c:	4b50      	ldr	r3, [pc, #320]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	494d      	ldr	r1, [pc, #308]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d044      	beq.n	8006544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d107      	bne.n	80064d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064c2:	4b47      	ldr	r3, [pc, #284]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d119      	bne.n	8006502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e07f      	b.n	80065d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d003      	beq.n	80064e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d107      	bne.n	80064f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064e2:	4b3f      	ldr	r3, [pc, #252]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d109      	bne.n	8006502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e06f      	b.n	80065d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f2:	4b3b      	ldr	r3, [pc, #236]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e067      	b.n	80065d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006502:	4b37      	ldr	r3, [pc, #220]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f023 0203 	bic.w	r2, r3, #3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	4934      	ldr	r1, [pc, #208]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006510:	4313      	orrs	r3, r2
 8006512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006514:	f7fe f8be 	bl	8004694 <HAL_GetTick>
 8006518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800651a:	e00a      	b.n	8006532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800651c:	f7fe f8ba 	bl	8004694 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	f241 3288 	movw	r2, #5000	; 0x1388
 800652a:	4293      	cmp	r3, r2
 800652c:	d901      	bls.n	8006532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e04f      	b.n	80065d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006532:	4b2b      	ldr	r3, [pc, #172]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 020c 	and.w	r2, r3, #12
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	429a      	cmp	r2, r3
 8006542:	d1eb      	bne.n	800651c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006544:	4b25      	ldr	r3, [pc, #148]	; (80065dc <HAL_RCC_ClockConfig+0x1b8>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d20c      	bcs.n	800656c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006552:	4b22      	ldr	r3, [pc, #136]	; (80065dc <HAL_RCC_ClockConfig+0x1b8>)
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800655a:	4b20      	ldr	r3, [pc, #128]	; (80065dc <HAL_RCC_ClockConfig+0x1b8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d001      	beq.n	800656c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e032      	b.n	80065d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b00      	cmp	r3, #0
 8006576:	d008      	beq.n	800658a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006578:	4b19      	ldr	r3, [pc, #100]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	4916      	ldr	r1, [pc, #88]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	4313      	orrs	r3, r2
 8006588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d009      	beq.n	80065aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006596:	4b12      	ldr	r3, [pc, #72]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	490e      	ldr	r1, [pc, #56]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065aa:	f000 f821 	bl	80065f0 <HAL_RCC_GetSysClockFreq>
 80065ae:	4602      	mov	r2, r0
 80065b0:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <HAL_RCC_ClockConfig+0x1bc>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	091b      	lsrs	r3, r3, #4
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	490a      	ldr	r1, [pc, #40]	; (80065e4 <HAL_RCC_ClockConfig+0x1c0>)
 80065bc:	5ccb      	ldrb	r3, [r1, r3]
 80065be:	fa22 f303 	lsr.w	r3, r2, r3
 80065c2:	4a09      	ldr	r2, [pc, #36]	; (80065e8 <HAL_RCC_ClockConfig+0x1c4>)
 80065c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065c6:	4b09      	ldr	r3, [pc, #36]	; (80065ec <HAL_RCC_ClockConfig+0x1c8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe f81e 	bl	800460c <HAL_InitTick>

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	40023c00 	.word	0x40023c00
 80065e0:	40023800 	.word	0x40023800
 80065e4:	08011a4c 	.word	0x08011a4c
 80065e8:	200000b4 	.word	0x200000b4
 80065ec:	200000b8 	.word	0x200000b8

080065f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065f4:	b094      	sub	sp, #80	; 0x50
 80065f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	647b      	str	r3, [r7, #68]	; 0x44
 80065fc:	2300      	movs	r3, #0
 80065fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006600:	2300      	movs	r3, #0
 8006602:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006608:	4b79      	ldr	r3, [pc, #484]	; (80067f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f003 030c 	and.w	r3, r3, #12
 8006610:	2b08      	cmp	r3, #8
 8006612:	d00d      	beq.n	8006630 <HAL_RCC_GetSysClockFreq+0x40>
 8006614:	2b08      	cmp	r3, #8
 8006616:	f200 80e1 	bhi.w	80067dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <HAL_RCC_GetSysClockFreq+0x34>
 800661e:	2b04      	cmp	r3, #4
 8006620:	d003      	beq.n	800662a <HAL_RCC_GetSysClockFreq+0x3a>
 8006622:	e0db      	b.n	80067dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006624:	4b73      	ldr	r3, [pc, #460]	; (80067f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006626:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006628:	e0db      	b.n	80067e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800662a:	4b73      	ldr	r3, [pc, #460]	; (80067f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800662c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800662e:	e0d8      	b.n	80067e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006630:	4b6f      	ldr	r3, [pc, #444]	; (80067f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006638:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800663a:	4b6d      	ldr	r3, [pc, #436]	; (80067f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d063      	beq.n	800670e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006646:	4b6a      	ldr	r3, [pc, #424]	; (80067f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	099b      	lsrs	r3, r3, #6
 800664c:	2200      	movs	r2, #0
 800664e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006650:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006658:	633b      	str	r3, [r7, #48]	; 0x30
 800665a:	2300      	movs	r3, #0
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
 800665e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006662:	4622      	mov	r2, r4
 8006664:	462b      	mov	r3, r5
 8006666:	f04f 0000 	mov.w	r0, #0
 800666a:	f04f 0100 	mov.w	r1, #0
 800666e:	0159      	lsls	r1, r3, #5
 8006670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006674:	0150      	lsls	r0, r2, #5
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	4621      	mov	r1, r4
 800667c:	1a51      	subs	r1, r2, r1
 800667e:	6139      	str	r1, [r7, #16]
 8006680:	4629      	mov	r1, r5
 8006682:	eb63 0301 	sbc.w	r3, r3, r1
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	f04f 0300 	mov.w	r3, #0
 8006690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006694:	4659      	mov	r1, fp
 8006696:	018b      	lsls	r3, r1, #6
 8006698:	4651      	mov	r1, sl
 800669a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800669e:	4651      	mov	r1, sl
 80066a0:	018a      	lsls	r2, r1, #6
 80066a2:	4651      	mov	r1, sl
 80066a4:	ebb2 0801 	subs.w	r8, r2, r1
 80066a8:	4659      	mov	r1, fp
 80066aa:	eb63 0901 	sbc.w	r9, r3, r1
 80066ae:	f04f 0200 	mov.w	r2, #0
 80066b2:	f04f 0300 	mov.w	r3, #0
 80066b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066c2:	4690      	mov	r8, r2
 80066c4:	4699      	mov	r9, r3
 80066c6:	4623      	mov	r3, r4
 80066c8:	eb18 0303 	adds.w	r3, r8, r3
 80066cc:	60bb      	str	r3, [r7, #8]
 80066ce:	462b      	mov	r3, r5
 80066d0:	eb49 0303 	adc.w	r3, r9, r3
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	f04f 0200 	mov.w	r2, #0
 80066da:	f04f 0300 	mov.w	r3, #0
 80066de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066e2:	4629      	mov	r1, r5
 80066e4:	024b      	lsls	r3, r1, #9
 80066e6:	4621      	mov	r1, r4
 80066e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066ec:	4621      	mov	r1, r4
 80066ee:	024a      	lsls	r2, r1, #9
 80066f0:	4610      	mov	r0, r2
 80066f2:	4619      	mov	r1, r3
 80066f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066f6:	2200      	movs	r2, #0
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006700:	f7f9 fdbe 	bl	8000280 <__aeabi_uldivmod>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	4613      	mov	r3, r2
 800670a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800670c:	e058      	b.n	80067c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800670e:	4b38      	ldr	r3, [pc, #224]	; (80067f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	099b      	lsrs	r3, r3, #6
 8006714:	2200      	movs	r2, #0
 8006716:	4618      	mov	r0, r3
 8006718:	4611      	mov	r1, r2
 800671a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800671e:	623b      	str	r3, [r7, #32]
 8006720:	2300      	movs	r3, #0
 8006722:	627b      	str	r3, [r7, #36]	; 0x24
 8006724:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006728:	4642      	mov	r2, r8
 800672a:	464b      	mov	r3, r9
 800672c:	f04f 0000 	mov.w	r0, #0
 8006730:	f04f 0100 	mov.w	r1, #0
 8006734:	0159      	lsls	r1, r3, #5
 8006736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800673a:	0150      	lsls	r0, r2, #5
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	4641      	mov	r1, r8
 8006742:	ebb2 0a01 	subs.w	sl, r2, r1
 8006746:	4649      	mov	r1, r9
 8006748:	eb63 0b01 	sbc.w	fp, r3, r1
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006758:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800675c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006760:	ebb2 040a 	subs.w	r4, r2, sl
 8006764:	eb63 050b 	sbc.w	r5, r3, fp
 8006768:	f04f 0200 	mov.w	r2, #0
 800676c:	f04f 0300 	mov.w	r3, #0
 8006770:	00eb      	lsls	r3, r5, #3
 8006772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006776:	00e2      	lsls	r2, r4, #3
 8006778:	4614      	mov	r4, r2
 800677a:	461d      	mov	r5, r3
 800677c:	4643      	mov	r3, r8
 800677e:	18e3      	adds	r3, r4, r3
 8006780:	603b      	str	r3, [r7, #0]
 8006782:	464b      	mov	r3, r9
 8006784:	eb45 0303 	adc.w	r3, r5, r3
 8006788:	607b      	str	r3, [r7, #4]
 800678a:	f04f 0200 	mov.w	r2, #0
 800678e:	f04f 0300 	mov.w	r3, #0
 8006792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006796:	4629      	mov	r1, r5
 8006798:	028b      	lsls	r3, r1, #10
 800679a:	4621      	mov	r1, r4
 800679c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067a0:	4621      	mov	r1, r4
 80067a2:	028a      	lsls	r2, r1, #10
 80067a4:	4610      	mov	r0, r2
 80067a6:	4619      	mov	r1, r3
 80067a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067aa:	2200      	movs	r2, #0
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	61fa      	str	r2, [r7, #28]
 80067b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067b4:	f7f9 fd64 	bl	8000280 <__aeabi_uldivmod>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4613      	mov	r3, r2
 80067be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067c0:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	0c1b      	lsrs	r3, r3, #16
 80067c6:	f003 0303 	and.w	r3, r3, #3
 80067ca:	3301      	adds	r3, #1
 80067cc:	005b      	lsls	r3, r3, #1
 80067ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80067d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067da:	e002      	b.n	80067e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067dc:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80067de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3750      	adds	r7, #80	; 0x50
 80067e8:	46bd      	mov	sp, r7
 80067ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ee:	bf00      	nop
 80067f0:	40023800 	.word	0x40023800
 80067f4:	00f42400 	.word	0x00f42400
 80067f8:	007a1200 	.word	0x007a1200

080067fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006800:	4b03      	ldr	r3, [pc, #12]	; (8006810 <HAL_RCC_GetHCLKFreq+0x14>)
 8006802:	681b      	ldr	r3, [r3, #0]
}
 8006804:	4618      	mov	r0, r3
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	200000b4 	.word	0x200000b4

08006814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006818:	f7ff fff0 	bl	80067fc <HAL_RCC_GetHCLKFreq>
 800681c:	4602      	mov	r2, r0
 800681e:	4b05      	ldr	r3, [pc, #20]	; (8006834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	0a9b      	lsrs	r3, r3, #10
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	4903      	ldr	r1, [pc, #12]	; (8006838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800682a:	5ccb      	ldrb	r3, [r1, r3]
 800682c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006830:	4618      	mov	r0, r3
 8006832:	bd80      	pop	{r7, pc}
 8006834:	40023800 	.word	0x40023800
 8006838:	08011a5c 	.word	0x08011a5c

0800683c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006840:	f7ff ffdc 	bl	80067fc <HAL_RCC_GetHCLKFreq>
 8006844:	4602      	mov	r2, r0
 8006846:	4b05      	ldr	r3, [pc, #20]	; (800685c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	0b5b      	lsrs	r3, r3, #13
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	4903      	ldr	r1, [pc, #12]	; (8006860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006852:	5ccb      	ldrb	r3, [r1, r3]
 8006854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006858:	4618      	mov	r0, r3
 800685a:	bd80      	pop	{r7, pc}
 800685c:	40023800 	.word	0x40023800
 8006860:	08011a5c 	.word	0x08011a5c

08006864 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e07b      	b.n	800696e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	2b00      	cmp	r3, #0
 800687c:	d108      	bne.n	8006890 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006886:	d009      	beq.n	800689c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	61da      	str	r2, [r3, #28]
 800688e:	e005      	b.n	800689c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d106      	bne.n	80068bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7fd f982 	bl	8003bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068e4:	431a      	orrs	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	431a      	orrs	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006920:	ea42 0103 	orr.w	r1, r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006928:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	0c1b      	lsrs	r3, r3, #16
 800693a:	f003 0104 	and.w	r1, r3, #4
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006942:	f003 0210 	and.w	r2, r3, #16
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	69da      	ldr	r2, [r3, #28]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800695c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b088      	sub	sp, #32
 800697a:	af00      	add	r7, sp, #0
 800697c:	60f8      	str	r0, [r7, #12]
 800697e:	60b9      	str	r1, [r7, #8]
 8006980:	603b      	str	r3, [r7, #0]
 8006982:	4613      	mov	r3, r2
 8006984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006990:	2b01      	cmp	r3, #1
 8006992:	d101      	bne.n	8006998 <HAL_SPI_Transmit+0x22>
 8006994:	2302      	movs	r3, #2
 8006996:	e126      	b.n	8006be6 <HAL_SPI_Transmit+0x270>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069a0:	f7fd fe78 	bl	8004694 <HAL_GetTick>
 80069a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80069a6:	88fb      	ldrh	r3, [r7, #6]
 80069a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d002      	beq.n	80069bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80069b6:	2302      	movs	r3, #2
 80069b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069ba:	e10b      	b.n	8006bd4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <HAL_SPI_Transmit+0x52>
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d102      	bne.n	80069ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069cc:	e102      	b.n	8006bd4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2203      	movs	r2, #3
 80069d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	88fa      	ldrh	r2, [r7, #6]
 80069e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	88fa      	ldrh	r2, [r7, #6]
 80069ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a14:	d10f      	bne.n	8006a36 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d007      	beq.n	8006a54 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a5c:	d14b      	bne.n	8006af6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <HAL_SPI_Transmit+0xf6>
 8006a66:	8afb      	ldrh	r3, [r7, #22]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d13e      	bne.n	8006aea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	881a      	ldrh	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	1c9a      	adds	r2, r3, #2
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a90:	e02b      	b.n	8006aea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d112      	bne.n	8006ac6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa4:	881a      	ldrh	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab0:	1c9a      	adds	r2, r3, #2
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	3b01      	subs	r3, #1
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ac4:	e011      	b.n	8006aea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ac6:	f7fd fde5 	bl	8004694 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d803      	bhi.n	8006ade <HAL_SPI_Transmit+0x168>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006adc:	d102      	bne.n	8006ae4 <HAL_SPI_Transmit+0x16e>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ae8:	e074      	b.n	8006bd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1ce      	bne.n	8006a92 <HAL_SPI_Transmit+0x11c>
 8006af4:	e04c      	b.n	8006b90 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <HAL_SPI_Transmit+0x18e>
 8006afe:	8afb      	ldrh	r3, [r7, #22]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d140      	bne.n	8006b86 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	330c      	adds	r3, #12
 8006b0e:	7812      	ldrb	r2, [r2, #0]
 8006b10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b2a:	e02c      	b.n	8006b86 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d113      	bne.n	8006b62 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	330c      	adds	r3, #12
 8006b44:	7812      	ldrb	r2, [r2, #0]
 8006b46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b60:	e011      	b.n	8006b86 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b62:	f7fd fd97 	bl	8004694 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d803      	bhi.n	8006b7a <HAL_SPI_Transmit+0x204>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d102      	bne.n	8006b80 <HAL_SPI_Transmit+0x20a>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d102      	bne.n	8006b86 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b84:	e026      	b.n	8006bd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1cd      	bne.n	8006b2c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 fbcb 	bl	8007330 <SPI_EndRxTxTransaction>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10a      	bne.n	8006bc4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bae:	2300      	movs	r3, #0
 8006bb0:	613b      	str	r3, [r7, #16]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	613b      	str	r3, [r7, #16]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d002      	beq.n	8006bd2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e000      	b.n	8006bd4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006bd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006be4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3720      	adds	r7, #32
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b088      	sub	sp, #32
 8006bf2:	af02      	add	r7, sp, #8
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	603b      	str	r3, [r7, #0]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c0a:	d112      	bne.n	8006c32 <HAL_SPI_Receive+0x44>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10e      	bne.n	8006c32 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2204      	movs	r2, #4
 8006c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c1c:	88fa      	ldrh	r2, [r7, #6]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	4613      	mov	r3, r2
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f8f1 	bl	8006e10 <HAL_SPI_TransmitReceive>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	e0ea      	b.n	8006e08 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_SPI_Receive+0x52>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e0e3      	b.n	8006e08 <HAL_SPI_Receive+0x21a>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c48:	f7fd fd24 	bl	8004694 <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d002      	beq.n	8006c60 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c5e:	e0ca      	b.n	8006df6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <HAL_SPI_Receive+0x7e>
 8006c66:	88fb      	ldrh	r3, [r7, #6]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d102      	bne.n	8006c72 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006c70:	e0c1      	b.n	8006df6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2204      	movs	r2, #4
 8006c76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	88fa      	ldrh	r2, [r7, #6]
 8006c8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	88fa      	ldrh	r2, [r7, #6]
 8006c90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cb8:	d10f      	bne.n	8006cda <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006cd8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b40      	cmp	r3, #64	; 0x40
 8006ce6:	d007      	beq.n	8006cf8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d162      	bne.n	8006dc6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d00:	e02e      	b.n	8006d60 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d115      	bne.n	8006d3c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f103 020c 	add.w	r2, r3, #12
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1c:	7812      	ldrb	r2, [r2, #0]
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	3b01      	subs	r3, #1
 8006d34:	b29a      	uxth	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d3a:	e011      	b.n	8006d60 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d3c:	f7fd fcaa 	bl	8004694 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d803      	bhi.n	8006d54 <HAL_SPI_Receive+0x166>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d52:	d102      	bne.n	8006d5a <HAL_SPI_Receive+0x16c>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d102      	bne.n	8006d60 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d5e:	e04a      	b.n	8006df6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1cb      	bne.n	8006d02 <HAL_SPI_Receive+0x114>
 8006d6a:	e031      	b.n	8006dd0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d113      	bne.n	8006da2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68da      	ldr	r2, [r3, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	b292      	uxth	r2, r2
 8006d86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8c:	1c9a      	adds	r2, r3, #2
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006da0:	e011      	b.n	8006dc6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006da2:	f7fd fc77 	bl	8004694 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d803      	bhi.n	8006dba <HAL_SPI_Receive+0x1cc>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db8:	d102      	bne.n	8006dc0 <HAL_SPI_Receive+0x1d2>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006dc4:	e017      	b.n	8006df6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1cd      	bne.n	8006d6c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 fa45 	bl	8007264 <SPI_EndRxTransaction>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2220      	movs	r2, #32
 8006de4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	75fb      	strb	r3, [r7, #23]
 8006df2:	e000      	b.n	8006df6 <HAL_SPI_Receive+0x208>
  }

error :
 8006df4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08c      	sub	sp, #48	; 0x30
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
 8006e1c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e22:	2300      	movs	r3, #0
 8006e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d101      	bne.n	8006e36 <HAL_SPI_TransmitReceive+0x26>
 8006e32:	2302      	movs	r3, #2
 8006e34:	e18a      	b.n	800714c <HAL_SPI_TransmitReceive+0x33c>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e3e:	f7fd fc29 	bl	8004694 <HAL_GetTick>
 8006e42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006e54:	887b      	ldrh	r3, [r7, #2]
 8006e56:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d00f      	beq.n	8006e80 <HAL_SPI_TransmitReceive+0x70>
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e66:	d107      	bne.n	8006e78 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d103      	bne.n	8006e78 <HAL_SPI_TransmitReceive+0x68>
 8006e70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d003      	beq.n	8006e80 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006e78:	2302      	movs	r3, #2
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e7e:	e15b      	b.n	8007138 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d005      	beq.n	8006e92 <HAL_SPI_TransmitReceive+0x82>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <HAL_SPI_TransmitReceive+0x82>
 8006e8c:	887b      	ldrh	r3, [r7, #2]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d103      	bne.n	8006e9a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e98:	e14e      	b.n	8007138 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	d003      	beq.n	8006eae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2205      	movs	r2, #5
 8006eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	887a      	ldrh	r2, [r7, #2]
 8006ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	887a      	ldrh	r2, [r7, #2]
 8006ec4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	887a      	ldrh	r2, [r7, #2]
 8006ed0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	887a      	ldrh	r2, [r7, #2]
 8006ed6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eee:	2b40      	cmp	r3, #64	; 0x40
 8006ef0:	d007      	beq.n	8006f02 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f0a:	d178      	bne.n	8006ffe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <HAL_SPI_TransmitReceive+0x10a>
 8006f14:	8b7b      	ldrh	r3, [r7, #26]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d166      	bne.n	8006fe8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1e:	881a      	ldrh	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2a:	1c9a      	adds	r2, r3, #2
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f3e:	e053      	b.n	8006fe8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d11b      	bne.n	8006f86 <HAL_SPI_TransmitReceive+0x176>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d016      	beq.n	8006f86 <HAL_SPI_TransmitReceive+0x176>
 8006f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d113      	bne.n	8006f86 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	881a      	ldrh	r2, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6e:	1c9a      	adds	r2, r3, #2
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f82:	2300      	movs	r3, #0
 8006f84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d119      	bne.n	8006fc8 <HAL_SPI_TransmitReceive+0x1b8>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d014      	beq.n	8006fc8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	b292      	uxth	r2, r2
 8006faa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	1c9a      	adds	r2, r3, #2
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fc8:	f7fd fb64 	bl	8004694 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d807      	bhi.n	8006fe8 <HAL_SPI_TransmitReceive+0x1d8>
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fde:	d003      	beq.n	8006fe8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006fe6:	e0a7      	b.n	8007138 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1a6      	bne.n	8006f40 <HAL_SPI_TransmitReceive+0x130>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1a1      	bne.n	8006f40 <HAL_SPI_TransmitReceive+0x130>
 8006ffc:	e07c      	b.n	80070f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <HAL_SPI_TransmitReceive+0x1fc>
 8007006:	8b7b      	ldrh	r3, [r7, #26]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d16b      	bne.n	80070e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	330c      	adds	r3, #12
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007028:	b29b      	uxth	r3, r3
 800702a:	3b01      	subs	r3, #1
 800702c:	b29a      	uxth	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007032:	e057      	b.n	80070e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b02      	cmp	r3, #2
 8007040:	d11c      	bne.n	800707c <HAL_SPI_TransmitReceive+0x26c>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007046:	b29b      	uxth	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d017      	beq.n	800707c <HAL_SPI_TransmitReceive+0x26c>
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	2b01      	cmp	r3, #1
 8007050:	d114      	bne.n	800707c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	330c      	adds	r3, #12
 800705c:	7812      	ldrb	r2, [r2, #0]
 800705e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b01      	cmp	r3, #1
 8007088:	d119      	bne.n	80070be <HAL_SPI_TransmitReceive+0x2ae>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	d014      	beq.n	80070be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80070ba:	2301      	movs	r3, #1
 80070bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80070be:	f7fd fae9 	bl	8004694 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d803      	bhi.n	80070d6 <HAL_SPI_TransmitReceive+0x2c6>
 80070ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d4:	d102      	bne.n	80070dc <HAL_SPI_TransmitReceive+0x2cc>
 80070d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d103      	bne.n	80070e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80070e2:	e029      	b.n	8007138 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1a2      	bne.n	8007034 <HAL_SPI_TransmitReceive+0x224>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d19d      	bne.n	8007034 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 f917 	bl	8007330 <SPI_EndRxTxTransaction>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d006      	beq.n	8007116 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2220      	movs	r2, #32
 8007112:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007114:	e010      	b.n	8007138 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10b      	bne.n	8007136 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800711e:	2300      	movs	r3, #0
 8007120:	617b      	str	r3, [r7, #20]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	617b      	str	r3, [r7, #20]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	617b      	str	r3, [r7, #20]
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	e000      	b.n	8007138 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007136:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007148:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800714c:	4618      	mov	r0, r3
 800714e:	3730      	adds	r7, #48	; 0x30
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	603b      	str	r3, [r7, #0]
 8007160:	4613      	mov	r3, r2
 8007162:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007164:	f7fd fa96 	bl	8004694 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	1a9b      	subs	r3, r3, r2
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	4413      	add	r3, r2
 8007172:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007174:	f7fd fa8e 	bl	8004694 <HAL_GetTick>
 8007178:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800717a:	4b39      	ldr	r3, [pc, #228]	; (8007260 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	015b      	lsls	r3, r3, #5
 8007180:	0d1b      	lsrs	r3, r3, #20
 8007182:	69fa      	ldr	r2, [r7, #28]
 8007184:	fb02 f303 	mul.w	r3, r2, r3
 8007188:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800718a:	e054      	b.n	8007236 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007192:	d050      	beq.n	8007236 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007194:	f7fd fa7e 	bl	8004694 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d902      	bls.n	80071aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d13d      	bne.n	8007226 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071c2:	d111      	bne.n	80071e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071cc:	d004      	beq.n	80071d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d6:	d107      	bne.n	80071e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071f0:	d10f      	bne.n	8007212 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007210:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e017      	b.n	8007256 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	3b01      	subs	r3, #1
 8007234:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	4013      	ands	r3, r2
 8007240:	68ba      	ldr	r2, [r7, #8]
 8007242:	429a      	cmp	r2, r3
 8007244:	bf0c      	ite	eq
 8007246:	2301      	moveq	r3, #1
 8007248:	2300      	movne	r3, #0
 800724a:	b2db      	uxtb	r3, r3
 800724c:	461a      	mov	r2, r3
 800724e:	79fb      	ldrb	r3, [r7, #7]
 8007250:	429a      	cmp	r2, r3
 8007252:	d19b      	bne.n	800718c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3720      	adds	r7, #32
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	200000b4 	.word	0x200000b4

08007264 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af02      	add	r7, sp, #8
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007278:	d111      	bne.n	800729e <SPI_EndRxTransaction+0x3a>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007282:	d004      	beq.n	800728e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800728c:	d107      	bne.n	800729e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800729c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072a6:	d12a      	bne.n	80072fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b0:	d012      	beq.n	80072d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2200      	movs	r2, #0
 80072ba:	2180      	movs	r1, #128	; 0x80
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f7ff ff49 	bl	8007154 <SPI_WaitFlagStateUntilTimeout>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d02d      	beq.n	8007324 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072cc:	f043 0220 	orr.w	r2, r3, #32
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e026      	b.n	8007326 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2200      	movs	r2, #0
 80072e0:	2101      	movs	r1, #1
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f7ff ff36 	bl	8007154 <SPI_WaitFlagStateUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d01a      	beq.n	8007324 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	f043 0220 	orr.w	r2, r3, #32
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e013      	b.n	8007326 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2200      	movs	r2, #0
 8007306:	2101      	movs	r1, #1
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f7ff ff23 	bl	8007154 <SPI_WaitFlagStateUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d007      	beq.n	8007324 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007318:	f043 0220 	orr.w	r2, r3, #32
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e000      	b.n	8007326 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af02      	add	r7, sp, #8
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800733c:	4b1b      	ldr	r3, [pc, #108]	; (80073ac <SPI_EndRxTxTransaction+0x7c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a1b      	ldr	r2, [pc, #108]	; (80073b0 <SPI_EndRxTxTransaction+0x80>)
 8007342:	fba2 2303 	umull	r2, r3, r2, r3
 8007346:	0d5b      	lsrs	r3, r3, #21
 8007348:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800734c:	fb02 f303 	mul.w	r3, r2, r3
 8007350:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800735a:	d112      	bne.n	8007382 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2200      	movs	r2, #0
 8007364:	2180      	movs	r1, #128	; 0x80
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f7ff fef4 	bl	8007154 <SPI_WaitFlagStateUntilTimeout>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d016      	beq.n	80073a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007376:	f043 0220 	orr.w	r2, r3, #32
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e00f      	b.n	80073a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00a      	beq.n	800739e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	3b01      	subs	r3, #1
 800738c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007398:	2b80      	cmp	r3, #128	; 0x80
 800739a:	d0f2      	beq.n	8007382 <SPI_EndRxTxTransaction+0x52>
 800739c:	e000      	b.n	80073a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800739e:	bf00      	nop
  }

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	200000b4 	.word	0x200000b4
 80073b0:	165e9f81 	.word	0x165e9f81

080073b4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e034      	b.n	8007434 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d106      	bne.n	80073e4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f7f9 fb48 	bl	8000a74 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3308      	adds	r3, #8
 80073ec:	4619      	mov	r1, r3
 80073ee:	4610      	mov	r0, r2
 80073f0:	f002 f84e 	bl	8009490 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	461a      	mov	r2, r3
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	f002 f898 	bl	8009534 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6858      	ldr	r0, [r3, #4]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007410:	6879      	ldr	r1, [r7, #4]
 8007412:	f002 f8cd 	bl	80095b0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	6892      	ldr	r2, [r2, #8]
 800741e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	6892      	ldr	r2, [r2, #8]
 800742a:	f041 0101 	orr.w	r1, r1, #1
 800742e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e041      	b.n	80074d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d106      	bne.n	8007468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7fc fe30 	bl	80040c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3304      	adds	r3, #4
 8007478:	4619      	mov	r1, r3
 800747a:	4610      	mov	r0, r2
 800747c:	f000 fc1a 	bl	8007cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d001      	beq.n	80074f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e046      	b.n	8007582 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a23      	ldr	r2, [pc, #140]	; (8007590 <HAL_TIM_Base_Start+0xb4>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d022      	beq.n	800754c <HAL_TIM_Base_Start+0x70>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800750e:	d01d      	beq.n	800754c <HAL_TIM_Base_Start+0x70>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a1f      	ldr	r2, [pc, #124]	; (8007594 <HAL_TIM_Base_Start+0xb8>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d018      	beq.n	800754c <HAL_TIM_Base_Start+0x70>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a1e      	ldr	r2, [pc, #120]	; (8007598 <HAL_TIM_Base_Start+0xbc>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d013      	beq.n	800754c <HAL_TIM_Base_Start+0x70>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a1c      	ldr	r2, [pc, #112]	; (800759c <HAL_TIM_Base_Start+0xc0>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00e      	beq.n	800754c <HAL_TIM_Base_Start+0x70>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a1b      	ldr	r2, [pc, #108]	; (80075a0 <HAL_TIM_Base_Start+0xc4>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d009      	beq.n	800754c <HAL_TIM_Base_Start+0x70>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a19      	ldr	r2, [pc, #100]	; (80075a4 <HAL_TIM_Base_Start+0xc8>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d004      	beq.n	800754c <HAL_TIM_Base_Start+0x70>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a18      	ldr	r2, [pc, #96]	; (80075a8 <HAL_TIM_Base_Start+0xcc>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d111      	bne.n	8007570 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b06      	cmp	r3, #6
 800755c:	d010      	beq.n	8007580 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f042 0201 	orr.w	r2, r2, #1
 800756c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800756e:	e007      	b.n	8007580 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0201 	orr.w	r2, r2, #1
 800757e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	40010000 	.word	0x40010000
 8007594:	40000400 	.word	0x40000400
 8007598:	40000800 	.word	0x40000800
 800759c:	40000c00 	.word	0x40000c00
 80075a0:	40010400 	.word	0x40010400
 80075a4:	40014000 	.word	0x40014000
 80075a8:	40001800 	.word	0x40001800

080075ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d001      	beq.n	80075c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e04e      	b.n	8007662 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f042 0201 	orr.w	r2, r2, #1
 80075da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a23      	ldr	r2, [pc, #140]	; (8007670 <HAL_TIM_Base_Start_IT+0xc4>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d022      	beq.n	800762c <HAL_TIM_Base_Start_IT+0x80>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ee:	d01d      	beq.n	800762c <HAL_TIM_Base_Start_IT+0x80>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a1f      	ldr	r2, [pc, #124]	; (8007674 <HAL_TIM_Base_Start_IT+0xc8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d018      	beq.n	800762c <HAL_TIM_Base_Start_IT+0x80>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a1e      	ldr	r2, [pc, #120]	; (8007678 <HAL_TIM_Base_Start_IT+0xcc>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d013      	beq.n	800762c <HAL_TIM_Base_Start_IT+0x80>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a1c      	ldr	r2, [pc, #112]	; (800767c <HAL_TIM_Base_Start_IT+0xd0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d00e      	beq.n	800762c <HAL_TIM_Base_Start_IT+0x80>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a1b      	ldr	r2, [pc, #108]	; (8007680 <HAL_TIM_Base_Start_IT+0xd4>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d009      	beq.n	800762c <HAL_TIM_Base_Start_IT+0x80>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a19      	ldr	r2, [pc, #100]	; (8007684 <HAL_TIM_Base_Start_IT+0xd8>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d004      	beq.n	800762c <HAL_TIM_Base_Start_IT+0x80>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a18      	ldr	r2, [pc, #96]	; (8007688 <HAL_TIM_Base_Start_IT+0xdc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d111      	bne.n	8007650 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2b06      	cmp	r3, #6
 800763c:	d010      	beq.n	8007660 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f042 0201 	orr.w	r2, r2, #1
 800764c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800764e:	e007      	b.n	8007660 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f042 0201 	orr.w	r2, r2, #1
 800765e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	40010000 	.word	0x40010000
 8007674:	40000400 	.word	0x40000400
 8007678:	40000800 	.word	0x40000800
 800767c:	40000c00 	.word	0x40000c00
 8007680:	40010400 	.word	0x40010400
 8007684:	40014000 	.word	0x40014000
 8007688:	40001800 	.word	0x40001800

0800768c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e041      	b.n	8007722 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d106      	bne.n	80076b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f839 	bl	800772a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	3304      	adds	r3, #4
 80076c8:	4619      	mov	r1, r3
 80076ca:	4610      	mov	r0, r2
 80076cc:	f000 faf2 	bl	8007cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	f003 0302 	and.w	r3, r3, #2
 8007750:	2b02      	cmp	r3, #2
 8007752:	d122      	bne.n	800779a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b02      	cmp	r3, #2
 8007760:	d11b      	bne.n	800779a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f06f 0202 	mvn.w	r2, #2
 800776a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	f003 0303 	and.w	r3, r3, #3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d003      	beq.n	8007788 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fa78 	bl	8007c76 <HAL_TIM_IC_CaptureCallback>
 8007786:	e005      	b.n	8007794 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fa6a 	bl	8007c62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa7b 	bl	8007c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	d122      	bne.n	80077ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f003 0304 	and.w	r3, r3, #4
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d11b      	bne.n	80077ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f06f 0204 	mvn.w	r2, #4
 80077be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fa4e 	bl	8007c76 <HAL_TIM_IC_CaptureCallback>
 80077da:	e005      	b.n	80077e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fa40 	bl	8007c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa51 	bl	8007c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f003 0308 	and.w	r3, r3, #8
 80077f8:	2b08      	cmp	r3, #8
 80077fa:	d122      	bne.n	8007842 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f003 0308 	and.w	r3, r3, #8
 8007806:	2b08      	cmp	r3, #8
 8007808:	d11b      	bne.n	8007842 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f06f 0208 	mvn.w	r2, #8
 8007812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2204      	movs	r2, #4
 8007818:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	f003 0303 	and.w	r3, r3, #3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fa24 	bl	8007c76 <HAL_TIM_IC_CaptureCallback>
 800782e:	e005      	b.n	800783c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fa16 	bl	8007c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fa27 	bl	8007c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	f003 0310 	and.w	r3, r3, #16
 800784c:	2b10      	cmp	r3, #16
 800784e:	d122      	bne.n	8007896 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	f003 0310 	and.w	r3, r3, #16
 800785a:	2b10      	cmp	r3, #16
 800785c:	d11b      	bne.n	8007896 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f06f 0210 	mvn.w	r2, #16
 8007866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2208      	movs	r2, #8
 800786c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f9fa 	bl	8007c76 <HAL_TIM_IC_CaptureCallback>
 8007882:	e005      	b.n	8007890 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f9ec 	bl	8007c62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f9fd 	bl	8007c8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d10e      	bne.n	80078c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d107      	bne.n	80078c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f06f 0201 	mvn.w	r2, #1
 80078ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7fc f903 	bl	8003ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078cc:	2b80      	cmp	r3, #128	; 0x80
 80078ce:	d10e      	bne.n	80078ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078da:	2b80      	cmp	r3, #128	; 0x80
 80078dc:	d107      	bne.n	80078ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fd53 	bl	8008394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f8:	2b40      	cmp	r3, #64	; 0x40
 80078fa:	d10e      	bne.n	800791a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007906:	2b40      	cmp	r3, #64	; 0x40
 8007908:	d107      	bne.n	800791a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f9c2 	bl	8007c9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	f003 0320 	and.w	r3, r3, #32
 8007924:	2b20      	cmp	r3, #32
 8007926:	d10e      	bne.n	8007946 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f003 0320 	and.w	r3, r3, #32
 8007932:	2b20      	cmp	r3, #32
 8007934:	d107      	bne.n	8007946 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f06f 0220 	mvn.w	r2, #32
 800793e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fd1d 	bl	8008380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007946:	bf00      	nop
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
	...

08007950 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007966:	2b01      	cmp	r3, #1
 8007968:	d101      	bne.n	800796e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800796a:	2302      	movs	r3, #2
 800796c:	e0ae      	b.n	8007acc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b0c      	cmp	r3, #12
 800797a:	f200 809f 	bhi.w	8007abc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800797e:	a201      	add	r2, pc, #4	; (adr r2, 8007984 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007984:	080079b9 	.word	0x080079b9
 8007988:	08007abd 	.word	0x08007abd
 800798c:	08007abd 	.word	0x08007abd
 8007990:	08007abd 	.word	0x08007abd
 8007994:	080079f9 	.word	0x080079f9
 8007998:	08007abd 	.word	0x08007abd
 800799c:	08007abd 	.word	0x08007abd
 80079a0:	08007abd 	.word	0x08007abd
 80079a4:	08007a3b 	.word	0x08007a3b
 80079a8:	08007abd 	.word	0x08007abd
 80079ac:	08007abd 	.word	0x08007abd
 80079b0:	08007abd 	.word	0x08007abd
 80079b4:	08007a7b 	.word	0x08007a7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fa18 	bl	8007df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	699a      	ldr	r2, [r3, #24]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f042 0208 	orr.w	r2, r2, #8
 80079d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	699a      	ldr	r2, [r3, #24]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f022 0204 	bic.w	r2, r2, #4
 80079e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6999      	ldr	r1, [r3, #24]
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	691a      	ldr	r2, [r3, #16]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	619a      	str	r2, [r3, #24]
      break;
 80079f6:	e064      	b.n	8007ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68b9      	ldr	r1, [r7, #8]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 fa68 	bl	8007ed4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699a      	ldr	r2, [r3, #24]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699a      	ldr	r2, [r3, #24]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6999      	ldr	r1, [r3, #24]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	021a      	lsls	r2, r3, #8
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	430a      	orrs	r2, r1
 8007a36:	619a      	str	r2, [r3, #24]
      break;
 8007a38:	e043      	b.n	8007ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68b9      	ldr	r1, [r7, #8]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 fabd 	bl	8007fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	69da      	ldr	r2, [r3, #28]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f042 0208 	orr.w	r2, r2, #8
 8007a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	69da      	ldr	r2, [r3, #28]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f022 0204 	bic.w	r2, r2, #4
 8007a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69d9      	ldr	r1, [r3, #28]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	691a      	ldr	r2, [r3, #16]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	430a      	orrs	r2, r1
 8007a76:	61da      	str	r2, [r3, #28]
      break;
 8007a78:	e023      	b.n	8007ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68b9      	ldr	r1, [r7, #8]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 fb11 	bl	80080a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69da      	ldr	r2, [r3, #28]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	69da      	ldr	r2, [r3, #28]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69d9      	ldr	r1, [r3, #28]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	021a      	lsls	r2, r3, #8
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	61da      	str	r2, [r3, #28]
      break;
 8007aba:	e002      	b.n	8007ac2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	75fb      	strb	r3, [r7, #23]
      break;
 8007ac0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d101      	bne.n	8007af0 <HAL_TIM_ConfigClockSource+0x1c>
 8007aec:	2302      	movs	r3, #2
 8007aee:	e0b4      	b.n	8007c5a <HAL_TIM_ConfigClockSource+0x186>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b28:	d03e      	beq.n	8007ba8 <HAL_TIM_ConfigClockSource+0xd4>
 8007b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2e:	f200 8087 	bhi.w	8007c40 <HAL_TIM_ConfigClockSource+0x16c>
 8007b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b36:	f000 8086 	beq.w	8007c46 <HAL_TIM_ConfigClockSource+0x172>
 8007b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b3e:	d87f      	bhi.n	8007c40 <HAL_TIM_ConfigClockSource+0x16c>
 8007b40:	2b70      	cmp	r3, #112	; 0x70
 8007b42:	d01a      	beq.n	8007b7a <HAL_TIM_ConfigClockSource+0xa6>
 8007b44:	2b70      	cmp	r3, #112	; 0x70
 8007b46:	d87b      	bhi.n	8007c40 <HAL_TIM_ConfigClockSource+0x16c>
 8007b48:	2b60      	cmp	r3, #96	; 0x60
 8007b4a:	d050      	beq.n	8007bee <HAL_TIM_ConfigClockSource+0x11a>
 8007b4c:	2b60      	cmp	r3, #96	; 0x60
 8007b4e:	d877      	bhi.n	8007c40 <HAL_TIM_ConfigClockSource+0x16c>
 8007b50:	2b50      	cmp	r3, #80	; 0x50
 8007b52:	d03c      	beq.n	8007bce <HAL_TIM_ConfigClockSource+0xfa>
 8007b54:	2b50      	cmp	r3, #80	; 0x50
 8007b56:	d873      	bhi.n	8007c40 <HAL_TIM_ConfigClockSource+0x16c>
 8007b58:	2b40      	cmp	r3, #64	; 0x40
 8007b5a:	d058      	beq.n	8007c0e <HAL_TIM_ConfigClockSource+0x13a>
 8007b5c:	2b40      	cmp	r3, #64	; 0x40
 8007b5e:	d86f      	bhi.n	8007c40 <HAL_TIM_ConfigClockSource+0x16c>
 8007b60:	2b30      	cmp	r3, #48	; 0x30
 8007b62:	d064      	beq.n	8007c2e <HAL_TIM_ConfigClockSource+0x15a>
 8007b64:	2b30      	cmp	r3, #48	; 0x30
 8007b66:	d86b      	bhi.n	8007c40 <HAL_TIM_ConfigClockSource+0x16c>
 8007b68:	2b20      	cmp	r3, #32
 8007b6a:	d060      	beq.n	8007c2e <HAL_TIM_ConfigClockSource+0x15a>
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	d867      	bhi.n	8007c40 <HAL_TIM_ConfigClockSource+0x16c>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d05c      	beq.n	8007c2e <HAL_TIM_ConfigClockSource+0x15a>
 8007b74:	2b10      	cmp	r3, #16
 8007b76:	d05a      	beq.n	8007c2e <HAL_TIM_ConfigClockSource+0x15a>
 8007b78:	e062      	b.n	8007c40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6818      	ldr	r0, [r3, #0]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	6899      	ldr	r1, [r3, #8]
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	f000 fb5d 	bl	8008248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	609a      	str	r2, [r3, #8]
      break;
 8007ba6:	e04f      	b.n	8007c48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6818      	ldr	r0, [r3, #0]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	6899      	ldr	r1, [r3, #8]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	f000 fb46 	bl	8008248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689a      	ldr	r2, [r3, #8]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bca:	609a      	str	r2, [r3, #8]
      break;
 8007bcc:	e03c      	b.n	8007c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	6859      	ldr	r1, [r3, #4]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f000 faba 	bl	8008154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2150      	movs	r1, #80	; 0x50
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fb13 	bl	8008212 <TIM_ITRx_SetConfig>
      break;
 8007bec:	e02c      	b.n	8007c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	6859      	ldr	r1, [r3, #4]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f000 fad9 	bl	80081b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2160      	movs	r1, #96	; 0x60
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 fb03 	bl	8008212 <TIM_ITRx_SetConfig>
      break;
 8007c0c:	e01c      	b.n	8007c48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	6859      	ldr	r1, [r3, #4]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	f000 fa9a 	bl	8008154 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2140      	movs	r1, #64	; 0x40
 8007c26:	4618      	mov	r0, r3
 8007c28:	f000 faf3 	bl	8008212 <TIM_ITRx_SetConfig>
      break;
 8007c2c:	e00c      	b.n	8007c48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4619      	mov	r1, r3
 8007c38:	4610      	mov	r0, r2
 8007c3a:	f000 faea 	bl	8008212 <TIM_ITRx_SetConfig>
      break;
 8007c3e:	e003      	b.n	8007c48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	73fb      	strb	r3, [r7, #15]
      break;
 8007c44:	e000      	b.n	8007c48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b083      	sub	sp, #12
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c7e:	bf00      	nop
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b083      	sub	sp, #12
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c92:	bf00      	nop
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ca6:	bf00      	nop
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
	...

08007cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a40      	ldr	r2, [pc, #256]	; (8007dc8 <TIM_Base_SetConfig+0x114>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d013      	beq.n	8007cf4 <TIM_Base_SetConfig+0x40>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd2:	d00f      	beq.n	8007cf4 <TIM_Base_SetConfig+0x40>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a3d      	ldr	r2, [pc, #244]	; (8007dcc <TIM_Base_SetConfig+0x118>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d00b      	beq.n	8007cf4 <TIM_Base_SetConfig+0x40>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a3c      	ldr	r2, [pc, #240]	; (8007dd0 <TIM_Base_SetConfig+0x11c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d007      	beq.n	8007cf4 <TIM_Base_SetConfig+0x40>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a3b      	ldr	r2, [pc, #236]	; (8007dd4 <TIM_Base_SetConfig+0x120>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d003      	beq.n	8007cf4 <TIM_Base_SetConfig+0x40>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a3a      	ldr	r2, [pc, #232]	; (8007dd8 <TIM_Base_SetConfig+0x124>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d108      	bne.n	8007d06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a2f      	ldr	r2, [pc, #188]	; (8007dc8 <TIM_Base_SetConfig+0x114>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d02b      	beq.n	8007d66 <TIM_Base_SetConfig+0xb2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d14:	d027      	beq.n	8007d66 <TIM_Base_SetConfig+0xb2>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a2c      	ldr	r2, [pc, #176]	; (8007dcc <TIM_Base_SetConfig+0x118>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d023      	beq.n	8007d66 <TIM_Base_SetConfig+0xb2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a2b      	ldr	r2, [pc, #172]	; (8007dd0 <TIM_Base_SetConfig+0x11c>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d01f      	beq.n	8007d66 <TIM_Base_SetConfig+0xb2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a2a      	ldr	r2, [pc, #168]	; (8007dd4 <TIM_Base_SetConfig+0x120>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d01b      	beq.n	8007d66 <TIM_Base_SetConfig+0xb2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a29      	ldr	r2, [pc, #164]	; (8007dd8 <TIM_Base_SetConfig+0x124>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d017      	beq.n	8007d66 <TIM_Base_SetConfig+0xb2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a28      	ldr	r2, [pc, #160]	; (8007ddc <TIM_Base_SetConfig+0x128>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d013      	beq.n	8007d66 <TIM_Base_SetConfig+0xb2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a27      	ldr	r2, [pc, #156]	; (8007de0 <TIM_Base_SetConfig+0x12c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d00f      	beq.n	8007d66 <TIM_Base_SetConfig+0xb2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a26      	ldr	r2, [pc, #152]	; (8007de4 <TIM_Base_SetConfig+0x130>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d00b      	beq.n	8007d66 <TIM_Base_SetConfig+0xb2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a25      	ldr	r2, [pc, #148]	; (8007de8 <TIM_Base_SetConfig+0x134>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d007      	beq.n	8007d66 <TIM_Base_SetConfig+0xb2>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a24      	ldr	r2, [pc, #144]	; (8007dec <TIM_Base_SetConfig+0x138>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d003      	beq.n	8007d66 <TIM_Base_SetConfig+0xb2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	4a23      	ldr	r2, [pc, #140]	; (8007df0 <TIM_Base_SetConfig+0x13c>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d108      	bne.n	8007d78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a0a      	ldr	r2, [pc, #40]	; (8007dc8 <TIM_Base_SetConfig+0x114>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d003      	beq.n	8007dac <TIM_Base_SetConfig+0xf8>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a0c      	ldr	r2, [pc, #48]	; (8007dd8 <TIM_Base_SetConfig+0x124>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d103      	bne.n	8007db4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	691a      	ldr	r2, [r3, #16]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	615a      	str	r2, [r3, #20]
}
 8007dba:	bf00      	nop
 8007dbc:	3714      	adds	r7, #20
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	40010000 	.word	0x40010000
 8007dcc:	40000400 	.word	0x40000400
 8007dd0:	40000800 	.word	0x40000800
 8007dd4:	40000c00 	.word	0x40000c00
 8007dd8:	40010400 	.word	0x40010400
 8007ddc:	40014000 	.word	0x40014000
 8007de0:	40014400 	.word	0x40014400
 8007de4:	40014800 	.word	0x40014800
 8007de8:	40001800 	.word	0x40001800
 8007dec:	40001c00 	.word	0x40001c00
 8007df0:	40002000 	.word	0x40002000

08007df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	f023 0201 	bic.w	r2, r3, #1
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0303 	bic.w	r3, r3, #3
 8007e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f023 0302 	bic.w	r3, r3, #2
 8007e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a20      	ldr	r2, [pc, #128]	; (8007ecc <TIM_OC1_SetConfig+0xd8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d003      	beq.n	8007e58 <TIM_OC1_SetConfig+0x64>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a1f      	ldr	r2, [pc, #124]	; (8007ed0 <TIM_OC1_SetConfig+0xdc>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d10c      	bne.n	8007e72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f023 0308 	bic.w	r3, r3, #8
 8007e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f023 0304 	bic.w	r3, r3, #4
 8007e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a15      	ldr	r2, [pc, #84]	; (8007ecc <TIM_OC1_SetConfig+0xd8>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d003      	beq.n	8007e82 <TIM_OC1_SetConfig+0x8e>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a14      	ldr	r2, [pc, #80]	; (8007ed0 <TIM_OC1_SetConfig+0xdc>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d111      	bne.n	8007ea6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	621a      	str	r2, [r3, #32]
}
 8007ec0:	bf00      	nop
 8007ec2:	371c      	adds	r7, #28
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	40010000 	.word	0x40010000
 8007ed0:	40010400 	.word	0x40010400

08007ed4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	f023 0210 	bic.w	r2, r3, #16
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	021b      	lsls	r3, r3, #8
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f023 0320 	bic.w	r3, r3, #32
 8007f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	011b      	lsls	r3, r3, #4
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a22      	ldr	r2, [pc, #136]	; (8007fb8 <TIM_OC2_SetConfig+0xe4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d003      	beq.n	8007f3c <TIM_OC2_SetConfig+0x68>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a21      	ldr	r2, [pc, #132]	; (8007fbc <TIM_OC2_SetConfig+0xe8>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d10d      	bne.n	8007f58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	011b      	lsls	r3, r3, #4
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a17      	ldr	r2, [pc, #92]	; (8007fb8 <TIM_OC2_SetConfig+0xe4>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d003      	beq.n	8007f68 <TIM_OC2_SetConfig+0x94>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a16      	ldr	r2, [pc, #88]	; (8007fbc <TIM_OC2_SetConfig+0xe8>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d113      	bne.n	8007f90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	621a      	str	r2, [r3, #32]
}
 8007faa:	bf00      	nop
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	40010000 	.word	0x40010000
 8007fbc:	40010400 	.word	0x40010400

08007fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 0303 	bic.w	r3, r3, #3
 8007ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	021b      	lsls	r3, r3, #8
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	4313      	orrs	r3, r2
 8008014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a21      	ldr	r2, [pc, #132]	; (80080a0 <TIM_OC3_SetConfig+0xe0>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d003      	beq.n	8008026 <TIM_OC3_SetConfig+0x66>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a20      	ldr	r2, [pc, #128]	; (80080a4 <TIM_OC3_SetConfig+0xe4>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d10d      	bne.n	8008042 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800802c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	021b      	lsls	r3, r3, #8
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	4313      	orrs	r3, r2
 8008038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a16      	ldr	r2, [pc, #88]	; (80080a0 <TIM_OC3_SetConfig+0xe0>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d003      	beq.n	8008052 <TIM_OC3_SetConfig+0x92>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a15      	ldr	r2, [pc, #84]	; (80080a4 <TIM_OC3_SetConfig+0xe4>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d113      	bne.n	800807a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4313      	orrs	r3, r2
 800806c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	011b      	lsls	r3, r3, #4
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	4313      	orrs	r3, r2
 8008078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	621a      	str	r2, [r3, #32]
}
 8008094:	bf00      	nop
 8008096:	371c      	adds	r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	40010000 	.word	0x40010000
 80080a4:	40010400 	.word	0x40010400

080080a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a1b      	ldr	r3, [r3, #32]
 80080c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	021b      	lsls	r3, r3, #8
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	031b      	lsls	r3, r3, #12
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a12      	ldr	r2, [pc, #72]	; (800814c <TIM_OC4_SetConfig+0xa4>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_OC4_SetConfig+0x68>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a11      	ldr	r2, [pc, #68]	; (8008150 <TIM_OC4_SetConfig+0xa8>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d109      	bne.n	8008124 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	019b      	lsls	r3, r3, #6
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	4313      	orrs	r3, r2
 8008122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	621a      	str	r2, [r3, #32]
}
 800813e:	bf00      	nop
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	40010000 	.word	0x40010000
 8008150:	40010400 	.word	0x40010400

08008154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	f023 0201 	bic.w	r2, r3, #1
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800817e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4313      	orrs	r3, r2
 8008188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f023 030a 	bic.w	r3, r3, #10
 8008190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4313      	orrs	r3, r2
 8008198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	621a      	str	r2, [r3, #32]
}
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b087      	sub	sp, #28
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	f023 0210 	bic.w	r2, r3, #16
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6a1b      	ldr	r3, [r3, #32]
 80081d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	031b      	lsls	r3, r3, #12
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	621a      	str	r2, [r3, #32]
}
 8008206:	bf00      	nop
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008212:	b480      	push	{r7}
 8008214:	b085      	sub	sp, #20
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4313      	orrs	r3, r2
 8008230:	f043 0307 	orr.w	r3, r3, #7
 8008234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	609a      	str	r2, [r3, #8]
}
 800823c:	bf00      	nop
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	021a      	lsls	r2, r3, #8
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	431a      	orrs	r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	4313      	orrs	r3, r2
 8008270:	697a      	ldr	r2, [r7, #20]
 8008272:	4313      	orrs	r3, r2
 8008274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	609a      	str	r2, [r3, #8]
}
 800827c:	bf00      	nop
 800827e:	371c      	adds	r7, #28
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008298:	2b01      	cmp	r3, #1
 800829a:	d101      	bne.n	80082a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800829c:	2302      	movs	r3, #2
 800829e:	e05a      	b.n	8008356 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a21      	ldr	r2, [pc, #132]	; (8008364 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d022      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ec:	d01d      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a1d      	ldr	r2, [pc, #116]	; (8008368 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d018      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a1b      	ldr	r2, [pc, #108]	; (800836c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d013      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a1a      	ldr	r2, [pc, #104]	; (8008370 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00e      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a18      	ldr	r2, [pc, #96]	; (8008374 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d009      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a17      	ldr	r2, [pc, #92]	; (8008378 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d004      	beq.n	800832a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a15      	ldr	r2, [pc, #84]	; (800837c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d10c      	bne.n	8008344 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	4313      	orrs	r3, r2
 800833a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	40010000 	.word	0x40010000
 8008368:	40000400 	.word	0x40000400
 800836c:	40000800 	.word	0x40000800
 8008370:	40000c00 	.word	0x40000c00
 8008374:	40010400 	.word	0x40010400
 8008378:	40014000 	.word	0x40014000
 800837c:	40001800 	.word	0x40001800

08008380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e03f      	b.n	800843a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d106      	bne.n	80083d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7fc f844 	bl	800445c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2224      	movs	r2, #36	; 0x24
 80083d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68da      	ldr	r2, [r3, #12]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 fddb 	bl	8008fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	691a      	ldr	r2, [r3, #16]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	695a      	ldr	r2, [r3, #20]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008410:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68da      	ldr	r2, [r3, #12]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008420:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2220      	movs	r2, #32
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b08a      	sub	sp, #40	; 0x28
 8008446:	af02      	add	r7, sp, #8
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	603b      	str	r3, [r7, #0]
 800844e:	4613      	mov	r3, r2
 8008450:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008452:	2300      	movs	r3, #0
 8008454:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b20      	cmp	r3, #32
 8008460:	d17c      	bne.n	800855c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <HAL_UART_Transmit+0x2c>
 8008468:	88fb      	ldrh	r3, [r7, #6]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e075      	b.n	800855e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008478:	2b01      	cmp	r3, #1
 800847a:	d101      	bne.n	8008480 <HAL_UART_Transmit+0x3e>
 800847c:	2302      	movs	r3, #2
 800847e:	e06e      	b.n	800855e <HAL_UART_Transmit+0x11c>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2221      	movs	r2, #33	; 0x21
 8008492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008496:	f7fc f8fd 	bl	8004694 <HAL_GetTick>
 800849a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	88fa      	ldrh	r2, [r7, #6]
 80084a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	88fa      	ldrh	r2, [r7, #6]
 80084a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b0:	d108      	bne.n	80084c4 <HAL_UART_Transmit+0x82>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d104      	bne.n	80084c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	61bb      	str	r3, [r7, #24]
 80084c2:	e003      	b.n	80084cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80084d4:	e02a      	b.n	800852c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2200      	movs	r2, #0
 80084de:	2180      	movs	r1, #128	; 0x80
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 fb1f 	bl	8008b24 <UART_WaitOnFlagUntilTimeout>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d001      	beq.n	80084f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e036      	b.n	800855e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10b      	bne.n	800850e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008504:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	3302      	adds	r3, #2
 800850a:	61bb      	str	r3, [r7, #24]
 800850c:	e007      	b.n	800851e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	781a      	ldrb	r2, [r3, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	3301      	adds	r3, #1
 800851c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008522:	b29b      	uxth	r3, r3
 8008524:	3b01      	subs	r3, #1
 8008526:	b29a      	uxth	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008530:	b29b      	uxth	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1cf      	bne.n	80084d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2200      	movs	r2, #0
 800853e:	2140      	movs	r1, #64	; 0x40
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 faef 	bl	8008b24 <UART_WaitOnFlagUntilTimeout>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e006      	b.n	800855e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2220      	movs	r2, #32
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	e000      	b.n	800855e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800855c:	2302      	movs	r3, #2
  }
}
 800855e:	4618      	mov	r0, r3
 8008560:	3720      	adds	r7, #32
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	4613      	mov	r3, r2
 8008572:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800857a:	b2db      	uxtb	r3, r3
 800857c:	2b20      	cmp	r3, #32
 800857e:	d11d      	bne.n	80085bc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d002      	beq.n	800858c <HAL_UART_Receive_IT+0x26>
 8008586:	88fb      	ldrh	r3, [r7, #6]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e016      	b.n	80085be <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008596:	2b01      	cmp	r3, #1
 8008598:	d101      	bne.n	800859e <HAL_UART_Receive_IT+0x38>
 800859a:	2302      	movs	r3, #2
 800859c:	e00f      	b.n	80085be <HAL_UART_Receive_IT+0x58>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80085ac:	88fb      	ldrh	r3, [r7, #6]
 80085ae:	461a      	mov	r2, r3
 80085b0:	68b9      	ldr	r1, [r7, #8]
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f000 fb24 	bl	8008c00 <UART_Start_Receive_IT>
 80085b8:	4603      	mov	r3, r0
 80085ba:	e000      	b.n	80085be <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80085bc:	2302      	movs	r3, #2
  }
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b0ba      	sub	sp, #232	; 0xe8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fe:	f003 030f 	and.w	r3, r3, #15
 8008602:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008606:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10f      	bne.n	800862e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800860e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008612:	f003 0320 	and.w	r3, r3, #32
 8008616:	2b00      	cmp	r3, #0
 8008618:	d009      	beq.n	800862e <HAL_UART_IRQHandler+0x66>
 800861a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800861e:	f003 0320 	and.w	r3, r3, #32
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fc03 	bl	8008e32 <UART_Receive_IT>
      return;
 800862c:	e256      	b.n	8008adc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800862e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 80de 	beq.w	80087f4 <HAL_UART_IRQHandler+0x22c>
 8008638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b00      	cmp	r3, #0
 8008642:	d106      	bne.n	8008652 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008648:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 80d1 	beq.w	80087f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00b      	beq.n	8008676 <HAL_UART_IRQHandler+0xae>
 800865e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008666:	2b00      	cmp	r3, #0
 8008668:	d005      	beq.n	8008676 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	f043 0201 	orr.w	r2, r3, #1
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800867a:	f003 0304 	and.w	r3, r3, #4
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00b      	beq.n	800869a <HAL_UART_IRQHandler+0xd2>
 8008682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	d005      	beq.n	800869a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	f043 0202 	orr.w	r2, r3, #2
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800869a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00b      	beq.n	80086be <HAL_UART_IRQHandler+0xf6>
 80086a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d005      	beq.n	80086be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	f043 0204 	orr.w	r2, r3, #4
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80086be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086c2:	f003 0308 	and.w	r3, r3, #8
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d011      	beq.n	80086ee <HAL_UART_IRQHandler+0x126>
 80086ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ce:	f003 0320 	and.w	r3, r3, #32
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d105      	bne.n	80086e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80086d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	f043 0208 	orr.w	r2, r3, #8
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f000 81ed 	beq.w	8008ad2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086fc:	f003 0320 	and.w	r3, r3, #32
 8008700:	2b00      	cmp	r3, #0
 8008702:	d008      	beq.n	8008716 <HAL_UART_IRQHandler+0x14e>
 8008704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008708:	f003 0320 	and.w	r3, r3, #32
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fb8e 	bl	8008e32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	695b      	ldr	r3, [r3, #20]
 800871c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008720:	2b40      	cmp	r3, #64	; 0x40
 8008722:	bf0c      	ite	eq
 8008724:	2301      	moveq	r3, #1
 8008726:	2300      	movne	r3, #0
 8008728:	b2db      	uxtb	r3, r3
 800872a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	f003 0308 	and.w	r3, r3, #8
 8008736:	2b00      	cmp	r3, #0
 8008738:	d103      	bne.n	8008742 <HAL_UART_IRQHandler+0x17a>
 800873a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800873e:	2b00      	cmp	r3, #0
 8008740:	d04f      	beq.n	80087e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fa96 	bl	8008c74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008752:	2b40      	cmp	r3, #64	; 0x40
 8008754:	d141      	bne.n	80087da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3314      	adds	r3, #20
 800875c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800876c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3314      	adds	r3, #20
 800877e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008782:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800878e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008792:	e841 2300 	strex	r3, r2, [r1]
 8008796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800879a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1d9      	bne.n	8008756 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d013      	beq.n	80087d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ae:	4a7d      	ldr	r2, [pc, #500]	; (80089a4 <HAL_UART_IRQHandler+0x3dc>)
 80087b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fc fe36 	bl	8005428 <HAL_DMA_Abort_IT>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d016      	beq.n	80087f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087cc:	4610      	mov	r0, r2
 80087ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d0:	e00e      	b.n	80087f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f990 	bl	8008af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d8:	e00a      	b.n	80087f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f98c 	bl	8008af8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e0:	e006      	b.n	80087f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f988 	bl	8008af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80087ee:	e170      	b.n	8008ad2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f0:	bf00      	nop
    return;
 80087f2:	e16e      	b.n	8008ad2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	f040 814a 	bne.w	8008a92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008802:	f003 0310 	and.w	r3, r3, #16
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 8143 	beq.w	8008a92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800880c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008810:	f003 0310 	and.w	r3, r3, #16
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 813c 	beq.w	8008a92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800881a:	2300      	movs	r3, #0
 800881c:	60bb      	str	r3, [r7, #8]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	60bb      	str	r3, [r7, #8]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	60bb      	str	r3, [r7, #8]
 800882e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883a:	2b40      	cmp	r3, #64	; 0x40
 800883c:	f040 80b4 	bne.w	80089a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800884c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 8140 	beq.w	8008ad6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800885a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800885e:	429a      	cmp	r2, r3
 8008860:	f080 8139 	bcs.w	8008ad6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800886a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008876:	f000 8088 	beq.w	800898a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	330c      	adds	r3, #12
 8008880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008888:	e853 3f00 	ldrex	r3, [r3]
 800888c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008890:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008898:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	330c      	adds	r3, #12
 80088a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80088a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80088aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80088be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1d9      	bne.n	800887a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3314      	adds	r3, #20
 80088cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088d8:	f023 0301 	bic.w	r3, r3, #1
 80088dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3314      	adds	r3, #20
 80088e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088f6:	e841 2300 	strex	r3, r2, [r1]
 80088fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1e1      	bne.n	80088c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3314      	adds	r3, #20
 8008908:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3314      	adds	r3, #20
 8008922:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008926:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008928:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800892c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e3      	bne.n	8008902 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2220      	movs	r2, #32
 800893e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	330c      	adds	r3, #12
 800894e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800895a:	f023 0310 	bic.w	r3, r3, #16
 800895e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	330c      	adds	r3, #12
 8008968:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800896c:	65ba      	str	r2, [r7, #88]	; 0x58
 800896e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008970:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008972:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008974:	e841 2300 	strex	r3, r2, [r1]
 8008978:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800897a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1e3      	bne.n	8008948 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008984:	4618      	mov	r0, r3
 8008986:	f7fc fcdf 	bl	8005348 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008992:	b29b      	uxth	r3, r3
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	b29b      	uxth	r3, r3
 8008998:	4619      	mov	r1, r3
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f8b6 	bl	8008b0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089a0:	e099      	b.n	8008ad6 <HAL_UART_IRQHandler+0x50e>
 80089a2:	bf00      	nop
 80089a4:	08008d3b 	.word	0x08008d3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089bc:	b29b      	uxth	r3, r3
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f000 808b 	beq.w	8008ada <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80089c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 8086 	beq.w	8008ada <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	330c      	adds	r3, #12
 80089d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d8:	e853 3f00 	ldrex	r3, [r3]
 80089dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	330c      	adds	r3, #12
 80089ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80089f2:	647a      	str	r2, [r7, #68]	; 0x44
 80089f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089fa:	e841 2300 	strex	r3, r2, [r1]
 80089fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1e3      	bne.n	80089ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3314      	adds	r3, #20
 8008a0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	e853 3f00 	ldrex	r3, [r3]
 8008a14:	623b      	str	r3, [r7, #32]
   return(result);
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	f023 0301 	bic.w	r3, r3, #1
 8008a1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3314      	adds	r3, #20
 8008a26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a2a:	633a      	str	r2, [r7, #48]	; 0x30
 8008a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a32:	e841 2300 	strex	r3, r2, [r1]
 8008a36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1e3      	bne.n	8008a06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	330c      	adds	r3, #12
 8008a52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	e853 3f00 	ldrex	r3, [r3]
 8008a5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 0310 	bic.w	r3, r3, #16
 8008a62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	330c      	adds	r3, #12
 8008a6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008a70:	61fa      	str	r2, [r7, #28]
 8008a72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	69b9      	ldr	r1, [r7, #24]
 8008a76:	69fa      	ldr	r2, [r7, #28]
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	617b      	str	r3, [r7, #20]
   return(result);
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e3      	bne.n	8008a4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f83e 	bl	8008b0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a90:	e023      	b.n	8008ada <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d009      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x4ea>
 8008a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d003      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f959 	bl	8008d62 <UART_Transmit_IT>
    return;
 8008ab0:	e014      	b.n	8008adc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00e      	beq.n	8008adc <HAL_UART_IRQHandler+0x514>
 8008abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d008      	beq.n	8008adc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f999 	bl	8008e02 <UART_EndTransmit_IT>
    return;
 8008ad0:	e004      	b.n	8008adc <HAL_UART_IRQHandler+0x514>
    return;
 8008ad2:	bf00      	nop
 8008ad4:	e002      	b.n	8008adc <HAL_UART_IRQHandler+0x514>
      return;
 8008ad6:	bf00      	nop
 8008ad8:	e000      	b.n	8008adc <HAL_UART_IRQHandler+0x514>
      return;
 8008ada:	bf00      	nop
  }
}
 8008adc:	37e8      	adds	r7, #232	; 0xe8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop

08008ae4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b18:	bf00      	nop
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b090      	sub	sp, #64	; 0x40
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	603b      	str	r3, [r7, #0]
 8008b30:	4613      	mov	r3, r2
 8008b32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b34:	e050      	b.n	8008bd8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3c:	d04c      	beq.n	8008bd8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d007      	beq.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b44:	f7fb fda6 	bl	8004694 <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d241      	bcs.n	8008bd8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	330c      	adds	r3, #12
 8008b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5e:	e853 3f00 	ldrex	r3, [r3]
 8008b62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	330c      	adds	r3, #12
 8008b72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b74:	637a      	str	r2, [r7, #52]	; 0x34
 8008b76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b7c:	e841 2300 	strex	r3, r2, [r1]
 8008b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1e5      	bne.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3314      	adds	r3, #20
 8008b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	e853 3f00 	ldrex	r3, [r3]
 8008b96:	613b      	str	r3, [r7, #16]
   return(result);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f023 0301 	bic.w	r3, r3, #1
 8008b9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	3314      	adds	r3, #20
 8008ba6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ba8:	623a      	str	r2, [r7, #32]
 8008baa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bac:	69f9      	ldr	r1, [r7, #28]
 8008bae:	6a3a      	ldr	r2, [r7, #32]
 8008bb0:	e841 2300 	strex	r3, r2, [r1]
 8008bb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e5      	bne.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2220      	movs	r2, #32
 8008bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	e00f      	b.n	8008bf8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	4013      	ands	r3, r2
 8008be2:	68ba      	ldr	r2, [r7, #8]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	bf0c      	ite	eq
 8008be8:	2301      	moveq	r3, #1
 8008bea:	2300      	movne	r3, #0
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	461a      	mov	r2, r3
 8008bf0:	79fb      	ldrb	r3, [r7, #7]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d09f      	beq.n	8008b36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3740      	adds	r7, #64	; 0x40
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	88fa      	ldrh	r2, [r7, #6]
 8008c18:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	88fa      	ldrh	r2, [r7, #6]
 8008c1e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2222      	movs	r2, #34	; 0x22
 8008c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68da      	ldr	r2, [r3, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c44:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	695a      	ldr	r2, [r3, #20]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f042 0201 	orr.w	r2, r2, #1
 8008c54:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f042 0220 	orr.w	r2, r2, #32
 8008c64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b095      	sub	sp, #84	; 0x54
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	330c      	adds	r3, #12
 8008c82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c86:	e853 3f00 	ldrex	r3, [r3]
 8008c8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	330c      	adds	r3, #12
 8008c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c9c:	643a      	str	r2, [r7, #64]	; 0x40
 8008c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ca2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ca4:	e841 2300 	strex	r3, r2, [r1]
 8008ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1e5      	bne.n	8008c7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3314      	adds	r3, #20
 8008cb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb8:	6a3b      	ldr	r3, [r7, #32]
 8008cba:	e853 3f00 	ldrex	r3, [r3]
 8008cbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	f023 0301 	bic.w	r3, r3, #1
 8008cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	3314      	adds	r3, #20
 8008cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cd8:	e841 2300 	strex	r3, r2, [r1]
 8008cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1e5      	bne.n	8008cb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d119      	bne.n	8008d20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	330c      	adds	r3, #12
 8008cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	e853 3f00 	ldrex	r3, [r3]
 8008cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	f023 0310 	bic.w	r3, r3, #16
 8008d02:	647b      	str	r3, [r7, #68]	; 0x44
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	330c      	adds	r3, #12
 8008d0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d0c:	61ba      	str	r2, [r7, #24]
 8008d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d10:	6979      	ldr	r1, [r7, #20]
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	e841 2300 	strex	r3, r2, [r1]
 8008d18:	613b      	str	r3, [r7, #16]
   return(result);
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1e5      	bne.n	8008cec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2220      	movs	r2, #32
 8008d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d2e:	bf00      	nop
 8008d30:	3754      	adds	r7, #84	; 0x54
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f7ff fecf 	bl	8008af8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d5a:	bf00      	nop
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b085      	sub	sp, #20
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b21      	cmp	r3, #33	; 0x21
 8008d74:	d13e      	bne.n	8008df4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d7e:	d114      	bne.n	8008daa <UART_Transmit_IT+0x48>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d110      	bne.n	8008daa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	881b      	ldrh	r3, [r3, #0]
 8008d92:	461a      	mov	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	1c9a      	adds	r2, r3, #2
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	621a      	str	r2, [r3, #32]
 8008da8:	e008      	b.n	8008dbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	1c59      	adds	r1, r3, #1
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	6211      	str	r1, [r2, #32]
 8008db4:	781a      	ldrb	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	4619      	mov	r1, r3
 8008dca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10f      	bne.n	8008df0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68da      	ldr	r2, [r3, #12]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008dde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	e000      	b.n	8008df6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008df4:	2302      	movs	r3, #2
  }
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68da      	ldr	r2, [r3, #12]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2220      	movs	r2, #32
 8008e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7ff fe5e 	bl	8008ae4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b08c      	sub	sp, #48	; 0x30
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b22      	cmp	r3, #34	; 0x22
 8008e44:	f040 80ab 	bne.w	8008f9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e50:	d117      	bne.n	8008e82 <UART_Receive_IT+0x50>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d113      	bne.n	8008e82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7a:	1c9a      	adds	r2, r3, #2
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8008e80:	e026      	b.n	8008ed0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e94:	d007      	beq.n	8008ea6 <UART_Receive_IT+0x74>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10a      	bne.n	8008eb4 <UART_Receive_IT+0x82>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d106      	bne.n	8008eb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	e008      	b.n	8008ec6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	4619      	mov	r1, r3
 8008ede:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d15a      	bne.n	8008f9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 0220 	bic.w	r2, r2, #32
 8008ef2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68da      	ldr	r2, [r3, #12]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	695a      	ldr	r2, [r3, #20]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f022 0201 	bic.w	r2, r2, #1
 8008f12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2220      	movs	r2, #32
 8008f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d135      	bne.n	8008f90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	330c      	adds	r3, #12
 8008f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	e853 3f00 	ldrex	r3, [r3]
 8008f38:	613b      	str	r3, [r7, #16]
   return(result);
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	f023 0310 	bic.w	r3, r3, #16
 8008f40:	627b      	str	r3, [r7, #36]	; 0x24
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	330c      	adds	r3, #12
 8008f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f4a:	623a      	str	r2, [r7, #32]
 8008f4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4e:	69f9      	ldr	r1, [r7, #28]
 8008f50:	6a3a      	ldr	r2, [r7, #32]
 8008f52:	e841 2300 	strex	r3, r2, [r1]
 8008f56:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1e5      	bne.n	8008f2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0310 	and.w	r3, r3, #16
 8008f68:	2b10      	cmp	r3, #16
 8008f6a:	d10a      	bne.n	8008f82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	60fb      	str	r3, [r7, #12]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	60fb      	str	r3, [r7, #12]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	60fb      	str	r3, [r7, #12]
 8008f80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7ff fdbf 	bl	8008b0c <HAL_UARTEx_RxEventCallback>
 8008f8e:	e002      	b.n	8008f96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f7fb f94d 	bl	8004230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	e002      	b.n	8008fa0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e000      	b.n	8008fa0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008f9e:	2302      	movs	r3, #2
  }
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3730      	adds	r7, #48	; 0x30
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fac:	b0c0      	sub	sp, #256	; 0x100
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc4:	68d9      	ldr	r1, [r3, #12]
 8008fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	ea40 0301 	orr.w	r3, r0, r1
 8008fd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd6:	689a      	ldr	r2, [r3, #8]
 8008fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe4:	695b      	ldr	r3, [r3, #20]
 8008fe6:	431a      	orrs	r2, r3
 8008fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009000:	f021 010c 	bic.w	r1, r1, #12
 8009004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800900e:	430b      	orrs	r3, r1
 8009010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800901e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009022:	6999      	ldr	r1, [r3, #24]
 8009024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	ea40 0301 	orr.w	r3, r0, r1
 800902e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	4b8f      	ldr	r3, [pc, #572]	; (8009274 <UART_SetConfig+0x2cc>)
 8009038:	429a      	cmp	r2, r3
 800903a:	d005      	beq.n	8009048 <UART_SetConfig+0xa0>
 800903c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	4b8d      	ldr	r3, [pc, #564]	; (8009278 <UART_SetConfig+0x2d0>)
 8009044:	429a      	cmp	r2, r3
 8009046:	d104      	bne.n	8009052 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009048:	f7fd fbf8 	bl	800683c <HAL_RCC_GetPCLK2Freq>
 800904c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009050:	e003      	b.n	800905a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009052:	f7fd fbdf 	bl	8006814 <HAL_RCC_GetPCLK1Freq>
 8009056:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800905a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009064:	f040 810c 	bne.w	8009280 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800906c:	2200      	movs	r2, #0
 800906e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009072:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800907a:	4622      	mov	r2, r4
 800907c:	462b      	mov	r3, r5
 800907e:	1891      	adds	r1, r2, r2
 8009080:	65b9      	str	r1, [r7, #88]	; 0x58
 8009082:	415b      	adcs	r3, r3
 8009084:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009086:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800908a:	4621      	mov	r1, r4
 800908c:	eb12 0801 	adds.w	r8, r2, r1
 8009090:	4629      	mov	r1, r5
 8009092:	eb43 0901 	adc.w	r9, r3, r1
 8009096:	f04f 0200 	mov.w	r2, #0
 800909a:	f04f 0300 	mov.w	r3, #0
 800909e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090aa:	4690      	mov	r8, r2
 80090ac:	4699      	mov	r9, r3
 80090ae:	4623      	mov	r3, r4
 80090b0:	eb18 0303 	adds.w	r3, r8, r3
 80090b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80090b8:	462b      	mov	r3, r5
 80090ba:	eb49 0303 	adc.w	r3, r9, r3
 80090be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80090c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80090ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80090d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80090d6:	460b      	mov	r3, r1
 80090d8:	18db      	adds	r3, r3, r3
 80090da:	653b      	str	r3, [r7, #80]	; 0x50
 80090dc:	4613      	mov	r3, r2
 80090de:	eb42 0303 	adc.w	r3, r2, r3
 80090e2:	657b      	str	r3, [r7, #84]	; 0x54
 80090e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80090e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80090ec:	f7f7 f8c8 	bl	8000280 <__aeabi_uldivmod>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4b61      	ldr	r3, [pc, #388]	; (800927c <UART_SetConfig+0x2d4>)
 80090f6:	fba3 2302 	umull	r2, r3, r3, r2
 80090fa:	095b      	lsrs	r3, r3, #5
 80090fc:	011c      	lsls	r4, r3, #4
 80090fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009102:	2200      	movs	r2, #0
 8009104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009108:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800910c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009110:	4642      	mov	r2, r8
 8009112:	464b      	mov	r3, r9
 8009114:	1891      	adds	r1, r2, r2
 8009116:	64b9      	str	r1, [r7, #72]	; 0x48
 8009118:	415b      	adcs	r3, r3
 800911a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800911c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009120:	4641      	mov	r1, r8
 8009122:	eb12 0a01 	adds.w	sl, r2, r1
 8009126:	4649      	mov	r1, r9
 8009128:	eb43 0b01 	adc.w	fp, r3, r1
 800912c:	f04f 0200 	mov.w	r2, #0
 8009130:	f04f 0300 	mov.w	r3, #0
 8009134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800913c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009140:	4692      	mov	sl, r2
 8009142:	469b      	mov	fp, r3
 8009144:	4643      	mov	r3, r8
 8009146:	eb1a 0303 	adds.w	r3, sl, r3
 800914a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800914e:	464b      	mov	r3, r9
 8009150:	eb4b 0303 	adc.w	r3, fp, r3
 8009154:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009164:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009168:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800916c:	460b      	mov	r3, r1
 800916e:	18db      	adds	r3, r3, r3
 8009170:	643b      	str	r3, [r7, #64]	; 0x40
 8009172:	4613      	mov	r3, r2
 8009174:	eb42 0303 	adc.w	r3, r2, r3
 8009178:	647b      	str	r3, [r7, #68]	; 0x44
 800917a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800917e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009182:	f7f7 f87d 	bl	8000280 <__aeabi_uldivmod>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	4611      	mov	r1, r2
 800918c:	4b3b      	ldr	r3, [pc, #236]	; (800927c <UART_SetConfig+0x2d4>)
 800918e:	fba3 2301 	umull	r2, r3, r3, r1
 8009192:	095b      	lsrs	r3, r3, #5
 8009194:	2264      	movs	r2, #100	; 0x64
 8009196:	fb02 f303 	mul.w	r3, r2, r3
 800919a:	1acb      	subs	r3, r1, r3
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80091a2:	4b36      	ldr	r3, [pc, #216]	; (800927c <UART_SetConfig+0x2d4>)
 80091a4:	fba3 2302 	umull	r2, r3, r3, r2
 80091a8:	095b      	lsrs	r3, r3, #5
 80091aa:	005b      	lsls	r3, r3, #1
 80091ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80091b0:	441c      	add	r4, r3
 80091b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091b6:	2200      	movs	r2, #0
 80091b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80091bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80091c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80091c4:	4642      	mov	r2, r8
 80091c6:	464b      	mov	r3, r9
 80091c8:	1891      	adds	r1, r2, r2
 80091ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80091cc:	415b      	adcs	r3, r3
 80091ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80091d4:	4641      	mov	r1, r8
 80091d6:	1851      	adds	r1, r2, r1
 80091d8:	6339      	str	r1, [r7, #48]	; 0x30
 80091da:	4649      	mov	r1, r9
 80091dc:	414b      	adcs	r3, r1
 80091de:	637b      	str	r3, [r7, #52]	; 0x34
 80091e0:	f04f 0200 	mov.w	r2, #0
 80091e4:	f04f 0300 	mov.w	r3, #0
 80091e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80091ec:	4659      	mov	r1, fp
 80091ee:	00cb      	lsls	r3, r1, #3
 80091f0:	4651      	mov	r1, sl
 80091f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091f6:	4651      	mov	r1, sl
 80091f8:	00ca      	lsls	r2, r1, #3
 80091fa:	4610      	mov	r0, r2
 80091fc:	4619      	mov	r1, r3
 80091fe:	4603      	mov	r3, r0
 8009200:	4642      	mov	r2, r8
 8009202:	189b      	adds	r3, r3, r2
 8009204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009208:	464b      	mov	r3, r9
 800920a:	460a      	mov	r2, r1
 800920c:	eb42 0303 	adc.w	r3, r2, r3
 8009210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009220:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009228:	460b      	mov	r3, r1
 800922a:	18db      	adds	r3, r3, r3
 800922c:	62bb      	str	r3, [r7, #40]	; 0x28
 800922e:	4613      	mov	r3, r2
 8009230:	eb42 0303 	adc.w	r3, r2, r3
 8009234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800923a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800923e:	f7f7 f81f 	bl	8000280 <__aeabi_uldivmod>
 8009242:	4602      	mov	r2, r0
 8009244:	460b      	mov	r3, r1
 8009246:	4b0d      	ldr	r3, [pc, #52]	; (800927c <UART_SetConfig+0x2d4>)
 8009248:	fba3 1302 	umull	r1, r3, r3, r2
 800924c:	095b      	lsrs	r3, r3, #5
 800924e:	2164      	movs	r1, #100	; 0x64
 8009250:	fb01 f303 	mul.w	r3, r1, r3
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	00db      	lsls	r3, r3, #3
 8009258:	3332      	adds	r3, #50	; 0x32
 800925a:	4a08      	ldr	r2, [pc, #32]	; (800927c <UART_SetConfig+0x2d4>)
 800925c:	fba2 2303 	umull	r2, r3, r2, r3
 8009260:	095b      	lsrs	r3, r3, #5
 8009262:	f003 0207 	and.w	r2, r3, #7
 8009266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4422      	add	r2, r4
 800926e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009270:	e106      	b.n	8009480 <UART_SetConfig+0x4d8>
 8009272:	bf00      	nop
 8009274:	40011000 	.word	0x40011000
 8009278:	40011400 	.word	0x40011400
 800927c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009284:	2200      	movs	r2, #0
 8009286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800928a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800928e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009292:	4642      	mov	r2, r8
 8009294:	464b      	mov	r3, r9
 8009296:	1891      	adds	r1, r2, r2
 8009298:	6239      	str	r1, [r7, #32]
 800929a:	415b      	adcs	r3, r3
 800929c:	627b      	str	r3, [r7, #36]	; 0x24
 800929e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092a2:	4641      	mov	r1, r8
 80092a4:	1854      	adds	r4, r2, r1
 80092a6:	4649      	mov	r1, r9
 80092a8:	eb43 0501 	adc.w	r5, r3, r1
 80092ac:	f04f 0200 	mov.w	r2, #0
 80092b0:	f04f 0300 	mov.w	r3, #0
 80092b4:	00eb      	lsls	r3, r5, #3
 80092b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092ba:	00e2      	lsls	r2, r4, #3
 80092bc:	4614      	mov	r4, r2
 80092be:	461d      	mov	r5, r3
 80092c0:	4643      	mov	r3, r8
 80092c2:	18e3      	adds	r3, r4, r3
 80092c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80092c8:	464b      	mov	r3, r9
 80092ca:	eb45 0303 	adc.w	r3, r5, r3
 80092ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092e2:	f04f 0200 	mov.w	r2, #0
 80092e6:	f04f 0300 	mov.w	r3, #0
 80092ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80092ee:	4629      	mov	r1, r5
 80092f0:	008b      	lsls	r3, r1, #2
 80092f2:	4621      	mov	r1, r4
 80092f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092f8:	4621      	mov	r1, r4
 80092fa:	008a      	lsls	r2, r1, #2
 80092fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009300:	f7f6 ffbe 	bl	8000280 <__aeabi_uldivmod>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4b60      	ldr	r3, [pc, #384]	; (800948c <UART_SetConfig+0x4e4>)
 800930a:	fba3 2302 	umull	r2, r3, r3, r2
 800930e:	095b      	lsrs	r3, r3, #5
 8009310:	011c      	lsls	r4, r3, #4
 8009312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009316:	2200      	movs	r2, #0
 8009318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800931c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009320:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009324:	4642      	mov	r2, r8
 8009326:	464b      	mov	r3, r9
 8009328:	1891      	adds	r1, r2, r2
 800932a:	61b9      	str	r1, [r7, #24]
 800932c:	415b      	adcs	r3, r3
 800932e:	61fb      	str	r3, [r7, #28]
 8009330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009334:	4641      	mov	r1, r8
 8009336:	1851      	adds	r1, r2, r1
 8009338:	6139      	str	r1, [r7, #16]
 800933a:	4649      	mov	r1, r9
 800933c:	414b      	adcs	r3, r1
 800933e:	617b      	str	r3, [r7, #20]
 8009340:	f04f 0200 	mov.w	r2, #0
 8009344:	f04f 0300 	mov.w	r3, #0
 8009348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800934c:	4659      	mov	r1, fp
 800934e:	00cb      	lsls	r3, r1, #3
 8009350:	4651      	mov	r1, sl
 8009352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009356:	4651      	mov	r1, sl
 8009358:	00ca      	lsls	r2, r1, #3
 800935a:	4610      	mov	r0, r2
 800935c:	4619      	mov	r1, r3
 800935e:	4603      	mov	r3, r0
 8009360:	4642      	mov	r2, r8
 8009362:	189b      	adds	r3, r3, r2
 8009364:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009368:	464b      	mov	r3, r9
 800936a:	460a      	mov	r2, r1
 800936c:	eb42 0303 	adc.w	r3, r2, r3
 8009370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	67bb      	str	r3, [r7, #120]	; 0x78
 800937e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009380:	f04f 0200 	mov.w	r2, #0
 8009384:	f04f 0300 	mov.w	r3, #0
 8009388:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800938c:	4649      	mov	r1, r9
 800938e:	008b      	lsls	r3, r1, #2
 8009390:	4641      	mov	r1, r8
 8009392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009396:	4641      	mov	r1, r8
 8009398:	008a      	lsls	r2, r1, #2
 800939a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800939e:	f7f6 ff6f 	bl	8000280 <__aeabi_uldivmod>
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	4611      	mov	r1, r2
 80093a8:	4b38      	ldr	r3, [pc, #224]	; (800948c <UART_SetConfig+0x4e4>)
 80093aa:	fba3 2301 	umull	r2, r3, r3, r1
 80093ae:	095b      	lsrs	r3, r3, #5
 80093b0:	2264      	movs	r2, #100	; 0x64
 80093b2:	fb02 f303 	mul.w	r3, r2, r3
 80093b6:	1acb      	subs	r3, r1, r3
 80093b8:	011b      	lsls	r3, r3, #4
 80093ba:	3332      	adds	r3, #50	; 0x32
 80093bc:	4a33      	ldr	r2, [pc, #204]	; (800948c <UART_SetConfig+0x4e4>)
 80093be:	fba2 2303 	umull	r2, r3, r2, r3
 80093c2:	095b      	lsrs	r3, r3, #5
 80093c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093c8:	441c      	add	r4, r3
 80093ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093ce:	2200      	movs	r2, #0
 80093d0:	673b      	str	r3, [r7, #112]	; 0x70
 80093d2:	677a      	str	r2, [r7, #116]	; 0x74
 80093d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80093d8:	4642      	mov	r2, r8
 80093da:	464b      	mov	r3, r9
 80093dc:	1891      	adds	r1, r2, r2
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	415b      	adcs	r3, r3
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093e8:	4641      	mov	r1, r8
 80093ea:	1851      	adds	r1, r2, r1
 80093ec:	6039      	str	r1, [r7, #0]
 80093ee:	4649      	mov	r1, r9
 80093f0:	414b      	adcs	r3, r1
 80093f2:	607b      	str	r3, [r7, #4]
 80093f4:	f04f 0200 	mov.w	r2, #0
 80093f8:	f04f 0300 	mov.w	r3, #0
 80093fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009400:	4659      	mov	r1, fp
 8009402:	00cb      	lsls	r3, r1, #3
 8009404:	4651      	mov	r1, sl
 8009406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800940a:	4651      	mov	r1, sl
 800940c:	00ca      	lsls	r2, r1, #3
 800940e:	4610      	mov	r0, r2
 8009410:	4619      	mov	r1, r3
 8009412:	4603      	mov	r3, r0
 8009414:	4642      	mov	r2, r8
 8009416:	189b      	adds	r3, r3, r2
 8009418:	66bb      	str	r3, [r7, #104]	; 0x68
 800941a:	464b      	mov	r3, r9
 800941c:	460a      	mov	r2, r1
 800941e:	eb42 0303 	adc.w	r3, r2, r3
 8009422:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	663b      	str	r3, [r7, #96]	; 0x60
 800942e:	667a      	str	r2, [r7, #100]	; 0x64
 8009430:	f04f 0200 	mov.w	r2, #0
 8009434:	f04f 0300 	mov.w	r3, #0
 8009438:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800943c:	4649      	mov	r1, r9
 800943e:	008b      	lsls	r3, r1, #2
 8009440:	4641      	mov	r1, r8
 8009442:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009446:	4641      	mov	r1, r8
 8009448:	008a      	lsls	r2, r1, #2
 800944a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800944e:	f7f6 ff17 	bl	8000280 <__aeabi_uldivmod>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4b0d      	ldr	r3, [pc, #52]	; (800948c <UART_SetConfig+0x4e4>)
 8009458:	fba3 1302 	umull	r1, r3, r3, r2
 800945c:	095b      	lsrs	r3, r3, #5
 800945e:	2164      	movs	r1, #100	; 0x64
 8009460:	fb01 f303 	mul.w	r3, r1, r3
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	011b      	lsls	r3, r3, #4
 8009468:	3332      	adds	r3, #50	; 0x32
 800946a:	4a08      	ldr	r2, [pc, #32]	; (800948c <UART_SetConfig+0x4e4>)
 800946c:	fba2 2303 	umull	r2, r3, r2, r3
 8009470:	095b      	lsrs	r3, r3, #5
 8009472:	f003 020f 	and.w	r2, r3, #15
 8009476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4422      	add	r2, r4
 800947e:	609a      	str	r2, [r3, #8]
}
 8009480:	bf00      	nop
 8009482:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009486:	46bd      	mov	sp, r7
 8009488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800948c:	51eb851f 	.word	0x51eb851f

08009490 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800949a:	2300      	movs	r3, #0
 800949c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	4b20      	ldr	r3, [pc, #128]	; (8009530 <FSMC_NORSRAM_Init+0xa0>)
 80094ae:	4013      	ands	r3, r2
 80094b0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80094ba:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80094c0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80094c6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80094cc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80094d2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80094d8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80094de:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80094e4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80094ea:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80094f0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80094f6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80094fc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	4313      	orrs	r3, r2
 8009502:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	2b08      	cmp	r3, #8
 800950a:	d103      	bne.n	8009514 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009512:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68f9      	ldr	r1, [r7, #12]
 800951c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3714      	adds	r7, #20
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	fff00080 	.word	0xfff00080

08009534 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009534:	b480      	push	{r7}
 8009536:	b087      	sub	sp, #28
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009540:	2300      	movs	r3, #0
 8009542:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	1c5a      	adds	r2, r3, #1
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800954e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009556:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009562:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800956a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8009572:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	3b01      	subs	r3, #1
 800957a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800957c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	3b02      	subs	r3, #2
 8009584:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009586:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800958c:	4313      	orrs	r3, r2
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	4313      	orrs	r3, r2
 8009592:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	1c5a      	adds	r2, r3, #1
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6979      	ldr	r1, [r7, #20]
 800959c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	371c      	adds	r7, #28
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
	...

080095b0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80095be:	2300      	movs	r3, #0
 80095c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095c8:	d122      	bne.n	8009610 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	4b15      	ldr	r3, [pc, #84]	; (800962c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80095d8:	4013      	ands	r3, r2
 80095da:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80095e6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80095ee:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80095f6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80095fc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80095fe:	697a      	ldr	r2, [r7, #20]
 8009600:	4313      	orrs	r3, r2
 8009602:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	6979      	ldr	r1, [r7, #20]
 800960a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800960e:	e005      	b.n	800961c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	371c      	adds	r7, #28
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	cff00000 	.word	0xcff00000

08009630 <rand>:
 8009630:	4b16      	ldr	r3, [pc, #88]	; (800968c <rand+0x5c>)
 8009632:	b510      	push	{r4, lr}
 8009634:	681c      	ldr	r4, [r3, #0]
 8009636:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009638:	b9b3      	cbnz	r3, 8009668 <rand+0x38>
 800963a:	2018      	movs	r0, #24
 800963c:	f000 fa64 	bl	8009b08 <malloc>
 8009640:	4602      	mov	r2, r0
 8009642:	6320      	str	r0, [r4, #48]	; 0x30
 8009644:	b920      	cbnz	r0, 8009650 <rand+0x20>
 8009646:	4b12      	ldr	r3, [pc, #72]	; (8009690 <rand+0x60>)
 8009648:	4812      	ldr	r0, [pc, #72]	; (8009694 <rand+0x64>)
 800964a:	2152      	movs	r1, #82	; 0x52
 800964c:	f000 f9f2 	bl	8009a34 <__assert_func>
 8009650:	4911      	ldr	r1, [pc, #68]	; (8009698 <rand+0x68>)
 8009652:	4b12      	ldr	r3, [pc, #72]	; (800969c <rand+0x6c>)
 8009654:	e9c0 1300 	strd	r1, r3, [r0]
 8009658:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <rand+0x70>)
 800965a:	6083      	str	r3, [r0, #8]
 800965c:	230b      	movs	r3, #11
 800965e:	8183      	strh	r3, [r0, #12]
 8009660:	2100      	movs	r1, #0
 8009662:	2001      	movs	r0, #1
 8009664:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009668:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800966a:	480e      	ldr	r0, [pc, #56]	; (80096a4 <rand+0x74>)
 800966c:	690b      	ldr	r3, [r1, #16]
 800966e:	694c      	ldr	r4, [r1, #20]
 8009670:	4a0d      	ldr	r2, [pc, #52]	; (80096a8 <rand+0x78>)
 8009672:	4358      	muls	r0, r3
 8009674:	fb02 0004 	mla	r0, r2, r4, r0
 8009678:	fba3 3202 	umull	r3, r2, r3, r2
 800967c:	3301      	adds	r3, #1
 800967e:	eb40 0002 	adc.w	r0, r0, r2
 8009682:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8009686:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800968a:	bd10      	pop	{r4, pc}
 800968c:	20000118 	.word	0x20000118
 8009690:	08011a6c 	.word	0x08011a6c
 8009694:	08011a83 	.word	0x08011a83
 8009698:	abcd330e 	.word	0xabcd330e
 800969c:	e66d1234 	.word	0xe66d1234
 80096a0:	0005deec 	.word	0x0005deec
 80096a4:	5851f42d 	.word	0x5851f42d
 80096a8:	4c957f2d 	.word	0x4c957f2d

080096ac <std>:
 80096ac:	2300      	movs	r3, #0
 80096ae:	b510      	push	{r4, lr}
 80096b0:	4604      	mov	r4, r0
 80096b2:	e9c0 3300 	strd	r3, r3, [r0]
 80096b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096ba:	6083      	str	r3, [r0, #8]
 80096bc:	8181      	strh	r1, [r0, #12]
 80096be:	6643      	str	r3, [r0, #100]	; 0x64
 80096c0:	81c2      	strh	r2, [r0, #14]
 80096c2:	6183      	str	r3, [r0, #24]
 80096c4:	4619      	mov	r1, r3
 80096c6:	2208      	movs	r2, #8
 80096c8:	305c      	adds	r0, #92	; 0x5c
 80096ca:	f000 f928 	bl	800991e <memset>
 80096ce:	4b0d      	ldr	r3, [pc, #52]	; (8009704 <std+0x58>)
 80096d0:	6263      	str	r3, [r4, #36]	; 0x24
 80096d2:	4b0d      	ldr	r3, [pc, #52]	; (8009708 <std+0x5c>)
 80096d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80096d6:	4b0d      	ldr	r3, [pc, #52]	; (800970c <std+0x60>)
 80096d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096da:	4b0d      	ldr	r3, [pc, #52]	; (8009710 <std+0x64>)
 80096dc:	6323      	str	r3, [r4, #48]	; 0x30
 80096de:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <std+0x68>)
 80096e0:	6224      	str	r4, [r4, #32]
 80096e2:	429c      	cmp	r4, r3
 80096e4:	d006      	beq.n	80096f4 <std+0x48>
 80096e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80096ea:	4294      	cmp	r4, r2
 80096ec:	d002      	beq.n	80096f4 <std+0x48>
 80096ee:	33d0      	adds	r3, #208	; 0xd0
 80096f0:	429c      	cmp	r4, r3
 80096f2:	d105      	bne.n	8009700 <std+0x54>
 80096f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096fc:	f000 b996 	b.w	8009a2c <__retarget_lock_init_recursive>
 8009700:	bd10      	pop	{r4, pc}
 8009702:	bf00      	nop
 8009704:	08009899 	.word	0x08009899
 8009708:	080098bb 	.word	0x080098bb
 800970c:	080098f3 	.word	0x080098f3
 8009710:	08009917 	.word	0x08009917
 8009714:	20000778 	.word	0x20000778

08009718 <stdio_exit_handler>:
 8009718:	4a02      	ldr	r2, [pc, #8]	; (8009724 <stdio_exit_handler+0xc>)
 800971a:	4903      	ldr	r1, [pc, #12]	; (8009728 <stdio_exit_handler+0x10>)
 800971c:	4803      	ldr	r0, [pc, #12]	; (800972c <stdio_exit_handler+0x14>)
 800971e:	f000 b869 	b.w	80097f4 <_fwalk_sglue>
 8009722:	bf00      	nop
 8009724:	200000c0 	.word	0x200000c0
 8009728:	0800a34d 	.word	0x0800a34d
 800972c:	200000cc 	.word	0x200000cc

08009730 <cleanup_stdio>:
 8009730:	6841      	ldr	r1, [r0, #4]
 8009732:	4b0c      	ldr	r3, [pc, #48]	; (8009764 <cleanup_stdio+0x34>)
 8009734:	4299      	cmp	r1, r3
 8009736:	b510      	push	{r4, lr}
 8009738:	4604      	mov	r4, r0
 800973a:	d001      	beq.n	8009740 <cleanup_stdio+0x10>
 800973c:	f000 fe06 	bl	800a34c <_fflush_r>
 8009740:	68a1      	ldr	r1, [r4, #8]
 8009742:	4b09      	ldr	r3, [pc, #36]	; (8009768 <cleanup_stdio+0x38>)
 8009744:	4299      	cmp	r1, r3
 8009746:	d002      	beq.n	800974e <cleanup_stdio+0x1e>
 8009748:	4620      	mov	r0, r4
 800974a:	f000 fdff 	bl	800a34c <_fflush_r>
 800974e:	68e1      	ldr	r1, [r4, #12]
 8009750:	4b06      	ldr	r3, [pc, #24]	; (800976c <cleanup_stdio+0x3c>)
 8009752:	4299      	cmp	r1, r3
 8009754:	d004      	beq.n	8009760 <cleanup_stdio+0x30>
 8009756:	4620      	mov	r0, r4
 8009758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800975c:	f000 bdf6 	b.w	800a34c <_fflush_r>
 8009760:	bd10      	pop	{r4, pc}
 8009762:	bf00      	nop
 8009764:	20000778 	.word	0x20000778
 8009768:	200007e0 	.word	0x200007e0
 800976c:	20000848 	.word	0x20000848

08009770 <global_stdio_init.part.0>:
 8009770:	b510      	push	{r4, lr}
 8009772:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <global_stdio_init.part.0+0x30>)
 8009774:	4c0b      	ldr	r4, [pc, #44]	; (80097a4 <global_stdio_init.part.0+0x34>)
 8009776:	4a0c      	ldr	r2, [pc, #48]	; (80097a8 <global_stdio_init.part.0+0x38>)
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	4620      	mov	r0, r4
 800977c:	2200      	movs	r2, #0
 800977e:	2104      	movs	r1, #4
 8009780:	f7ff ff94 	bl	80096ac <std>
 8009784:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009788:	2201      	movs	r2, #1
 800978a:	2109      	movs	r1, #9
 800978c:	f7ff ff8e 	bl	80096ac <std>
 8009790:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009794:	2202      	movs	r2, #2
 8009796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800979a:	2112      	movs	r1, #18
 800979c:	f7ff bf86 	b.w	80096ac <std>
 80097a0:	200008b0 	.word	0x200008b0
 80097a4:	20000778 	.word	0x20000778
 80097a8:	08009719 	.word	0x08009719

080097ac <__sfp_lock_acquire>:
 80097ac:	4801      	ldr	r0, [pc, #4]	; (80097b4 <__sfp_lock_acquire+0x8>)
 80097ae:	f000 b93e 	b.w	8009a2e <__retarget_lock_acquire_recursive>
 80097b2:	bf00      	nop
 80097b4:	200008b9 	.word	0x200008b9

080097b8 <__sfp_lock_release>:
 80097b8:	4801      	ldr	r0, [pc, #4]	; (80097c0 <__sfp_lock_release+0x8>)
 80097ba:	f000 b939 	b.w	8009a30 <__retarget_lock_release_recursive>
 80097be:	bf00      	nop
 80097c0:	200008b9 	.word	0x200008b9

080097c4 <__sinit>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	4604      	mov	r4, r0
 80097c8:	f7ff fff0 	bl	80097ac <__sfp_lock_acquire>
 80097cc:	6a23      	ldr	r3, [r4, #32]
 80097ce:	b11b      	cbz	r3, 80097d8 <__sinit+0x14>
 80097d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097d4:	f7ff bff0 	b.w	80097b8 <__sfp_lock_release>
 80097d8:	4b04      	ldr	r3, [pc, #16]	; (80097ec <__sinit+0x28>)
 80097da:	6223      	str	r3, [r4, #32]
 80097dc:	4b04      	ldr	r3, [pc, #16]	; (80097f0 <__sinit+0x2c>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1f5      	bne.n	80097d0 <__sinit+0xc>
 80097e4:	f7ff ffc4 	bl	8009770 <global_stdio_init.part.0>
 80097e8:	e7f2      	b.n	80097d0 <__sinit+0xc>
 80097ea:	bf00      	nop
 80097ec:	08009731 	.word	0x08009731
 80097f0:	200008b0 	.word	0x200008b0

080097f4 <_fwalk_sglue>:
 80097f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097f8:	4607      	mov	r7, r0
 80097fa:	4688      	mov	r8, r1
 80097fc:	4614      	mov	r4, r2
 80097fe:	2600      	movs	r6, #0
 8009800:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009804:	f1b9 0901 	subs.w	r9, r9, #1
 8009808:	d505      	bpl.n	8009816 <_fwalk_sglue+0x22>
 800980a:	6824      	ldr	r4, [r4, #0]
 800980c:	2c00      	cmp	r4, #0
 800980e:	d1f7      	bne.n	8009800 <_fwalk_sglue+0xc>
 8009810:	4630      	mov	r0, r6
 8009812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009816:	89ab      	ldrh	r3, [r5, #12]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d907      	bls.n	800982c <_fwalk_sglue+0x38>
 800981c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009820:	3301      	adds	r3, #1
 8009822:	d003      	beq.n	800982c <_fwalk_sglue+0x38>
 8009824:	4629      	mov	r1, r5
 8009826:	4638      	mov	r0, r7
 8009828:	47c0      	blx	r8
 800982a:	4306      	orrs	r6, r0
 800982c:	3568      	adds	r5, #104	; 0x68
 800982e:	e7e9      	b.n	8009804 <_fwalk_sglue+0x10>

08009830 <sniprintf>:
 8009830:	b40c      	push	{r2, r3}
 8009832:	b530      	push	{r4, r5, lr}
 8009834:	4b17      	ldr	r3, [pc, #92]	; (8009894 <sniprintf+0x64>)
 8009836:	1e0c      	subs	r4, r1, #0
 8009838:	681d      	ldr	r5, [r3, #0]
 800983a:	b09d      	sub	sp, #116	; 0x74
 800983c:	da08      	bge.n	8009850 <sniprintf+0x20>
 800983e:	238b      	movs	r3, #139	; 0x8b
 8009840:	602b      	str	r3, [r5, #0]
 8009842:	f04f 30ff 	mov.w	r0, #4294967295
 8009846:	b01d      	add	sp, #116	; 0x74
 8009848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800984c:	b002      	add	sp, #8
 800984e:	4770      	bx	lr
 8009850:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009854:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009858:	bf14      	ite	ne
 800985a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800985e:	4623      	moveq	r3, r4
 8009860:	9304      	str	r3, [sp, #16]
 8009862:	9307      	str	r3, [sp, #28]
 8009864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009868:	9002      	str	r0, [sp, #8]
 800986a:	9006      	str	r0, [sp, #24]
 800986c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009870:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009872:	ab21      	add	r3, sp, #132	; 0x84
 8009874:	a902      	add	r1, sp, #8
 8009876:	4628      	mov	r0, r5
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	f000 fa53 	bl	8009d24 <_svfiprintf_r>
 800987e:	1c43      	adds	r3, r0, #1
 8009880:	bfbc      	itt	lt
 8009882:	238b      	movlt	r3, #139	; 0x8b
 8009884:	602b      	strlt	r3, [r5, #0]
 8009886:	2c00      	cmp	r4, #0
 8009888:	d0dd      	beq.n	8009846 <sniprintf+0x16>
 800988a:	9b02      	ldr	r3, [sp, #8]
 800988c:	2200      	movs	r2, #0
 800988e:	701a      	strb	r2, [r3, #0]
 8009890:	e7d9      	b.n	8009846 <sniprintf+0x16>
 8009892:	bf00      	nop
 8009894:	20000118 	.word	0x20000118

08009898 <__sread>:
 8009898:	b510      	push	{r4, lr}
 800989a:	460c      	mov	r4, r1
 800989c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a0:	f000 f876 	bl	8009990 <_read_r>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	bfab      	itete	ge
 80098a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098aa:	89a3      	ldrhlt	r3, [r4, #12]
 80098ac:	181b      	addge	r3, r3, r0
 80098ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098b2:	bfac      	ite	ge
 80098b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098b6:	81a3      	strhlt	r3, [r4, #12]
 80098b8:	bd10      	pop	{r4, pc}

080098ba <__swrite>:
 80098ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098be:	461f      	mov	r7, r3
 80098c0:	898b      	ldrh	r3, [r1, #12]
 80098c2:	05db      	lsls	r3, r3, #23
 80098c4:	4605      	mov	r5, r0
 80098c6:	460c      	mov	r4, r1
 80098c8:	4616      	mov	r6, r2
 80098ca:	d505      	bpl.n	80098d8 <__swrite+0x1e>
 80098cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d0:	2302      	movs	r3, #2
 80098d2:	2200      	movs	r2, #0
 80098d4:	f000 f84a 	bl	800996c <_lseek_r>
 80098d8:	89a3      	ldrh	r3, [r4, #12]
 80098da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098e2:	81a3      	strh	r3, [r4, #12]
 80098e4:	4632      	mov	r2, r6
 80098e6:	463b      	mov	r3, r7
 80098e8:	4628      	mov	r0, r5
 80098ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098ee:	f000 b861 	b.w	80099b4 <_write_r>

080098f2 <__sseek>:
 80098f2:	b510      	push	{r4, lr}
 80098f4:	460c      	mov	r4, r1
 80098f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098fa:	f000 f837 	bl	800996c <_lseek_r>
 80098fe:	1c43      	adds	r3, r0, #1
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	bf15      	itete	ne
 8009904:	6560      	strne	r0, [r4, #84]	; 0x54
 8009906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800990a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800990e:	81a3      	strheq	r3, [r4, #12]
 8009910:	bf18      	it	ne
 8009912:	81a3      	strhne	r3, [r4, #12]
 8009914:	bd10      	pop	{r4, pc}

08009916 <__sclose>:
 8009916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800991a:	f000 b817 	b.w	800994c <_close_r>

0800991e <memset>:
 800991e:	4402      	add	r2, r0
 8009920:	4603      	mov	r3, r0
 8009922:	4293      	cmp	r3, r2
 8009924:	d100      	bne.n	8009928 <memset+0xa>
 8009926:	4770      	bx	lr
 8009928:	f803 1b01 	strb.w	r1, [r3], #1
 800992c:	e7f9      	b.n	8009922 <memset+0x4>

0800992e <strcat>:
 800992e:	b510      	push	{r4, lr}
 8009930:	4602      	mov	r2, r0
 8009932:	7814      	ldrb	r4, [r2, #0]
 8009934:	4613      	mov	r3, r2
 8009936:	3201      	adds	r2, #1
 8009938:	2c00      	cmp	r4, #0
 800993a:	d1fa      	bne.n	8009932 <strcat+0x4>
 800993c:	3b01      	subs	r3, #1
 800993e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009942:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009946:	2a00      	cmp	r2, #0
 8009948:	d1f9      	bne.n	800993e <strcat+0x10>
 800994a:	bd10      	pop	{r4, pc}

0800994c <_close_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d06      	ldr	r5, [pc, #24]	; (8009968 <_close_r+0x1c>)
 8009950:	2300      	movs	r3, #0
 8009952:	4604      	mov	r4, r0
 8009954:	4608      	mov	r0, r1
 8009956:	602b      	str	r3, [r5, #0]
 8009958:	f7fa fa4f 	bl	8003dfa <_close>
 800995c:	1c43      	adds	r3, r0, #1
 800995e:	d102      	bne.n	8009966 <_close_r+0x1a>
 8009960:	682b      	ldr	r3, [r5, #0]
 8009962:	b103      	cbz	r3, 8009966 <_close_r+0x1a>
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	bd38      	pop	{r3, r4, r5, pc}
 8009968:	200008b4 	.word	0x200008b4

0800996c <_lseek_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	4d07      	ldr	r5, [pc, #28]	; (800998c <_lseek_r+0x20>)
 8009970:	4604      	mov	r4, r0
 8009972:	4608      	mov	r0, r1
 8009974:	4611      	mov	r1, r2
 8009976:	2200      	movs	r2, #0
 8009978:	602a      	str	r2, [r5, #0]
 800997a:	461a      	mov	r2, r3
 800997c:	f7fa fa64 	bl	8003e48 <_lseek>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d102      	bne.n	800998a <_lseek_r+0x1e>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	b103      	cbz	r3, 800998a <_lseek_r+0x1e>
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	200008b4 	.word	0x200008b4

08009990 <_read_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d07      	ldr	r5, [pc, #28]	; (80099b0 <_read_r+0x20>)
 8009994:	4604      	mov	r4, r0
 8009996:	4608      	mov	r0, r1
 8009998:	4611      	mov	r1, r2
 800999a:	2200      	movs	r2, #0
 800999c:	602a      	str	r2, [r5, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	f7fa f9f2 	bl	8003d88 <_read>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_read_r+0x1e>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_read_r+0x1e>
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	200008b4 	.word	0x200008b4

080099b4 <_write_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4d07      	ldr	r5, [pc, #28]	; (80099d4 <_write_r+0x20>)
 80099b8:	4604      	mov	r4, r0
 80099ba:	4608      	mov	r0, r1
 80099bc:	4611      	mov	r1, r2
 80099be:	2200      	movs	r2, #0
 80099c0:	602a      	str	r2, [r5, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	f7fa f9fd 	bl	8003dc2 <_write>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	d102      	bne.n	80099d2 <_write_r+0x1e>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	b103      	cbz	r3, 80099d2 <_write_r+0x1e>
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	200008b4 	.word	0x200008b4

080099d8 <__errno>:
 80099d8:	4b01      	ldr	r3, [pc, #4]	; (80099e0 <__errno+0x8>)
 80099da:	6818      	ldr	r0, [r3, #0]
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	20000118 	.word	0x20000118

080099e4 <__libc_init_array>:
 80099e4:	b570      	push	{r4, r5, r6, lr}
 80099e6:	4d0d      	ldr	r5, [pc, #52]	; (8009a1c <__libc_init_array+0x38>)
 80099e8:	4c0d      	ldr	r4, [pc, #52]	; (8009a20 <__libc_init_array+0x3c>)
 80099ea:	1b64      	subs	r4, r4, r5
 80099ec:	10a4      	asrs	r4, r4, #2
 80099ee:	2600      	movs	r6, #0
 80099f0:	42a6      	cmp	r6, r4
 80099f2:	d109      	bne.n	8009a08 <__libc_init_array+0x24>
 80099f4:	4d0b      	ldr	r5, [pc, #44]	; (8009a24 <__libc_init_array+0x40>)
 80099f6:	4c0c      	ldr	r4, [pc, #48]	; (8009a28 <__libc_init_array+0x44>)
 80099f8:	f000 fffa 	bl	800a9f0 <_init>
 80099fc:	1b64      	subs	r4, r4, r5
 80099fe:	10a4      	asrs	r4, r4, #2
 8009a00:	2600      	movs	r6, #0
 8009a02:	42a6      	cmp	r6, r4
 8009a04:	d105      	bne.n	8009a12 <__libc_init_array+0x2e>
 8009a06:	bd70      	pop	{r4, r5, r6, pc}
 8009a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a0c:	4798      	blx	r3
 8009a0e:	3601      	adds	r6, #1
 8009a10:	e7ee      	b.n	80099f0 <__libc_init_array+0xc>
 8009a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a16:	4798      	blx	r3
 8009a18:	3601      	adds	r6, #1
 8009a1a:	e7f2      	b.n	8009a02 <__libc_init_array+0x1e>
 8009a1c:	08011b54 	.word	0x08011b54
 8009a20:	08011b54 	.word	0x08011b54
 8009a24:	08011b54 	.word	0x08011b54
 8009a28:	08011b58 	.word	0x08011b58

08009a2c <__retarget_lock_init_recursive>:
 8009a2c:	4770      	bx	lr

08009a2e <__retarget_lock_acquire_recursive>:
 8009a2e:	4770      	bx	lr

08009a30 <__retarget_lock_release_recursive>:
 8009a30:	4770      	bx	lr
	...

08009a34 <__assert_func>:
 8009a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a36:	4614      	mov	r4, r2
 8009a38:	461a      	mov	r2, r3
 8009a3a:	4b09      	ldr	r3, [pc, #36]	; (8009a60 <__assert_func+0x2c>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4605      	mov	r5, r0
 8009a40:	68d8      	ldr	r0, [r3, #12]
 8009a42:	b14c      	cbz	r4, 8009a58 <__assert_func+0x24>
 8009a44:	4b07      	ldr	r3, [pc, #28]	; (8009a64 <__assert_func+0x30>)
 8009a46:	9100      	str	r1, [sp, #0]
 8009a48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a4c:	4906      	ldr	r1, [pc, #24]	; (8009a68 <__assert_func+0x34>)
 8009a4e:	462b      	mov	r3, r5
 8009a50:	f000 fca4 	bl	800a39c <fiprintf>
 8009a54:	f000 fcec 	bl	800a430 <abort>
 8009a58:	4b04      	ldr	r3, [pc, #16]	; (8009a6c <__assert_func+0x38>)
 8009a5a:	461c      	mov	r4, r3
 8009a5c:	e7f3      	b.n	8009a46 <__assert_func+0x12>
 8009a5e:	bf00      	nop
 8009a60:	20000118 	.word	0x20000118
 8009a64:	08011adb 	.word	0x08011adb
 8009a68:	08011ae8 	.word	0x08011ae8
 8009a6c:	08011b16 	.word	0x08011b16

08009a70 <_free_r>:
 8009a70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a72:	2900      	cmp	r1, #0
 8009a74:	d044      	beq.n	8009b00 <_free_r+0x90>
 8009a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a7a:	9001      	str	r0, [sp, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f1a1 0404 	sub.w	r4, r1, #4
 8009a82:	bfb8      	it	lt
 8009a84:	18e4      	addlt	r4, r4, r3
 8009a86:	f000 f8e7 	bl	8009c58 <__malloc_lock>
 8009a8a:	4a1e      	ldr	r2, [pc, #120]	; (8009b04 <_free_r+0x94>)
 8009a8c:	9801      	ldr	r0, [sp, #4]
 8009a8e:	6813      	ldr	r3, [r2, #0]
 8009a90:	b933      	cbnz	r3, 8009aa0 <_free_r+0x30>
 8009a92:	6063      	str	r3, [r4, #4]
 8009a94:	6014      	str	r4, [r2, #0]
 8009a96:	b003      	add	sp, #12
 8009a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a9c:	f000 b8e2 	b.w	8009c64 <__malloc_unlock>
 8009aa0:	42a3      	cmp	r3, r4
 8009aa2:	d908      	bls.n	8009ab6 <_free_r+0x46>
 8009aa4:	6825      	ldr	r5, [r4, #0]
 8009aa6:	1961      	adds	r1, r4, r5
 8009aa8:	428b      	cmp	r3, r1
 8009aaa:	bf01      	itttt	eq
 8009aac:	6819      	ldreq	r1, [r3, #0]
 8009aae:	685b      	ldreq	r3, [r3, #4]
 8009ab0:	1949      	addeq	r1, r1, r5
 8009ab2:	6021      	streq	r1, [r4, #0]
 8009ab4:	e7ed      	b.n	8009a92 <_free_r+0x22>
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	b10b      	cbz	r3, 8009ac0 <_free_r+0x50>
 8009abc:	42a3      	cmp	r3, r4
 8009abe:	d9fa      	bls.n	8009ab6 <_free_r+0x46>
 8009ac0:	6811      	ldr	r1, [r2, #0]
 8009ac2:	1855      	adds	r5, r2, r1
 8009ac4:	42a5      	cmp	r5, r4
 8009ac6:	d10b      	bne.n	8009ae0 <_free_r+0x70>
 8009ac8:	6824      	ldr	r4, [r4, #0]
 8009aca:	4421      	add	r1, r4
 8009acc:	1854      	adds	r4, r2, r1
 8009ace:	42a3      	cmp	r3, r4
 8009ad0:	6011      	str	r1, [r2, #0]
 8009ad2:	d1e0      	bne.n	8009a96 <_free_r+0x26>
 8009ad4:	681c      	ldr	r4, [r3, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	6053      	str	r3, [r2, #4]
 8009ada:	440c      	add	r4, r1
 8009adc:	6014      	str	r4, [r2, #0]
 8009ade:	e7da      	b.n	8009a96 <_free_r+0x26>
 8009ae0:	d902      	bls.n	8009ae8 <_free_r+0x78>
 8009ae2:	230c      	movs	r3, #12
 8009ae4:	6003      	str	r3, [r0, #0]
 8009ae6:	e7d6      	b.n	8009a96 <_free_r+0x26>
 8009ae8:	6825      	ldr	r5, [r4, #0]
 8009aea:	1961      	adds	r1, r4, r5
 8009aec:	428b      	cmp	r3, r1
 8009aee:	bf04      	itt	eq
 8009af0:	6819      	ldreq	r1, [r3, #0]
 8009af2:	685b      	ldreq	r3, [r3, #4]
 8009af4:	6063      	str	r3, [r4, #4]
 8009af6:	bf04      	itt	eq
 8009af8:	1949      	addeq	r1, r1, r5
 8009afa:	6021      	streq	r1, [r4, #0]
 8009afc:	6054      	str	r4, [r2, #4]
 8009afe:	e7ca      	b.n	8009a96 <_free_r+0x26>
 8009b00:	b003      	add	sp, #12
 8009b02:	bd30      	pop	{r4, r5, pc}
 8009b04:	200008bc 	.word	0x200008bc

08009b08 <malloc>:
 8009b08:	4b02      	ldr	r3, [pc, #8]	; (8009b14 <malloc+0xc>)
 8009b0a:	4601      	mov	r1, r0
 8009b0c:	6818      	ldr	r0, [r3, #0]
 8009b0e:	f000 b823 	b.w	8009b58 <_malloc_r>
 8009b12:	bf00      	nop
 8009b14:	20000118 	.word	0x20000118

08009b18 <sbrk_aligned>:
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	4e0e      	ldr	r6, [pc, #56]	; (8009b54 <sbrk_aligned+0x3c>)
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	6831      	ldr	r1, [r6, #0]
 8009b20:	4605      	mov	r5, r0
 8009b22:	b911      	cbnz	r1, 8009b2a <sbrk_aligned+0x12>
 8009b24:	f000 fc66 	bl	800a3f4 <_sbrk_r>
 8009b28:	6030      	str	r0, [r6, #0]
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	f000 fc61 	bl	800a3f4 <_sbrk_r>
 8009b32:	1c43      	adds	r3, r0, #1
 8009b34:	d00a      	beq.n	8009b4c <sbrk_aligned+0x34>
 8009b36:	1cc4      	adds	r4, r0, #3
 8009b38:	f024 0403 	bic.w	r4, r4, #3
 8009b3c:	42a0      	cmp	r0, r4
 8009b3e:	d007      	beq.n	8009b50 <sbrk_aligned+0x38>
 8009b40:	1a21      	subs	r1, r4, r0
 8009b42:	4628      	mov	r0, r5
 8009b44:	f000 fc56 	bl	800a3f4 <_sbrk_r>
 8009b48:	3001      	adds	r0, #1
 8009b4a:	d101      	bne.n	8009b50 <sbrk_aligned+0x38>
 8009b4c:	f04f 34ff 	mov.w	r4, #4294967295
 8009b50:	4620      	mov	r0, r4
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
 8009b54:	200008c0 	.word	0x200008c0

08009b58 <_malloc_r>:
 8009b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b5c:	1ccd      	adds	r5, r1, #3
 8009b5e:	f025 0503 	bic.w	r5, r5, #3
 8009b62:	3508      	adds	r5, #8
 8009b64:	2d0c      	cmp	r5, #12
 8009b66:	bf38      	it	cc
 8009b68:	250c      	movcc	r5, #12
 8009b6a:	2d00      	cmp	r5, #0
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	db01      	blt.n	8009b74 <_malloc_r+0x1c>
 8009b70:	42a9      	cmp	r1, r5
 8009b72:	d905      	bls.n	8009b80 <_malloc_r+0x28>
 8009b74:	230c      	movs	r3, #12
 8009b76:	603b      	str	r3, [r7, #0]
 8009b78:	2600      	movs	r6, #0
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009c54 <_malloc_r+0xfc>
 8009b84:	f000 f868 	bl	8009c58 <__malloc_lock>
 8009b88:	f8d8 3000 	ldr.w	r3, [r8]
 8009b8c:	461c      	mov	r4, r3
 8009b8e:	bb5c      	cbnz	r4, 8009be8 <_malloc_r+0x90>
 8009b90:	4629      	mov	r1, r5
 8009b92:	4638      	mov	r0, r7
 8009b94:	f7ff ffc0 	bl	8009b18 <sbrk_aligned>
 8009b98:	1c43      	adds	r3, r0, #1
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	d155      	bne.n	8009c4a <_malloc_r+0xf2>
 8009b9e:	f8d8 4000 	ldr.w	r4, [r8]
 8009ba2:	4626      	mov	r6, r4
 8009ba4:	2e00      	cmp	r6, #0
 8009ba6:	d145      	bne.n	8009c34 <_malloc_r+0xdc>
 8009ba8:	2c00      	cmp	r4, #0
 8009baa:	d048      	beq.n	8009c3e <_malloc_r+0xe6>
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	4631      	mov	r1, r6
 8009bb0:	4638      	mov	r0, r7
 8009bb2:	eb04 0903 	add.w	r9, r4, r3
 8009bb6:	f000 fc1d 	bl	800a3f4 <_sbrk_r>
 8009bba:	4581      	cmp	r9, r0
 8009bbc:	d13f      	bne.n	8009c3e <_malloc_r+0xe6>
 8009bbe:	6821      	ldr	r1, [r4, #0]
 8009bc0:	1a6d      	subs	r5, r5, r1
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	4638      	mov	r0, r7
 8009bc6:	f7ff ffa7 	bl	8009b18 <sbrk_aligned>
 8009bca:	3001      	adds	r0, #1
 8009bcc:	d037      	beq.n	8009c3e <_malloc_r+0xe6>
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	442b      	add	r3, r5
 8009bd2:	6023      	str	r3, [r4, #0]
 8009bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d038      	beq.n	8009c4e <_malloc_r+0xf6>
 8009bdc:	685a      	ldr	r2, [r3, #4]
 8009bde:	42a2      	cmp	r2, r4
 8009be0:	d12b      	bne.n	8009c3a <_malloc_r+0xe2>
 8009be2:	2200      	movs	r2, #0
 8009be4:	605a      	str	r2, [r3, #4]
 8009be6:	e00f      	b.n	8009c08 <_malloc_r+0xb0>
 8009be8:	6822      	ldr	r2, [r4, #0]
 8009bea:	1b52      	subs	r2, r2, r5
 8009bec:	d41f      	bmi.n	8009c2e <_malloc_r+0xd6>
 8009bee:	2a0b      	cmp	r2, #11
 8009bf0:	d917      	bls.n	8009c22 <_malloc_r+0xca>
 8009bf2:	1961      	adds	r1, r4, r5
 8009bf4:	42a3      	cmp	r3, r4
 8009bf6:	6025      	str	r5, [r4, #0]
 8009bf8:	bf18      	it	ne
 8009bfa:	6059      	strne	r1, [r3, #4]
 8009bfc:	6863      	ldr	r3, [r4, #4]
 8009bfe:	bf08      	it	eq
 8009c00:	f8c8 1000 	streq.w	r1, [r8]
 8009c04:	5162      	str	r2, [r4, r5]
 8009c06:	604b      	str	r3, [r1, #4]
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f104 060b 	add.w	r6, r4, #11
 8009c0e:	f000 f829 	bl	8009c64 <__malloc_unlock>
 8009c12:	f026 0607 	bic.w	r6, r6, #7
 8009c16:	1d23      	adds	r3, r4, #4
 8009c18:	1af2      	subs	r2, r6, r3
 8009c1a:	d0ae      	beq.n	8009b7a <_malloc_r+0x22>
 8009c1c:	1b9b      	subs	r3, r3, r6
 8009c1e:	50a3      	str	r3, [r4, r2]
 8009c20:	e7ab      	b.n	8009b7a <_malloc_r+0x22>
 8009c22:	42a3      	cmp	r3, r4
 8009c24:	6862      	ldr	r2, [r4, #4]
 8009c26:	d1dd      	bne.n	8009be4 <_malloc_r+0x8c>
 8009c28:	f8c8 2000 	str.w	r2, [r8]
 8009c2c:	e7ec      	b.n	8009c08 <_malloc_r+0xb0>
 8009c2e:	4623      	mov	r3, r4
 8009c30:	6864      	ldr	r4, [r4, #4]
 8009c32:	e7ac      	b.n	8009b8e <_malloc_r+0x36>
 8009c34:	4634      	mov	r4, r6
 8009c36:	6876      	ldr	r6, [r6, #4]
 8009c38:	e7b4      	b.n	8009ba4 <_malloc_r+0x4c>
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	e7cc      	b.n	8009bd8 <_malloc_r+0x80>
 8009c3e:	230c      	movs	r3, #12
 8009c40:	603b      	str	r3, [r7, #0]
 8009c42:	4638      	mov	r0, r7
 8009c44:	f000 f80e 	bl	8009c64 <__malloc_unlock>
 8009c48:	e797      	b.n	8009b7a <_malloc_r+0x22>
 8009c4a:	6025      	str	r5, [r4, #0]
 8009c4c:	e7dc      	b.n	8009c08 <_malloc_r+0xb0>
 8009c4e:	605b      	str	r3, [r3, #4]
 8009c50:	deff      	udf	#255	; 0xff
 8009c52:	bf00      	nop
 8009c54:	200008bc 	.word	0x200008bc

08009c58 <__malloc_lock>:
 8009c58:	4801      	ldr	r0, [pc, #4]	; (8009c60 <__malloc_lock+0x8>)
 8009c5a:	f7ff bee8 	b.w	8009a2e <__retarget_lock_acquire_recursive>
 8009c5e:	bf00      	nop
 8009c60:	200008b8 	.word	0x200008b8

08009c64 <__malloc_unlock>:
 8009c64:	4801      	ldr	r0, [pc, #4]	; (8009c6c <__malloc_unlock+0x8>)
 8009c66:	f7ff bee3 	b.w	8009a30 <__retarget_lock_release_recursive>
 8009c6a:	bf00      	nop
 8009c6c:	200008b8 	.word	0x200008b8

08009c70 <__ssputs_r>:
 8009c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c74:	688e      	ldr	r6, [r1, #8]
 8009c76:	461f      	mov	r7, r3
 8009c78:	42be      	cmp	r6, r7
 8009c7a:	680b      	ldr	r3, [r1, #0]
 8009c7c:	4682      	mov	sl, r0
 8009c7e:	460c      	mov	r4, r1
 8009c80:	4690      	mov	r8, r2
 8009c82:	d82c      	bhi.n	8009cde <__ssputs_r+0x6e>
 8009c84:	898a      	ldrh	r2, [r1, #12]
 8009c86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c8a:	d026      	beq.n	8009cda <__ssputs_r+0x6a>
 8009c8c:	6965      	ldr	r5, [r4, #20]
 8009c8e:	6909      	ldr	r1, [r1, #16]
 8009c90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c94:	eba3 0901 	sub.w	r9, r3, r1
 8009c98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c9c:	1c7b      	adds	r3, r7, #1
 8009c9e:	444b      	add	r3, r9
 8009ca0:	106d      	asrs	r5, r5, #1
 8009ca2:	429d      	cmp	r5, r3
 8009ca4:	bf38      	it	cc
 8009ca6:	461d      	movcc	r5, r3
 8009ca8:	0553      	lsls	r3, r2, #21
 8009caa:	d527      	bpl.n	8009cfc <__ssputs_r+0x8c>
 8009cac:	4629      	mov	r1, r5
 8009cae:	f7ff ff53 	bl	8009b58 <_malloc_r>
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	b360      	cbz	r0, 8009d10 <__ssputs_r+0xa0>
 8009cb6:	6921      	ldr	r1, [r4, #16]
 8009cb8:	464a      	mov	r2, r9
 8009cba:	f000 fbab 	bl	800a414 <memcpy>
 8009cbe:	89a3      	ldrh	r3, [r4, #12]
 8009cc0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc8:	81a3      	strh	r3, [r4, #12]
 8009cca:	6126      	str	r6, [r4, #16]
 8009ccc:	6165      	str	r5, [r4, #20]
 8009cce:	444e      	add	r6, r9
 8009cd0:	eba5 0509 	sub.w	r5, r5, r9
 8009cd4:	6026      	str	r6, [r4, #0]
 8009cd6:	60a5      	str	r5, [r4, #8]
 8009cd8:	463e      	mov	r6, r7
 8009cda:	42be      	cmp	r6, r7
 8009cdc:	d900      	bls.n	8009ce0 <__ssputs_r+0x70>
 8009cde:	463e      	mov	r6, r7
 8009ce0:	6820      	ldr	r0, [r4, #0]
 8009ce2:	4632      	mov	r2, r6
 8009ce4:	4641      	mov	r1, r8
 8009ce6:	f000 fb6b 	bl	800a3c0 <memmove>
 8009cea:	68a3      	ldr	r3, [r4, #8]
 8009cec:	1b9b      	subs	r3, r3, r6
 8009cee:	60a3      	str	r3, [r4, #8]
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	4433      	add	r3, r6
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cfc:	462a      	mov	r2, r5
 8009cfe:	f000 fb9e 	bl	800a43e <_realloc_r>
 8009d02:	4606      	mov	r6, r0
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d1e0      	bne.n	8009cca <__ssputs_r+0x5a>
 8009d08:	6921      	ldr	r1, [r4, #16]
 8009d0a:	4650      	mov	r0, sl
 8009d0c:	f7ff feb0 	bl	8009a70 <_free_r>
 8009d10:	230c      	movs	r3, #12
 8009d12:	f8ca 3000 	str.w	r3, [sl]
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d1c:	81a3      	strh	r3, [r4, #12]
 8009d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d22:	e7e9      	b.n	8009cf8 <__ssputs_r+0x88>

08009d24 <_svfiprintf_r>:
 8009d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d28:	4698      	mov	r8, r3
 8009d2a:	898b      	ldrh	r3, [r1, #12]
 8009d2c:	061b      	lsls	r3, r3, #24
 8009d2e:	b09d      	sub	sp, #116	; 0x74
 8009d30:	4607      	mov	r7, r0
 8009d32:	460d      	mov	r5, r1
 8009d34:	4614      	mov	r4, r2
 8009d36:	d50e      	bpl.n	8009d56 <_svfiprintf_r+0x32>
 8009d38:	690b      	ldr	r3, [r1, #16]
 8009d3a:	b963      	cbnz	r3, 8009d56 <_svfiprintf_r+0x32>
 8009d3c:	2140      	movs	r1, #64	; 0x40
 8009d3e:	f7ff ff0b 	bl	8009b58 <_malloc_r>
 8009d42:	6028      	str	r0, [r5, #0]
 8009d44:	6128      	str	r0, [r5, #16]
 8009d46:	b920      	cbnz	r0, 8009d52 <_svfiprintf_r+0x2e>
 8009d48:	230c      	movs	r3, #12
 8009d4a:	603b      	str	r3, [r7, #0]
 8009d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d50:	e0d0      	b.n	8009ef4 <_svfiprintf_r+0x1d0>
 8009d52:	2340      	movs	r3, #64	; 0x40
 8009d54:	616b      	str	r3, [r5, #20]
 8009d56:	2300      	movs	r3, #0
 8009d58:	9309      	str	r3, [sp, #36]	; 0x24
 8009d5a:	2320      	movs	r3, #32
 8009d5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d64:	2330      	movs	r3, #48	; 0x30
 8009d66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009f0c <_svfiprintf_r+0x1e8>
 8009d6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d6e:	f04f 0901 	mov.w	r9, #1
 8009d72:	4623      	mov	r3, r4
 8009d74:	469a      	mov	sl, r3
 8009d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d7a:	b10a      	cbz	r2, 8009d80 <_svfiprintf_r+0x5c>
 8009d7c:	2a25      	cmp	r2, #37	; 0x25
 8009d7e:	d1f9      	bne.n	8009d74 <_svfiprintf_r+0x50>
 8009d80:	ebba 0b04 	subs.w	fp, sl, r4
 8009d84:	d00b      	beq.n	8009d9e <_svfiprintf_r+0x7a>
 8009d86:	465b      	mov	r3, fp
 8009d88:	4622      	mov	r2, r4
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	4638      	mov	r0, r7
 8009d8e:	f7ff ff6f 	bl	8009c70 <__ssputs_r>
 8009d92:	3001      	adds	r0, #1
 8009d94:	f000 80a9 	beq.w	8009eea <_svfiprintf_r+0x1c6>
 8009d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d9a:	445a      	add	r2, fp
 8009d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 80a1 	beq.w	8009eea <_svfiprintf_r+0x1c6>
 8009da8:	2300      	movs	r3, #0
 8009daa:	f04f 32ff 	mov.w	r2, #4294967295
 8009dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009db2:	f10a 0a01 	add.w	sl, sl, #1
 8009db6:	9304      	str	r3, [sp, #16]
 8009db8:	9307      	str	r3, [sp, #28]
 8009dba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dbe:	931a      	str	r3, [sp, #104]	; 0x68
 8009dc0:	4654      	mov	r4, sl
 8009dc2:	2205      	movs	r2, #5
 8009dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc8:	4850      	ldr	r0, [pc, #320]	; (8009f0c <_svfiprintf_r+0x1e8>)
 8009dca:	f7f6 fa09 	bl	80001e0 <memchr>
 8009dce:	9a04      	ldr	r2, [sp, #16]
 8009dd0:	b9d8      	cbnz	r0, 8009e0a <_svfiprintf_r+0xe6>
 8009dd2:	06d0      	lsls	r0, r2, #27
 8009dd4:	bf44      	itt	mi
 8009dd6:	2320      	movmi	r3, #32
 8009dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ddc:	0711      	lsls	r1, r2, #28
 8009dde:	bf44      	itt	mi
 8009de0:	232b      	movmi	r3, #43	; 0x2b
 8009de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009de6:	f89a 3000 	ldrb.w	r3, [sl]
 8009dea:	2b2a      	cmp	r3, #42	; 0x2a
 8009dec:	d015      	beq.n	8009e1a <_svfiprintf_r+0xf6>
 8009dee:	9a07      	ldr	r2, [sp, #28]
 8009df0:	4654      	mov	r4, sl
 8009df2:	2000      	movs	r0, #0
 8009df4:	f04f 0c0a 	mov.w	ip, #10
 8009df8:	4621      	mov	r1, r4
 8009dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dfe:	3b30      	subs	r3, #48	; 0x30
 8009e00:	2b09      	cmp	r3, #9
 8009e02:	d94d      	bls.n	8009ea0 <_svfiprintf_r+0x17c>
 8009e04:	b1b0      	cbz	r0, 8009e34 <_svfiprintf_r+0x110>
 8009e06:	9207      	str	r2, [sp, #28]
 8009e08:	e014      	b.n	8009e34 <_svfiprintf_r+0x110>
 8009e0a:	eba0 0308 	sub.w	r3, r0, r8
 8009e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8009e12:	4313      	orrs	r3, r2
 8009e14:	9304      	str	r3, [sp, #16]
 8009e16:	46a2      	mov	sl, r4
 8009e18:	e7d2      	b.n	8009dc0 <_svfiprintf_r+0x9c>
 8009e1a:	9b03      	ldr	r3, [sp, #12]
 8009e1c:	1d19      	adds	r1, r3, #4
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	9103      	str	r1, [sp, #12]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	bfbb      	ittet	lt
 8009e26:	425b      	neglt	r3, r3
 8009e28:	f042 0202 	orrlt.w	r2, r2, #2
 8009e2c:	9307      	strge	r3, [sp, #28]
 8009e2e:	9307      	strlt	r3, [sp, #28]
 8009e30:	bfb8      	it	lt
 8009e32:	9204      	strlt	r2, [sp, #16]
 8009e34:	7823      	ldrb	r3, [r4, #0]
 8009e36:	2b2e      	cmp	r3, #46	; 0x2e
 8009e38:	d10c      	bne.n	8009e54 <_svfiprintf_r+0x130>
 8009e3a:	7863      	ldrb	r3, [r4, #1]
 8009e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e3e:	d134      	bne.n	8009eaa <_svfiprintf_r+0x186>
 8009e40:	9b03      	ldr	r3, [sp, #12]
 8009e42:	1d1a      	adds	r2, r3, #4
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	9203      	str	r2, [sp, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	bfb8      	it	lt
 8009e4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e50:	3402      	adds	r4, #2
 8009e52:	9305      	str	r3, [sp, #20]
 8009e54:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009f1c <_svfiprintf_r+0x1f8>
 8009e58:	7821      	ldrb	r1, [r4, #0]
 8009e5a:	2203      	movs	r2, #3
 8009e5c:	4650      	mov	r0, sl
 8009e5e:	f7f6 f9bf 	bl	80001e0 <memchr>
 8009e62:	b138      	cbz	r0, 8009e74 <_svfiprintf_r+0x150>
 8009e64:	9b04      	ldr	r3, [sp, #16]
 8009e66:	eba0 000a 	sub.w	r0, r0, sl
 8009e6a:	2240      	movs	r2, #64	; 0x40
 8009e6c:	4082      	lsls	r2, r0
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	3401      	adds	r4, #1
 8009e72:	9304      	str	r3, [sp, #16]
 8009e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e78:	4825      	ldr	r0, [pc, #148]	; (8009f10 <_svfiprintf_r+0x1ec>)
 8009e7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e7e:	2206      	movs	r2, #6
 8009e80:	f7f6 f9ae 	bl	80001e0 <memchr>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d038      	beq.n	8009efa <_svfiprintf_r+0x1d6>
 8009e88:	4b22      	ldr	r3, [pc, #136]	; (8009f14 <_svfiprintf_r+0x1f0>)
 8009e8a:	bb1b      	cbnz	r3, 8009ed4 <_svfiprintf_r+0x1b0>
 8009e8c:	9b03      	ldr	r3, [sp, #12]
 8009e8e:	3307      	adds	r3, #7
 8009e90:	f023 0307 	bic.w	r3, r3, #7
 8009e94:	3308      	adds	r3, #8
 8009e96:	9303      	str	r3, [sp, #12]
 8009e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e9a:	4433      	add	r3, r6
 8009e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e9e:	e768      	b.n	8009d72 <_svfiprintf_r+0x4e>
 8009ea0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	2001      	movs	r0, #1
 8009ea8:	e7a6      	b.n	8009df8 <_svfiprintf_r+0xd4>
 8009eaa:	2300      	movs	r3, #0
 8009eac:	3401      	adds	r4, #1
 8009eae:	9305      	str	r3, [sp, #20]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	f04f 0c0a 	mov.w	ip, #10
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ebc:	3a30      	subs	r2, #48	; 0x30
 8009ebe:	2a09      	cmp	r2, #9
 8009ec0:	d903      	bls.n	8009eca <_svfiprintf_r+0x1a6>
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d0c6      	beq.n	8009e54 <_svfiprintf_r+0x130>
 8009ec6:	9105      	str	r1, [sp, #20]
 8009ec8:	e7c4      	b.n	8009e54 <_svfiprintf_r+0x130>
 8009eca:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ece:	4604      	mov	r4, r0
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e7f0      	b.n	8009eb6 <_svfiprintf_r+0x192>
 8009ed4:	ab03      	add	r3, sp, #12
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	462a      	mov	r2, r5
 8009eda:	4b0f      	ldr	r3, [pc, #60]	; (8009f18 <_svfiprintf_r+0x1f4>)
 8009edc:	a904      	add	r1, sp, #16
 8009ede:	4638      	mov	r0, r7
 8009ee0:	f3af 8000 	nop.w
 8009ee4:	1c42      	adds	r2, r0, #1
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	d1d6      	bne.n	8009e98 <_svfiprintf_r+0x174>
 8009eea:	89ab      	ldrh	r3, [r5, #12]
 8009eec:	065b      	lsls	r3, r3, #25
 8009eee:	f53f af2d 	bmi.w	8009d4c <_svfiprintf_r+0x28>
 8009ef2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ef4:	b01d      	add	sp, #116	; 0x74
 8009ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009efa:	ab03      	add	r3, sp, #12
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	462a      	mov	r2, r5
 8009f00:	4b05      	ldr	r3, [pc, #20]	; (8009f18 <_svfiprintf_r+0x1f4>)
 8009f02:	a904      	add	r1, sp, #16
 8009f04:	4638      	mov	r0, r7
 8009f06:	f000 f879 	bl	8009ffc <_printf_i>
 8009f0a:	e7eb      	b.n	8009ee4 <_svfiprintf_r+0x1c0>
 8009f0c:	08011b17 	.word	0x08011b17
 8009f10:	08011b21 	.word	0x08011b21
 8009f14:	00000000 	.word	0x00000000
 8009f18:	08009c71 	.word	0x08009c71
 8009f1c:	08011b1d 	.word	0x08011b1d

08009f20 <_printf_common>:
 8009f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f24:	4616      	mov	r6, r2
 8009f26:	4699      	mov	r9, r3
 8009f28:	688a      	ldr	r2, [r1, #8]
 8009f2a:	690b      	ldr	r3, [r1, #16]
 8009f2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f30:	4293      	cmp	r3, r2
 8009f32:	bfb8      	it	lt
 8009f34:	4613      	movlt	r3, r2
 8009f36:	6033      	str	r3, [r6, #0]
 8009f38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f3c:	4607      	mov	r7, r0
 8009f3e:	460c      	mov	r4, r1
 8009f40:	b10a      	cbz	r2, 8009f46 <_printf_common+0x26>
 8009f42:	3301      	adds	r3, #1
 8009f44:	6033      	str	r3, [r6, #0]
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	0699      	lsls	r1, r3, #26
 8009f4a:	bf42      	ittt	mi
 8009f4c:	6833      	ldrmi	r3, [r6, #0]
 8009f4e:	3302      	addmi	r3, #2
 8009f50:	6033      	strmi	r3, [r6, #0]
 8009f52:	6825      	ldr	r5, [r4, #0]
 8009f54:	f015 0506 	ands.w	r5, r5, #6
 8009f58:	d106      	bne.n	8009f68 <_printf_common+0x48>
 8009f5a:	f104 0a19 	add.w	sl, r4, #25
 8009f5e:	68e3      	ldr	r3, [r4, #12]
 8009f60:	6832      	ldr	r2, [r6, #0]
 8009f62:	1a9b      	subs	r3, r3, r2
 8009f64:	42ab      	cmp	r3, r5
 8009f66:	dc26      	bgt.n	8009fb6 <_printf_common+0x96>
 8009f68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f6c:	1e13      	subs	r3, r2, #0
 8009f6e:	6822      	ldr	r2, [r4, #0]
 8009f70:	bf18      	it	ne
 8009f72:	2301      	movne	r3, #1
 8009f74:	0692      	lsls	r2, r2, #26
 8009f76:	d42b      	bmi.n	8009fd0 <_printf_common+0xb0>
 8009f78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f7c:	4649      	mov	r1, r9
 8009f7e:	4638      	mov	r0, r7
 8009f80:	47c0      	blx	r8
 8009f82:	3001      	adds	r0, #1
 8009f84:	d01e      	beq.n	8009fc4 <_printf_common+0xa4>
 8009f86:	6823      	ldr	r3, [r4, #0]
 8009f88:	6922      	ldr	r2, [r4, #16]
 8009f8a:	f003 0306 	and.w	r3, r3, #6
 8009f8e:	2b04      	cmp	r3, #4
 8009f90:	bf02      	ittt	eq
 8009f92:	68e5      	ldreq	r5, [r4, #12]
 8009f94:	6833      	ldreq	r3, [r6, #0]
 8009f96:	1aed      	subeq	r5, r5, r3
 8009f98:	68a3      	ldr	r3, [r4, #8]
 8009f9a:	bf0c      	ite	eq
 8009f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fa0:	2500      	movne	r5, #0
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	bfc4      	itt	gt
 8009fa6:	1a9b      	subgt	r3, r3, r2
 8009fa8:	18ed      	addgt	r5, r5, r3
 8009faa:	2600      	movs	r6, #0
 8009fac:	341a      	adds	r4, #26
 8009fae:	42b5      	cmp	r5, r6
 8009fb0:	d11a      	bne.n	8009fe8 <_printf_common+0xc8>
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	e008      	b.n	8009fc8 <_printf_common+0xa8>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	4652      	mov	r2, sl
 8009fba:	4649      	mov	r1, r9
 8009fbc:	4638      	mov	r0, r7
 8009fbe:	47c0      	blx	r8
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	d103      	bne.n	8009fcc <_printf_common+0xac>
 8009fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fcc:	3501      	adds	r5, #1
 8009fce:	e7c6      	b.n	8009f5e <_printf_common+0x3e>
 8009fd0:	18e1      	adds	r1, r4, r3
 8009fd2:	1c5a      	adds	r2, r3, #1
 8009fd4:	2030      	movs	r0, #48	; 0x30
 8009fd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fda:	4422      	add	r2, r4
 8009fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fe4:	3302      	adds	r3, #2
 8009fe6:	e7c7      	b.n	8009f78 <_printf_common+0x58>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	4622      	mov	r2, r4
 8009fec:	4649      	mov	r1, r9
 8009fee:	4638      	mov	r0, r7
 8009ff0:	47c0      	blx	r8
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d0e6      	beq.n	8009fc4 <_printf_common+0xa4>
 8009ff6:	3601      	adds	r6, #1
 8009ff8:	e7d9      	b.n	8009fae <_printf_common+0x8e>
	...

08009ffc <_printf_i>:
 8009ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a000:	7e0f      	ldrb	r7, [r1, #24]
 800a002:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a004:	2f78      	cmp	r7, #120	; 0x78
 800a006:	4691      	mov	r9, r2
 800a008:	4680      	mov	r8, r0
 800a00a:	460c      	mov	r4, r1
 800a00c:	469a      	mov	sl, r3
 800a00e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a012:	d807      	bhi.n	800a024 <_printf_i+0x28>
 800a014:	2f62      	cmp	r7, #98	; 0x62
 800a016:	d80a      	bhi.n	800a02e <_printf_i+0x32>
 800a018:	2f00      	cmp	r7, #0
 800a01a:	f000 80d4 	beq.w	800a1c6 <_printf_i+0x1ca>
 800a01e:	2f58      	cmp	r7, #88	; 0x58
 800a020:	f000 80c0 	beq.w	800a1a4 <_printf_i+0x1a8>
 800a024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a028:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a02c:	e03a      	b.n	800a0a4 <_printf_i+0xa8>
 800a02e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a032:	2b15      	cmp	r3, #21
 800a034:	d8f6      	bhi.n	800a024 <_printf_i+0x28>
 800a036:	a101      	add	r1, pc, #4	; (adr r1, 800a03c <_printf_i+0x40>)
 800a038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a03c:	0800a095 	.word	0x0800a095
 800a040:	0800a0a9 	.word	0x0800a0a9
 800a044:	0800a025 	.word	0x0800a025
 800a048:	0800a025 	.word	0x0800a025
 800a04c:	0800a025 	.word	0x0800a025
 800a050:	0800a025 	.word	0x0800a025
 800a054:	0800a0a9 	.word	0x0800a0a9
 800a058:	0800a025 	.word	0x0800a025
 800a05c:	0800a025 	.word	0x0800a025
 800a060:	0800a025 	.word	0x0800a025
 800a064:	0800a025 	.word	0x0800a025
 800a068:	0800a1ad 	.word	0x0800a1ad
 800a06c:	0800a0d5 	.word	0x0800a0d5
 800a070:	0800a167 	.word	0x0800a167
 800a074:	0800a025 	.word	0x0800a025
 800a078:	0800a025 	.word	0x0800a025
 800a07c:	0800a1cf 	.word	0x0800a1cf
 800a080:	0800a025 	.word	0x0800a025
 800a084:	0800a0d5 	.word	0x0800a0d5
 800a088:	0800a025 	.word	0x0800a025
 800a08c:	0800a025 	.word	0x0800a025
 800a090:	0800a16f 	.word	0x0800a16f
 800a094:	682b      	ldr	r3, [r5, #0]
 800a096:	1d1a      	adds	r2, r3, #4
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	602a      	str	r2, [r5, #0]
 800a09c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e09f      	b.n	800a1e8 <_printf_i+0x1ec>
 800a0a8:	6820      	ldr	r0, [r4, #0]
 800a0aa:	682b      	ldr	r3, [r5, #0]
 800a0ac:	0607      	lsls	r7, r0, #24
 800a0ae:	f103 0104 	add.w	r1, r3, #4
 800a0b2:	6029      	str	r1, [r5, #0]
 800a0b4:	d501      	bpl.n	800a0ba <_printf_i+0xbe>
 800a0b6:	681e      	ldr	r6, [r3, #0]
 800a0b8:	e003      	b.n	800a0c2 <_printf_i+0xc6>
 800a0ba:	0646      	lsls	r6, r0, #25
 800a0bc:	d5fb      	bpl.n	800a0b6 <_printf_i+0xba>
 800a0be:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a0c2:	2e00      	cmp	r6, #0
 800a0c4:	da03      	bge.n	800a0ce <_printf_i+0xd2>
 800a0c6:	232d      	movs	r3, #45	; 0x2d
 800a0c8:	4276      	negs	r6, r6
 800a0ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0ce:	485a      	ldr	r0, [pc, #360]	; (800a238 <_printf_i+0x23c>)
 800a0d0:	230a      	movs	r3, #10
 800a0d2:	e012      	b.n	800a0fa <_printf_i+0xfe>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	6820      	ldr	r0, [r4, #0]
 800a0d8:	1d19      	adds	r1, r3, #4
 800a0da:	6029      	str	r1, [r5, #0]
 800a0dc:	0605      	lsls	r5, r0, #24
 800a0de:	d501      	bpl.n	800a0e4 <_printf_i+0xe8>
 800a0e0:	681e      	ldr	r6, [r3, #0]
 800a0e2:	e002      	b.n	800a0ea <_printf_i+0xee>
 800a0e4:	0641      	lsls	r1, r0, #25
 800a0e6:	d5fb      	bpl.n	800a0e0 <_printf_i+0xe4>
 800a0e8:	881e      	ldrh	r6, [r3, #0]
 800a0ea:	4853      	ldr	r0, [pc, #332]	; (800a238 <_printf_i+0x23c>)
 800a0ec:	2f6f      	cmp	r7, #111	; 0x6f
 800a0ee:	bf0c      	ite	eq
 800a0f0:	2308      	moveq	r3, #8
 800a0f2:	230a      	movne	r3, #10
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0fa:	6865      	ldr	r5, [r4, #4]
 800a0fc:	60a5      	str	r5, [r4, #8]
 800a0fe:	2d00      	cmp	r5, #0
 800a100:	bfa2      	ittt	ge
 800a102:	6821      	ldrge	r1, [r4, #0]
 800a104:	f021 0104 	bicge.w	r1, r1, #4
 800a108:	6021      	strge	r1, [r4, #0]
 800a10a:	b90e      	cbnz	r6, 800a110 <_printf_i+0x114>
 800a10c:	2d00      	cmp	r5, #0
 800a10e:	d04b      	beq.n	800a1a8 <_printf_i+0x1ac>
 800a110:	4615      	mov	r5, r2
 800a112:	fbb6 f1f3 	udiv	r1, r6, r3
 800a116:	fb03 6711 	mls	r7, r3, r1, r6
 800a11a:	5dc7      	ldrb	r7, [r0, r7]
 800a11c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a120:	4637      	mov	r7, r6
 800a122:	42bb      	cmp	r3, r7
 800a124:	460e      	mov	r6, r1
 800a126:	d9f4      	bls.n	800a112 <_printf_i+0x116>
 800a128:	2b08      	cmp	r3, #8
 800a12a:	d10b      	bne.n	800a144 <_printf_i+0x148>
 800a12c:	6823      	ldr	r3, [r4, #0]
 800a12e:	07de      	lsls	r6, r3, #31
 800a130:	d508      	bpl.n	800a144 <_printf_i+0x148>
 800a132:	6923      	ldr	r3, [r4, #16]
 800a134:	6861      	ldr	r1, [r4, #4]
 800a136:	4299      	cmp	r1, r3
 800a138:	bfde      	ittt	le
 800a13a:	2330      	movle	r3, #48	; 0x30
 800a13c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a140:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a144:	1b52      	subs	r2, r2, r5
 800a146:	6122      	str	r2, [r4, #16]
 800a148:	f8cd a000 	str.w	sl, [sp]
 800a14c:	464b      	mov	r3, r9
 800a14e:	aa03      	add	r2, sp, #12
 800a150:	4621      	mov	r1, r4
 800a152:	4640      	mov	r0, r8
 800a154:	f7ff fee4 	bl	8009f20 <_printf_common>
 800a158:	3001      	adds	r0, #1
 800a15a:	d14a      	bne.n	800a1f2 <_printf_i+0x1f6>
 800a15c:	f04f 30ff 	mov.w	r0, #4294967295
 800a160:	b004      	add	sp, #16
 800a162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a166:	6823      	ldr	r3, [r4, #0]
 800a168:	f043 0320 	orr.w	r3, r3, #32
 800a16c:	6023      	str	r3, [r4, #0]
 800a16e:	4833      	ldr	r0, [pc, #204]	; (800a23c <_printf_i+0x240>)
 800a170:	2778      	movs	r7, #120	; 0x78
 800a172:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a176:	6823      	ldr	r3, [r4, #0]
 800a178:	6829      	ldr	r1, [r5, #0]
 800a17a:	061f      	lsls	r7, r3, #24
 800a17c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a180:	d402      	bmi.n	800a188 <_printf_i+0x18c>
 800a182:	065f      	lsls	r7, r3, #25
 800a184:	bf48      	it	mi
 800a186:	b2b6      	uxthmi	r6, r6
 800a188:	07df      	lsls	r7, r3, #31
 800a18a:	bf48      	it	mi
 800a18c:	f043 0320 	orrmi.w	r3, r3, #32
 800a190:	6029      	str	r1, [r5, #0]
 800a192:	bf48      	it	mi
 800a194:	6023      	strmi	r3, [r4, #0]
 800a196:	b91e      	cbnz	r6, 800a1a0 <_printf_i+0x1a4>
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	f023 0320 	bic.w	r3, r3, #32
 800a19e:	6023      	str	r3, [r4, #0]
 800a1a0:	2310      	movs	r3, #16
 800a1a2:	e7a7      	b.n	800a0f4 <_printf_i+0xf8>
 800a1a4:	4824      	ldr	r0, [pc, #144]	; (800a238 <_printf_i+0x23c>)
 800a1a6:	e7e4      	b.n	800a172 <_printf_i+0x176>
 800a1a8:	4615      	mov	r5, r2
 800a1aa:	e7bd      	b.n	800a128 <_printf_i+0x12c>
 800a1ac:	682b      	ldr	r3, [r5, #0]
 800a1ae:	6826      	ldr	r6, [r4, #0]
 800a1b0:	6961      	ldr	r1, [r4, #20]
 800a1b2:	1d18      	adds	r0, r3, #4
 800a1b4:	6028      	str	r0, [r5, #0]
 800a1b6:	0635      	lsls	r5, r6, #24
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	d501      	bpl.n	800a1c0 <_printf_i+0x1c4>
 800a1bc:	6019      	str	r1, [r3, #0]
 800a1be:	e002      	b.n	800a1c6 <_printf_i+0x1ca>
 800a1c0:	0670      	lsls	r0, r6, #25
 800a1c2:	d5fb      	bpl.n	800a1bc <_printf_i+0x1c0>
 800a1c4:	8019      	strh	r1, [r3, #0]
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	6123      	str	r3, [r4, #16]
 800a1ca:	4615      	mov	r5, r2
 800a1cc:	e7bc      	b.n	800a148 <_printf_i+0x14c>
 800a1ce:	682b      	ldr	r3, [r5, #0]
 800a1d0:	1d1a      	adds	r2, r3, #4
 800a1d2:	602a      	str	r2, [r5, #0]
 800a1d4:	681d      	ldr	r5, [r3, #0]
 800a1d6:	6862      	ldr	r2, [r4, #4]
 800a1d8:	2100      	movs	r1, #0
 800a1da:	4628      	mov	r0, r5
 800a1dc:	f7f6 f800 	bl	80001e0 <memchr>
 800a1e0:	b108      	cbz	r0, 800a1e6 <_printf_i+0x1ea>
 800a1e2:	1b40      	subs	r0, r0, r5
 800a1e4:	6060      	str	r0, [r4, #4]
 800a1e6:	6863      	ldr	r3, [r4, #4]
 800a1e8:	6123      	str	r3, [r4, #16]
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1f0:	e7aa      	b.n	800a148 <_printf_i+0x14c>
 800a1f2:	6923      	ldr	r3, [r4, #16]
 800a1f4:	462a      	mov	r2, r5
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	4640      	mov	r0, r8
 800a1fa:	47d0      	blx	sl
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d0ad      	beq.n	800a15c <_printf_i+0x160>
 800a200:	6823      	ldr	r3, [r4, #0]
 800a202:	079b      	lsls	r3, r3, #30
 800a204:	d413      	bmi.n	800a22e <_printf_i+0x232>
 800a206:	68e0      	ldr	r0, [r4, #12]
 800a208:	9b03      	ldr	r3, [sp, #12]
 800a20a:	4298      	cmp	r0, r3
 800a20c:	bfb8      	it	lt
 800a20e:	4618      	movlt	r0, r3
 800a210:	e7a6      	b.n	800a160 <_printf_i+0x164>
 800a212:	2301      	movs	r3, #1
 800a214:	4632      	mov	r2, r6
 800a216:	4649      	mov	r1, r9
 800a218:	4640      	mov	r0, r8
 800a21a:	47d0      	blx	sl
 800a21c:	3001      	adds	r0, #1
 800a21e:	d09d      	beq.n	800a15c <_printf_i+0x160>
 800a220:	3501      	adds	r5, #1
 800a222:	68e3      	ldr	r3, [r4, #12]
 800a224:	9903      	ldr	r1, [sp, #12]
 800a226:	1a5b      	subs	r3, r3, r1
 800a228:	42ab      	cmp	r3, r5
 800a22a:	dcf2      	bgt.n	800a212 <_printf_i+0x216>
 800a22c:	e7eb      	b.n	800a206 <_printf_i+0x20a>
 800a22e:	2500      	movs	r5, #0
 800a230:	f104 0619 	add.w	r6, r4, #25
 800a234:	e7f5      	b.n	800a222 <_printf_i+0x226>
 800a236:	bf00      	nop
 800a238:	08011b28 	.word	0x08011b28
 800a23c:	08011b39 	.word	0x08011b39

0800a240 <__sflush_r>:
 800a240:	898a      	ldrh	r2, [r1, #12]
 800a242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a246:	4605      	mov	r5, r0
 800a248:	0710      	lsls	r0, r2, #28
 800a24a:	460c      	mov	r4, r1
 800a24c:	d458      	bmi.n	800a300 <__sflush_r+0xc0>
 800a24e:	684b      	ldr	r3, [r1, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	dc05      	bgt.n	800a260 <__sflush_r+0x20>
 800a254:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a256:	2b00      	cmp	r3, #0
 800a258:	dc02      	bgt.n	800a260 <__sflush_r+0x20>
 800a25a:	2000      	movs	r0, #0
 800a25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a262:	2e00      	cmp	r6, #0
 800a264:	d0f9      	beq.n	800a25a <__sflush_r+0x1a>
 800a266:	2300      	movs	r3, #0
 800a268:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a26c:	682f      	ldr	r7, [r5, #0]
 800a26e:	6a21      	ldr	r1, [r4, #32]
 800a270:	602b      	str	r3, [r5, #0]
 800a272:	d032      	beq.n	800a2da <__sflush_r+0x9a>
 800a274:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a276:	89a3      	ldrh	r3, [r4, #12]
 800a278:	075a      	lsls	r2, r3, #29
 800a27a:	d505      	bpl.n	800a288 <__sflush_r+0x48>
 800a27c:	6863      	ldr	r3, [r4, #4]
 800a27e:	1ac0      	subs	r0, r0, r3
 800a280:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a282:	b10b      	cbz	r3, 800a288 <__sflush_r+0x48>
 800a284:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a286:	1ac0      	subs	r0, r0, r3
 800a288:	2300      	movs	r3, #0
 800a28a:	4602      	mov	r2, r0
 800a28c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a28e:	6a21      	ldr	r1, [r4, #32]
 800a290:	4628      	mov	r0, r5
 800a292:	47b0      	blx	r6
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	89a3      	ldrh	r3, [r4, #12]
 800a298:	d106      	bne.n	800a2a8 <__sflush_r+0x68>
 800a29a:	6829      	ldr	r1, [r5, #0]
 800a29c:	291d      	cmp	r1, #29
 800a29e:	d82b      	bhi.n	800a2f8 <__sflush_r+0xb8>
 800a2a0:	4a29      	ldr	r2, [pc, #164]	; (800a348 <__sflush_r+0x108>)
 800a2a2:	410a      	asrs	r2, r1
 800a2a4:	07d6      	lsls	r6, r2, #31
 800a2a6:	d427      	bmi.n	800a2f8 <__sflush_r+0xb8>
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	6062      	str	r2, [r4, #4]
 800a2ac:	04d9      	lsls	r1, r3, #19
 800a2ae:	6922      	ldr	r2, [r4, #16]
 800a2b0:	6022      	str	r2, [r4, #0]
 800a2b2:	d504      	bpl.n	800a2be <__sflush_r+0x7e>
 800a2b4:	1c42      	adds	r2, r0, #1
 800a2b6:	d101      	bne.n	800a2bc <__sflush_r+0x7c>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	b903      	cbnz	r3, 800a2be <__sflush_r+0x7e>
 800a2bc:	6560      	str	r0, [r4, #84]	; 0x54
 800a2be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2c0:	602f      	str	r7, [r5, #0]
 800a2c2:	2900      	cmp	r1, #0
 800a2c4:	d0c9      	beq.n	800a25a <__sflush_r+0x1a>
 800a2c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2ca:	4299      	cmp	r1, r3
 800a2cc:	d002      	beq.n	800a2d4 <__sflush_r+0x94>
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f7ff fbce 	bl	8009a70 <_free_r>
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	6360      	str	r0, [r4, #52]	; 0x34
 800a2d8:	e7c0      	b.n	800a25c <__sflush_r+0x1c>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4628      	mov	r0, r5
 800a2de:	47b0      	blx	r6
 800a2e0:	1c41      	adds	r1, r0, #1
 800a2e2:	d1c8      	bne.n	800a276 <__sflush_r+0x36>
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d0c5      	beq.n	800a276 <__sflush_r+0x36>
 800a2ea:	2b1d      	cmp	r3, #29
 800a2ec:	d001      	beq.n	800a2f2 <__sflush_r+0xb2>
 800a2ee:	2b16      	cmp	r3, #22
 800a2f0:	d101      	bne.n	800a2f6 <__sflush_r+0xb6>
 800a2f2:	602f      	str	r7, [r5, #0]
 800a2f4:	e7b1      	b.n	800a25a <__sflush_r+0x1a>
 800a2f6:	89a3      	ldrh	r3, [r4, #12]
 800a2f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2fc:	81a3      	strh	r3, [r4, #12]
 800a2fe:	e7ad      	b.n	800a25c <__sflush_r+0x1c>
 800a300:	690f      	ldr	r7, [r1, #16]
 800a302:	2f00      	cmp	r7, #0
 800a304:	d0a9      	beq.n	800a25a <__sflush_r+0x1a>
 800a306:	0793      	lsls	r3, r2, #30
 800a308:	680e      	ldr	r6, [r1, #0]
 800a30a:	bf08      	it	eq
 800a30c:	694b      	ldreq	r3, [r1, #20]
 800a30e:	600f      	str	r7, [r1, #0]
 800a310:	bf18      	it	ne
 800a312:	2300      	movne	r3, #0
 800a314:	eba6 0807 	sub.w	r8, r6, r7
 800a318:	608b      	str	r3, [r1, #8]
 800a31a:	f1b8 0f00 	cmp.w	r8, #0
 800a31e:	dd9c      	ble.n	800a25a <__sflush_r+0x1a>
 800a320:	6a21      	ldr	r1, [r4, #32]
 800a322:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a324:	4643      	mov	r3, r8
 800a326:	463a      	mov	r2, r7
 800a328:	4628      	mov	r0, r5
 800a32a:	47b0      	blx	r6
 800a32c:	2800      	cmp	r0, #0
 800a32e:	dc06      	bgt.n	800a33e <__sflush_r+0xfe>
 800a330:	89a3      	ldrh	r3, [r4, #12]
 800a332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a336:	81a3      	strh	r3, [r4, #12]
 800a338:	f04f 30ff 	mov.w	r0, #4294967295
 800a33c:	e78e      	b.n	800a25c <__sflush_r+0x1c>
 800a33e:	4407      	add	r7, r0
 800a340:	eba8 0800 	sub.w	r8, r8, r0
 800a344:	e7e9      	b.n	800a31a <__sflush_r+0xda>
 800a346:	bf00      	nop
 800a348:	dfbffffe 	.word	0xdfbffffe

0800a34c <_fflush_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	690b      	ldr	r3, [r1, #16]
 800a350:	4605      	mov	r5, r0
 800a352:	460c      	mov	r4, r1
 800a354:	b913      	cbnz	r3, 800a35c <_fflush_r+0x10>
 800a356:	2500      	movs	r5, #0
 800a358:	4628      	mov	r0, r5
 800a35a:	bd38      	pop	{r3, r4, r5, pc}
 800a35c:	b118      	cbz	r0, 800a366 <_fflush_r+0x1a>
 800a35e:	6a03      	ldr	r3, [r0, #32]
 800a360:	b90b      	cbnz	r3, 800a366 <_fflush_r+0x1a>
 800a362:	f7ff fa2f 	bl	80097c4 <__sinit>
 800a366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d0f3      	beq.n	800a356 <_fflush_r+0xa>
 800a36e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a370:	07d0      	lsls	r0, r2, #31
 800a372:	d404      	bmi.n	800a37e <_fflush_r+0x32>
 800a374:	0599      	lsls	r1, r3, #22
 800a376:	d402      	bmi.n	800a37e <_fflush_r+0x32>
 800a378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a37a:	f7ff fb58 	bl	8009a2e <__retarget_lock_acquire_recursive>
 800a37e:	4628      	mov	r0, r5
 800a380:	4621      	mov	r1, r4
 800a382:	f7ff ff5d 	bl	800a240 <__sflush_r>
 800a386:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a388:	07da      	lsls	r2, r3, #31
 800a38a:	4605      	mov	r5, r0
 800a38c:	d4e4      	bmi.n	800a358 <_fflush_r+0xc>
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	059b      	lsls	r3, r3, #22
 800a392:	d4e1      	bmi.n	800a358 <_fflush_r+0xc>
 800a394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a396:	f7ff fb4b 	bl	8009a30 <__retarget_lock_release_recursive>
 800a39a:	e7dd      	b.n	800a358 <_fflush_r+0xc>

0800a39c <fiprintf>:
 800a39c:	b40e      	push	{r1, r2, r3}
 800a39e:	b503      	push	{r0, r1, lr}
 800a3a0:	4601      	mov	r1, r0
 800a3a2:	ab03      	add	r3, sp, #12
 800a3a4:	4805      	ldr	r0, [pc, #20]	; (800a3bc <fiprintf+0x20>)
 800a3a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3aa:	6800      	ldr	r0, [r0, #0]
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	f000 f89f 	bl	800a4f0 <_vfiprintf_r>
 800a3b2:	b002      	add	sp, #8
 800a3b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3b8:	b003      	add	sp, #12
 800a3ba:	4770      	bx	lr
 800a3bc:	20000118 	.word	0x20000118

0800a3c0 <memmove>:
 800a3c0:	4288      	cmp	r0, r1
 800a3c2:	b510      	push	{r4, lr}
 800a3c4:	eb01 0402 	add.w	r4, r1, r2
 800a3c8:	d902      	bls.n	800a3d0 <memmove+0x10>
 800a3ca:	4284      	cmp	r4, r0
 800a3cc:	4623      	mov	r3, r4
 800a3ce:	d807      	bhi.n	800a3e0 <memmove+0x20>
 800a3d0:	1e43      	subs	r3, r0, #1
 800a3d2:	42a1      	cmp	r1, r4
 800a3d4:	d008      	beq.n	800a3e8 <memmove+0x28>
 800a3d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3de:	e7f8      	b.n	800a3d2 <memmove+0x12>
 800a3e0:	4402      	add	r2, r0
 800a3e2:	4601      	mov	r1, r0
 800a3e4:	428a      	cmp	r2, r1
 800a3e6:	d100      	bne.n	800a3ea <memmove+0x2a>
 800a3e8:	bd10      	pop	{r4, pc}
 800a3ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3f2:	e7f7      	b.n	800a3e4 <memmove+0x24>

0800a3f4 <_sbrk_r>:
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4d06      	ldr	r5, [pc, #24]	; (800a410 <_sbrk_r+0x1c>)
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	4608      	mov	r0, r1
 800a3fe:	602b      	str	r3, [r5, #0]
 800a400:	f7f9 fd30 	bl	8003e64 <_sbrk>
 800a404:	1c43      	adds	r3, r0, #1
 800a406:	d102      	bne.n	800a40e <_sbrk_r+0x1a>
 800a408:	682b      	ldr	r3, [r5, #0]
 800a40a:	b103      	cbz	r3, 800a40e <_sbrk_r+0x1a>
 800a40c:	6023      	str	r3, [r4, #0]
 800a40e:	bd38      	pop	{r3, r4, r5, pc}
 800a410:	200008b4 	.word	0x200008b4

0800a414 <memcpy>:
 800a414:	440a      	add	r2, r1
 800a416:	4291      	cmp	r1, r2
 800a418:	f100 33ff 	add.w	r3, r0, #4294967295
 800a41c:	d100      	bne.n	800a420 <memcpy+0xc>
 800a41e:	4770      	bx	lr
 800a420:	b510      	push	{r4, lr}
 800a422:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a42a:	4291      	cmp	r1, r2
 800a42c:	d1f9      	bne.n	800a422 <memcpy+0xe>
 800a42e:	bd10      	pop	{r4, pc}

0800a430 <abort>:
 800a430:	b508      	push	{r3, lr}
 800a432:	2006      	movs	r0, #6
 800a434:	f000 fa34 	bl	800a8a0 <raise>
 800a438:	2001      	movs	r0, #1
 800a43a:	f7f9 fc9b 	bl	8003d74 <_exit>

0800a43e <_realloc_r>:
 800a43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a442:	4680      	mov	r8, r0
 800a444:	4614      	mov	r4, r2
 800a446:	460e      	mov	r6, r1
 800a448:	b921      	cbnz	r1, 800a454 <_realloc_r+0x16>
 800a44a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a44e:	4611      	mov	r1, r2
 800a450:	f7ff bb82 	b.w	8009b58 <_malloc_r>
 800a454:	b92a      	cbnz	r2, 800a462 <_realloc_r+0x24>
 800a456:	f7ff fb0b 	bl	8009a70 <_free_r>
 800a45a:	4625      	mov	r5, r4
 800a45c:	4628      	mov	r0, r5
 800a45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a462:	f000 fa39 	bl	800a8d8 <_malloc_usable_size_r>
 800a466:	4284      	cmp	r4, r0
 800a468:	4607      	mov	r7, r0
 800a46a:	d802      	bhi.n	800a472 <_realloc_r+0x34>
 800a46c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a470:	d812      	bhi.n	800a498 <_realloc_r+0x5a>
 800a472:	4621      	mov	r1, r4
 800a474:	4640      	mov	r0, r8
 800a476:	f7ff fb6f 	bl	8009b58 <_malloc_r>
 800a47a:	4605      	mov	r5, r0
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d0ed      	beq.n	800a45c <_realloc_r+0x1e>
 800a480:	42bc      	cmp	r4, r7
 800a482:	4622      	mov	r2, r4
 800a484:	4631      	mov	r1, r6
 800a486:	bf28      	it	cs
 800a488:	463a      	movcs	r2, r7
 800a48a:	f7ff ffc3 	bl	800a414 <memcpy>
 800a48e:	4631      	mov	r1, r6
 800a490:	4640      	mov	r0, r8
 800a492:	f7ff faed 	bl	8009a70 <_free_r>
 800a496:	e7e1      	b.n	800a45c <_realloc_r+0x1e>
 800a498:	4635      	mov	r5, r6
 800a49a:	e7df      	b.n	800a45c <_realloc_r+0x1e>

0800a49c <__sfputc_r>:
 800a49c:	6893      	ldr	r3, [r2, #8]
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	b410      	push	{r4}
 800a4a4:	6093      	str	r3, [r2, #8]
 800a4a6:	da08      	bge.n	800a4ba <__sfputc_r+0x1e>
 800a4a8:	6994      	ldr	r4, [r2, #24]
 800a4aa:	42a3      	cmp	r3, r4
 800a4ac:	db01      	blt.n	800a4b2 <__sfputc_r+0x16>
 800a4ae:	290a      	cmp	r1, #10
 800a4b0:	d103      	bne.n	800a4ba <__sfputc_r+0x1e>
 800a4b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4b6:	f000 b935 	b.w	800a724 <__swbuf_r>
 800a4ba:	6813      	ldr	r3, [r2, #0]
 800a4bc:	1c58      	adds	r0, r3, #1
 800a4be:	6010      	str	r0, [r2, #0]
 800a4c0:	7019      	strb	r1, [r3, #0]
 800a4c2:	4608      	mov	r0, r1
 800a4c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <__sfputs_r>:
 800a4ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4cc:	4606      	mov	r6, r0
 800a4ce:	460f      	mov	r7, r1
 800a4d0:	4614      	mov	r4, r2
 800a4d2:	18d5      	adds	r5, r2, r3
 800a4d4:	42ac      	cmp	r4, r5
 800a4d6:	d101      	bne.n	800a4dc <__sfputs_r+0x12>
 800a4d8:	2000      	movs	r0, #0
 800a4da:	e007      	b.n	800a4ec <__sfputs_r+0x22>
 800a4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e0:	463a      	mov	r2, r7
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f7ff ffda 	bl	800a49c <__sfputc_r>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d1f3      	bne.n	800a4d4 <__sfputs_r+0xa>
 800a4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4f0 <_vfiprintf_r>:
 800a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f4:	460d      	mov	r5, r1
 800a4f6:	b09d      	sub	sp, #116	; 0x74
 800a4f8:	4614      	mov	r4, r2
 800a4fa:	4698      	mov	r8, r3
 800a4fc:	4606      	mov	r6, r0
 800a4fe:	b118      	cbz	r0, 800a508 <_vfiprintf_r+0x18>
 800a500:	6a03      	ldr	r3, [r0, #32]
 800a502:	b90b      	cbnz	r3, 800a508 <_vfiprintf_r+0x18>
 800a504:	f7ff f95e 	bl	80097c4 <__sinit>
 800a508:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a50a:	07d9      	lsls	r1, r3, #31
 800a50c:	d405      	bmi.n	800a51a <_vfiprintf_r+0x2a>
 800a50e:	89ab      	ldrh	r3, [r5, #12]
 800a510:	059a      	lsls	r2, r3, #22
 800a512:	d402      	bmi.n	800a51a <_vfiprintf_r+0x2a>
 800a514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a516:	f7ff fa8a 	bl	8009a2e <__retarget_lock_acquire_recursive>
 800a51a:	89ab      	ldrh	r3, [r5, #12]
 800a51c:	071b      	lsls	r3, r3, #28
 800a51e:	d501      	bpl.n	800a524 <_vfiprintf_r+0x34>
 800a520:	692b      	ldr	r3, [r5, #16]
 800a522:	b99b      	cbnz	r3, 800a54c <_vfiprintf_r+0x5c>
 800a524:	4629      	mov	r1, r5
 800a526:	4630      	mov	r0, r6
 800a528:	f000 f93a 	bl	800a7a0 <__swsetup_r>
 800a52c:	b170      	cbz	r0, 800a54c <_vfiprintf_r+0x5c>
 800a52e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a530:	07dc      	lsls	r4, r3, #31
 800a532:	d504      	bpl.n	800a53e <_vfiprintf_r+0x4e>
 800a534:	f04f 30ff 	mov.w	r0, #4294967295
 800a538:	b01d      	add	sp, #116	; 0x74
 800a53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53e:	89ab      	ldrh	r3, [r5, #12]
 800a540:	0598      	lsls	r0, r3, #22
 800a542:	d4f7      	bmi.n	800a534 <_vfiprintf_r+0x44>
 800a544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a546:	f7ff fa73 	bl	8009a30 <__retarget_lock_release_recursive>
 800a54a:	e7f3      	b.n	800a534 <_vfiprintf_r+0x44>
 800a54c:	2300      	movs	r3, #0
 800a54e:	9309      	str	r3, [sp, #36]	; 0x24
 800a550:	2320      	movs	r3, #32
 800a552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a556:	f8cd 800c 	str.w	r8, [sp, #12]
 800a55a:	2330      	movs	r3, #48	; 0x30
 800a55c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a710 <_vfiprintf_r+0x220>
 800a560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a564:	f04f 0901 	mov.w	r9, #1
 800a568:	4623      	mov	r3, r4
 800a56a:	469a      	mov	sl, r3
 800a56c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a570:	b10a      	cbz	r2, 800a576 <_vfiprintf_r+0x86>
 800a572:	2a25      	cmp	r2, #37	; 0x25
 800a574:	d1f9      	bne.n	800a56a <_vfiprintf_r+0x7a>
 800a576:	ebba 0b04 	subs.w	fp, sl, r4
 800a57a:	d00b      	beq.n	800a594 <_vfiprintf_r+0xa4>
 800a57c:	465b      	mov	r3, fp
 800a57e:	4622      	mov	r2, r4
 800a580:	4629      	mov	r1, r5
 800a582:	4630      	mov	r0, r6
 800a584:	f7ff ffa1 	bl	800a4ca <__sfputs_r>
 800a588:	3001      	adds	r0, #1
 800a58a:	f000 80a9 	beq.w	800a6e0 <_vfiprintf_r+0x1f0>
 800a58e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a590:	445a      	add	r2, fp
 800a592:	9209      	str	r2, [sp, #36]	; 0x24
 800a594:	f89a 3000 	ldrb.w	r3, [sl]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f000 80a1 	beq.w	800a6e0 <_vfiprintf_r+0x1f0>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5a8:	f10a 0a01 	add.w	sl, sl, #1
 800a5ac:	9304      	str	r3, [sp, #16]
 800a5ae:	9307      	str	r3, [sp, #28]
 800a5b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5b4:	931a      	str	r3, [sp, #104]	; 0x68
 800a5b6:	4654      	mov	r4, sl
 800a5b8:	2205      	movs	r2, #5
 800a5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5be:	4854      	ldr	r0, [pc, #336]	; (800a710 <_vfiprintf_r+0x220>)
 800a5c0:	f7f5 fe0e 	bl	80001e0 <memchr>
 800a5c4:	9a04      	ldr	r2, [sp, #16]
 800a5c6:	b9d8      	cbnz	r0, 800a600 <_vfiprintf_r+0x110>
 800a5c8:	06d1      	lsls	r1, r2, #27
 800a5ca:	bf44      	itt	mi
 800a5cc:	2320      	movmi	r3, #32
 800a5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5d2:	0713      	lsls	r3, r2, #28
 800a5d4:	bf44      	itt	mi
 800a5d6:	232b      	movmi	r3, #43	; 0x2b
 800a5d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a5e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5e2:	d015      	beq.n	800a610 <_vfiprintf_r+0x120>
 800a5e4:	9a07      	ldr	r2, [sp, #28]
 800a5e6:	4654      	mov	r4, sl
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	f04f 0c0a 	mov.w	ip, #10
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5f4:	3b30      	subs	r3, #48	; 0x30
 800a5f6:	2b09      	cmp	r3, #9
 800a5f8:	d94d      	bls.n	800a696 <_vfiprintf_r+0x1a6>
 800a5fa:	b1b0      	cbz	r0, 800a62a <_vfiprintf_r+0x13a>
 800a5fc:	9207      	str	r2, [sp, #28]
 800a5fe:	e014      	b.n	800a62a <_vfiprintf_r+0x13a>
 800a600:	eba0 0308 	sub.w	r3, r0, r8
 800a604:	fa09 f303 	lsl.w	r3, r9, r3
 800a608:	4313      	orrs	r3, r2
 800a60a:	9304      	str	r3, [sp, #16]
 800a60c:	46a2      	mov	sl, r4
 800a60e:	e7d2      	b.n	800a5b6 <_vfiprintf_r+0xc6>
 800a610:	9b03      	ldr	r3, [sp, #12]
 800a612:	1d19      	adds	r1, r3, #4
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	9103      	str	r1, [sp, #12]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	bfbb      	ittet	lt
 800a61c:	425b      	neglt	r3, r3
 800a61e:	f042 0202 	orrlt.w	r2, r2, #2
 800a622:	9307      	strge	r3, [sp, #28]
 800a624:	9307      	strlt	r3, [sp, #28]
 800a626:	bfb8      	it	lt
 800a628:	9204      	strlt	r2, [sp, #16]
 800a62a:	7823      	ldrb	r3, [r4, #0]
 800a62c:	2b2e      	cmp	r3, #46	; 0x2e
 800a62e:	d10c      	bne.n	800a64a <_vfiprintf_r+0x15a>
 800a630:	7863      	ldrb	r3, [r4, #1]
 800a632:	2b2a      	cmp	r3, #42	; 0x2a
 800a634:	d134      	bne.n	800a6a0 <_vfiprintf_r+0x1b0>
 800a636:	9b03      	ldr	r3, [sp, #12]
 800a638:	1d1a      	adds	r2, r3, #4
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	9203      	str	r2, [sp, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	bfb8      	it	lt
 800a642:	f04f 33ff 	movlt.w	r3, #4294967295
 800a646:	3402      	adds	r4, #2
 800a648:	9305      	str	r3, [sp, #20]
 800a64a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a720 <_vfiprintf_r+0x230>
 800a64e:	7821      	ldrb	r1, [r4, #0]
 800a650:	2203      	movs	r2, #3
 800a652:	4650      	mov	r0, sl
 800a654:	f7f5 fdc4 	bl	80001e0 <memchr>
 800a658:	b138      	cbz	r0, 800a66a <_vfiprintf_r+0x17a>
 800a65a:	9b04      	ldr	r3, [sp, #16]
 800a65c:	eba0 000a 	sub.w	r0, r0, sl
 800a660:	2240      	movs	r2, #64	; 0x40
 800a662:	4082      	lsls	r2, r0
 800a664:	4313      	orrs	r3, r2
 800a666:	3401      	adds	r4, #1
 800a668:	9304      	str	r3, [sp, #16]
 800a66a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a66e:	4829      	ldr	r0, [pc, #164]	; (800a714 <_vfiprintf_r+0x224>)
 800a670:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a674:	2206      	movs	r2, #6
 800a676:	f7f5 fdb3 	bl	80001e0 <memchr>
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d03f      	beq.n	800a6fe <_vfiprintf_r+0x20e>
 800a67e:	4b26      	ldr	r3, [pc, #152]	; (800a718 <_vfiprintf_r+0x228>)
 800a680:	bb1b      	cbnz	r3, 800a6ca <_vfiprintf_r+0x1da>
 800a682:	9b03      	ldr	r3, [sp, #12]
 800a684:	3307      	adds	r3, #7
 800a686:	f023 0307 	bic.w	r3, r3, #7
 800a68a:	3308      	adds	r3, #8
 800a68c:	9303      	str	r3, [sp, #12]
 800a68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a690:	443b      	add	r3, r7
 800a692:	9309      	str	r3, [sp, #36]	; 0x24
 800a694:	e768      	b.n	800a568 <_vfiprintf_r+0x78>
 800a696:	fb0c 3202 	mla	r2, ip, r2, r3
 800a69a:	460c      	mov	r4, r1
 800a69c:	2001      	movs	r0, #1
 800a69e:	e7a6      	b.n	800a5ee <_vfiprintf_r+0xfe>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	3401      	adds	r4, #1
 800a6a4:	9305      	str	r3, [sp, #20]
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	f04f 0c0a 	mov.w	ip, #10
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6b2:	3a30      	subs	r2, #48	; 0x30
 800a6b4:	2a09      	cmp	r2, #9
 800a6b6:	d903      	bls.n	800a6c0 <_vfiprintf_r+0x1d0>
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d0c6      	beq.n	800a64a <_vfiprintf_r+0x15a>
 800a6bc:	9105      	str	r1, [sp, #20]
 800a6be:	e7c4      	b.n	800a64a <_vfiprintf_r+0x15a>
 800a6c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e7f0      	b.n	800a6ac <_vfiprintf_r+0x1bc>
 800a6ca:	ab03      	add	r3, sp, #12
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	462a      	mov	r2, r5
 800a6d0:	4b12      	ldr	r3, [pc, #72]	; (800a71c <_vfiprintf_r+0x22c>)
 800a6d2:	a904      	add	r1, sp, #16
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f3af 8000 	nop.w
 800a6da:	4607      	mov	r7, r0
 800a6dc:	1c78      	adds	r0, r7, #1
 800a6de:	d1d6      	bne.n	800a68e <_vfiprintf_r+0x19e>
 800a6e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6e2:	07d9      	lsls	r1, r3, #31
 800a6e4:	d405      	bmi.n	800a6f2 <_vfiprintf_r+0x202>
 800a6e6:	89ab      	ldrh	r3, [r5, #12]
 800a6e8:	059a      	lsls	r2, r3, #22
 800a6ea:	d402      	bmi.n	800a6f2 <_vfiprintf_r+0x202>
 800a6ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ee:	f7ff f99f 	bl	8009a30 <__retarget_lock_release_recursive>
 800a6f2:	89ab      	ldrh	r3, [r5, #12]
 800a6f4:	065b      	lsls	r3, r3, #25
 800a6f6:	f53f af1d 	bmi.w	800a534 <_vfiprintf_r+0x44>
 800a6fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6fc:	e71c      	b.n	800a538 <_vfiprintf_r+0x48>
 800a6fe:	ab03      	add	r3, sp, #12
 800a700:	9300      	str	r3, [sp, #0]
 800a702:	462a      	mov	r2, r5
 800a704:	4b05      	ldr	r3, [pc, #20]	; (800a71c <_vfiprintf_r+0x22c>)
 800a706:	a904      	add	r1, sp, #16
 800a708:	4630      	mov	r0, r6
 800a70a:	f7ff fc77 	bl	8009ffc <_printf_i>
 800a70e:	e7e4      	b.n	800a6da <_vfiprintf_r+0x1ea>
 800a710:	08011b17 	.word	0x08011b17
 800a714:	08011b21 	.word	0x08011b21
 800a718:	00000000 	.word	0x00000000
 800a71c:	0800a4cb 	.word	0x0800a4cb
 800a720:	08011b1d 	.word	0x08011b1d

0800a724 <__swbuf_r>:
 800a724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a726:	460e      	mov	r6, r1
 800a728:	4614      	mov	r4, r2
 800a72a:	4605      	mov	r5, r0
 800a72c:	b118      	cbz	r0, 800a736 <__swbuf_r+0x12>
 800a72e:	6a03      	ldr	r3, [r0, #32]
 800a730:	b90b      	cbnz	r3, 800a736 <__swbuf_r+0x12>
 800a732:	f7ff f847 	bl	80097c4 <__sinit>
 800a736:	69a3      	ldr	r3, [r4, #24]
 800a738:	60a3      	str	r3, [r4, #8]
 800a73a:	89a3      	ldrh	r3, [r4, #12]
 800a73c:	071a      	lsls	r2, r3, #28
 800a73e:	d525      	bpl.n	800a78c <__swbuf_r+0x68>
 800a740:	6923      	ldr	r3, [r4, #16]
 800a742:	b31b      	cbz	r3, 800a78c <__swbuf_r+0x68>
 800a744:	6823      	ldr	r3, [r4, #0]
 800a746:	6922      	ldr	r2, [r4, #16]
 800a748:	1a98      	subs	r0, r3, r2
 800a74a:	6963      	ldr	r3, [r4, #20]
 800a74c:	b2f6      	uxtb	r6, r6
 800a74e:	4283      	cmp	r3, r0
 800a750:	4637      	mov	r7, r6
 800a752:	dc04      	bgt.n	800a75e <__swbuf_r+0x3a>
 800a754:	4621      	mov	r1, r4
 800a756:	4628      	mov	r0, r5
 800a758:	f7ff fdf8 	bl	800a34c <_fflush_r>
 800a75c:	b9e0      	cbnz	r0, 800a798 <__swbuf_r+0x74>
 800a75e:	68a3      	ldr	r3, [r4, #8]
 800a760:	3b01      	subs	r3, #1
 800a762:	60a3      	str	r3, [r4, #8]
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	6022      	str	r2, [r4, #0]
 800a76a:	701e      	strb	r6, [r3, #0]
 800a76c:	6962      	ldr	r2, [r4, #20]
 800a76e:	1c43      	adds	r3, r0, #1
 800a770:	429a      	cmp	r2, r3
 800a772:	d004      	beq.n	800a77e <__swbuf_r+0x5a>
 800a774:	89a3      	ldrh	r3, [r4, #12]
 800a776:	07db      	lsls	r3, r3, #31
 800a778:	d506      	bpl.n	800a788 <__swbuf_r+0x64>
 800a77a:	2e0a      	cmp	r6, #10
 800a77c:	d104      	bne.n	800a788 <__swbuf_r+0x64>
 800a77e:	4621      	mov	r1, r4
 800a780:	4628      	mov	r0, r5
 800a782:	f7ff fde3 	bl	800a34c <_fflush_r>
 800a786:	b938      	cbnz	r0, 800a798 <__swbuf_r+0x74>
 800a788:	4638      	mov	r0, r7
 800a78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a78c:	4621      	mov	r1, r4
 800a78e:	4628      	mov	r0, r5
 800a790:	f000 f806 	bl	800a7a0 <__swsetup_r>
 800a794:	2800      	cmp	r0, #0
 800a796:	d0d5      	beq.n	800a744 <__swbuf_r+0x20>
 800a798:	f04f 37ff 	mov.w	r7, #4294967295
 800a79c:	e7f4      	b.n	800a788 <__swbuf_r+0x64>
	...

0800a7a0 <__swsetup_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4b2a      	ldr	r3, [pc, #168]	; (800a84c <__swsetup_r+0xac>)
 800a7a4:	4605      	mov	r5, r0
 800a7a6:	6818      	ldr	r0, [r3, #0]
 800a7a8:	460c      	mov	r4, r1
 800a7aa:	b118      	cbz	r0, 800a7b4 <__swsetup_r+0x14>
 800a7ac:	6a03      	ldr	r3, [r0, #32]
 800a7ae:	b90b      	cbnz	r3, 800a7b4 <__swsetup_r+0x14>
 800a7b0:	f7ff f808 	bl	80097c4 <__sinit>
 800a7b4:	89a3      	ldrh	r3, [r4, #12]
 800a7b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7ba:	0718      	lsls	r0, r3, #28
 800a7bc:	d422      	bmi.n	800a804 <__swsetup_r+0x64>
 800a7be:	06d9      	lsls	r1, r3, #27
 800a7c0:	d407      	bmi.n	800a7d2 <__swsetup_r+0x32>
 800a7c2:	2309      	movs	r3, #9
 800a7c4:	602b      	str	r3, [r5, #0]
 800a7c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7ca:	81a3      	strh	r3, [r4, #12]
 800a7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d0:	e034      	b.n	800a83c <__swsetup_r+0x9c>
 800a7d2:	0758      	lsls	r0, r3, #29
 800a7d4:	d512      	bpl.n	800a7fc <__swsetup_r+0x5c>
 800a7d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7d8:	b141      	cbz	r1, 800a7ec <__swsetup_r+0x4c>
 800a7da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7de:	4299      	cmp	r1, r3
 800a7e0:	d002      	beq.n	800a7e8 <__swsetup_r+0x48>
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f7ff f944 	bl	8009a70 <_free_r>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	6363      	str	r3, [r4, #52]	; 0x34
 800a7ec:	89a3      	ldrh	r3, [r4, #12]
 800a7ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a7f2:	81a3      	strh	r3, [r4, #12]
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	6063      	str	r3, [r4, #4]
 800a7f8:	6923      	ldr	r3, [r4, #16]
 800a7fa:	6023      	str	r3, [r4, #0]
 800a7fc:	89a3      	ldrh	r3, [r4, #12]
 800a7fe:	f043 0308 	orr.w	r3, r3, #8
 800a802:	81a3      	strh	r3, [r4, #12]
 800a804:	6923      	ldr	r3, [r4, #16]
 800a806:	b94b      	cbnz	r3, 800a81c <__swsetup_r+0x7c>
 800a808:	89a3      	ldrh	r3, [r4, #12]
 800a80a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a80e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a812:	d003      	beq.n	800a81c <__swsetup_r+0x7c>
 800a814:	4621      	mov	r1, r4
 800a816:	4628      	mov	r0, r5
 800a818:	f000 f88c 	bl	800a934 <__smakebuf_r>
 800a81c:	89a0      	ldrh	r0, [r4, #12]
 800a81e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a822:	f010 0301 	ands.w	r3, r0, #1
 800a826:	d00a      	beq.n	800a83e <__swsetup_r+0x9e>
 800a828:	2300      	movs	r3, #0
 800a82a:	60a3      	str	r3, [r4, #8]
 800a82c:	6963      	ldr	r3, [r4, #20]
 800a82e:	425b      	negs	r3, r3
 800a830:	61a3      	str	r3, [r4, #24]
 800a832:	6923      	ldr	r3, [r4, #16]
 800a834:	b943      	cbnz	r3, 800a848 <__swsetup_r+0xa8>
 800a836:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a83a:	d1c4      	bne.n	800a7c6 <__swsetup_r+0x26>
 800a83c:	bd38      	pop	{r3, r4, r5, pc}
 800a83e:	0781      	lsls	r1, r0, #30
 800a840:	bf58      	it	pl
 800a842:	6963      	ldrpl	r3, [r4, #20]
 800a844:	60a3      	str	r3, [r4, #8]
 800a846:	e7f4      	b.n	800a832 <__swsetup_r+0x92>
 800a848:	2000      	movs	r0, #0
 800a84a:	e7f7      	b.n	800a83c <__swsetup_r+0x9c>
 800a84c:	20000118 	.word	0x20000118

0800a850 <_raise_r>:
 800a850:	291f      	cmp	r1, #31
 800a852:	b538      	push	{r3, r4, r5, lr}
 800a854:	4604      	mov	r4, r0
 800a856:	460d      	mov	r5, r1
 800a858:	d904      	bls.n	800a864 <_raise_r+0x14>
 800a85a:	2316      	movs	r3, #22
 800a85c:	6003      	str	r3, [r0, #0]
 800a85e:	f04f 30ff 	mov.w	r0, #4294967295
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a866:	b112      	cbz	r2, 800a86e <_raise_r+0x1e>
 800a868:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a86c:	b94b      	cbnz	r3, 800a882 <_raise_r+0x32>
 800a86e:	4620      	mov	r0, r4
 800a870:	f000 f830 	bl	800a8d4 <_getpid_r>
 800a874:	462a      	mov	r2, r5
 800a876:	4601      	mov	r1, r0
 800a878:	4620      	mov	r0, r4
 800a87a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a87e:	f000 b817 	b.w	800a8b0 <_kill_r>
 800a882:	2b01      	cmp	r3, #1
 800a884:	d00a      	beq.n	800a89c <_raise_r+0x4c>
 800a886:	1c59      	adds	r1, r3, #1
 800a888:	d103      	bne.n	800a892 <_raise_r+0x42>
 800a88a:	2316      	movs	r3, #22
 800a88c:	6003      	str	r3, [r0, #0]
 800a88e:	2001      	movs	r0, #1
 800a890:	e7e7      	b.n	800a862 <_raise_r+0x12>
 800a892:	2400      	movs	r4, #0
 800a894:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a898:	4628      	mov	r0, r5
 800a89a:	4798      	blx	r3
 800a89c:	2000      	movs	r0, #0
 800a89e:	e7e0      	b.n	800a862 <_raise_r+0x12>

0800a8a0 <raise>:
 800a8a0:	4b02      	ldr	r3, [pc, #8]	; (800a8ac <raise+0xc>)
 800a8a2:	4601      	mov	r1, r0
 800a8a4:	6818      	ldr	r0, [r3, #0]
 800a8a6:	f7ff bfd3 	b.w	800a850 <_raise_r>
 800a8aa:	bf00      	nop
 800a8ac:	20000118 	.word	0x20000118

0800a8b0 <_kill_r>:
 800a8b0:	b538      	push	{r3, r4, r5, lr}
 800a8b2:	4d07      	ldr	r5, [pc, #28]	; (800a8d0 <_kill_r+0x20>)
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	4608      	mov	r0, r1
 800a8ba:	4611      	mov	r1, r2
 800a8bc:	602b      	str	r3, [r5, #0]
 800a8be:	f7f9 fa49 	bl	8003d54 <_kill>
 800a8c2:	1c43      	adds	r3, r0, #1
 800a8c4:	d102      	bne.n	800a8cc <_kill_r+0x1c>
 800a8c6:	682b      	ldr	r3, [r5, #0]
 800a8c8:	b103      	cbz	r3, 800a8cc <_kill_r+0x1c>
 800a8ca:	6023      	str	r3, [r4, #0]
 800a8cc:	bd38      	pop	{r3, r4, r5, pc}
 800a8ce:	bf00      	nop
 800a8d0:	200008b4 	.word	0x200008b4

0800a8d4 <_getpid_r>:
 800a8d4:	f7f9 ba36 	b.w	8003d44 <_getpid>

0800a8d8 <_malloc_usable_size_r>:
 800a8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8dc:	1f18      	subs	r0, r3, #4
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	bfbc      	itt	lt
 800a8e2:	580b      	ldrlt	r3, [r1, r0]
 800a8e4:	18c0      	addlt	r0, r0, r3
 800a8e6:	4770      	bx	lr

0800a8e8 <__swhatbuf_r>:
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f0:	2900      	cmp	r1, #0
 800a8f2:	b096      	sub	sp, #88	; 0x58
 800a8f4:	4615      	mov	r5, r2
 800a8f6:	461e      	mov	r6, r3
 800a8f8:	da0d      	bge.n	800a916 <__swhatbuf_r+0x2e>
 800a8fa:	89a3      	ldrh	r3, [r4, #12]
 800a8fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a900:	f04f 0100 	mov.w	r1, #0
 800a904:	bf0c      	ite	eq
 800a906:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a90a:	2340      	movne	r3, #64	; 0x40
 800a90c:	2000      	movs	r0, #0
 800a90e:	6031      	str	r1, [r6, #0]
 800a910:	602b      	str	r3, [r5, #0]
 800a912:	b016      	add	sp, #88	; 0x58
 800a914:	bd70      	pop	{r4, r5, r6, pc}
 800a916:	466a      	mov	r2, sp
 800a918:	f000 f848 	bl	800a9ac <_fstat_r>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	dbec      	blt.n	800a8fa <__swhatbuf_r+0x12>
 800a920:	9901      	ldr	r1, [sp, #4]
 800a922:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a926:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a92a:	4259      	negs	r1, r3
 800a92c:	4159      	adcs	r1, r3
 800a92e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a932:	e7eb      	b.n	800a90c <__swhatbuf_r+0x24>

0800a934 <__smakebuf_r>:
 800a934:	898b      	ldrh	r3, [r1, #12]
 800a936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a938:	079d      	lsls	r5, r3, #30
 800a93a:	4606      	mov	r6, r0
 800a93c:	460c      	mov	r4, r1
 800a93e:	d507      	bpl.n	800a950 <__smakebuf_r+0x1c>
 800a940:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	6123      	str	r3, [r4, #16]
 800a948:	2301      	movs	r3, #1
 800a94a:	6163      	str	r3, [r4, #20]
 800a94c:	b002      	add	sp, #8
 800a94e:	bd70      	pop	{r4, r5, r6, pc}
 800a950:	ab01      	add	r3, sp, #4
 800a952:	466a      	mov	r2, sp
 800a954:	f7ff ffc8 	bl	800a8e8 <__swhatbuf_r>
 800a958:	9900      	ldr	r1, [sp, #0]
 800a95a:	4605      	mov	r5, r0
 800a95c:	4630      	mov	r0, r6
 800a95e:	f7ff f8fb 	bl	8009b58 <_malloc_r>
 800a962:	b948      	cbnz	r0, 800a978 <__smakebuf_r+0x44>
 800a964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a968:	059a      	lsls	r2, r3, #22
 800a96a:	d4ef      	bmi.n	800a94c <__smakebuf_r+0x18>
 800a96c:	f023 0303 	bic.w	r3, r3, #3
 800a970:	f043 0302 	orr.w	r3, r3, #2
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	e7e3      	b.n	800a940 <__smakebuf_r+0xc>
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	6020      	str	r0, [r4, #0]
 800a97c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a980:	81a3      	strh	r3, [r4, #12]
 800a982:	9b00      	ldr	r3, [sp, #0]
 800a984:	6163      	str	r3, [r4, #20]
 800a986:	9b01      	ldr	r3, [sp, #4]
 800a988:	6120      	str	r0, [r4, #16]
 800a98a:	b15b      	cbz	r3, 800a9a4 <__smakebuf_r+0x70>
 800a98c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a990:	4630      	mov	r0, r6
 800a992:	f000 f81d 	bl	800a9d0 <_isatty_r>
 800a996:	b128      	cbz	r0, 800a9a4 <__smakebuf_r+0x70>
 800a998:	89a3      	ldrh	r3, [r4, #12]
 800a99a:	f023 0303 	bic.w	r3, r3, #3
 800a99e:	f043 0301 	orr.w	r3, r3, #1
 800a9a2:	81a3      	strh	r3, [r4, #12]
 800a9a4:	89a3      	ldrh	r3, [r4, #12]
 800a9a6:	431d      	orrs	r5, r3
 800a9a8:	81a5      	strh	r5, [r4, #12]
 800a9aa:	e7cf      	b.n	800a94c <__smakebuf_r+0x18>

0800a9ac <_fstat_r>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	4d07      	ldr	r5, [pc, #28]	; (800a9cc <_fstat_r+0x20>)
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	4608      	mov	r0, r1
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	602b      	str	r3, [r5, #0]
 800a9ba:	f7f9 fa2a 	bl	8003e12 <_fstat>
 800a9be:	1c43      	adds	r3, r0, #1
 800a9c0:	d102      	bne.n	800a9c8 <_fstat_r+0x1c>
 800a9c2:	682b      	ldr	r3, [r5, #0]
 800a9c4:	b103      	cbz	r3, 800a9c8 <_fstat_r+0x1c>
 800a9c6:	6023      	str	r3, [r4, #0]
 800a9c8:	bd38      	pop	{r3, r4, r5, pc}
 800a9ca:	bf00      	nop
 800a9cc:	200008b4 	.word	0x200008b4

0800a9d0 <_isatty_r>:
 800a9d0:	b538      	push	{r3, r4, r5, lr}
 800a9d2:	4d06      	ldr	r5, [pc, #24]	; (800a9ec <_isatty_r+0x1c>)
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	4608      	mov	r0, r1
 800a9da:	602b      	str	r3, [r5, #0]
 800a9dc:	f7f9 fa29 	bl	8003e32 <_isatty>
 800a9e0:	1c43      	adds	r3, r0, #1
 800a9e2:	d102      	bne.n	800a9ea <_isatty_r+0x1a>
 800a9e4:	682b      	ldr	r3, [r5, #0]
 800a9e6:	b103      	cbz	r3, 800a9ea <_isatty_r+0x1a>
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	bd38      	pop	{r3, r4, r5, pc}
 800a9ec:	200008b4 	.word	0x200008b4

0800a9f0 <_init>:
 800a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f2:	bf00      	nop
 800a9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9f6:	bc08      	pop	{r3}
 800a9f8:	469e      	mov	lr, r3
 800a9fa:	4770      	bx	lr

0800a9fc <_fini>:
 800a9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fe:	bf00      	nop
 800aa00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa02:	bc08      	pop	{r3}
 800aa04:	469e      	mov	lr, r3
 800aa06:	4770      	bx	lr
