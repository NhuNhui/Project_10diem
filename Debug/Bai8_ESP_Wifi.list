
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007144  0800aa5c  0800aa5c  0001aa5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ba0  08011ba0  0003011c  2**0
                  CONTENTS
  4 .ARM          00000008  08011ba0  08011ba0  00021ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ba8  08011ba8  0003011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ba8  08011ba8  00021ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011bac  08011bac  00021bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08011bb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003011c  2**0
                  CONTENTS
 10 .bss          000007a8  2000011c  2000011c  0003011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008c4  200008c4  0003011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a448  00000000  00000000  0003018f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000481c  00000000  00000000  0004a5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001850  00000000  00000000  0004edf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012d7  00000000  00000000  00050648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00006e6d  00000000  00000000  0005191f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022324  00000000  00000000  0005878c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e1618  00000000  00000000  0007aab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006e84  00000000  00000000  0015c0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00162f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000011c 	.word	0x2000011c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa44 	.word	0x0800aa44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000120 	.word	0x20000120
 80001cc:	0800aa44 	.word	0x0800aa44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000582:	463b      	mov	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800058e:	4b3d      	ldr	r3, [pc, #244]	; (8000684 <MX_ADC1_Init+0x108>)
 8000590:	4a3d      	ldr	r2, [pc, #244]	; (8000688 <MX_ADC1_Init+0x10c>)
 8000592:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000594:	4b3b      	ldr	r3, [pc, #236]	; (8000684 <MX_ADC1_Init+0x108>)
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800059a:	4b3a      	ldr	r3, [pc, #232]	; (8000684 <MX_ADC1_Init+0x108>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005a0:	4b38      	ldr	r3, [pc, #224]	; (8000684 <MX_ADC1_Init+0x108>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a6:	4b37      	ldr	r3, [pc, #220]	; (8000684 <MX_ADC1_Init+0x108>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ac:	4b35      	ldr	r3, [pc, #212]	; (8000684 <MX_ADC1_Init+0x108>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b4:	4b33      	ldr	r3, [pc, #204]	; (8000684 <MX_ADC1_Init+0x108>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ba:	4b32      	ldr	r3, [pc, #200]	; (8000684 <MX_ADC1_Init+0x108>)
 80005bc:	4a33      	ldr	r2, [pc, #204]	; (800068c <MX_ADC1_Init+0x110>)
 80005be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c0:	4b30      	ldr	r3, [pc, #192]	; (8000684 <MX_ADC1_Init+0x108>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005c6:	4b2f      	ldr	r3, [pc, #188]	; (8000684 <MX_ADC1_Init+0x108>)
 80005c8:	2205      	movs	r2, #5
 80005ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005cc:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <MX_ADC1_Init+0x108>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d4:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <MX_ADC1_Init+0x108>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005da:	482a      	ldr	r0, [pc, #168]	; (8000684 <MX_ADC1_Init+0x108>)
 80005dc:	f004 f8b4 	bl	8004748 <HAL_ADC_Init>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005e6:	f001 fc8d 	bl	8001f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005ea:	2308      	movs	r3, #8
 80005ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f6:	463b      	mov	r3, r7
 80005f8:	4619      	mov	r1, r3
 80005fa:	4822      	ldr	r0, [pc, #136]	; (8000684 <MX_ADC1_Init+0x108>)
 80005fc:	f004 fa16 	bl	8004a2c <HAL_ADC_ConfigChannel>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000606:	f001 fc7d 	bl	8001f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800060a:	2309      	movs	r3, #9
 800060c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800060e:	2302      	movs	r3, #2
 8000610:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	4619      	mov	r1, r3
 8000616:	481b      	ldr	r0, [pc, #108]	; (8000684 <MX_ADC1_Init+0x108>)
 8000618:	f004 fa08 	bl	8004a2c <HAL_ADC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000622:	f001 fc6f 	bl	8001f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000626:	230a      	movs	r3, #10
 8000628:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800062a:	2303      	movs	r3, #3
 800062c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	4814      	ldr	r0, [pc, #80]	; (8000684 <MX_ADC1_Init+0x108>)
 8000634:	f004 f9fa 	bl	8004a2c <HAL_ADC_ConfigChannel>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800063e:	f001 fc61 	bl	8001f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000642:	230b      	movs	r3, #11
 8000644:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000646:	2304      	movs	r3, #4
 8000648:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064a:	463b      	mov	r3, r7
 800064c:	4619      	mov	r1, r3
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_ADC1_Init+0x108>)
 8000650:	f004 f9ec 	bl	8004a2c <HAL_ADC_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800065a:	f001 fc53 	bl	8001f04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800065e:	230c      	movs	r3, #12
 8000660:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000662:	2305      	movs	r3, #5
 8000664:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_ADC1_Init+0x108>)
 800066c:	f004 f9de 	bl	8004a2c <HAL_ADC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000676:	f001 fc45 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000138 	.word	0x20000138
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a3c      	ldr	r2, [pc, #240]	; (80007a0 <HAL_ADC_MspInit+0x110>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d171      	bne.n	8000796 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a3a      	ldr	r2, [pc, #232]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
 80006c2:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a33      	ldr	r2, [pc, #204]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a2c      	ldr	r2, [pc, #176]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <HAL_ADC_MspInit+0x114>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000706:	2307      	movs	r3, #7
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070a:	2303      	movs	r3, #3
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	4823      	ldr	r0, [pc, #140]	; (80007a8 <HAL_ADC_MspInit+0x118>)
 800071a:	f005 f93b 	bl	8005994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800071e:	2303      	movs	r3, #3
 8000720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000722:	2303      	movs	r3, #3
 8000724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	481e      	ldr	r0, [pc, #120]	; (80007ac <HAL_ADC_MspInit+0x11c>)
 8000732:	f005 f92f 	bl	8005994 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000736:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000738:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <HAL_ADC_MspInit+0x124>)
 800073a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800073c:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000754:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800075c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000760:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000764:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800076c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800077c:	f004 fd08 	bl	8005190 <HAL_DMA_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000786:	f001 fbbd 	bl	8001f04 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 800078e:	639a      	str	r2, [r3, #56]	; 0x38
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_ADC_MspInit+0x120>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	; 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40012000 	.word	0x40012000
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020800 	.word	0x40020800
 80007ac:	40020400 	.word	0x40020400
 80007b0:	20000180 	.word	0x20000180
 80007b4:	40026410 	.word	0x40026410

080007b8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007bc:	2201      	movs	r2, #1
 80007be:	2108      	movs	r1, #8
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <button_init+0x14>)
 80007c2:	f005 fa83 	bl	8005ccc <HAL_GPIO_WritePin>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40020c00 	.word	0x40020c00

080007d0 <button_Scan>:

void button_Scan(){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2108      	movs	r1, #8
 80007da:	482f      	ldr	r0, [pc, #188]	; (8000898 <button_Scan+0xc8>)
 80007dc:	f005 fa76 	bl	8005ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007e0:	2201      	movs	r2, #1
 80007e2:	2108      	movs	r1, #8
 80007e4:	482c      	ldr	r0, [pc, #176]	; (8000898 <button_Scan+0xc8>)
 80007e6:	f005 fa71 	bl	8005ccc <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80007ea:	230a      	movs	r3, #10
 80007ec:	2202      	movs	r2, #2
 80007ee:	492b      	ldr	r1, [pc, #172]	; (800089c <button_Scan+0xcc>)
 80007f0:	482b      	ldr	r0, [pc, #172]	; (80008a0 <button_Scan+0xd0>)
 80007f2:	f006 fa26 	bl	8006c42 <HAL_SPI_Receive>
	  int button_index = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80007fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007fe:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	e03f      	b.n	8000886 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db06      	blt.n	800081a <button_Scan+0x4a>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b03      	cmp	r3, #3
 8000810:	dc03      	bgt.n	800081a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3304      	adds	r3, #4
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	e018      	b.n	800084c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b03      	cmp	r3, #3
 800081e:	dd07      	ble.n	8000830 <button_Scan+0x60>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b07      	cmp	r3, #7
 8000824:	dc04      	bgt.n	8000830 <button_Scan+0x60>
			  button_index = 7 - i;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f1c3 0307 	rsb	r3, r3, #7
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	e00d      	b.n	800084c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b07      	cmp	r3, #7
 8000834:	dd06      	ble.n	8000844 <button_Scan+0x74>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b0b      	cmp	r3, #11
 800083a:	dc03      	bgt.n	8000844 <button_Scan+0x74>
			  button_index = i + 4;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3304      	adds	r3, #4
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	e003      	b.n	800084c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f1c3 0317 	rsb	r3, r3, #23
 800084a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <button_Scan+0xcc>)
 800084e:	881a      	ldrh	r2, [r3, #0]
 8000850:	897b      	ldrh	r3, [r7, #10]
 8000852:	4013      	ands	r3, r2
 8000854:	b29b      	uxth	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d005      	beq.n	8000866 <button_Scan+0x96>
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <button_Scan+0xd4>)
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	2100      	movs	r1, #0
 8000860:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000864:	e009      	b.n	800087a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000866:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <button_Scan+0xd4>)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800086e:	3301      	adds	r3, #1
 8000870:	b299      	uxth	r1, r3
 8000872:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <button_Scan+0xd4>)
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800087a:	897b      	ldrh	r3, [r7, #10]
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b0f      	cmp	r3, #15
 800088a:	ddbc      	ble.n	8000806 <button_Scan+0x36>
	  }
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40020c00 	.word	0x40020c00
 800089c:	20000200 	.word	0x20000200
 80008a0:	200005b4 	.word	0x200005b4
 80008a4:	200001e0 	.word	0x200001e0

080008a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_DMA_Init+0x3c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <MX_DMA_Init+0x3c>)
 80008b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_DMA_Init+0x3c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	2038      	movs	r0, #56	; 0x38
 80008d0:	f004 fc27 	bl	8005122 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008d4:	2038      	movs	r0, #56	; 0x38
 80008d6:	f004 fc40 	bl	800515a <HAL_NVIC_EnableIRQ>

}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
 80008fe:	615a      	str	r2, [r3, #20]
 8000900:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000902:	463b      	mov	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
 8000910:	615a      	str	r2, [r3, #20]
 8000912:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000914:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000916:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800091a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800091c:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <MX_FSMC_Init+0xec>)
 800091e:	4a2e      	ldr	r2, [pc, #184]	; (80009d8 <MX_FSMC_Init+0xf0>)
 8000920:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000922:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000928:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <MX_FSMC_Init+0xec>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800092e:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000934:	4b27      	ldr	r3, [pc, #156]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000936:	2210      	movs	r2, #16
 8000938:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800093a:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <MX_FSMC_Init+0xec>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000940:	4b24      	ldr	r3, [pc, #144]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000946:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800094c:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_FSMC_Init+0xec>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000954:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800095a:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_FSMC_Init+0xec>)
 800095c:	2200      	movs	r2, #0
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000966:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_FSMC_Init+0xec>)
 800096a:	2200      	movs	r2, #0
 800096c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000970:	2200      	movs	r2, #0
 8000972:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_FSMC_Init+0xec>)
 8000976:	2200      	movs	r2, #0
 8000978:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800097a:	230f      	movs	r3, #15
 800097c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800097e:	230f      	movs	r3, #15
 8000980:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000982:	233c      	movs	r3, #60	; 0x3c
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800098a:	2310      	movs	r3, #16
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800098e:	2311      	movs	r3, #17
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000992:	2300      	movs	r3, #0
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000996:	2308      	movs	r3, #8
 8000998:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800099a:	230f      	movs	r3, #15
 800099c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800099e:	2309      	movs	r3, #9
 80009a0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80009a6:	2310      	movs	r3, #16
 80009a8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80009aa:	2311      	movs	r3, #17
 80009ac:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80009b2:	463a      	mov	r2, r7
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <MX_FSMC_Init+0xec>)
 80009bc:	f006 fd24 	bl	8007408 <HAL_SRAM_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80009c6:	f001 fa9d 	bl	8001f04 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80009ca:	bf00      	nop
 80009cc:	3738      	adds	r7, #56	; 0x38
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000204 	.word	0x20000204
 80009d8:	a0000104 	.word	0xa0000104

080009dc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <HAL_FSMC_MspInit+0x88>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d131      	bne.n	8000a5c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <HAL_FSMC_MspInit+0x88>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_FSMC_MspInit+0x8c>)
 8000a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a06:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <HAL_FSMC_MspInit+0x8c>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6393      	str	r3, [r2, #56]	; 0x38
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <HAL_FSMC_MspInit+0x8c>)
 8000a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000a1a:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000a1e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <HAL_FSMC_MspInit+0x90>)
 8000a36:	f004 ffad 	bl	8005994 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000a3a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000a3e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <HAL_FSMC_MspInit+0x94>)
 8000a56:	f004 ff9d 	bl	8005994 <HAL_GPIO_Init>
 8000a5a:	e000      	b.n	8000a5e <HAL_FSMC_MspInit+0x82>
    return;
 8000a5c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000254 	.word	0x20000254
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40020c00 	.word	0x40020c00

08000a74 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000a7c:	f7ff ffae 	bl	80009dc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08e      	sub	sp, #56	; 0x38
 8000a8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
 8000aa2:	4b8f      	ldr	r3, [pc, #572]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a8e      	ldr	r2, [pc, #568]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000aa8:	f043 0310 	orr.w	r3, r3, #16
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b8c      	ldr	r3, [pc, #560]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	623b      	str	r3, [r7, #32]
 8000ab8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
 8000abe:	4b88      	ldr	r3, [pc, #544]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a87      	ldr	r2, [pc, #540]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b85      	ldr	r3, [pc, #532]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
 8000ada:	4b81      	ldr	r3, [pc, #516]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a80      	ldr	r2, [pc, #512]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000ae0:	f043 0320 	orr.w	r3, r3, #32
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b7e      	ldr	r3, [pc, #504]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0320 	and.w	r3, r3, #32
 8000aee:	61bb      	str	r3, [r7, #24]
 8000af0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	4b7a      	ldr	r3, [pc, #488]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a79      	ldr	r2, [pc, #484]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b77      	ldr	r3, [pc, #476]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b73      	ldr	r3, [pc, #460]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a72      	ldr	r2, [pc, #456]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b70      	ldr	r3, [pc, #448]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b6c      	ldr	r3, [pc, #432]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a6b      	ldr	r2, [pc, #428]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b69      	ldr	r3, [pc, #420]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	4b65      	ldr	r3, [pc, #404]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a64      	ldr	r2, [pc, #400]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b62      	ldr	r3, [pc, #392]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0308 	and.w	r3, r3, #8
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b5e      	ldr	r3, [pc, #376]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a5d      	ldr	r2, [pc, #372]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b5b      	ldr	r3, [pc, #364]	; (8000ce0 <MX_GPIO_Init+0x258>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2170      	movs	r1, #112	; 0x70
 8000b82:	4858      	ldr	r0, [pc, #352]	; (8000ce4 <MX_GPIO_Init+0x25c>)
 8000b84:	f005 f8a2 	bl	8005ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8000b8e:	4856      	ldr	r0, [pc, #344]	; (8000ce8 <MX_GPIO_Init+0x260>)
 8000b90:	f005 f89c 	bl	8005ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9a:	4854      	ldr	r0, [pc, #336]	; (8000cec <MX_GPIO_Init+0x264>)
 8000b9c:	f005 f896 	bl	8005ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000ba6:	4852      	ldr	r0, [pc, #328]	; (8000cf0 <MX_GPIO_Init+0x268>)
 8000ba8:	f005 f890 	bl	8005ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb2:	4850      	ldr	r0, [pc, #320]	; (8000cf4 <MX_GPIO_Init+0x26c>)
 8000bb4:	f005 f88a 	bl	8005ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2108      	movs	r1, #8
 8000bbc:	484e      	ldr	r0, [pc, #312]	; (8000cf8 <MX_GPIO_Init+0x270>)
 8000bbe:	f005 f885 	bl	8005ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000bc2:	2370      	movs	r3, #112	; 0x70
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4842      	ldr	r0, [pc, #264]	; (8000ce4 <MX_GPIO_Init+0x25c>)
 8000bda:	f004 fedb 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000bde:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	483c      	ldr	r0, [pc, #240]	; (8000ce8 <MX_GPIO_Init+0x260>)
 8000bf8:	f004 fecc 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8000bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4836      	ldr	r0, [pc, #216]	; (8000cec <MX_GPIO_Init+0x264>)
 8000c12:	f004 febf 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	482f      	ldr	r0, [pc, #188]	; (8000cec <MX_GPIO_Init+0x264>)
 8000c30:	f004 feb0 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000c34:	23c0      	movs	r3, #192	; 0xc0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	482b      	ldr	r0, [pc, #172]	; (8000cf4 <MX_GPIO_Init+0x26c>)
 8000c48:	f004 fea4 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000c4c:	2330      	movs	r3, #48	; 0x30
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4822      	ldr	r0, [pc, #136]	; (8000ce8 <MX_GPIO_Init+0x260>)
 8000c60:	f004 fe98 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000c64:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481c      	ldr	r0, [pc, #112]	; (8000cf0 <MX_GPIO_Init+0x268>)
 8000c7e:	f004 fe89 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8000c82:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4814      	ldr	r0, [pc, #80]	; (8000ce8 <MX_GPIO_Init+0x260>)
 8000c98:	f004 fe7c 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <MX_GPIO_Init+0x26c>)
 8000cb6:	f004 fe6d 	bl	8005994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000cba:	2308      	movs	r3, #8
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <MX_GPIO_Init+0x270>)
 8000cd2:	f004 fe5f 	bl	8005994 <HAL_GPIO_Init>

}
 8000cd6:	bf00      	nop
 8000cd8:	3738      	adds	r7, #56	; 0x38
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40021400 	.word	0x40021400
 8000cf0:	40021800 	.word	0x40021800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020c00 	.word	0x40020c00

08000cfc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d02:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <MX_I2C1_Init+0x54>)
 8000d04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d08:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <MX_I2C1_Init+0x58>)
 8000d0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <MX_I2C1_Init+0x50>)
 8000d3a:	f004 ffe1 	bl	8005d00 <HAL_I2C_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d44:	f001 f8de 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000258 	.word	0x20000258
 8000d50:	40005400 	.word	0x40005400
 8000d54:	000186a0 	.word	0x000186a0

08000d58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_I2C_MspInit+0x84>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12b      	bne.n	8000dd2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d96:	23c0      	movs	r3, #192	; 0xc0
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9a:	2312      	movs	r3, #18
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da6:	2304      	movs	r3, #4
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <HAL_I2C_MspInit+0x8c>)
 8000db2:	f004 fdef 	bl	8005994 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020400 	.word	0x40020400

08000de8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <LCD_WR_REG+0x1c>)
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	8013      	strh	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	600ffffe 	.word	0x600ffffe

08000e08 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <LCD_WR_DATA+0x1c>)
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	8053      	strh	r3, [r2, #2]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	600ffffe 	.word	0x600ffffe

08000e28 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <LCD_RD_DATA+0x20>)
 8000e30:	885b      	ldrh	r3, [r3, #2]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	b29b      	uxth	r3, r3
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	600ffffe 	.word	0x600ffffe

08000e4c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4604      	mov	r4, r0
 8000e54:	4608      	mov	r0, r1
 8000e56:	4611      	mov	r1, r2
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	80fb      	strh	r3, [r7, #6]
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80bb      	strh	r3, [r7, #4]
 8000e62:	460b      	mov	r3, r1
 8000e64:	807b      	strh	r3, [r7, #2]
 8000e66:	4613      	mov	r3, r2
 8000e68:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000e6a:	202a      	movs	r0, #42	; 0x2a
 8000e6c:	f7ff ffbc 	bl	8000de8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	0a1b      	lsrs	r3, r3, #8
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ffc6 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ffc0 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000e88:	887b      	ldrh	r3, [r7, #2]
 8000e8a:	0a1b      	lsrs	r3, r3, #8
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ffba 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000e94:	887b      	ldrh	r3, [r7, #2]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ffb4 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000ea0:	202b      	movs	r0, #43	; 0x2b
 8000ea2:	f7ff ffa1 	bl	8000de8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000ea6:	88bb      	ldrh	r3, [r7, #4]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ffab 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000eb2:	88bb      	ldrh	r3, [r7, #4]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ffa5 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000ebe:	883b      	ldrh	r3, [r7, #0]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff9f 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000eca:	883b      	ldrh	r3, [r7, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff99 	bl	8000e08 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000ed6:	202c      	movs	r0, #44	; 0x2c
 8000ed8:	f7ff ff86 	bl	8000de8 <LCD_WR_REG>
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd90      	pop	{r4, r7, pc}

08000ee4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <lcd_Clear+0x60>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <lcd_Clear+0x60>)
 8000ef8:	885b      	ldrh	r3, [r3, #2]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	2100      	movs	r1, #0
 8000f00:	2000      	movs	r0, #0
 8000f02:	f7ff ffa3 	bl	8000e4c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	81fb      	strh	r3, [r7, #14]
 8000f0a:	e011      	b.n	8000f30 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	81bb      	strh	r3, [r7, #12]
 8000f10:	e006      	b.n	8000f20 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff77 	bl	8000e08 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000f1a:	89bb      	ldrh	r3, [r7, #12]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	81bb      	strh	r3, [r7, #12]
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <lcd_Clear+0x60>)
 8000f22:	885b      	ldrh	r3, [r3, #2]
 8000f24:	89ba      	ldrh	r2, [r7, #12]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d3f3      	bcc.n	8000f12 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000f2a:	89fb      	ldrh	r3, [r7, #14]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	81fb      	strh	r3, [r7, #14]
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <lcd_Clear+0x60>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	89fa      	ldrh	r2, [r7, #14]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3e8      	bcc.n	8000f0c <lcd_Clear+0x28>
		}
	}
}
 8000f3a:	bf00      	nop
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200002ac 	.word	0x200002ac

08000f48 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4604      	mov	r4, r0
 8000f50:	4608      	mov	r0, r1
 8000f52:	4611      	mov	r1, r2
 8000f54:	461a      	mov	r2, r3
 8000f56:	4623      	mov	r3, r4
 8000f58:	80fb      	strh	r3, [r7, #6]
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80bb      	strh	r3, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	807b      	strh	r3, [r7, #2]
 8000f62:	4613      	mov	r3, r2
 8000f64:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	883b      	ldrh	r3, [r7, #0]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	88b9      	ldrh	r1, [r7, #4]
 8000f74:	88f8      	ldrh	r0, [r7, #6]
 8000f76:	f7ff ff69 	bl	8000e4c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	81fb      	strh	r3, [r7, #14]
 8000f7e:	e010      	b.n	8000fa2 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	81bb      	strh	r3, [r7, #12]
 8000f84:	e006      	b.n	8000f94 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000f86:	8c3b      	ldrh	r3, [r7, #32]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff3d 	bl	8000e08 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000f8e:	89bb      	ldrh	r3, [r7, #12]
 8000f90:	3301      	adds	r3, #1
 8000f92:	81bb      	strh	r3, [r7, #12]
 8000f94:	89ba      	ldrh	r2, [r7, #12]
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d3f4      	bcc.n	8000f86 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000f9c:	89fb      	ldrh	r3, [r7, #14]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	81fb      	strh	r3, [r7, #14]
 8000fa2:	89fa      	ldrh	r2, [r7, #14]
 8000fa4:	883b      	ldrh	r3, [r7, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d3ea      	bcc.n	8000f80 <lcd_Fill+0x38>
		}
	}
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd90      	pop	{r4, r7, pc}

08000fb4 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	80bb      	strh	r3, [r7, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	88fa      	ldrh	r2, [r7, #6]
 8000fca:	88b9      	ldrh	r1, [r7, #4]
 8000fcc:	88f8      	ldrh	r0, [r7, #6]
 8000fce:	f7ff ff3d 	bl	8000e4c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff17 	bl	8000e08 <LCD_WR_DATA>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8000fe2:	b590      	push	{r4, r7, lr}
 8000fe4:	b08d      	sub	sp, #52	; 0x34
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4604      	mov	r4, r0
 8000fea:	4608      	mov	r0, r1
 8000fec:	4611      	mov	r1, r2
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4623      	mov	r3, r4
 8000ff2:	80fb      	strh	r3, [r7, #6]
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	80bb      	strh	r3, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001000:	2300      	movs	r3, #0
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
 8001004:	2300      	movs	r3, #0
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001008:	887a      	ldrh	r2, [r7, #2]
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001010:	883a      	ldrh	r2, [r7, #0]
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 800101c:	88bb      	ldrh	r3, [r7, #4]
 800101e:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	2b00      	cmp	r3, #0
 8001024:	dd02      	ble.n	800102c <lcd_DrawLine+0x4a>
 8001026:	2301      	movs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	e00b      	b.n	8001044 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <lcd_DrawLine+0x56>
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
 8001036:	e005      	b.n	8001044 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001038:	f04f 33ff 	mov.w	r3, #4294967295
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	6a3b      	ldr	r3, [r7, #32]
 8001040:	425b      	negs	r3, r3
 8001042:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dd02      	ble.n	8001050 <lcd_DrawLine+0x6e>
 800104a:	2301      	movs	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	e00b      	b.n	8001068 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <lcd_DrawLine+0x7a>
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	e005      	b.n	8001068 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 800105c:	f04f 33ff 	mov.w	r3, #4294967295
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	425b      	negs	r3, r3
 8001066:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001068:	6a3a      	ldr	r2, [r7, #32]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	429a      	cmp	r2, r3
 800106e:	dd02      	ble.n	8001076 <lcd_DrawLine+0x94>
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	e001      	b.n	800107a <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 800107a:	2300      	movs	r3, #0
 800107c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800107e:	e02b      	b.n	80010d8 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	b29b      	uxth	r3, r3
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	b291      	uxth	r1, r2
 8001088:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff91 	bl	8000fb4 <lcd_DrawPoint>
		xerr+=delta_x;
 8001092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	4413      	add	r3, r2
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 800109a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	4413      	add	r3, r2
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 80010a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dd07      	ble.n	80010ba <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 80010aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80010ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	429a      	cmp	r2, r3
 80010c0:	dd07      	ble.n	80010d2 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80010c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4413      	add	r3, r2
 80010d0:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80010d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010d4:	3301      	adds	r3, #1
 80010d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80010d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dacf      	bge.n	8001080 <lcd_DrawLine+0x9e>
		}
	}
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3734      	adds	r7, #52	; 0x34
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd90      	pop	{r4, r7, pc}

080010ea <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 80010ea:	b590      	push	{r4, r7, lr}
 80010ec:	b085      	sub	sp, #20
 80010ee:	af02      	add	r7, sp, #8
 80010f0:	4604      	mov	r4, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4611      	mov	r1, r2
 80010f6:	461a      	mov	r2, r3
 80010f8:	4623      	mov	r3, r4
 80010fa:	80fb      	strh	r3, [r7, #6]
 80010fc:	4603      	mov	r3, r0
 80010fe:	80bb      	strh	r3, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
 8001104:	4613      	mov	r3, r2
 8001106:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001108:	88bc      	ldrh	r4, [r7, #4]
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	88b9      	ldrh	r1, [r7, #4]
 800110e:	88f8      	ldrh	r0, [r7, #6]
 8001110:	8b3b      	ldrh	r3, [r7, #24]
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	4623      	mov	r3, r4
 8001116:	f7ff ff64 	bl	8000fe2 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 800111a:	883c      	ldrh	r4, [r7, #0]
 800111c:	88fa      	ldrh	r2, [r7, #6]
 800111e:	88b9      	ldrh	r1, [r7, #4]
 8001120:	88f8      	ldrh	r0, [r7, #6]
 8001122:	8b3b      	ldrh	r3, [r7, #24]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	4623      	mov	r3, r4
 8001128:	f7ff ff5b 	bl	8000fe2 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 800112c:	883c      	ldrh	r4, [r7, #0]
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	8839      	ldrh	r1, [r7, #0]
 8001132:	88f8      	ldrh	r0, [r7, #6]
 8001134:	8b3b      	ldrh	r3, [r7, #24]
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	4623      	mov	r3, r4
 800113a:	f7ff ff52 	bl	8000fe2 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 800113e:	883c      	ldrh	r4, [r7, #0]
 8001140:	887a      	ldrh	r2, [r7, #2]
 8001142:	88b9      	ldrh	r1, [r7, #4]
 8001144:	8878      	ldrh	r0, [r7, #2]
 8001146:	8b3b      	ldrh	r3, [r7, #24]
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	4623      	mov	r3, r4
 800114c:	f7ff ff49 	bl	8000fe2 <lcd_DrawLine>
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bd90      	pop	{r4, r7, pc}

08001158 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b087      	sub	sp, #28
 800115c:	af00      	add	r7, sp, #0
 800115e:	4604      	mov	r4, r0
 8001160:	4608      	mov	r0, r1
 8001162:	4611      	mov	r1, r2
 8001164:	461a      	mov	r2, r3
 8001166:	4623      	mov	r3, r4
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	4603      	mov	r3, r0
 800116c:	80bb      	strh	r3, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]
 8001172:	4613      	mov	r3, r2
 8001174:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001176:	2300      	movs	r3, #0
 8001178:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800117e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001182:	085b      	lsrs	r3, r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	08db      	lsrs	r3, r3, #3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	461a      	mov	r2, r3
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf14      	ite	ne
 800119a:	2301      	movne	r3, #1
 800119c:	2300      	moveq	r3, #0
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4413      	add	r3, r2
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	fb12 f303 	smulbb	r3, r2, r3
 80011ae:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	3b20      	subs	r3, #32
 80011b4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	4413      	add	r3, r2
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b29c      	uxth	r4, r3
 80011c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	88bb      	ldrh	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	3b01      	subs	r3, #1
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	88b9      	ldrh	r1, [r7, #4]
 80011d6:	88f8      	ldrh	r0, [r7, #6]
 80011d8:	4622      	mov	r2, r4
 80011da:	f7ff fe37 	bl	8000e4c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80011de:	2300      	movs	r3, #0
 80011e0:	827b      	strh	r3, [r7, #18]
 80011e2:	e07a      	b.n	80012da <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80011e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011e8:	2b0c      	cmp	r3, #12
 80011ea:	d028      	beq.n	800123e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 80011ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011f0:	2b10      	cmp	r3, #16
 80011f2:	d108      	bne.n	8001206 <lcd_ShowChar+0xae>
 80011f4:	78fa      	ldrb	r2, [r7, #3]
 80011f6:	8a7b      	ldrh	r3, [r7, #18]
 80011f8:	493c      	ldr	r1, [pc, #240]	; (80012ec <lcd_ShowChar+0x194>)
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	440a      	add	r2, r1
 80011fe:	4413      	add	r3, r2
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	75fb      	strb	r3, [r7, #23]
 8001204:	e01b      	b.n	800123e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001206:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800120a:	2b18      	cmp	r3, #24
 800120c:	d10b      	bne.n	8001226 <lcd_ShowChar+0xce>
 800120e:	78fa      	ldrb	r2, [r7, #3]
 8001210:	8a79      	ldrh	r1, [r7, #18]
 8001212:	4837      	ldr	r0, [pc, #220]	; (80012f0 <lcd_ShowChar+0x198>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	4403      	add	r3, r0
 800121e:	440b      	add	r3, r1
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	75fb      	strb	r3, [r7, #23]
 8001224:	e00b      	b.n	800123e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001226:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800122a:	2b20      	cmp	r3, #32
 800122c:	d15a      	bne.n	80012e4 <lcd_ShowChar+0x18c>
 800122e:	78fa      	ldrb	r2, [r7, #3]
 8001230:	8a7b      	ldrh	r3, [r7, #18]
 8001232:	4930      	ldr	r1, [pc, #192]	; (80012f4 <lcd_ShowChar+0x19c>)
 8001234:	0192      	lsls	r2, r2, #6
 8001236:	440a      	add	r2, r1
 8001238:	4413      	add	r3, r2
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800123e:	2300      	movs	r3, #0
 8001240:	75bb      	strb	r3, [r7, #22]
 8001242:	e044      	b.n	80012ce <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001244:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001248:	2b00      	cmp	r3, #0
 800124a:	d120      	bne.n	800128e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 800124c:	7dfa      	ldrb	r2, [r7, #23]
 800124e:	7dbb      	ldrb	r3, [r7, #22]
 8001250:	fa42 f303 	asr.w	r3, r2, r3
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <lcd_ShowChar+0x10e>
 800125c:	883b      	ldrh	r3, [r7, #0]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fdd2 	bl	8000e08 <LCD_WR_DATA>
 8001264:	e003      	b.n	800126e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001266:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fdcd 	bl	8000e08 <LCD_WR_DATA>
				m++;
 800126e:	7d7b      	ldrb	r3, [r7, #21]
 8001270:	3301      	adds	r3, #1
 8001272:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001274:	7d7b      	ldrb	r3, [r7, #21]
 8001276:	7bfa      	ldrb	r2, [r7, #15]
 8001278:	fbb3 f1f2 	udiv	r1, r3, r2
 800127c:	fb01 f202 	mul.w	r2, r1, r2
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d11f      	bne.n	80012c8 <lcd_ShowChar+0x170>
				{
					m=0;
 8001288:	2300      	movs	r3, #0
 800128a:	757b      	strb	r3, [r7, #21]
					break;
 800128c:	e022      	b.n	80012d4 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800128e:	7dfa      	ldrb	r2, [r7, #23]
 8001290:	7dbb      	ldrb	r3, [r7, #22]
 8001292:	fa42 f303 	asr.w	r3, r2, r3
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <lcd_ShowChar+0x152>
 800129e:	883a      	ldrh	r2, [r7, #0]
 80012a0:	88b9      	ldrh	r1, [r7, #4]
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe85 	bl	8000fb4 <lcd_DrawPoint>
				x++;
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	3301      	adds	r3, #1
 80012ae:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80012b0:	88fa      	ldrh	r2, [r7, #6]
 80012b2:	8a3b      	ldrh	r3, [r7, #16]
 80012b4:	1ad2      	subs	r2, r2, r3
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d105      	bne.n	80012c8 <lcd_ShowChar+0x170>
				{
					x=x0;
 80012bc:	8a3b      	ldrh	r3, [r7, #16]
 80012be:	80fb      	strh	r3, [r7, #6]
					y++;
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	3301      	adds	r3, #1
 80012c4:	80bb      	strh	r3, [r7, #4]
					break;
 80012c6:	e005      	b.n	80012d4 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80012c8:	7dbb      	ldrb	r3, [r7, #22]
 80012ca:	3301      	adds	r3, #1
 80012cc:	75bb      	strb	r3, [r7, #22]
 80012ce:	7dbb      	ldrb	r3, [r7, #22]
 80012d0:	2b07      	cmp	r3, #7
 80012d2:	d9b7      	bls.n	8001244 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80012d4:	8a7b      	ldrh	r3, [r7, #18]
 80012d6:	3301      	adds	r3, #1
 80012d8:	827b      	strh	r3, [r7, #18]
 80012da:	8a7a      	ldrh	r2, [r7, #18]
 80012dc:	89bb      	ldrh	r3, [r7, #12]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d380      	bcc.n	80011e4 <lcd_ShowChar+0x8c>
 80012e2:	e000      	b.n	80012e6 <lcd_ShowChar+0x18e>
		else return;
 80012e4:	bf00      	nop
				}
			}
		}
	}
}
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	0800abd8 	.word	0x0800abd8
 80012f0:	0800b1c8 	.word	0x0800b1c8
 80012f4:	0800c398 	.word	0x0800c398

080012f8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	460a      	mov	r2, r1
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	4613      	mov	r3, r2
 8001306:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001308:	2301      	movs	r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800130c:	e004      	b.n	8001318 <mypow+0x20>
 800130e:	79fa      	ldrb	r2, [r7, #7]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	79bb      	ldrb	r3, [r7, #6]
 800131a:	1e5a      	subs	r2, r3, #1
 800131c:	71ba      	strb	r2, [r7, #6]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f5      	bne.n	800130e <mypow+0x16>
	return result;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af04      	add	r7, sp, #16
 8001336:	4604      	mov	r4, r0
 8001338:	4608      	mov	r0, r1
 800133a:	4611      	mov	r1, r2
 800133c:	461a      	mov	r2, r3
 800133e:	4623      	mov	r3, r4
 8001340:	80fb      	strh	r3, [r7, #6]
 8001342:	4603      	mov	r3, r0
 8001344:	80bb      	strh	r3, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	807b      	strh	r3, [r7, #2]
 800134a:	4613      	mov	r3, r2
 800134c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800134e:	2300      	movs	r3, #0
 8001350:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001352:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001356:	085b      	lsrs	r3, r3, #1
 8001358:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800135a:	2300      	movs	r3, #0
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	e059      	b.n	8001414 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001360:	887c      	ldrh	r4, [r7, #2]
 8001362:	787a      	ldrb	r2, [r7, #1]
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	3b01      	subs	r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	200a      	movs	r0, #10
 8001372:	f7ff ffc1 	bl	80012f8 <mypow>
 8001376:	4603      	mov	r3, r0
 8001378:	fbb4 f1f3 	udiv	r1, r4, r3
 800137c:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <lcd_ShowIntNum+0xf8>)
 800137e:	fba3 2301 	umull	r2, r3, r3, r1
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	1aca      	subs	r2, r1, r3
 800138e:	4613      	mov	r3, r2
 8001390:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001392:	7bbb      	ldrb	r3, [r7, #14]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d121      	bne.n	80013dc <lcd_ShowIntNum+0xac>
 8001398:	7bfa      	ldrb	r2, [r7, #15]
 800139a:	787b      	ldrb	r3, [r7, #1]
 800139c:	3b01      	subs	r3, #1
 800139e:	429a      	cmp	r2, r3
 80013a0:	da1c      	bge.n	80013dc <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80013a2:	7b3b      	ldrb	r3, [r7, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d117      	bne.n	80013d8 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	7b7b      	ldrb	r3, [r7, #13]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	fb12 f303 	smulbb	r3, r2, r3
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	4413      	add	r3, r2
 80013ba:	b298      	uxth	r0, r3
 80013bc:	8c3a      	ldrh	r2, [r7, #32]
 80013be:	88b9      	ldrh	r1, [r7, #4]
 80013c0:	2300      	movs	r3, #0
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	4613      	mov	r3, r2
 80013d0:	2220      	movs	r2, #32
 80013d2:	f7ff fec1 	bl	8001158 <lcd_ShowChar>
				continue;
 80013d6:	e01a      	b.n	800140e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80013d8:	2301      	movs	r3, #1
 80013da:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	7b7b      	ldrb	r3, [r7, #13]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	fb12 f303 	smulbb	r3, r2, r3
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	4413      	add	r3, r2
 80013ee:	b298      	uxth	r0, r3
 80013f0:	7b3b      	ldrb	r3, [r7, #12]
 80013f2:	3330      	adds	r3, #48	; 0x30
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	8c3c      	ldrh	r4, [r7, #32]
 80013f8:	88b9      	ldrh	r1, [r7, #4]
 80013fa:	2300      	movs	r3, #0
 80013fc:	9302      	str	r3, [sp, #8]
 80013fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4623      	mov	r3, r4
 800140a:	f7ff fea5 	bl	8001158 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	3301      	adds	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	787b      	ldrb	r3, [r7, #1]
 8001418:	429a      	cmp	r2, r3
 800141a:	d3a1      	bcc.n	8001360 <lcd_ShowIntNum+0x30>
	}
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bd90      	pop	{r4, r7, pc}
 8001426:	bf00      	nop
 8001428:	cccccccd 	.word	0xcccccccd

0800142c <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	4604      	mov	r4, r0
 8001434:	4608      	mov	r0, r1
 8001436:	4611      	mov	r1, r2
 8001438:	461a      	mov	r2, r3
 800143a:	4623      	mov	r3, r4
 800143c:	80fb      	strh	r3, [r7, #6]
 800143e:	4603      	mov	r3, r0
 8001440:	80bb      	strh	r3, [r7, #4]
 8001442:	460b      	mov	r3, r1
 8001444:	807b      	strh	r3, [r7, #2]
 8001446:	4613      	mov	r3, r2
 8001448:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 800144e:	88fa      	ldrh	r2, [r7, #6]
 8001450:	887b      	ldrh	r3, [r7, #2]
 8001452:	4413      	add	r3, r2
 8001454:	b29b      	uxth	r3, r3
 8001456:	3b01      	subs	r3, #1
 8001458:	b29c      	uxth	r4, r3
 800145a:	88ba      	ldrh	r2, [r7, #4]
 800145c:	883b      	ldrh	r3, [r7, #0]
 800145e:	4413      	add	r3, r2
 8001460:	b29b      	uxth	r3, r3
 8001462:	3b01      	subs	r3, #1
 8001464:	b29b      	uxth	r3, r3
 8001466:	88b9      	ldrh	r1, [r7, #4]
 8001468:	88f8      	ldrh	r0, [r7, #6]
 800146a:	4622      	mov	r2, r4
 800146c:	f7ff fcee 	bl	8000e4c <lcd_AddressSet>
	for(i=0;i<length;i++)
 8001470:	2300      	movs	r3, #0
 8001472:	82fb      	strh	r3, [r7, #22]
 8001474:	e027      	b.n	80014c6 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8001476:	2300      	movs	r3, #0
 8001478:	82bb      	strh	r3, [r7, #20]
 800147a:	e01d      	b.n	80014b8 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001482:	4413      	add	r3, r2
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	3301      	adds	r3, #1
 800148e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001490:	4413      	add	r3, r2
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b21a      	sxth	r2, r3
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	b21b      	sxth	r3, r3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b21b      	sxth	r3, r3
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fcae 	bl	8000e08 <LCD_WR_DATA>
			k++;
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	3301      	adds	r3, #1
 80014b0:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 80014b2:	8abb      	ldrh	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	82bb      	strh	r3, [r7, #20]
 80014b8:	8aba      	ldrh	r2, [r7, #20]
 80014ba:	883b      	ldrh	r3, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3dd      	bcc.n	800147c <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 80014c0:	8afb      	ldrh	r3, [r7, #22]
 80014c2:	3301      	adds	r3, #1
 80014c4:	82fb      	strh	r3, [r7, #22]
 80014c6:	8afa      	ldrh	r2, [r7, #22]
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d3d3      	bcc.n	8001476 <lcd_ShowPicture+0x4a>
		}
	}
}
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd90      	pop	{r4, r7, pc}

080014d8 <lcd_SetDir>:



void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	091b      	lsrs	r3, r3, #4
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <lcd_SetDir+0x44>)
 80014f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014f8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <lcd_SetDir+0x44>)
 80014fc:	22f0      	movs	r2, #240	; 0xf0
 80014fe:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001500:	e006      	b.n	8001510 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <lcd_SetDir+0x44>)
 8001504:	22f0      	movs	r2, #240	; 0xf0
 8001506:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <lcd_SetDir+0x44>)
 800150a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800150e:	805a      	strh	r2, [r3, #2]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	200002ac 	.word	0x200002ac

08001520 <lcd_init>:


void lcd_init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152a:	48aa      	ldr	r0, [pc, #680]	; (80017d4 <lcd_init+0x2b4>)
 800152c:	f004 fbce 	bl	8005ccc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001530:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001534:	f003 f8e4 	bl	8004700 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153e:	48a5      	ldr	r0, [pc, #660]	; (80017d4 <lcd_init+0x2b4>)
 8001540:	f004 fbc4 	bl	8005ccc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001544:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001548:	f003 f8da 	bl	8004700 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff ffc3 	bl	80014d8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001552:	20d3      	movs	r0, #211	; 0xd3
 8001554:	f7ff fc48 	bl	8000de8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001558:	f7ff fc66 	bl	8000e28 <LCD_RD_DATA>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b9d      	ldr	r3, [pc, #628]	; (80017d8 <lcd_init+0x2b8>)
 8001562:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001564:	f7ff fc60 	bl	8000e28 <LCD_RD_DATA>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	4b9a      	ldr	r3, [pc, #616]	; (80017d8 <lcd_init+0x2b8>)
 800156e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001570:	f7ff fc5a 	bl	8000e28 <LCD_RD_DATA>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	4b97      	ldr	r3, [pc, #604]	; (80017d8 <lcd_init+0x2b8>)
 800157a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800157c:	4b96      	ldr	r3, [pc, #600]	; (80017d8 <lcd_init+0x2b8>)
 800157e:	889b      	ldrh	r3, [r3, #4]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b94      	ldr	r3, [pc, #592]	; (80017d8 <lcd_init+0x2b8>)
 8001586:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001588:	f7ff fc4e 	bl	8000e28 <LCD_RD_DATA>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	4b91      	ldr	r3, [pc, #580]	; (80017d8 <lcd_init+0x2b8>)
 8001592:	889b      	ldrh	r3, [r3, #4]
 8001594:	4313      	orrs	r3, r2
 8001596:	b29a      	uxth	r2, r3
 8001598:	4b8f      	ldr	r3, [pc, #572]	; (80017d8 <lcd_init+0x2b8>)
 800159a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800159c:	20cf      	movs	r0, #207	; 0xcf
 800159e:	f7ff fc23 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff fc30 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80015a8:	20c1      	movs	r0, #193	; 0xc1
 80015aa:	f7ff fc2d 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80015ae:	2030      	movs	r0, #48	; 0x30
 80015b0:	f7ff fc2a 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80015b4:	20ed      	movs	r0, #237	; 0xed
 80015b6:	f7ff fc17 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80015ba:	2064      	movs	r0, #100	; 0x64
 80015bc:	f7ff fc24 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80015c0:	2003      	movs	r0, #3
 80015c2:	f7ff fc21 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80015c6:	2012      	movs	r0, #18
 80015c8:	f7ff fc1e 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80015cc:	2081      	movs	r0, #129	; 0x81
 80015ce:	f7ff fc1b 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80015d2:	20e8      	movs	r0, #232	; 0xe8
 80015d4:	f7ff fc08 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80015d8:	2085      	movs	r0, #133	; 0x85
 80015da:	f7ff fc15 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80015de:	2010      	movs	r0, #16
 80015e0:	f7ff fc12 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80015e4:	207a      	movs	r0, #122	; 0x7a
 80015e6:	f7ff fc0f 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80015ea:	20cb      	movs	r0, #203	; 0xcb
 80015ec:	f7ff fbfc 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80015f0:	2039      	movs	r0, #57	; 0x39
 80015f2:	f7ff fc09 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80015f6:	202c      	movs	r0, #44	; 0x2c
 80015f8:	f7ff fc06 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff fc03 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001602:	2034      	movs	r0, #52	; 0x34
 8001604:	f7ff fc00 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001608:	2002      	movs	r0, #2
 800160a:	f7ff fbfd 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800160e:	20f7      	movs	r0, #247	; 0xf7
 8001610:	f7ff fbea 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001614:	2020      	movs	r0, #32
 8001616:	f7ff fbf7 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800161a:	20ea      	movs	r0, #234	; 0xea
 800161c:	f7ff fbe4 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff fbf1 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001626:	2000      	movs	r0, #0
 8001628:	f7ff fbee 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800162c:	20c0      	movs	r0, #192	; 0xc0
 800162e:	f7ff fbdb 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001632:	201b      	movs	r0, #27
 8001634:	f7ff fbe8 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001638:	20c1      	movs	r0, #193	; 0xc1
 800163a:	f7ff fbd5 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800163e:	2001      	movs	r0, #1
 8001640:	f7ff fbe2 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001644:	20c5      	movs	r0, #197	; 0xc5
 8001646:	f7ff fbcf 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800164a:	2030      	movs	r0, #48	; 0x30
 800164c:	f7ff fbdc 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001650:	2030      	movs	r0, #48	; 0x30
 8001652:	f7ff fbd9 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001656:	20c7      	movs	r0, #199	; 0xc7
 8001658:	f7ff fbc6 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800165c:	20b7      	movs	r0, #183	; 0xb7
 800165e:	f7ff fbd3 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001662:	2036      	movs	r0, #54	; 0x36
 8001664:	f7ff fbc0 	bl	8000de8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001668:	2008      	movs	r0, #8
 800166a:	f7ff fbcd 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800166e:	203a      	movs	r0, #58	; 0x3a
 8001670:	f7ff fbba 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001674:	2055      	movs	r0, #85	; 0x55
 8001676:	f7ff fbc7 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800167a:	20b1      	movs	r0, #177	; 0xb1
 800167c:	f7ff fbb4 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001680:	2000      	movs	r0, #0
 8001682:	f7ff fbc1 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001686:	201a      	movs	r0, #26
 8001688:	f7ff fbbe 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800168c:	20b6      	movs	r0, #182	; 0xb6
 800168e:	f7ff fbab 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001692:	200a      	movs	r0, #10
 8001694:	f7ff fbb8 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001698:	20a2      	movs	r0, #162	; 0xa2
 800169a:	f7ff fbb5 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800169e:	20f2      	movs	r0, #242	; 0xf2
 80016a0:	f7ff fba2 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f7ff fbaf 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80016aa:	2026      	movs	r0, #38	; 0x26
 80016ac:	f7ff fb9c 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff fba9 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80016b6:	20e0      	movs	r0, #224	; 0xe0
 80016b8:	f7ff fb96 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80016bc:	200f      	movs	r0, #15
 80016be:	f7ff fba3 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80016c2:	202a      	movs	r0, #42	; 0x2a
 80016c4:	f7ff fba0 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80016c8:	2028      	movs	r0, #40	; 0x28
 80016ca:	f7ff fb9d 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80016ce:	2008      	movs	r0, #8
 80016d0:	f7ff fb9a 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80016d4:	200e      	movs	r0, #14
 80016d6:	f7ff fb97 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80016da:	2008      	movs	r0, #8
 80016dc:	f7ff fb94 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80016e0:	2054      	movs	r0, #84	; 0x54
 80016e2:	f7ff fb91 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80016e6:	20a9      	movs	r0, #169	; 0xa9
 80016e8:	f7ff fb8e 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80016ec:	2043      	movs	r0, #67	; 0x43
 80016ee:	f7ff fb8b 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80016f2:	200a      	movs	r0, #10
 80016f4:	f7ff fb88 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80016f8:	200f      	movs	r0, #15
 80016fa:	f7ff fb85 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016fe:	2000      	movs	r0, #0
 8001700:	f7ff fb82 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff fb7f 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fb7c 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fb79 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001716:	20e1      	movs	r0, #225	; 0xe1
 8001718:	f7ff fb66 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff fb73 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001722:	2015      	movs	r0, #21
 8001724:	f7ff fb70 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001728:	2017      	movs	r0, #23
 800172a:	f7ff fb6d 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800172e:	2007      	movs	r0, #7
 8001730:	f7ff fb6a 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001734:	2011      	movs	r0, #17
 8001736:	f7ff fb67 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800173a:	2006      	movs	r0, #6
 800173c:	f7ff fb64 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001740:	202b      	movs	r0, #43	; 0x2b
 8001742:	f7ff fb61 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001746:	2056      	movs	r0, #86	; 0x56
 8001748:	f7ff fb5e 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800174c:	203c      	movs	r0, #60	; 0x3c
 800174e:	f7ff fb5b 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001752:	2005      	movs	r0, #5
 8001754:	f7ff fb58 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001758:	2010      	movs	r0, #16
 800175a:	f7ff fb55 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800175e:	200f      	movs	r0, #15
 8001760:	f7ff fb52 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001764:	203f      	movs	r0, #63	; 0x3f
 8001766:	f7ff fb4f 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800176a:	203f      	movs	r0, #63	; 0x3f
 800176c:	f7ff fb4c 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001770:	200f      	movs	r0, #15
 8001772:	f7ff fb49 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001776:	202b      	movs	r0, #43	; 0x2b
 8001778:	f7ff fb36 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fb43 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001782:	2000      	movs	r0, #0
 8001784:	f7ff fb40 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001788:	2001      	movs	r0, #1
 800178a:	f7ff fb3d 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800178e:	203f      	movs	r0, #63	; 0x3f
 8001790:	f7ff fb3a 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001794:	202a      	movs	r0, #42	; 0x2a
 8001796:	f7ff fb27 	bl	8000de8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff fb34 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff fb31 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7ff fb2e 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80017ac:	20ef      	movs	r0, #239	; 0xef
 80017ae:	f7ff fb2b 	bl	8000e08 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80017b2:	2011      	movs	r0, #17
 80017b4:	f7ff fb18 	bl	8000de8 <LCD_WR_REG>
	HAL_Delay(120);
 80017b8:	2078      	movs	r0, #120	; 0x78
 80017ba:	f002 ffa1 	bl	8004700 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80017be:	2029      	movs	r0, #41	; 0x29
 80017c0:	f7ff fb12 	bl	8000de8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80017c4:	2201      	movs	r2, #1
 80017c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ca:	4804      	ldr	r0, [pc, #16]	; (80017dc <lcd_init+0x2bc>)
 80017cc:	f004 fa7e 	bl	8005ccc <HAL_GPIO_WritePin>
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40020800 	.word	0x40020800
 80017d8:	200002ac 	.word	0x200002ac
 80017dc:	40020000 	.word	0x40020000

080017e0 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b08b      	sub	sp, #44	; 0x2c
 80017e4:	af04      	add	r7, sp, #16
 80017e6:	60ba      	str	r2, [r7, #8]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	81fb      	strh	r3, [r7, #14]
 80017ee:	460b      	mov	r3, r1
 80017f0:	81bb      	strh	r3, [r7, #12]
 80017f2:	4613      	mov	r3, r2
 80017f4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80017f6:	89fb      	ldrh	r3, [r7, #14]
 80017f8:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80017fe:	e048      	b.n	8001892 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d145      	bne.n	8001892 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001806:	89fa      	ldrh	r2, [r7, #14]
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <lcd_ShowStr+0xc4>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001812:	085b      	lsrs	r3, r3, #1
 8001814:	b2db      	uxtb	r3, r3
 8001816:	1acb      	subs	r3, r1, r3
 8001818:	429a      	cmp	r2, r3
 800181a:	dc3f      	bgt.n	800189c <lcd_ShowStr+0xbc>
 800181c:	89ba      	ldrh	r2, [r7, #12]
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <lcd_ShowStr+0xc4>)
 8001820:	885b      	ldrh	r3, [r3, #2]
 8001822:	4619      	mov	r1, r3
 8001824:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001828:	1acb      	subs	r3, r1, r3
 800182a:	429a      	cmp	r2, r3
 800182c:	dc36      	bgt.n	800189c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b80      	cmp	r3, #128	; 0x80
 8001834:	d902      	bls.n	800183c <lcd_ShowStr+0x5c>
 8001836:	2301      	movs	r3, #1
 8001838:	75fb      	strb	r3, [r7, #23]
 800183a:	e02a      	b.n	8001892 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b0d      	cmp	r3, #13
 8001842:	d10b      	bne.n	800185c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001844:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001848:	b29a      	uxth	r2, r3
 800184a:	89bb      	ldrh	r3, [r7, #12]
 800184c:	4413      	add	r3, r2
 800184e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001850:	8abb      	ldrh	r3, [r7, #20]
 8001852:	81fb      	strh	r3, [r7, #14]
					str++;
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	3301      	adds	r3, #1
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	e017      	b.n	800188c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	88fc      	ldrh	r4, [r7, #6]
 8001862:	89b9      	ldrh	r1, [r7, #12]
 8001864:	89f8      	ldrh	r0, [r7, #14]
 8001866:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800186a:	9302      	str	r3, [sp, #8]
 800186c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	4623      	mov	r3, r4
 8001878:	f7ff fc6e 	bl	8001158 <lcd_ShowChar>
					x+=sizey/2;
 800187c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001880:	085b      	lsrs	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	b29a      	uxth	r2, r3
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	4413      	add	r3, r2
 800188a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	3301      	adds	r3, #1
 8001890:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1b2      	bne.n	8001800 <lcd_ShowStr+0x20>
 800189a:	e000      	b.n	800189e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800189c:	bf00      	nop
			}
		}
	}
}
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}
 80018a4:	200002ac 	.word	0x200002ac

080018a8 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80018ac:	2201      	movs	r2, #1
 80018ae:	2140      	movs	r1, #64	; 0x40
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <led7_init+0x14>)
 80018b2:	f004 fa0b 	bl	8005ccc <HAL_GPIO_WritePin>
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40021800 	.word	0x40021800

080018c0 <led7_Scan>:

void led7_Scan(){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <led7_Scan+0x104>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <led7_Scan+0x104>)
 80018ce:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80018d0:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <led7_Scan+0x108>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a3d      	ldr	r2, [pc, #244]	; (80019cc <led7_Scan+0x10c>)
 80018d6:	5cd3      	ldrb	r3, [r2, r3]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	b21a      	sxth	r2, r3
 80018dc:	4b39      	ldr	r3, [pc, #228]	; (80019c4 <led7_Scan+0x104>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <led7_Scan+0x104>)
 80018ea:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80018ec:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <led7_Scan+0x108>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d847      	bhi.n	8001984 <led7_Scan+0xc4>
 80018f4:	a201      	add	r2, pc, #4	; (adr r2, 80018fc <led7_Scan+0x3c>)
 80018f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fa:	bf00      	nop
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	0800192b 	.word	0x0800192b
 8001904:	08001949 	.word	0x08001949
 8001908:	08001967 	.word	0x08001967
	case 0:
		spi_buffer |= 0x00b0;
 800190c:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <led7_Scan+0x104>)
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001914:	b29a      	uxth	r2, r3
 8001916:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <led7_Scan+0x104>)
 8001918:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800191a:	4b2a      	ldr	r3, [pc, #168]	; (80019c4 <led7_Scan+0x104>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b27      	ldr	r3, [pc, #156]	; (80019c4 <led7_Scan+0x104>)
 8001926:	801a      	strh	r2, [r3, #0]
		break;
 8001928:	e02d      	b.n	8001986 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <led7_Scan+0x104>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001932:	b29a      	uxth	r2, r3
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <led7_Scan+0x104>)
 8001936:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001938:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <led7_Scan+0x104>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	f023 0320 	bic.w	r3, r3, #32
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <led7_Scan+0x104>)
 8001944:	801a      	strh	r2, [r3, #0]
		break;
 8001946:	e01e      	b.n	8001986 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001948:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <led7_Scan+0x104>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001950:	b29a      	uxth	r2, r3
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <led7_Scan+0x104>)
 8001954:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <led7_Scan+0x104>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	f023 0310 	bic.w	r3, r3, #16
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <led7_Scan+0x104>)
 8001962:	801a      	strh	r2, [r3, #0]
		break;
 8001964:	e00f      	b.n	8001986 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <led7_Scan+0x104>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <led7_Scan+0x104>)
 8001972:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <led7_Scan+0x104>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <led7_Scan+0x104>)
 8001980:	801a      	strh	r2, [r3, #0]
		break;
 8001982:	e000      	b.n	8001986 <led7_Scan+0xc6>
	default:
		break;
 8001984:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <led7_Scan+0x108>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	425a      	negs	r2, r3
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	f002 0203 	and.w	r2, r2, #3
 8001996:	bf58      	it	pl
 8001998:	4253      	negpl	r3, r2
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <led7_Scan+0x108>)
 800199c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2140      	movs	r1, #64	; 0x40
 80019a2:	480b      	ldr	r0, [pc, #44]	; (80019d0 <led7_Scan+0x110>)
 80019a4:	f004 f992 	bl	8005ccc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80019a8:	2301      	movs	r3, #1
 80019aa:	2202      	movs	r2, #2
 80019ac:	4905      	ldr	r1, [pc, #20]	; (80019c4 <led7_Scan+0x104>)
 80019ae:	4809      	ldr	r0, [pc, #36]	; (80019d4 <led7_Scan+0x114>)
 80019b0:	f005 f80b 	bl	80069ca <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80019b4:	2201      	movs	r2, #1
 80019b6:	2140      	movs	r1, #64	; 0x40
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <led7_Scan+0x110>)
 80019ba:	f004 f987 	bl	8005ccc <HAL_GPIO_WritePin>
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000000e 	.word	0x2000000e
 80019c8:	200002b4 	.word	0x200002b4
 80019cc:	20000000 	.word	0x20000000
 80019d0:	40021800 	.word	0x40021800
 80019d4:	200005b4 	.word	0x200005b4

080019d8 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	4613      	mov	r3, r2
 80019e4:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0e      	blt.n	8001a0a <led7_SetDigit+0x32>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b09      	cmp	r3, #9
 80019f0:	dc0b      	bgt.n	8001a0a <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <led7_SetDigit+0x40>)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	781a      	ldrb	r2, [r3, #0]
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	b2d9      	uxtb	r1, r3
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <led7_SetDigit+0x44>)
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	4413      	add	r3, r2
 8001a06:	460a      	mov	r2, r1
 8001a08:	701a      	strb	r2, [r3, #0]
	}
}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	20000000 	.word	0x20000000

08001a20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a24:	f002 fdfa 	bl	800461c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a28:	f000 f87e 	bl	8001b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a2c:	f7ff f82c 	bl	8000a88 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001a30:	f002 fada 	bl	8003fe8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001a34:	f002 f8b8 	bl	8003ba8 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001a38:	f7fe ff56 	bl	80008e8 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001a3c:	f7ff f95e 	bl	8000cfc <MX_I2C1_Init>
  MX_TIM13_Init();
 8001a40:	f002 fb1e 	bl	8004080 <MX_TIM13_Init>
  MX_DMA_Init();
 8001a44:	f7fe ff30 	bl	80008a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a48:	f7fe fd98 	bl	800057c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001a4c:	f002 fa7c 	bl	8003f48 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001a50:	f002 fd04 	bl	800445c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001a54:	f002 fcd8 	bl	8004408 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001a58:	f000 f8d0 	bl	8001bfc <system_init>
  lcd_Clear(WHITE);
 8001a5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a60:	f7ff fa40 	bl	8000ee4 <lcd_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1)
    {
  	  while(!flag_timer2);
 8001a64:	bf00      	nop
 8001a66:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <main+0xf0>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0fb      	beq.n	8001a66 <main+0x46>
	  flag_timer2 = 0;
 8001a6e:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <main+0xf0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8001a74:	f7fe feac 	bl	80007d0 <button_Scan>

	  if(flag_Sensor == 1) {
 8001a78:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <main+0xf4>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d107      	bne.n	8001a90 <main+0x70>
		  sensor_Read();
 8001a80:	f000 fa54 	bl	8001f2c <sensor_Read>
		  uartSendSensor();
 8001a84:	f002 fc48 	bl	8004318 <uartSendSensor>
		  setTimerSendSensor(15000);
 8001a88:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001a8c:	f002 f82a 	bl	8003ae4 <setTimerSendSensor>
	  }

//	  test_button();
//	  test_7seg();
	  switch (status) {
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <main+0xf8>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d034      	beq.n	8001b02 <main+0xe2>
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	dce3      	bgt.n	8001a64 <main+0x44>
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <main+0x86>
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d010      	beq.n	8001ac6 <main+0xa6>
 8001aa4:	e033      	b.n	8001b0e <main+0xee>
	  case 0:
		  display_UI();
 8001aa6:	f000 f8d1 	bl	8001c4c <display_UI>
		  if(button_count[0] == 1) {
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <main+0xfc>)
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d12a      	bne.n	8001b08 <main+0xe8>
			  status = 2;
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <main+0xf8>)
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	801a      	strh	r2, [r3, #0]
			  lcd_Clear(BLACK);
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff fa13 	bl	8000ee4 <lcd_Clear>
			  button_count[0] = 0;
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <main+0xfc>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	801a      	strh	r2, [r3, #0]
		  }
		  break;
 8001ac4:	e020      	b.n	8001b08 <main+0xe8>
	  case 1:

		  wall(difficult%3);
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <main+0x100>)
 8001ac8:	881a      	ldrh	r2, [r3, #0]
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <main+0x104>)
 8001acc:	fba3 1302 	umull	r1, r3, r3, r2
 8001ad0:	0859      	lsrs	r1, r3, #1
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	440b      	add	r3, r1
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	f001 ff2d 	bl	800393c <wall>
		  move();
 8001ae2:	f001 fe37 	bl	8003754 <move>

		  if(button_count[12] == 1) {
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <main+0xfc>)
 8001ae8:	8b1b      	ldrh	r3, [r3, #24]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d10e      	bne.n	8001b0c <main+0xec>
			  status = 2;
 8001aee:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <main+0xf8>)
 8001af0:	2202      	movs	r2, #2
 8001af2:	801a      	strh	r2, [r3, #0]
			  lcd_Clear(BLACK);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff f9f5 	bl	8000ee4 <lcd_Clear>
			  button_count[12] = 0;
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <main+0xfc>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	831a      	strh	r2, [r3, #24]
		  }
		  break;
 8001b00:	e004      	b.n	8001b0c <main+0xec>
	  case 2:
		  display_UI_Snake_Game();
 8001b02:	f000 f99d 	bl	8001e40 <display_UI_Snake_Game>
		  break;
 8001b06:	e002      	b.n	8001b0e <main+0xee>
		  break;
 8001b08:	bf00      	nop
 8001b0a:	e7ab      	b.n	8001a64 <main+0x44>
		  break;
 8001b0c:	bf00      	nop
  	  while(!flag_timer2);
 8001b0e:	e7a9      	b.n	8001a64 <main+0x44>
 8001b10:	200005a8 	.word	0x200005a8
 8001b14:	200005ae 	.word	0x200005ae
 8001b18:	200002ba 	.word	0x200002ba
 8001b1c:	200001e0 	.word	0x200001e0
 8001b20:	20000010 	.word	0x20000010
 8001b24:	aaaaaaab 	.word	0xaaaaaaab

08001b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b094      	sub	sp, #80	; 0x50
 8001b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2e:	f107 0320 	add.w	r3, r7, #32
 8001b32:	2230      	movs	r2, #48	; 0x30
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f007 ff1b 	bl	8009972 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <SystemClock_Config+0xcc>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a27      	ldr	r2, [pc, #156]	; (8001bf4 <SystemClock_Config+0xcc>)
 8001b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <SystemClock_Config+0xcc>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <SystemClock_Config+0xd0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a21      	ldr	r2, [pc, #132]	; (8001bf8 <SystemClock_Config+0xd0>)
 8001b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <SystemClock_Config+0xd0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b84:	2302      	movs	r3, #2
 8001b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b8c:	2310      	movs	r3, #16
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b90:	2302      	movs	r3, #2
 8001b92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b94:	2300      	movs	r3, #0
 8001b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b9c:	23a8      	movs	r3, #168	; 0xa8
 8001b9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba8:	f107 0320 	add.w	r3, r7, #32
 8001bac:	4618      	mov	r0, r3
 8001bae:	f004 f9eb 	bl	8005f88 <HAL_RCC_OscConfig>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bb8:	f000 f9a4 	bl	8001f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bbc:	230f      	movs	r3, #15
 8001bbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001bce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	2105      	movs	r1, #5
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f004 fc4c 	bl	8006478 <HAL_RCC_ClockConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001be6:	f000 f98d 	bl	8001f04 <Error_Handler>
  }
}
 8001bea:	bf00      	nop
 8001bec:	3750      	adds	r7, #80	; 0x50
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40007000 	.word	0x40007000

08001bfc <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2120      	movs	r1, #32
 8001c04:	4810      	ldr	r0, [pc, #64]	; (8001c48 <system_init+0x4c>)
 8001c06:	f004 f861 	bl	8005ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2140      	movs	r1, #64	; 0x40
 8001c0e:	480e      	ldr	r0, [pc, #56]	; (8001c48 <system_init+0x4c>)
 8001c10:	f004 f85c 	bl	8005ccc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2110      	movs	r1, #16
 8001c18:	480b      	ldr	r0, [pc, #44]	; (8001c48 <system_init+0x4c>)
 8001c1a:	f004 f857 	bl	8005ccc <HAL_GPIO_WritePin>
	  timer_init();
 8001c1e:	f001 ff37 	bl	8003a90 <timer_init>
	  led7_init();
 8001c22:	f7ff fe41 	bl	80018a8 <led7_init>
	  button_init();
 8001c26:	f7fe fdc7 	bl	80007b8 <button_init>
	  lcd_init();
 8001c2a:	f7ff fc79 	bl	8001520 <lcd_init>
	  sensor_init();
 8001c2e:	f000 f96f 	bl	8001f10 <sensor_init>
	  uart_init_esp();
 8001c32:	f002 faff 	bl	8004234 <uart_init_esp>
	  setTimer2(50);
 8001c36:	2032      	movs	r0, #50	; 0x32
 8001c38:	f001 ff38 	bl	8003aac <setTimer2>
	  setTimerSendSensor(15000);
 8001c3c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001c40:	f001 ff50 	bl	8003ae4 <setTimerSendSensor>
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021000 	.word	0x40021000

08001c4c <display_UI>:
	snake_init();

	move();
}

void display_UI() {
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af04      	add	r7, sp, #16
	lcd_ShowPicture(80,20, 90, 90, gImage_logo);
 8001c52:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <display_UI+0xd4>)
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	235a      	movs	r3, #90	; 0x5a
 8001c58:	225a      	movs	r2, #90	; 0x5a
 8001c5a:	2114      	movs	r1, #20
 8001c5c:	2050      	movs	r0, #80	; 0x50
 8001c5e:	f7ff fbe5 	bl	800142c <lcd_ShowPicture>
	lcd_ShowStr(50, 115, "LOGIC DESIGN", RED, WHITE, 24, 1);
 8001c62:	2301      	movs	r3, #1
 8001c64:	9302      	str	r3, [sp, #8]
 8001c66:	2318      	movs	r3, #24
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c74:	4a2b      	ldr	r2, [pc, #172]	; (8001d24 <display_UI+0xd8>)
 8001c76:	2173      	movs	r1, #115	; 0x73
 8001c78:	2032      	movs	r0, #50	; 0x32
 8001c7a:	f7ff fdb1 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(42, 150, "GVHD: Vu Trong Thien", BLACK, WHITE, 16, 1);
 8001c7e:	2301      	movs	r3, #1
 8001c80:	9302      	str	r3, [sp, #8]
 8001c82:	2310      	movs	r3, #16
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	4a26      	ldr	r2, [pc, #152]	; (8001d28 <display_UI+0xdc>)
 8001c90:	2196      	movs	r1, #150	; 0x96
 8001c92:	202a      	movs	r0, #42	; 0x2a
 8001c94:	f7ff fda4 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(42, 168, "--------------------", BLACK, WHITE, 16, 1);
 8001c98:	2301      	movs	r3, #1
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	2310      	movs	r3, #16
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	4a20      	ldr	r2, [pc, #128]	; (8001d2c <display_UI+0xe0>)
 8001caa:	21a8      	movs	r1, #168	; 0xa8
 8001cac:	202a      	movs	r0, #42	; 0x2a
 8001cae:	f7ff fd97 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(48, 190, "Nhom 2", BLACK, WHITE, 16, 1);
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	9302      	str	r3, [sp, #8]
 8001cb6:	2310      	movs	r3, #16
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <display_UI+0xe4>)
 8001cc4:	21be      	movs	r1, #190	; 0xbe
 8001cc6:	2030      	movs	r0, #48	; 0x30
 8001cc8:	f7ff fd8a 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(48, 210, "Huynh Gia Qui", BLACK, WHITE, 16, 1);
 8001ccc:	2301      	movs	r3, #1
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	4a15      	ldr	r2, [pc, #84]	; (8001d34 <display_UI+0xe8>)
 8001cde:	21d2      	movs	r1, #210	; 0xd2
 8001ce0:	2030      	movs	r0, #48	; 0x30
 8001ce2:	f7ff fd7d 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(48, 230, "Dao Duy Thanh", BLACK, WHITE, 16, 1);
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	9302      	str	r3, [sp, #8]
 8001cea:	2310      	movs	r3, #16
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	4a10      	ldr	r2, [pc, #64]	; (8001d38 <display_UI+0xec>)
 8001cf8:	21e6      	movs	r1, #230	; 0xe6
 8001cfa:	2030      	movs	r0, #48	; 0x30
 8001cfc:	f7ff fd70 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(48, 250, "Pham Dinh Quoc Thai", BLACK, WHITE, 16, 1);
 8001d00:	2301      	movs	r3, #1
 8001d02:	9302      	str	r3, [sp, #8]
 8001d04:	2310      	movs	r3, #16
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <display_UI+0xf0>)
 8001d12:	21fa      	movs	r1, #250	; 0xfa
 8001d14:	2030      	movs	r0, #48	; 0x30
 8001d16:	f7ff fd63 	bl	80017e0 <lcd_ShowStr>
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	0800db58 	.word	0x0800db58
 8001d24:	0800aa5c 	.word	0x0800aa5c
 8001d28:	0800aa6c 	.word	0x0800aa6c
 8001d2c:	0800aa84 	.word	0x0800aa84
 8001d30:	0800aa9c 	.word	0x0800aa9c
 8001d34:	0800aaa4 	.word	0x0800aaa4
 8001d38:	0800aab4 	.word	0x0800aab4
 8001d3c:	0800aac4 	.word	0x0800aac4

08001d40 <choose_level>:
void choose_level() {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af04      	add	r7, sp, #16
	if(button_count[3] == 1)
 8001d46:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <choose_level+0xe8>)
 8001d48:	88db      	ldrh	r3, [r3, #6]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d105      	bne.n	8001d5a <choose_level+0x1a>
		difficult++;
 8001d4e:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <choose_level+0xec>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <choose_level+0xec>)
 8001d58:	801a      	strh	r2, [r3, #0]
	if(button_count[7] == 1)
 8001d5a:	4b33      	ldr	r3, [pc, #204]	; (8001e28 <choose_level+0xe8>)
 8001d5c:	89db      	ldrh	r3, [r3, #14]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d105      	bne.n	8001d6e <choose_level+0x2e>
		difficult--;
 8001d62:	4b32      	ldr	r3, [pc, #200]	; (8001e2c <choose_level+0xec>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <choose_level+0xec>)
 8001d6c:	801a      	strh	r2, [r3, #0]

	switch(difficult%3) {
 8001d6e:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <choose_level+0xec>)
 8001d70:	881a      	ldrh	r2, [r3, #0]
 8001d72:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <choose_level+0xf0>)
 8001d74:	fba3 1302 	umull	r1, r3, r3, r2
 8001d78:	0859      	lsrs	r1, r3, #1
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	440b      	add	r3, r1
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d034      	beq.n	8001df2 <choose_level+0xb2>
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	dc49      	bgt.n	8001e20 <choose_level+0xe0>
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <choose_level+0x56>
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d017      	beq.n	8001dc4 <choose_level+0x84>
	case 2:
		lcd_Fill(100, 230, 200, 260, BLACK);
		lcd_ShowStr(100,230,"HARD",WHITE,BLACK,16,0);
		break;
	}
}
 8001d94:	e044      	b.n	8001e20 <choose_level+0xe0>
		lcd_Fill(100, 230, 200, 260, BLACK);
 8001d96:	2300      	movs	r3, #0
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001d9e:	22c8      	movs	r2, #200	; 0xc8
 8001da0:	21e6      	movs	r1, #230	; 0xe6
 8001da2:	2064      	movs	r0, #100	; 0x64
 8001da4:	f7ff f8d0 	bl	8000f48 <lcd_Fill>
		lcd_ShowStr(100,230,"EASY",WHITE,BLACK,16,0);
 8001da8:	2300      	movs	r3, #0
 8001daa:	9302      	str	r3, [sp, #8]
 8001dac:	2310      	movs	r3, #16
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2300      	movs	r3, #0
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db8:	4a1e      	ldr	r2, [pc, #120]	; (8001e34 <choose_level+0xf4>)
 8001dba:	21e6      	movs	r1, #230	; 0xe6
 8001dbc:	2064      	movs	r0, #100	; 0x64
 8001dbe:	f7ff fd0f 	bl	80017e0 <lcd_ShowStr>
		break;
 8001dc2:	e02d      	b.n	8001e20 <choose_level+0xe0>
		lcd_Fill(100, 230, 200, 260, BLACK);
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001dcc:	22c8      	movs	r2, #200	; 0xc8
 8001dce:	21e6      	movs	r1, #230	; 0xe6
 8001dd0:	2064      	movs	r0, #100	; 0x64
 8001dd2:	f7ff f8b9 	bl	8000f48 <lcd_Fill>
		lcd_ShowStr(100,230,"NORMAL",WHITE,BLACK,16,0);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	9302      	str	r3, [sp, #8]
 8001dda:	2310      	movs	r3, #16
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	2300      	movs	r3, #0
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de6:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <choose_level+0xf8>)
 8001de8:	21e6      	movs	r1, #230	; 0xe6
 8001dea:	2064      	movs	r0, #100	; 0x64
 8001dec:	f7ff fcf8 	bl	80017e0 <lcd_ShowStr>
		break;
 8001df0:	e016      	b.n	8001e20 <choose_level+0xe0>
		lcd_Fill(100, 230, 200, 260, BLACK);
 8001df2:	2300      	movs	r3, #0
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001dfa:	22c8      	movs	r2, #200	; 0xc8
 8001dfc:	21e6      	movs	r1, #230	; 0xe6
 8001dfe:	2064      	movs	r0, #100	; 0x64
 8001e00:	f7ff f8a2 	bl	8000f48 <lcd_Fill>
		lcd_ShowStr(100,230,"HARD",WHITE,BLACK,16,0);
 8001e04:	2300      	movs	r3, #0
 8001e06:	9302      	str	r3, [sp, #8]
 8001e08:	2310      	movs	r3, #16
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e14:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <choose_level+0xfc>)
 8001e16:	21e6      	movs	r1, #230	; 0xe6
 8001e18:	2064      	movs	r0, #100	; 0x64
 8001e1a:	f7ff fce1 	bl	80017e0 <lcd_ShowStr>
		break;
 8001e1e:	bf00      	nop
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200001e0 	.word	0x200001e0
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	aaaaaaab 	.word	0xaaaaaaab
 8001e34:	0800aad8 	.word	0x0800aad8
 8001e38:	0800aae0 	.word	0x0800aae0
 8001e3c:	0800aae8 	.word	0x0800aae8

08001e40 <display_UI_Snake_Game>:
void display_UI_Snake_Game() {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af04      	add	r7, sp, #16
	lcd_ShowStr(40,50,"SNAKE ",WHITE,BLACK,32,0);
 8001e46:	2300      	movs	r3, #0
 8001e48:	9302      	str	r3, [sp, #8]
 8001e4a:	2320      	movs	r3, #32
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e56:	4a24      	ldr	r2, [pc, #144]	; (8001ee8 <display_UI_Snake_Game+0xa8>)
 8001e58:	2132      	movs	r1, #50	; 0x32
 8001e5a:	2028      	movs	r0, #40	; 0x28
 8001e5c:	f7ff fcc0 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(120,100,"GAME",WHITE,BLACK,32,0);
 8001e60:	2300      	movs	r3, #0
 8001e62:	9302      	str	r3, [sp, #8]
 8001e64:	2320      	movs	r3, #32
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e70:	4a1e      	ldr	r2, [pc, #120]	; (8001eec <display_UI_Snake_Game+0xac>)
 8001e72:	2164      	movs	r1, #100	; 0x64
 8001e74:	2078      	movs	r0, #120	; 0x78
 8001e76:	f7ff fcb3 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(50,200,"Chon do kho!",WHITE,BLACK,16,0);
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	9302      	str	r3, [sp, #8]
 8001e7e:	2310      	movs	r3, #16
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	2300      	movs	r3, #0
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e8a:	4a19      	ldr	r2, [pc, #100]	; (8001ef0 <display_UI_Snake_Game+0xb0>)
 8001e8c:	21c8      	movs	r1, #200	; 0xc8
 8001e8e:	2032      	movs	r0, #50	; 0x32
 8001e90:	f7ff fca6 	bl	80017e0 <lcd_ShowStr>

	choose_level();
 8001e94:	f7ff ff54 	bl	8001d40 <choose_level>
	if(button_count[4] == 1) {
 8001e98:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <display_UI_Snake_Game+0xb4>)
 8001e9a:	891b      	ldrh	r3, [r3, #8]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d11f      	bne.n	8001ee0 <display_UI_Snake_Game+0xa0>
		status = 1;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <display_UI_Snake_Game+0xb8>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	801a      	strh	r2, [r3, #0]
		lcd_Clear(WHITE);
 8001ea6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001eaa:	f7ff f81b 	bl	8000ee4 <lcd_Clear>
		lcd_Fill(0, 0, 240, 100, BLACK);
 8001eae:	2300      	movs	r3, #0
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2364      	movs	r3, #100	; 0x64
 8001eb4:	22f0      	movs	r2, #240	; 0xf0
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff f845 	bl	8000f48 <lcd_Fill>
		snake_init();
 8001ebe:	f000 f8df 	bl	8002080 <snake_init>
		if(difficult%3 >= 1) {
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <display_UI_Snake_Game+0xbc>)
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <display_UI_Snake_Game+0xc0>)
 8001ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8001ecc:	0859      	lsrs	r1, r3, #1
 8001ece:	460b      	mov	r3, r1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	440b      	add	r3, r1
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <display_UI_Snake_Game+0xa0>
			createWall();
 8001edc:	f000 f89e 	bl	800201c <createWall>
		}
	}

//	lcd_ShowStr(0,220,"",WHITE,BLACK,16,0);

}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	0800aaf0 	.word	0x0800aaf0
 8001eec:	0800aaf8 	.word	0x0800aaf8
 8001ef0:	0800ab00 	.word	0x0800ab00
 8001ef4:	200001e0 	.word	0x200001e0
 8001ef8:	200002ba 	.word	0x200002ba
 8001efc:	20000010 	.word	0x20000010
 8001f00:	aaaaaaab 	.word	0xaaaaaaab

08001f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f08:	b672      	cpsid	i
}
 8001f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <Error_Handler+0x8>
	...

08001f10 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8001f14:	2205      	movs	r2, #5
 8001f16:	4903      	ldr	r1, [pc, #12]	; (8001f24 <sensor_init+0x14>)
 8001f18:	4803      	ldr	r0, [pc, #12]	; (8001f28 <sensor_init+0x18>)
 8001f1a:	f002 fc59 	bl	80047d0 <HAL_ADC_Start_DMA>
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200002bc 	.word	0x200002bc
 8001f28:	20000138 	.word	0x20000138

08001f2c <sensor_Read>:

void sensor_Read(){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8001f30:	2205      	movs	r2, #5
 8001f32:	4903      	ldr	r1, [pc, #12]	; (8001f40 <sensor_Read+0x14>)
 8001f34:	4803      	ldr	r0, [pc, #12]	; (8001f44 <sensor_Read+0x18>)
 8001f36:	f002 fc4b 	bl	80047d0 <HAL_ADC_Start_DMA>
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200002bc 	.word	0x200002bc
 8001f44:	20000138 	.word	0x20000138

08001f48 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <sensor_GetLight+0x14>)
 8001f4e:	889b      	ldrh	r3, [r3, #4]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	200002bc 	.word	0x200002bc

08001f60 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <sensor_GetPotentiometer+0x14>)
 8001f66:	88db      	ldrh	r3, [r3, #6]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	200002bc 	.word	0x200002bc

08001f78 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <sensor_GetTemperature+0x30>)
 8001f7e:	891b      	ldrh	r3, [r3, #8]
 8001f80:	ee07 3a90 	vmov	s15, r3
 8001f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f88:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001fac <sensor_GetTemperature+0x34>
 8001f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f90:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001fb0 <sensor_GetTemperature+0x38>
 8001f94:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f98:	eef0 7a66 	vmov.f32	s15, s13
}
 8001f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	200002bc 	.word	0x200002bc
 8001fac:	43a50000 	.word	0x43a50000
 8001fb0:	457ff000 	.word	0x457ff000

08001fb4 <random_eat>:
uint8_t flag2 = 0;
uint16_t x1 = 160, y1 = 160, x2 = 170, y2 = 170;
enum state firstState = goDown;
enum state prevState = goRight;

uint16_t random_eat(uint16_t minN, uint16_t maxN) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	460a      	mov	r2, r1
 8001fbe:	80fb      	strh	r3, [r7, #6]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	80bb      	strh	r3, [r7, #4]
	return minN + rand()%(maxN + 1 - minN);
 8001fc4:	f007 fb5e 	bl	8009684 <rand>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	88bb      	ldrh	r3, [r7, #4]
 8001fcc:	1c59      	adds	r1, r3, #1
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	1acb      	subs	r3, r1, r3
 8001fd2:	fb92 f1f3 	sdiv	r1, r2, r3
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	88fb      	ldrh	r3, [r7, #6]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b29b      	uxth	r3, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <createWall_color>:
        {190, 220, 200, 285},    // Wall 6
        {130, 275, 200, 285},
		{90, 150, 140, 160},
		{115, 150, 125, 200}
    };
void createWall_color(int32_t X1, int32_t Y1, int32_t X2, int32_t Y2) {
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
    // Replace this with the appropriate function in your graphics library
    lcd_Fill(X1, Y1, X2, Y2, MAGENTA);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	b298      	uxth	r0, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	b299      	uxth	r1, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	b29a      	uxth	r2, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b29b      	uxth	r3, r3
 800200a:	f64f 041f 	movw	r4, #63519	; 0xf81f
 800200e:	9400      	str	r4, [sp, #0]
 8002010:	f7fe ff9a 	bl	8000f48 <lcd_Fill>
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bd90      	pop	{r4, r7, pc}

0800201c <createWall>:
void createWall() {
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
	for (int8_t i = 0; i < 9; ++i) {
 8002022:	2300      	movs	r3, #0
 8002024:	71fb      	strb	r3, [r7, #7]
 8002026:	e020      	b.n	800206a <createWall+0x4e>
		createWall_color(obstacles[i].x1, obstacles[i].y1, obstacles[i].x2, obstacles[i].y2);
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	4a13      	ldr	r2, [pc, #76]	; (800207c <createWall+0x60>)
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	4413      	add	r3, r2
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	4a10      	ldr	r2, [pc, #64]	; (800207c <createWall+0x60>)
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	4413      	add	r3, r2
 800203e:	3304      	adds	r3, #4
 8002040:	6819      	ldr	r1, [r3, #0]
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	4a0d      	ldr	r2, [pc, #52]	; (800207c <createWall+0x60>)
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	4413      	add	r3, r2
 800204c:	3308      	adds	r3, #8
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	4c09      	ldr	r4, [pc, #36]	; (800207c <createWall+0x60>)
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	4423      	add	r3, r4
 800205a:	330c      	adds	r3, #12
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f7ff ffc5 	bl	8001fec <createWall_color>
	for (int8_t i = 0; i < 9; ++i) {
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	3301      	adds	r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	71fb      	strb	r3, [r7, #7]
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	2b08      	cmp	r3, #8
 8002070:	ddda      	ble.n	8002028 <createWall+0xc>
	}
}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bd90      	pop	{r4, r7, pc}
 800207c:	20000024 	.word	0x20000024

08002080 <snake_init>:
void snake_init() {
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b083      	sub	sp, #12
 8002084:	af02      	add	r7, sp, #8
	lcd_Fill(x1, y1, x2, y2, BLUE);
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <snake_init+0x28>)
 8002088:	8818      	ldrh	r0, [r3, #0]
 800208a:	4b08      	ldr	r3, [pc, #32]	; (80020ac <snake_init+0x2c>)
 800208c:	8819      	ldrh	r1, [r3, #0]
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <snake_init+0x30>)
 8002090:	881a      	ldrh	r2, [r3, #0]
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <snake_init+0x34>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	241f      	movs	r4, #31
 8002098:	9400      	str	r4, [sp, #0]
 800209a:	f7fe ff55 	bl	8000f48 <lcd_Fill>
}
 800209e:	bf00      	nop
 80020a0:	3704      	adds	r7, #4
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd90      	pop	{r4, r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000012 	.word	0x20000012
 80020ac:	20000014 	.word	0x20000014
 80020b0:	20000016 	.word	0x20000016
 80020b4:	20000018 	.word	0x20000018

080020b8 <reset_game>:

void reset_game() {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af02      	add	r7, sp, #8
	count = 0;
 80020be:	4b50      	ldr	r3, [pc, #320]	; (8002200 <reset_game+0x148>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	801a      	strh	r2, [r3, #0]
	max_count = 0;
 80020c4:	4b4f      	ldr	r3, [pc, #316]	; (8002204 <reset_game+0x14c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	801a      	strh	r2, [r3, #0]
	lcd_Clear(WHITE);
 80020ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80020ce:	f7fe ff09 	bl	8000ee4 <lcd_Clear>
	x1 = 160, y1 = 190, x2 = 170, y2 = 200;
 80020d2:	4b4d      	ldr	r3, [pc, #308]	; (8002208 <reset_game+0x150>)
 80020d4:	22a0      	movs	r2, #160	; 0xa0
 80020d6:	801a      	strh	r2, [r3, #0]
 80020d8:	4b4c      	ldr	r3, [pc, #304]	; (800220c <reset_game+0x154>)
 80020da:	22be      	movs	r2, #190	; 0xbe
 80020dc:	801a      	strh	r2, [r3, #0]
 80020de:	4b4c      	ldr	r3, [pc, #304]	; (8002210 <reset_game+0x158>)
 80020e0:	22aa      	movs	r2, #170	; 0xaa
 80020e2:	801a      	strh	r2, [r3, #0]
 80020e4:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <reset_game+0x15c>)
 80020e6:	22c8      	movs	r2, #200	; 0xc8
 80020e8:	801a      	strh	r2, [r3, #0]
	CREATE_FOOD = 1;
 80020ea:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <reset_game+0x160>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	801a      	strh	r2, [r3, #0]

	lcd_Fill(0, 0, 240, 100, BLACK);
 80020f0:	2300      	movs	r3, #0
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2364      	movs	r3, #100	; 0x64
 80020f6:	22f0      	movs	r2, #240	; 0xf0
 80020f8:	2100      	movs	r1, #0
 80020fa:	2000      	movs	r0, #0
 80020fc:	f7fe ff24 	bl	8000f48 <lcd_Fill>
	currentIndex = 0;
 8002100:	4b46      	ldr	r3, [pc, #280]	; (800221c <reset_game+0x164>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
	for (int8_t i = 0; i < 30; i++) {
 8002106:	2300      	movs	r3, #0
 8002108:	71fb      	strb	r3, [r7, #7]
 800210a:	e051      	b.n	80021b0 <reset_game+0xf8>
	        allPath[i].currentState = goDown;
 800210c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002110:	4943      	ldr	r1, [pc, #268]	; (8002220 <reset_game+0x168>)
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	440b      	add	r3, r1
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
	        allPath[i].isTail = 0;
 8002120:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002124:	493e      	ldr	r1, [pc, #248]	; (8002220 <reset_game+0x168>)
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	3301      	adds	r3, #1
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
	        allPath[i].length = 0;
 8002136:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800213a:	4939      	ldr	r1, [pc, #228]	; (8002220 <reset_game+0x168>)
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	440b      	add	r3, r1
 8002146:	3304      	adds	r3, #4
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
	        allPath[i].x1 = 0;
 800214c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002150:	4933      	ldr	r1, [pc, #204]	; (8002220 <reset_game+0x168>)
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	440b      	add	r3, r1
 800215c:	3308      	adds	r3, #8
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
	        allPath[i].x2 = 0;
 8002162:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002166:	492e      	ldr	r1, [pc, #184]	; (8002220 <reset_game+0x168>)
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	330c      	adds	r3, #12
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
	        allPath[i].y1 = 0;
 8002178:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800217c:	4928      	ldr	r1, [pc, #160]	; (8002220 <reset_game+0x168>)
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	3310      	adds	r3, #16
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
	        allPath[i].y2 = 0;
 800218e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002192:	4923      	ldr	r1, [pc, #140]	; (8002220 <reset_game+0x168>)
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	3314      	adds	r3, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
	for (int8_t i = 0; i < 30; i++) {
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	3301      	adds	r3, #1
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	71fb      	strb	r3, [r7, #7]
 80021b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b4:	2b1d      	cmp	r3, #29
 80021b6:	dda9      	ble.n	800210c <reset_game+0x54>
	    }
	init_len = 10;
 80021b8:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <reset_game+0x16c>)
 80021ba:	220a      	movs	r2, #10
 80021bc:	801a      	strh	r2, [r3, #0]
	snakeTailLen = 10;
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <reset_game+0x170>)
 80021c0:	220a      	movs	r2, #10
 80021c2:	801a      	strh	r2, [r3, #0]
	flag = 0;
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <reset_game+0x174>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
	flag1 = 0;
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <reset_game+0x178>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
	flag2 = 0;
 80021d0:	4b18      	ldr	r3, [pc, #96]	; (8002234 <reset_game+0x17c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
	speed = 2;
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <reset_game+0x180>)
 80021d8:	2202      	movs	r2, #2
 80021da:	801a      	strh	r2, [r3, #0]
	firstState = goDown;
 80021dc:	4b17      	ldr	r3, [pc, #92]	; (800223c <reset_game+0x184>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
	prevState = goRight;
 80021e2:	4b17      	ldr	r3, [pc, #92]	; (8002240 <reset_game+0x188>)
 80021e4:	2203      	movs	r2, #3
 80021e6:	701a      	strb	r2, [r3, #0]
	snake_init();
 80021e8:	f7ff ff4a 	bl	8002080 <snake_init>
	if(level >= 1) {
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <reset_game+0x18c>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <reset_game+0x140>
		createWall();
 80021f4:	f7ff ff12 	bl	800201c <createWall>

	}
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	200005a4 	.word	0x200005a4
 8002204:	200005a6 	.word	0x200005a6
 8002208:	20000012 	.word	0x20000012
 800220c:	20000014 	.word	0x20000014
 8002210:	20000016 	.word	0x20000016
 8002214:	20000018 	.word	0x20000018
 8002218:	20000022 	.word	0x20000022
 800221c:	200002c8 	.word	0x200002c8
 8002220:	200002cc 	.word	0x200002cc
 8002224:	2000001c 	.word	0x2000001c
 8002228:	2000001e 	.word	0x2000001e
 800222c:	2000059c 	.word	0x2000059c
 8002230:	2000059d 	.word	0x2000059d
 8002234:	2000059e 	.word	0x2000059e
 8002238:	20000020 	.word	0x20000020
 800223c:	2000001a 	.word	0x2000001a
 8002240:	2000001b 	.word	0x2000001b
 8002244:	200002c6 	.word	0x200002c6

08002248 <game_over>:
void game_over(){
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af04      	add	r7, sp, #16

	lcd_ShowStr(50,175,"Diem cua ban la: ",RED,WHITE,16,0);
 800224e:	2300      	movs	r3, #0
 8002250:	9302      	str	r3, [sp, #8]
 8002252:	2310      	movs	r3, #16
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002260:	4a31      	ldr	r2, [pc, #196]	; (8002328 <game_over+0xe0>)
 8002262:	21af      	movs	r1, #175	; 0xaf
 8002264:	2032      	movs	r0, #50	; 0x32
 8002266:	f7ff fabb 	bl	80017e0 <lcd_ShowStr>
	if(count < 10)
 800226a:	4b30      	ldr	r3, [pc, #192]	; (800232c <game_over+0xe4>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	2b09      	cmp	r3, #9
 8002270:	d80f      	bhi.n	8002292 <game_over+0x4a>
		lcd_ShowIntNum(185,175,count,1,RED,WHITE,16);
 8002272:	4b2e      	ldr	r3, [pc, #184]	; (800232c <game_over+0xe4>)
 8002274:	881a      	ldrh	r2, [r3, #0]
 8002276:	2310      	movs	r3, #16
 8002278:	9302      	str	r3, [sp, #8]
 800227a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2301      	movs	r3, #1
 8002288:	21af      	movs	r1, #175	; 0xaf
 800228a:	20b9      	movs	r0, #185	; 0xb9
 800228c:	f7ff f850 	bl	8001330 <lcd_ShowIntNum>
 8002290:	e00e      	b.n	80022b0 <game_over+0x68>
	else
		lcd_ShowIntNum(185,175,count,2,RED,WHITE,16);
 8002292:	4b26      	ldr	r3, [pc, #152]	; (800232c <game_over+0xe4>)
 8002294:	881a      	ldrh	r2, [r3, #0]
 8002296:	2310      	movs	r3, #16
 8002298:	9302      	str	r3, [sp, #8]
 800229a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2302      	movs	r3, #2
 80022a8:	21af      	movs	r1, #175	; 0xaf
 80022aa:	20b9      	movs	r0, #185	; 0xb9
 80022ac:	f7ff f840 	bl	8001330 <lcd_ShowIntNum>

//	lcd_Fill(x1, y1, x2, y2, WHITE);
//	lcd_Fill(x_food, y_food, x_food+5, y_food+5, WHITE);

	lcd_ShowStr(10,230,"Nhan phim 9 de choi lai!",BLACK,WHITE,16,0);
 80022b0:	2300      	movs	r3, #0
 80022b2:	9302      	str	r3, [sp, #8]
 80022b4:	2310      	movs	r3, #16
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	2300      	movs	r3, #0
 80022c0:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <game_over+0xe8>)
 80022c2:	21e6      	movs	r1, #230	; 0xe6
 80022c4:	200a      	movs	r0, #10
 80022c6:	f7ff fa8b 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(10,250,"Nhan phim E de thoat game!",BLACK,WHITE,16,0);
 80022ca:	2300      	movs	r3, #0
 80022cc:	9302      	str	r3, [sp, #8]
 80022ce:	2310      	movs	r3, #16
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2300      	movs	r3, #0
 80022da:	4a16      	ldr	r2, [pc, #88]	; (8002334 <game_over+0xec>)
 80022dc:	21fa      	movs	r1, #250	; 0xfa
 80022de:	200a      	movs	r0, #10
 80022e0:	f7ff fa7e 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowStr(50,130,"Game Over!!!",BLUE,YELLOW,24,0);
 80022e4:	2300      	movs	r3, #0
 80022e6:	9302      	str	r3, [sp, #8]
 80022e8:	2318      	movs	r3, #24
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	231f      	movs	r3, #31
 80022f4:	4a10      	ldr	r2, [pc, #64]	; (8002338 <game_over+0xf0>)
 80022f6:	2182      	movs	r1, #130	; 0x82
 80022f8:	2032      	movs	r0, #50	; 0x32
 80022fa:	f7ff fa71 	bl	80017e0 <lcd_ShowStr>
	if(count > max_count) {
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <game_over+0xe4>)
 8002300:	881a      	ldrh	r2, [r3, #0]
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <game_over+0xf4>)
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d903      	bls.n	8002312 <game_over+0xca>
		max_count = count;
 800230a:	4b08      	ldr	r3, [pc, #32]	; (800232c <game_over+0xe4>)
 800230c:	881a      	ldrh	r2, [r3, #0]
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <game_over+0xf4>)
 8002310:	801a      	strh	r2, [r3, #0]
	}
	reset_game();
 8002312:	f7ff fed1 	bl	80020b8 <reset_game>
	if(button_count[10] == 1) {
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <game_over+0xf8>)
 8002318:	8a9b      	ldrh	r3, [r3, #20]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <game_over+0xda>
		reset_game();
 800231e:	f7ff fecb 	bl	80020b8 <reset_game>
//		move();
	} else if (button_count[11] == 1) {

	}

}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	0800ab10 	.word	0x0800ab10
 800232c:	200005a4 	.word	0x200005a4
 8002330:	0800ab24 	.word	0x0800ab24
 8002334:	0800ab40 	.word	0x0800ab40
 8002338:	0800ab5c 	.word	0x0800ab5c
 800233c:	200005a6 	.word	0x200005a6
 8002340:	200001e0 	.word	0x200001e0

08002344 <checkBite>:

uint8_t checkBite (int16_t X1 , int16_t Y1, int16_t X2, int16_t Y2,int8_t count) {
 8002344:	b490      	push	{r4, r7}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	4604      	mov	r4, r0
 800234c:	4608      	mov	r0, r1
 800234e:	4611      	mov	r1, r2
 8002350:	461a      	mov	r2, r3
 8002352:	4623      	mov	r3, r4
 8002354:	80fb      	strh	r3, [r7, #6]
 8002356:	4603      	mov	r3, r0
 8002358:	80bb      	strh	r3, [r7, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	807b      	strh	r3, [r7, #2]
 800235e:	4613      	mov	r3, r2
 8002360:	803b      	strh	r3, [r7, #0]
	for (int8_t i = count; i < currentIndex; i++) {
 8002362:	7e3b      	ldrb	r3, [r7, #24]
 8002364:	73fb      	strb	r3, [r7, #15]
 8002366:	e0b6      	b.n	80024d6 <checkBite+0x192>
		if (X1 >= allPath[i].x1 && X1 <= allPath[i].x2) {
 8002368:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800236c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002370:	485f      	ldr	r0, [pc, #380]	; (80024f0 <checkBite+0x1ac>)
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4403      	add	r3, r0
 800237c:	3308      	adds	r3, #8
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4299      	cmp	r1, r3
 8002382:	db49      	blt.n	8002418 <checkBite+0xd4>
 8002384:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002388:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800238c:	4858      	ldr	r0, [pc, #352]	; (80024f0 <checkBite+0x1ac>)
 800238e:	4613      	mov	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4403      	add	r3, r0
 8002398:	330c      	adds	r3, #12
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4299      	cmp	r1, r3
 800239e:	dc3b      	bgt.n	8002418 <checkBite+0xd4>
			if (Y1 >= allPath[i].y1 && Y1 <= allPath[i].y2) {
 80023a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80023a4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80023a8:	4851      	ldr	r0, [pc, #324]	; (80024f0 <checkBite+0x1ac>)
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4403      	add	r3, r0
 80023b4:	3310      	adds	r3, #16
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4299      	cmp	r1, r3
 80023ba:	db0f      	blt.n	80023dc <checkBite+0x98>
 80023bc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80023c0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80023c4:	484a      	ldr	r0, [pc, #296]	; (80024f0 <checkBite+0x1ac>)
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4403      	add	r3, r0
 80023d0:	3314      	adds	r3, #20
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4299      	cmp	r1, r3
 80023d6:	dc01      	bgt.n	80023dc <checkBite+0x98>

				return 1;
 80023d8:	2301      	movs	r3, #1
 80023da:	e084      	b.n	80024e6 <checkBite+0x1a2>
			} else if (Y2 >= allPath[i].y1 && Y2 <= allPath[i].y2) {
 80023dc:	f9b7 1000 	ldrsh.w	r1, [r7]
 80023e0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80023e4:	4842      	ldr	r0, [pc, #264]	; (80024f0 <checkBite+0x1ac>)
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	4403      	add	r3, r0
 80023f0:	3310      	adds	r3, #16
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4299      	cmp	r1, r3
 80023f6:	db67      	blt.n	80024c8 <checkBite+0x184>
 80023f8:	f9b7 1000 	ldrsh.w	r1, [r7]
 80023fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002400:	483b      	ldr	r0, [pc, #236]	; (80024f0 <checkBite+0x1ac>)
 8002402:	4613      	mov	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4403      	add	r3, r0
 800240c:	3314      	adds	r3, #20
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4299      	cmp	r1, r3
 8002412:	dc59      	bgt.n	80024c8 <checkBite+0x184>

				return 1;
 8002414:	2301      	movs	r3, #1
 8002416:	e066      	b.n	80024e6 <checkBite+0x1a2>
			}
		} else if (X2 >= allPath[i].x1 && X2 <= allPath[i].x2) {
 8002418:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800241c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002420:	4833      	ldr	r0, [pc, #204]	; (80024f0 <checkBite+0x1ac>)
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	4403      	add	r3, r0
 800242c:	3308      	adds	r3, #8
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4299      	cmp	r1, r3
 8002432:	db4a      	blt.n	80024ca <checkBite+0x186>
 8002434:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002438:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800243c:	482c      	ldr	r0, [pc, #176]	; (80024f0 <checkBite+0x1ac>)
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4403      	add	r3, r0
 8002448:	330c      	adds	r3, #12
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4299      	cmp	r1, r3
 800244e:	dc3c      	bgt.n	80024ca <checkBite+0x186>
			if (Y1 >= allPath[i].y1 && Y1 <= allPath[i].y2) {
 8002450:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002454:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002458:	4825      	ldr	r0, [pc, #148]	; (80024f0 <checkBite+0x1ac>)
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4403      	add	r3, r0
 8002464:	3310      	adds	r3, #16
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4299      	cmp	r1, r3
 800246a:	db0f      	blt.n	800248c <checkBite+0x148>
 800246c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002470:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002474:	481e      	ldr	r0, [pc, #120]	; (80024f0 <checkBite+0x1ac>)
 8002476:	4613      	mov	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4403      	add	r3, r0
 8002480:	3314      	adds	r3, #20
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4299      	cmp	r1, r3
 8002486:	dc01      	bgt.n	800248c <checkBite+0x148>

				return 1;
 8002488:	2301      	movs	r3, #1
 800248a:	e02c      	b.n	80024e6 <checkBite+0x1a2>
			} else if (Y2 >= allPath[i].y1 && Y2 <= allPath[i].y2) {
 800248c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002490:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002494:	4816      	ldr	r0, [pc, #88]	; (80024f0 <checkBite+0x1ac>)
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4403      	add	r3, r0
 80024a0:	3310      	adds	r3, #16
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4299      	cmp	r1, r3
 80024a6:	db10      	blt.n	80024ca <checkBite+0x186>
 80024a8:	f9b7 1000 	ldrsh.w	r1, [r7]
 80024ac:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80024b0:	480f      	ldr	r0, [pc, #60]	; (80024f0 <checkBite+0x1ac>)
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4403      	add	r3, r0
 80024bc:	3314      	adds	r3, #20
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4299      	cmp	r1, r3
 80024c2:	dc02      	bgt.n	80024ca <checkBite+0x186>

				return 1;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e00e      	b.n	80024e6 <checkBite+0x1a2>
			if (Y1 >= allPath[i].y1 && Y1 <= allPath[i].y2) {
 80024c8:	bf00      	nop
	for (int8_t i = count; i < currentIndex; i++) {
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	73fb      	strb	r3, [r7, #15]
 80024d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024da:	4a06      	ldr	r2, [pc, #24]	; (80024f4 <checkBite+0x1b0>)
 80024dc:	7812      	ldrb	r2, [r2, #0]
 80024de:	4293      	cmp	r3, r2
 80024e0:	f6ff af42 	blt.w	8002368 <checkBite+0x24>
			}
		}
	}
	return 0;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc90      	pop	{r4, r7}
 80024ee:	4770      	bx	lr
 80024f0:	200002cc 	.word	0x200002cc
 80024f4:	200002c8 	.word	0x200002c8

080024f8 <snakeSelfBite>:
uint8_t snakeSelfBite (int16_t X1 , int16_t Y1, int16_t X2, int16_t Y2,int8_t flag3){
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	4604      	mov	r4, r0
 8002500:	4608      	mov	r0, r1
 8002502:	4611      	mov	r1, r2
 8002504:	461a      	mov	r2, r3
 8002506:	4623      	mov	r3, r4
 8002508:	80fb      	strh	r3, [r7, #6]
 800250a:	4603      	mov	r3, r0
 800250c:	80bb      	strh	r3, [r7, #4]
 800250e:	460b      	mov	r3, r1
 8002510:	807b      	strh	r3, [r7, #2]
 8002512:	4613      	mov	r3, r2
 8002514:	803b      	strh	r3, [r7, #0]
	if (flag3 == 1) {
 8002516:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d112      	bne.n	8002544 <snakeSelfBite+0x4c>
		if(checkBite(X1, Y1, X2, Y2, 0) == 1)
 800251e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002522:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002526:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800252a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800252e:	2400      	movs	r4, #0
 8002530:	9400      	str	r4, [sp, #0]
 8002532:	f7ff ff07 	bl	8002344 <checkBite>
 8002536:	4603      	mov	r3, r0
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <snakeSelfBite+0x48>
			return 1;
 800253c:	2301      	movs	r3, #1
 800253e:	e017      	b.n	8002570 <snakeSelfBite+0x78>
		return 0;
 8002540:	2300      	movs	r3, #0
 8002542:	e015      	b.n	8002570 <snakeSelfBite+0x78>
	}
	else {
		if (currentIndex >= 4) {
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <snakeSelfBite+0x80>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d910      	bls.n	800256e <snakeSelfBite+0x76>
			if(checkBite(X1, Y1, X2, Y2, 3) == 1) {
 800254c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002550:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002554:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002558:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800255c:	2403      	movs	r4, #3
 800255e:	9400      	str	r4, [sp, #0]
 8002560:	f7ff fef0 	bl	8002344 <checkBite>
 8002564:	4603      	mov	r3, r0
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <snakeSelfBite+0x76>
				return 1;
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <snakeSelfBite+0x78>
			}
		}
		return 0;
 800256e:	2300      	movs	r3, #0
	}

}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bd90      	pop	{r4, r7, pc}
 8002578:	200002c8 	.word	0x200002c8

0800257c <moveWall>:
void moveWall() {
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b083      	sub	sp, #12
 8002580:	af02      	add	r7, sp, #8
	if (flag1 == 0) {
 8002582:	4b7b      	ldr	r3, [pc, #492]	; (8002770 <moveWall+0x1f4>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d14a      	bne.n	8002620 <moveWall+0xa4>
		lcd_Fill(obstacles[7].x2-2, obstacles[7].y1, obstacles[7].x2, obstacles[7].y2, WHITE);
 800258a:	4b7a      	ldr	r3, [pc, #488]	; (8002774 <moveWall+0x1f8>)
 800258c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b02      	subs	r3, #2
 8002592:	b298      	uxth	r0, r3
 8002594:	4b77      	ldr	r3, [pc, #476]	; (8002774 <moveWall+0x1f8>)
 8002596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002598:	b299      	uxth	r1, r3
 800259a:	4b76      	ldr	r3, [pc, #472]	; (8002774 <moveWall+0x1f8>)
 800259c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800259e:	b29a      	uxth	r2, r3
 80025a0:	4b74      	ldr	r3, [pc, #464]	; (8002774 <moveWall+0x1f8>)
 80025a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80025aa:	9400      	str	r4, [sp, #0]
 80025ac:	f7fe fccc 	bl	8000f48 <lcd_Fill>
		obstacles[7].x1-=2;
 80025b0:	4b70      	ldr	r3, [pc, #448]	; (8002774 <moveWall+0x1f8>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	3b02      	subs	r3, #2
 80025b6:	4a6f      	ldr	r2, [pc, #444]	; (8002774 <moveWall+0x1f8>)
 80025b8:	6713      	str	r3, [r2, #112]	; 0x70
		obstacles[7].x2-=2;
 80025ba:	4b6e      	ldr	r3, [pc, #440]	; (8002774 <moveWall+0x1f8>)
 80025bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025be:	3b02      	subs	r3, #2
 80025c0:	4a6c      	ldr	r2, [pc, #432]	; (8002774 <moveWall+0x1f8>)
 80025c2:	6793      	str	r3, [r2, #120]	; 0x78
		lcd_Fill(obstacles[7].x1, obstacles[7].y1, obstacles[7].x1+2, obstacles[7].y2, MAGENTA);
 80025c4:	4b6b      	ldr	r3, [pc, #428]	; (8002774 <moveWall+0x1f8>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	b298      	uxth	r0, r3
 80025ca:	4b6a      	ldr	r3, [pc, #424]	; (8002774 <moveWall+0x1f8>)
 80025cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ce:	b299      	uxth	r1, r3
 80025d0:	4b68      	ldr	r3, [pc, #416]	; (8002774 <moveWall+0x1f8>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3302      	adds	r3, #2
 80025d8:	b29a      	uxth	r2, r3
 80025da:	4b66      	ldr	r3, [pc, #408]	; (8002774 <moveWall+0x1f8>)
 80025dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025de:	b29b      	uxth	r3, r3
 80025e0:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80025e4:	9400      	str	r4, [sp, #0]
 80025e6:	f7fe fcaf 	bl	8000f48 <lcd_Fill>

		snakeSelfBite(obstacles[7].x1,obstacles[7].y1,obstacles[7].x1+10,obstacles[7].y2, 1);
 80025ea:	4b62      	ldr	r3, [pc, #392]	; (8002774 <moveWall+0x1f8>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	b218      	sxth	r0, r3
 80025f0:	4b60      	ldr	r3, [pc, #384]	; (8002774 <moveWall+0x1f8>)
 80025f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f4:	b219      	sxth	r1, r3
 80025f6:	4b5f      	ldr	r3, [pc, #380]	; (8002774 <moveWall+0x1f8>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	330a      	adds	r3, #10
 80025fe:	b29b      	uxth	r3, r3
 8002600:	b21a      	sxth	r2, r3
 8002602:	4b5c      	ldr	r3, [pc, #368]	; (8002774 <moveWall+0x1f8>)
 8002604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002606:	b21b      	sxth	r3, r3
 8002608:	2401      	movs	r4, #1
 800260a:	9400      	str	r4, [sp, #0]
 800260c:	f7ff ff74 	bl	80024f8 <snakeSelfBite>
		if (obstacles[7].x1 <= 10) flag1 = 1;
 8002610:	4b58      	ldr	r3, [pc, #352]	; (8002774 <moveWall+0x1f8>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	2b0a      	cmp	r3, #10
 8002616:	dc4d      	bgt.n	80026b4 <moveWall+0x138>
 8002618:	4b55      	ldr	r3, [pc, #340]	; (8002770 <moveWall+0x1f4>)
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	e049      	b.n	80026b4 <moveWall+0x138>
	} else {
		lcd_Fill(obstacles[7].x1, obstacles[7].y1, obstacles[7].x1+2, obstacles[7].y2, WHITE);
 8002620:	4b54      	ldr	r3, [pc, #336]	; (8002774 <moveWall+0x1f8>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	b298      	uxth	r0, r3
 8002626:	4b53      	ldr	r3, [pc, #332]	; (8002774 <moveWall+0x1f8>)
 8002628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262a:	b299      	uxth	r1, r3
 800262c:	4b51      	ldr	r3, [pc, #324]	; (8002774 <moveWall+0x1f8>)
 800262e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002630:	b29b      	uxth	r3, r3
 8002632:	3302      	adds	r3, #2
 8002634:	b29a      	uxth	r2, r3
 8002636:	4b4f      	ldr	r3, [pc, #316]	; (8002774 <moveWall+0x1f8>)
 8002638:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800263a:	b29b      	uxth	r3, r3
 800263c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002640:	9400      	str	r4, [sp, #0]
 8002642:	f7fe fc81 	bl	8000f48 <lcd_Fill>
		obstacles[7].x1+=2;
 8002646:	4b4b      	ldr	r3, [pc, #300]	; (8002774 <moveWall+0x1f8>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	3302      	adds	r3, #2
 800264c:	4a49      	ldr	r2, [pc, #292]	; (8002774 <moveWall+0x1f8>)
 800264e:	6713      	str	r3, [r2, #112]	; 0x70
		obstacles[7].x2+=2;
 8002650:	4b48      	ldr	r3, [pc, #288]	; (8002774 <moveWall+0x1f8>)
 8002652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002654:	3302      	adds	r3, #2
 8002656:	4a47      	ldr	r2, [pc, #284]	; (8002774 <moveWall+0x1f8>)
 8002658:	6793      	str	r3, [r2, #120]	; 0x78
		lcd_Fill(obstacles[7].x2-2, obstacles[7].y1, obstacles[7].x2, obstacles[7].y2, MAGENTA);
 800265a:	4b46      	ldr	r3, [pc, #280]	; (8002774 <moveWall+0x1f8>)
 800265c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b02      	subs	r3, #2
 8002662:	b298      	uxth	r0, r3
 8002664:	4b43      	ldr	r3, [pc, #268]	; (8002774 <moveWall+0x1f8>)
 8002666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002668:	b299      	uxth	r1, r3
 800266a:	4b42      	ldr	r3, [pc, #264]	; (8002774 <moveWall+0x1f8>)
 800266c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b40      	ldr	r3, [pc, #256]	; (8002774 <moveWall+0x1f8>)
 8002672:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002674:	b29b      	uxth	r3, r3
 8002676:	f64f 041f 	movw	r4, #63519	; 0xf81f
 800267a:	9400      	str	r4, [sp, #0]
 800267c:	f7fe fc64 	bl	8000f48 <lcd_Fill>
		snakeSelfBite(obstacles[7].x2-10,obstacles[7].y1,obstacles[7].x2,obstacles[7].y2, 1);
 8002680:	4b3c      	ldr	r3, [pc, #240]	; (8002774 <moveWall+0x1f8>)
 8002682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b0a      	subs	r3, #10
 8002688:	b29b      	uxth	r3, r3
 800268a:	b218      	sxth	r0, r3
 800268c:	4b39      	ldr	r3, [pc, #228]	; (8002774 <moveWall+0x1f8>)
 800268e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002690:	b219      	sxth	r1, r3
 8002692:	4b38      	ldr	r3, [pc, #224]	; (8002774 <moveWall+0x1f8>)
 8002694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002696:	b21a      	sxth	r2, r3
 8002698:	4b36      	ldr	r3, [pc, #216]	; (8002774 <moveWall+0x1f8>)
 800269a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800269c:	b21b      	sxth	r3, r3
 800269e:	2401      	movs	r4, #1
 80026a0:	9400      	str	r4, [sp, #0]
 80026a2:	f7ff ff29 	bl	80024f8 <snakeSelfBite>
		if (obstacles[7].x2 >= 230) flag1 = 0;
 80026a6:	4b33      	ldr	r3, [pc, #204]	; (8002774 <moveWall+0x1f8>)
 80026a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026aa:	2be5      	cmp	r3, #229	; 0xe5
 80026ac:	dd02      	ble.n	80026b4 <moveWall+0x138>
 80026ae:	4b30      	ldr	r3, [pc, #192]	; (8002770 <moveWall+0x1f4>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
	}

	if (flag2 == 0) {
 80026b4:	4b30      	ldr	r3, [pc, #192]	; (8002778 <moveWall+0x1fc>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d15f      	bne.n	800277c <moveWall+0x200>
		lcd_Fill(obstacles[8].x1, obstacles[8].y2-2, obstacles[8].x2, obstacles[8].y2, WHITE);
 80026bc:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <moveWall+0x1f8>)
 80026be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026c2:	b298      	uxth	r0, r3
 80026c4:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <moveWall+0x1f8>)
 80026c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b02      	subs	r3, #2
 80026ce:	b299      	uxth	r1, r3
 80026d0:	4b28      	ldr	r3, [pc, #160]	; (8002774 <moveWall+0x1f8>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	4b26      	ldr	r3, [pc, #152]	; (8002774 <moveWall+0x1f8>)
 80026da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026de:	b29b      	uxth	r3, r3
 80026e0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80026e4:	9400      	str	r4, [sp, #0]
 80026e6:	f7fe fc2f 	bl	8000f48 <lcd_Fill>
		obstacles[8].y1-=2;
 80026ea:	4b22      	ldr	r3, [pc, #136]	; (8002774 <moveWall+0x1f8>)
 80026ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f0:	3b02      	subs	r3, #2
 80026f2:	4a20      	ldr	r2, [pc, #128]	; (8002774 <moveWall+0x1f8>)
 80026f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		obstacles[8].y2-=2;
 80026f8:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <moveWall+0x1f8>)
 80026fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026fe:	3b02      	subs	r3, #2
 8002700:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <moveWall+0x1f8>)
 8002702:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		lcd_Fill(obstacles[8].x1, obstacles[8].y1, obstacles[8].x2, obstacles[8].y1+2, MAGENTA);
 8002706:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <moveWall+0x1f8>)
 8002708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800270c:	b298      	uxth	r0, r3
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <moveWall+0x1f8>)
 8002710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002714:	b299      	uxth	r1, r3
 8002716:	4b17      	ldr	r3, [pc, #92]	; (8002774 <moveWall+0x1f8>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271c:	b29a      	uxth	r2, r3
 800271e:	4b15      	ldr	r3, [pc, #84]	; (8002774 <moveWall+0x1f8>)
 8002720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002724:	b29b      	uxth	r3, r3
 8002726:	3302      	adds	r3, #2
 8002728:	b29b      	uxth	r3, r3
 800272a:	f64f 041f 	movw	r4, #63519	; 0xf81f
 800272e:	9400      	str	r4, [sp, #0]
 8002730:	f7fe fc0a 	bl	8000f48 <lcd_Fill>
		snakeSelfBite(obstacles[7].x1,obstacles[7].y1,obstacles[7].x2,obstacles[7].y1+10, 1);
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <moveWall+0x1f8>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	b218      	sxth	r0, r3
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <moveWall+0x1f8>)
 800273c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273e:	b219      	sxth	r1, r3
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <moveWall+0x1f8>)
 8002742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002744:	b21a      	sxth	r2, r3
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <moveWall+0x1f8>)
 8002748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800274a:	b29b      	uxth	r3, r3
 800274c:	330a      	adds	r3, #10
 800274e:	b29b      	uxth	r3, r3
 8002750:	b21b      	sxth	r3, r3
 8002752:	2401      	movs	r4, #1
 8002754:	9400      	str	r4, [sp, #0]
 8002756:	f7ff fecf 	bl	80024f8 <snakeSelfBite>
		if (obstacles[8].y1 <= y_min) flag2 = 1;
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <moveWall+0x1f8>)
 800275c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002760:	2264      	movs	r2, #100	; 0x64
 8002762:	4293      	cmp	r3, r2
 8002764:	dc62      	bgt.n	800282c <moveWall+0x2b0>
 8002766:	4b04      	ldr	r3, [pc, #16]	; (8002778 <moveWall+0x1fc>)
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
		lcd_Fill(obstacles[8].x1, obstacles[8].y2-2, obstacles[8].x2, obstacles[8].y2, MAGENTA);
		snakeSelfBite(obstacles[7].x1,obstacles[7].y2-10,obstacles[7].x2,obstacles[7].y2, 1);
		if (obstacles[8].y2 >= 310) flag2 = 0;
	}

}
 800276c:	e05e      	b.n	800282c <moveWall+0x2b0>
 800276e:	bf00      	nop
 8002770:	2000059d 	.word	0x2000059d
 8002774:	20000024 	.word	0x20000024
 8002778:	2000059e 	.word	0x2000059e
		lcd_Fill(obstacles[8].x1, obstacles[8].y1, obstacles[8].x2, obstacles[8].y1+2, WHITE);
 800277c:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <moveWall+0x2b8>)
 800277e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002782:	b298      	uxth	r0, r3
 8002784:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <moveWall+0x2b8>)
 8002786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800278a:	b299      	uxth	r1, r3
 800278c:	4b29      	ldr	r3, [pc, #164]	; (8002834 <moveWall+0x2b8>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	b29a      	uxth	r2, r3
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <moveWall+0x2b8>)
 8002796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800279a:	b29b      	uxth	r3, r3
 800279c:	3302      	adds	r3, #2
 800279e:	b29b      	uxth	r3, r3
 80027a0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80027a4:	9400      	str	r4, [sp, #0]
 80027a6:	f7fe fbcf 	bl	8000f48 <lcd_Fill>
		obstacles[8].y1+=2;
 80027aa:	4b22      	ldr	r3, [pc, #136]	; (8002834 <moveWall+0x2b8>)
 80027ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b0:	3302      	adds	r3, #2
 80027b2:	4a20      	ldr	r2, [pc, #128]	; (8002834 <moveWall+0x2b8>)
 80027b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		obstacles[8].y2+=2;
 80027b8:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <moveWall+0x2b8>)
 80027ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027be:	3302      	adds	r3, #2
 80027c0:	4a1c      	ldr	r2, [pc, #112]	; (8002834 <moveWall+0x2b8>)
 80027c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		lcd_Fill(obstacles[8].x1, obstacles[8].y2-2, obstacles[8].x2, obstacles[8].y2, MAGENTA);
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <moveWall+0x2b8>)
 80027c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027cc:	b298      	uxth	r0, r3
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <moveWall+0x2b8>)
 80027d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b02      	subs	r3, #2
 80027d8:	b299      	uxth	r1, r3
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <moveWall+0x2b8>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	4b14      	ldr	r3, [pc, #80]	; (8002834 <moveWall+0x2b8>)
 80027e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80027ee:	9400      	str	r4, [sp, #0]
 80027f0:	f7fe fbaa 	bl	8000f48 <lcd_Fill>
		snakeSelfBite(obstacles[7].x1,obstacles[7].y2-10,obstacles[7].x2,obstacles[7].y2, 1);
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <moveWall+0x2b8>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	b218      	sxth	r0, r3
 80027fa:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <moveWall+0x2b8>)
 80027fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027fe:	b29b      	uxth	r3, r3
 8002800:	3b0a      	subs	r3, #10
 8002802:	b29b      	uxth	r3, r3
 8002804:	b219      	sxth	r1, r3
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <moveWall+0x2b8>)
 8002808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800280a:	b21a      	sxth	r2, r3
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <moveWall+0x2b8>)
 800280e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002810:	b21b      	sxth	r3, r3
 8002812:	2401      	movs	r4, #1
 8002814:	9400      	str	r4, [sp, #0]
 8002816:	f7ff fe6f 	bl	80024f8 <snakeSelfBite>
		if (obstacles[8].y2 >= 310) flag2 = 0;
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <moveWall+0x2b8>)
 800281c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002820:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8002824:	db02      	blt.n	800282c <moveWall+0x2b0>
 8002826:	4b04      	ldr	r3, [pc, #16]	; (8002838 <moveWall+0x2bc>)
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
}
 800282c:	bf00      	nop
 800282e:	3704      	adds	r7, #4
 8002830:	46bd      	mov	sp, r7
 8002832:	bd90      	pop	{r4, r7, pc}
 8002834:	20000024 	.word	0x20000024
 8002838:	2000059e 	.word	0x2000059e

0800283c <checkCollision>:

uint8_t checkCollision() {
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
	if(level == 0)
 8002842:	4b58      	ldr	r3, [pc, #352]	; (80029a4 <checkCollision+0x168>)
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <checkCollision+0x12>
		return 0;
 800284a:	2300      	movs	r3, #0
 800284c:	e0a3      	b.n	8002996 <checkCollision+0x15a>
	for (int8_t i = 0; i < 9; ++i) {
 800284e:	2300      	movs	r3, #0
 8002850:	71fb      	strb	r3, [r7, #7]
 8002852:	e09a      	b.n	800298a <checkCollision+0x14e>
		if (x1 >= obstacles[i].x1 && x1 <= obstacles[i].x2) {
 8002854:	4b54      	ldr	r3, [pc, #336]	; (80029a8 <checkCollision+0x16c>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	4a53      	ldr	r2, [pc, #332]	; (80029ac <checkCollision+0x170>)
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	4413      	add	r3, r2
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4299      	cmp	r1, r3
 8002868:	db3f      	blt.n	80028ea <checkCollision+0xae>
 800286a:	4b4f      	ldr	r3, [pc, #316]	; (80029a8 <checkCollision+0x16c>)
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	4619      	mov	r1, r3
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	4a4d      	ldr	r2, [pc, #308]	; (80029ac <checkCollision+0x170>)
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	4413      	add	r3, r2
 800287a:	3308      	adds	r3, #8
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4299      	cmp	r1, r3
 8002880:	dc33      	bgt.n	80028ea <checkCollision+0xae>
			if (y1 >= obstacles[i].y1 && y1 <= obstacles[i].y2) {
 8002882:	4b4b      	ldr	r3, [pc, #300]	; (80029b0 <checkCollision+0x174>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	4619      	mov	r1, r3
 8002888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288c:	4a47      	ldr	r2, [pc, #284]	; (80029ac <checkCollision+0x170>)
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	4413      	add	r3, r2
 8002892:	3304      	adds	r3, #4
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4299      	cmp	r1, r3
 8002898:	db0d      	blt.n	80028b6 <checkCollision+0x7a>
 800289a:	4b45      	ldr	r3, [pc, #276]	; (80029b0 <checkCollision+0x174>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	4619      	mov	r1, r3
 80028a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a4:	4a41      	ldr	r2, [pc, #260]	; (80029ac <checkCollision+0x170>)
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	4413      	add	r3, r2
 80028aa:	330c      	adds	r3, #12
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4299      	cmp	r1, r3
 80028b0:	dc01      	bgt.n	80028b6 <checkCollision+0x7a>

				return 1;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e06f      	b.n	8002996 <checkCollision+0x15a>
			} else if (y2 >= obstacles[i].y1 && y2 <= obstacles[i].y2) {
 80028b6:	4b3f      	ldr	r3, [pc, #252]	; (80029b4 <checkCollision+0x178>)
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	4a3a      	ldr	r2, [pc, #232]	; (80029ac <checkCollision+0x170>)
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	4413      	add	r3, r2
 80028c6:	3304      	adds	r3, #4
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4299      	cmp	r1, r3
 80028cc:	db58      	blt.n	8002980 <checkCollision+0x144>
 80028ce:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <checkCollision+0x178>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	4619      	mov	r1, r3
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	4a34      	ldr	r2, [pc, #208]	; (80029ac <checkCollision+0x170>)
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	4413      	add	r3, r2
 80028de:	330c      	adds	r3, #12
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4299      	cmp	r1, r3
 80028e4:	dc4c      	bgt.n	8002980 <checkCollision+0x144>

				return 1;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e055      	b.n	8002996 <checkCollision+0x15a>
			}
		} else if (x2 >= obstacles[i].x1 && x2 <= obstacles[i].x2) {
 80028ea:	4b33      	ldr	r3, [pc, #204]	; (80029b8 <checkCollision+0x17c>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	4619      	mov	r1, r3
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	4a2d      	ldr	r2, [pc, #180]	; (80029ac <checkCollision+0x170>)
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	4413      	add	r3, r2
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4299      	cmp	r1, r3
 80028fe:	db40      	blt.n	8002982 <checkCollision+0x146>
 8002900:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <checkCollision+0x17c>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	4a28      	ldr	r2, [pc, #160]	; (80029ac <checkCollision+0x170>)
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	4413      	add	r3, r2
 8002910:	3308      	adds	r3, #8
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4299      	cmp	r1, r3
 8002916:	dc34      	bgt.n	8002982 <checkCollision+0x146>
			if (y1 >= obstacles[i].y1 && y1 <= obstacles[i].y2) {
 8002918:	4b25      	ldr	r3, [pc, #148]	; (80029b0 <checkCollision+0x174>)
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	4619      	mov	r1, r3
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	4a22      	ldr	r2, [pc, #136]	; (80029ac <checkCollision+0x170>)
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	4413      	add	r3, r2
 8002928:	3304      	adds	r3, #4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4299      	cmp	r1, r3
 800292e:	db0d      	blt.n	800294c <checkCollision+0x110>
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <checkCollision+0x174>)
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	4619      	mov	r1, r3
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <checkCollision+0x170>)
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	4413      	add	r3, r2
 8002940:	330c      	adds	r3, #12
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4299      	cmp	r1, r3
 8002946:	dc01      	bgt.n	800294c <checkCollision+0x110>

				return 1;
 8002948:	2301      	movs	r3, #1
 800294a:	e024      	b.n	8002996 <checkCollision+0x15a>
			} else if (y2 >= obstacles[i].y1 && y2 <= obstacles[i].y2) {
 800294c:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <checkCollision+0x178>)
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	4619      	mov	r1, r3
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	4a15      	ldr	r2, [pc, #84]	; (80029ac <checkCollision+0x170>)
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	4413      	add	r3, r2
 800295c:	3304      	adds	r3, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4299      	cmp	r1, r3
 8002962:	db0e      	blt.n	8002982 <checkCollision+0x146>
 8002964:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <checkCollision+0x178>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <checkCollision+0x170>)
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	4413      	add	r3, r2
 8002974:	330c      	adds	r3, #12
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4299      	cmp	r1, r3
 800297a:	dc02      	bgt.n	8002982 <checkCollision+0x146>

				return 1;
 800297c:	2301      	movs	r3, #1
 800297e:	e00a      	b.n	8002996 <checkCollision+0x15a>
			if (y1 >= obstacles[i].y1 && y1 <= obstacles[i].y2) {
 8002980:	bf00      	nop
	for (int8_t i = 0; i < 9; ++i) {
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	3301      	adds	r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	71fb      	strb	r3, [r7, #7]
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b08      	cmp	r3, #8
 8002990:	f77f af60 	ble.w	8002854 <checkCollision+0x18>
			}
		}
	}
	return 0;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	200002c6 	.word	0x200002c6
 80029a8:	20000012 	.word	0x20000012
 80029ac:	20000024 	.word	0x20000024
 80029b0:	20000014 	.word	0x20000014
 80029b4:	20000018 	.word	0x20000018
 80029b8:	20000016 	.word	0x20000016

080029bc <delete_path>:
void delete_path() {
 80029bc:	b5b0      	push	{r4, r5, r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af02      	add	r7, sp, #8
    // Assuming lcd_Fill is a function to clear the specified area on the LCD with white color
    	if (allPath[0].isTail == 0) {
 80029c2:	4b81      	ldr	r3, [pc, #516]	; (8002bc8 <delete_path+0x20c>)
 80029c4:	785b      	ldrb	r3, [r3, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 808d 	bne.w	8002ae6 <delete_path+0x12a>
    		//if (allPath[0].currentState == goRight) lcd_Fill(x1,0, x2, y2, RED);
    		if (allPath[0].length >= snakeTailLen) {
 80029cc:	4b7e      	ldr	r3, [pc, #504]	; (8002bc8 <delete_path+0x20c>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	4a7e      	ldr	r2, [pc, #504]	; (8002bcc <delete_path+0x210>)
 80029d2:	8812      	ldrh	r2, [r2, #0]
 80029d4:	4293      	cmp	r3, r2
 80029d6:	f2c0 815a 	blt.w	8002c8e <delete_path+0x2d2>
    			if (allPath[0].currentState == goUp) {
 80029da:	4b7b      	ldr	r3, [pc, #492]	; (8002bc8 <delete_path+0x20c>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11c      	bne.n	8002a1c <delete_path+0x60>
					lcd_Fill(allPath[0].x1, allPath[0].y2-speed, allPath[0].x2, allPath[0].y2, WHITE);
 80029e2:	4b79      	ldr	r3, [pc, #484]	; (8002bc8 <delete_path+0x20c>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	b298      	uxth	r0, r3
 80029e8:	4b77      	ldr	r3, [pc, #476]	; (8002bc8 <delete_path+0x20c>)
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	4b78      	ldr	r3, [pc, #480]	; (8002bd0 <delete_path+0x214>)
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	b299      	uxth	r1, r3
 80029f6:	4b74      	ldr	r3, [pc, #464]	; (8002bc8 <delete_path+0x20c>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	4b72      	ldr	r3, [pc, #456]	; (8002bc8 <delete_path+0x20c>)
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002a06:	9400      	str	r4, [sp, #0]
 8002a08:	f7fe fa9e 	bl	8000f48 <lcd_Fill>
					allPath[0].y2 -= speed;
 8002a0c:	4b6e      	ldr	r3, [pc, #440]	; (8002bc8 <delete_path+0x20c>)
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	4a6f      	ldr	r2, [pc, #444]	; (8002bd0 <delete_path+0x214>)
 8002a12:	8812      	ldrh	r2, [r2, #0]
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	4a6c      	ldr	r2, [pc, #432]	; (8002bc8 <delete_path+0x20c>)
 8002a18:	6153      	str	r3, [r2, #20]



    	}

}
 8002a1a:	e138      	b.n	8002c8e <delete_path+0x2d2>
				} else if (allPath[0].currentState == goDown) {
 8002a1c:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <delete_path+0x20c>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d11d      	bne.n	8002a60 <delete_path+0xa4>
					lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x2, allPath[0].y1 + speed, WHITE);
 8002a24:	4b68      	ldr	r3, [pc, #416]	; (8002bc8 <delete_path+0x20c>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	b298      	uxth	r0, r3
 8002a2a:	4b67      	ldr	r3, [pc, #412]	; (8002bc8 <delete_path+0x20c>)
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	b299      	uxth	r1, r3
 8002a30:	4b65      	ldr	r3, [pc, #404]	; (8002bc8 <delete_path+0x20c>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	b29c      	uxth	r4, r3
 8002a36:	4b64      	ldr	r3, [pc, #400]	; (8002bc8 <delete_path+0x20c>)
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	4b64      	ldr	r3, [pc, #400]	; (8002bd0 <delete_path+0x214>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	4413      	add	r3, r2
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a48:	9200      	str	r2, [sp, #0]
 8002a4a:	4622      	mov	r2, r4
 8002a4c:	f7fe fa7c 	bl	8000f48 <lcd_Fill>
					allPath[0].y1 += speed;
 8002a50:	4b5d      	ldr	r3, [pc, #372]	; (8002bc8 <delete_path+0x20c>)
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	4a5e      	ldr	r2, [pc, #376]	; (8002bd0 <delete_path+0x214>)
 8002a56:	8812      	ldrh	r2, [r2, #0]
 8002a58:	4413      	add	r3, r2
 8002a5a:	4a5b      	ldr	r2, [pc, #364]	; (8002bc8 <delete_path+0x20c>)
 8002a5c:	6113      	str	r3, [r2, #16]
}
 8002a5e:	e116      	b.n	8002c8e <delete_path+0x2d2>
				} else if (allPath[0].currentState == goLeft) {
 8002a60:	4b59      	ldr	r3, [pc, #356]	; (8002bc8 <delete_path+0x20c>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d11c      	bne.n	8002aa2 <delete_path+0xe6>
					lcd_Fill(allPath[0].x2-speed, allPath[0].y1, allPath[0].x2, allPath[0].y2, WHITE);
 8002a68:	4b57      	ldr	r3, [pc, #348]	; (8002bc8 <delete_path+0x20c>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	4b58      	ldr	r3, [pc, #352]	; (8002bd0 <delete_path+0x214>)
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	b298      	uxth	r0, r3
 8002a76:	4b54      	ldr	r3, [pc, #336]	; (8002bc8 <delete_path+0x20c>)
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	b299      	uxth	r1, r3
 8002a7c:	4b52      	ldr	r3, [pc, #328]	; (8002bc8 <delete_path+0x20c>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	4b51      	ldr	r3, [pc, #324]	; (8002bc8 <delete_path+0x20c>)
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002a8c:	9400      	str	r4, [sp, #0]
 8002a8e:	f7fe fa5b 	bl	8000f48 <lcd_Fill>
					allPath[0].x2 -= speed;
 8002a92:	4b4d      	ldr	r3, [pc, #308]	; (8002bc8 <delete_path+0x20c>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4a4e      	ldr	r2, [pc, #312]	; (8002bd0 <delete_path+0x214>)
 8002a98:	8812      	ldrh	r2, [r2, #0]
 8002a9a:	1a9b      	subs	r3, r3, r2
 8002a9c:	4a4a      	ldr	r2, [pc, #296]	; (8002bc8 <delete_path+0x20c>)
 8002a9e:	60d3      	str	r3, [r2, #12]
}
 8002aa0:	e0f5      	b.n	8002c8e <delete_path+0x2d2>
				} else if (allPath[0].currentState == goRight) {
 8002aa2:	4b49      	ldr	r3, [pc, #292]	; (8002bc8 <delete_path+0x20c>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	f040 80f1 	bne.w	8002c8e <delete_path+0x2d2>
					lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x1+speed, allPath[0].y2, WHITE);
 8002aac:	4b46      	ldr	r3, [pc, #280]	; (8002bc8 <delete_path+0x20c>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	b298      	uxth	r0, r3
 8002ab2:	4b45      	ldr	r3, [pc, #276]	; (8002bc8 <delete_path+0x20c>)
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	b299      	uxth	r1, r3
 8002ab8:	4b43      	ldr	r3, [pc, #268]	; (8002bc8 <delete_path+0x20c>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	4b44      	ldr	r3, [pc, #272]	; (8002bd0 <delete_path+0x214>)
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	4b40      	ldr	r3, [pc, #256]	; (8002bc8 <delete_path+0x20c>)
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002ad0:	9400      	str	r4, [sp, #0]
 8002ad2:	f7fe fa39 	bl	8000f48 <lcd_Fill>
					allPath[0].x1 += speed;
 8002ad6:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <delete_path+0x20c>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4a3d      	ldr	r2, [pc, #244]	; (8002bd0 <delete_path+0x214>)
 8002adc:	8812      	ldrh	r2, [r2, #0]
 8002ade:	4413      	add	r3, r2
 8002ae0:	4a39      	ldr	r2, [pc, #228]	; (8002bc8 <delete_path+0x20c>)
 8002ae2:	6093      	str	r3, [r2, #8]
}
 8002ae4:	e0d3      	b.n	8002c8e <delete_path+0x2d2>
    	} else if (allPath[0].isTail == 1) {
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <delete_path+0x20c>)
 8002ae8:	785b      	ldrb	r3, [r3, #1]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	f040 80cf 	bne.w	8002c8e <delete_path+0x2d2>
    		allPath[0].length -= speed;
 8002af0:	4b35      	ldr	r3, [pc, #212]	; (8002bc8 <delete_path+0x20c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4a36      	ldr	r2, [pc, #216]	; (8002bd0 <delete_path+0x214>)
 8002af6:	8812      	ldrh	r2, [r2, #0]
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	4a33      	ldr	r2, [pc, #204]	; (8002bc8 <delete_path+0x20c>)
 8002afc:	6053      	str	r3, [r2, #4]
    		if (allPath[0].currentState == goUp) {
 8002afe:	4b32      	ldr	r3, [pc, #200]	; (8002bc8 <delete_path+0x20c>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d11c      	bne.n	8002b40 <delete_path+0x184>
				lcd_Fill(allPath[0].x1, allPath[0].y2-speed, allPath[0].x2, allPath[0].y2, WHITE);
 8002b06:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <delete_path+0x20c>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	b298      	uxth	r0, r3
 8002b0c:	4b2e      	ldr	r3, [pc, #184]	; (8002bc8 <delete_path+0x20c>)
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	4b2f      	ldr	r3, [pc, #188]	; (8002bd0 <delete_path+0x214>)
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	b299      	uxth	r1, r3
 8002b1a:	4b2b      	ldr	r3, [pc, #172]	; (8002bc8 <delete_path+0x20c>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	4b29      	ldr	r3, [pc, #164]	; (8002bc8 <delete_path+0x20c>)
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002b2a:	9400      	str	r4, [sp, #0]
 8002b2c:	f7fe fa0c 	bl	8000f48 <lcd_Fill>
				allPath[0].y2 -= speed;
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <delete_path+0x20c>)
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	4a26      	ldr	r2, [pc, #152]	; (8002bd0 <delete_path+0x214>)
 8002b36:	8812      	ldrh	r2, [r2, #0]
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	4a23      	ldr	r2, [pc, #140]	; (8002bc8 <delete_path+0x20c>)
 8002b3c:	6153      	str	r3, [r2, #20]
 8002b3e:	e069      	b.n	8002c14 <delete_path+0x258>
			} else if (allPath[0].currentState == goDown) {
 8002b40:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <delete_path+0x20c>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d11d      	bne.n	8002b84 <delete_path+0x1c8>
				lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x2, allPath[0].y1 + speed, WHITE);
 8002b48:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <delete_path+0x20c>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	b298      	uxth	r0, r3
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <delete_path+0x20c>)
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	b299      	uxth	r1, r3
 8002b54:	4b1c      	ldr	r3, [pc, #112]	; (8002bc8 <delete_path+0x20c>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	b29c      	uxth	r4, r3
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <delete_path+0x20c>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <delete_path+0x214>)
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	4413      	add	r3, r2
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b6c:	9200      	str	r2, [sp, #0]
 8002b6e:	4622      	mov	r2, r4
 8002b70:	f7fe f9ea 	bl	8000f48 <lcd_Fill>
				allPath[0].y1 += speed;
 8002b74:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <delete_path+0x20c>)
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	4a15      	ldr	r2, [pc, #84]	; (8002bd0 <delete_path+0x214>)
 8002b7a:	8812      	ldrh	r2, [r2, #0]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <delete_path+0x20c>)
 8002b80:	6113      	str	r3, [r2, #16]
 8002b82:	e047      	b.n	8002c14 <delete_path+0x258>
			} else if (allPath[0].currentState == goLeft) {
 8002b84:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <delete_path+0x20c>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d123      	bne.n	8002bd4 <delete_path+0x218>
				lcd_Fill(allPath[0].x2-speed, allPath[0].y1, allPath[0].x2, allPath[0].y2, WHITE);
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <delete_path+0x20c>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <delete_path+0x214>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	b298      	uxth	r0, r3
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <delete_path+0x20c>)
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	b299      	uxth	r1, r3
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <delete_path+0x20c>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <delete_path+0x20c>)
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002bb0:	9400      	str	r4, [sp, #0]
 8002bb2:	f7fe f9c9 	bl	8000f48 <lcd_Fill>
				allPath[0].x2 -= speed;
 8002bb6:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <delete_path+0x20c>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	4a05      	ldr	r2, [pc, #20]	; (8002bd0 <delete_path+0x214>)
 8002bbc:	8812      	ldrh	r2, [r2, #0]
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	4a01      	ldr	r2, [pc, #4]	; (8002bc8 <delete_path+0x20c>)
 8002bc2:	60d3      	str	r3, [r2, #12]
 8002bc4:	e026      	b.n	8002c14 <delete_path+0x258>
 8002bc6:	bf00      	nop
 8002bc8:	200002cc 	.word	0x200002cc
 8002bcc:	2000001e 	.word	0x2000001e
 8002bd0:	20000020 	.word	0x20000020
			} else if (allPath[0].currentState == goRight) {
 8002bd4:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <delete_path+0x2dc>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d11b      	bne.n	8002c14 <delete_path+0x258>
				lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x1+speed, allPath[0].y2, WHITE);
 8002bdc:	4b2e      	ldr	r3, [pc, #184]	; (8002c98 <delete_path+0x2dc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	b298      	uxth	r0, r3
 8002be2:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <delete_path+0x2dc>)
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	b299      	uxth	r1, r3
 8002be8:	4b2b      	ldr	r3, [pc, #172]	; (8002c98 <delete_path+0x2dc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <delete_path+0x2e0>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <delete_path+0x2dc>)
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002c00:	9400      	str	r4, [sp, #0]
 8002c02:	f7fe f9a1 	bl	8000f48 <lcd_Fill>
				allPath[0].x1 += speed;
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <delete_path+0x2dc>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	4a24      	ldr	r2, [pc, #144]	; (8002c9c <delete_path+0x2e0>)
 8002c0c:	8812      	ldrh	r2, [r2, #0]
 8002c0e:	4413      	add	r3, r2
 8002c10:	4a21      	ldr	r2, [pc, #132]	; (8002c98 <delete_path+0x2dc>)
 8002c12:	6093      	str	r3, [r2, #8]
    		if (flag == 0) {
 8002c14:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <delete_path+0x2e4>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d138      	bne.n	8002c8e <delete_path+0x2d2>
				if (allPath[0].length == 0 || allPath[0].length < 0) {
 8002c1c:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <delete_path+0x2dc>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <delete_path+0x270>
 8002c24:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <delete_path+0x2dc>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	da30      	bge.n	8002c8e <delete_path+0x2d2>
						flag = 1;
 8002c2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <delete_path+0x2e4>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
						delete_path();
 8002c32:	f7ff fec3 	bl	80029bc <delete_path>
						flag = 0;
 8002c36:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <delete_path+0x2e4>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
					for (uint8_t i = 0; i < currentIndex - 1; i++) {
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	71fb      	strb	r3, [r7, #7]
 8002c40:	e019      	b.n	8002c76 <delete_path+0x2ba>
						allPath[i] = allPath[i + 1];
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	79f9      	ldrb	r1, [r7, #7]
 8002c48:	4813      	ldr	r0, [pc, #76]	; (8002c98 <delete_path+0x2dc>)
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	440b      	add	r3, r1
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4418      	add	r0, r3
 8002c54:	4910      	ldr	r1, [pc, #64]	; (8002c98 <delete_path+0x2dc>)
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	440b      	add	r3, r1
 8002c60:	4604      	mov	r4, r0
 8002c62:	461d      	mov	r5, r3
 8002c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c6c:	e884 0003 	stmia.w	r4, {r0, r1}
					for (uint8_t i = 0; i < currentIndex - 1; i++) {
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	3301      	adds	r3, #1
 8002c74:	71fb      	strb	r3, [r7, #7]
 8002c76:	79fa      	ldrb	r2, [r7, #7]
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <delete_path+0x2e8>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	dbdf      	blt.n	8002c42 <delete_path+0x286>
					currentIndex--;
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <delete_path+0x2e8>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <delete_path+0x2e8>)
 8002c8c:	701a      	strb	r2, [r3, #0]
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bdb0      	pop	{r4, r5, r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200002cc 	.word	0x200002cc
 8002c9c:	20000020 	.word	0x20000020
 8002ca0:	2000059c 	.word	0x2000059c
 8002ca4:	200002c8 	.word	0x200002c8

08002ca8 <right>:
void right() {
 8002ca8:	b590      	push	{r4, r7, lr}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af02      	add	r7, sp, #8

	if (prevState == goRight) {
 8002cae:	4b75      	ldr	r3, [pc, #468]	; (8002e84 <right+0x1dc>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d137      	bne.n	8002d26 <right+0x7e>
				if (allPath[currentIndex-1].length <= snakeTailLen) {
 8002cb6:	4b74      	ldr	r3, [pc, #464]	; (8002e88 <right+0x1e0>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	1e5a      	subs	r2, r3, #1
 8002cbc:	4973      	ldr	r1, [pc, #460]	; (8002e8c <right+0x1e4>)
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3304      	adds	r3, #4
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a70      	ldr	r2, [pc, #448]	; (8002e90 <right+0x1e8>)
 8002cce:	8812      	ldrh	r2, [r2, #0]
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	dc19      	bgt.n	8002d08 <right+0x60>
					allPath[currentIndex-1].length +=speed;
 8002cd4:	4b6c      	ldr	r3, [pc, #432]	; (8002e88 <right+0x1e0>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	1e5a      	subs	r2, r3, #1
 8002cda:	496c      	ldr	r1, [pc, #432]	; (8002e8c <right+0x1e4>)
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a6a      	ldr	r2, [pc, #424]	; (8002e94 <right+0x1ec>)
 8002cec:	8812      	ldrh	r2, [r2, #0]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4a65      	ldr	r2, [pc, #404]	; (8002e88 <right+0x1e0>)
 8002cf2:	7812      	ldrb	r2, [r2, #0]
 8002cf4:	3a01      	subs	r2, #1
 8002cf6:	4419      	add	r1, r3
 8002cf8:	4864      	ldr	r0, [pc, #400]	; (8002e8c <right+0x1e4>)
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4403      	add	r3, r0
 8002d04:	3304      	adds	r3, #4
 8002d06:	6019      	str	r1, [r3, #0]
				}
				allPath[currentIndex-1].x2 = x2;
 8002d08:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <right+0x1f0>)
 8002d0a:	8819      	ldrh	r1, [r3, #0]
 8002d0c:	4b5e      	ldr	r3, [pc, #376]	; (8002e88 <right+0x1e0>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	1e5a      	subs	r2, r3, #1
 8002d12:	4608      	mov	r0, r1
 8002d14:	495d      	ldr	r1, [pc, #372]	; (8002e8c <right+0x1e4>)
 8002d16:	4613      	mov	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	330c      	adds	r3, #12
 8002d22:	6018      	str	r0, [r3, #0]
 8002d24:	e089      	b.n	8002e3a <right+0x192>
			} else {
				if (currentIndex == 0) allPath[0].isTail = 0;
 8002d26:	4b58      	ldr	r3, [pc, #352]	; (8002e88 <right+0x1e0>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d103      	bne.n	8002d36 <right+0x8e>
 8002d2e:	4b57      	ldr	r3, [pc, #348]	; (8002e8c <right+0x1e4>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	705a      	strb	r2, [r3, #1]
 8002d34:	e00b      	b.n	8002d4e <right+0xa6>
				else allPath[currentIndex-1].isTail = 1;
 8002d36:	4b54      	ldr	r3, [pc, #336]	; (8002e88 <right+0x1e0>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	1e5a      	subs	r2, r3, #1
 8002d3c:	4953      	ldr	r1, [pc, #332]	; (8002e8c <right+0x1e4>)
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	440b      	add	r3, r1
 8002d48:	3301      	adds	r3, #1
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
				allPath[currentIndex].isTail = 0;
 8002d4e:	4b4e      	ldr	r3, [pc, #312]	; (8002e88 <right+0x1e0>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	4619      	mov	r1, r3
 8002d54:	4a4d      	ldr	r2, [pc, #308]	; (8002e8c <right+0x1e4>)
 8002d56:	460b      	mov	r3, r1
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	440b      	add	r3, r1
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3301      	adds	r3, #1
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
				if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 8002d66:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <right+0x1e8>)
 8002d68:	881a      	ldrh	r2, [r3, #0]
 8002d6a:	4b4c      	ldr	r3, [pc, #304]	; (8002e9c <right+0x1f4>)
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d10e      	bne.n	8002d90 <right+0xe8>
 8002d72:	4b47      	ldr	r3, [pc, #284]	; (8002e90 <right+0x1e8>)
 8002d74:	881a      	ldrh	r2, [r3, #0]
 8002d76:	4b44      	ldr	r3, [pc, #272]	; (8002e88 <right+0x1e0>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4a43      	ldr	r2, [pc, #268]	; (8002e8c <right+0x1e4>)
 8002d80:	460b      	mov	r3, r1
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	440b      	add	r3, r1
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	6018      	str	r0, [r3, #0]
 8002d8e:	e00b      	b.n	8002da8 <right+0x100>
				else allPath[currentIndex].length = 0;
 8002d90:	4b3d      	ldr	r3, [pc, #244]	; (8002e88 <right+0x1e0>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4619      	mov	r1, r3
 8002d96:	4a3d      	ldr	r2, [pc, #244]	; (8002e8c <right+0x1e4>)
 8002d98:	460b      	mov	r3, r1
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	440b      	add	r3, r1
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	3304      	adds	r3, #4
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
				allPath[currentIndex].currentState = goRight;
 8002da8:	4b37      	ldr	r3, [pc, #220]	; (8002e88 <right+0x1e0>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4619      	mov	r1, r3
 8002dae:	4a37      	ldr	r2, [pc, #220]	; (8002e8c <right+0x1e4>)
 8002db0:	460b      	mov	r3, r1
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	440b      	add	r3, r1
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4413      	add	r3, r2
 8002dba:	2203      	movs	r2, #3
 8002dbc:	701a      	strb	r2, [r3, #0]
				allPath[currentIndex].x1 = x1;
 8002dbe:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <right+0x1f8>)
 8002dc0:	881a      	ldrh	r2, [r3, #0]
 8002dc2:	4b31      	ldr	r3, [pc, #196]	; (8002e88 <right+0x1e0>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4a30      	ldr	r2, [pc, #192]	; (8002e8c <right+0x1e4>)
 8002dcc:	460b      	mov	r3, r1
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	440b      	add	r3, r1
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	6018      	str	r0, [r3, #0]
				allPath[currentIndex].x2 = x2;
 8002dda:	4b2f      	ldr	r3, [pc, #188]	; (8002e98 <right+0x1f0>)
 8002ddc:	881a      	ldrh	r2, [r3, #0]
 8002dde:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <right+0x1e0>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	4619      	mov	r1, r3
 8002de4:	4610      	mov	r0, r2
 8002de6:	4a29      	ldr	r2, [pc, #164]	; (8002e8c <right+0x1e4>)
 8002de8:	460b      	mov	r3, r1
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	440b      	add	r3, r1
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	330c      	adds	r3, #12
 8002df4:	6018      	str	r0, [r3, #0]
				allPath[currentIndex].y1 = y1;
 8002df6:	4b2b      	ldr	r3, [pc, #172]	; (8002ea4 <right+0x1fc>)
 8002df8:	881a      	ldrh	r2, [r3, #0]
 8002dfa:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <right+0x1e0>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4610      	mov	r0, r2
 8002e02:	4a22      	ldr	r2, [pc, #136]	; (8002e8c <right+0x1e4>)
 8002e04:	460b      	mov	r3, r1
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	440b      	add	r3, r1
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3310      	adds	r3, #16
 8002e10:	6018      	str	r0, [r3, #0]
				allPath[currentIndex].y2 = y2;
 8002e12:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <right+0x200>)
 8002e14:	881a      	ldrh	r2, [r3, #0]
 8002e16:	4b1c      	ldr	r3, [pc, #112]	; (8002e88 <right+0x1e0>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <right+0x1e4>)
 8002e20:	460b      	mov	r3, r1
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	440b      	add	r3, r1
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3314      	adds	r3, #20
 8002e2c:	6018      	str	r0, [r3, #0]

				currentIndex++;
 8002e2e:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <right+0x1e0>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	3301      	adds	r3, #1
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <right+0x1e0>)
 8002e38:	701a      	strb	r2, [r3, #0]
			}
			prevState = goRight;
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <right+0x1dc>)
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	701a      	strb	r2, [r3, #0]
			//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;
			x1 += speed;
 8002e40:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <right+0x1f8>)
 8002e42:	881a      	ldrh	r2, [r3, #0]
 8002e44:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <right+0x1ec>)
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	4413      	add	r3, r2
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <right+0x1f8>)
 8002e4e:	801a      	strh	r2, [r3, #0]
			x2 += speed;
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <right+0x1f0>)
 8002e52:	881a      	ldrh	r2, [r3, #0]
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <right+0x1ec>)
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	4413      	add	r3, r2
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <right+0x1f0>)
 8002e5e:	801a      	strh	r2, [r3, #0]


			lcd_Fill(x1, y1, x2, y2, BLUE);
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <right+0x1f8>)
 8002e62:	8818      	ldrh	r0, [r3, #0]
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <right+0x1fc>)
 8002e66:	8819      	ldrh	r1, [r3, #0]
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <right+0x1f0>)
 8002e6a:	881a      	ldrh	r2, [r3, #0]
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <right+0x200>)
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	241f      	movs	r4, #31
 8002e72:	9400      	str	r4, [sp, #0]
 8002e74:	f7fe f868 	bl	8000f48 <lcd_Fill>
			delete_path();
 8002e78:	f7ff fda0 	bl	80029bc <delete_path>
}
 8002e7c:	bf00      	nop
 8002e7e:	3704      	adds	r7, #4
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd90      	pop	{r4, r7, pc}
 8002e84:	2000001b 	.word	0x2000001b
 8002e88:	200002c8 	.word	0x200002c8
 8002e8c:	200002cc 	.word	0x200002cc
 8002e90:	2000001e 	.word	0x2000001e
 8002e94:	20000020 	.word	0x20000020
 8002e98:	20000016 	.word	0x20000016
 8002e9c:	2000001c 	.word	0x2000001c
 8002ea0:	20000012 	.word	0x20000012
 8002ea4:	20000014 	.word	0x20000014
 8002ea8:	20000018 	.word	0x20000018

08002eac <left>:
void left() {
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af02      	add	r7, sp, #8
	if (prevState == goLeft) {
 8002eb2:	4b75      	ldr	r3, [pc, #468]	; (8003088 <left+0x1dc>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d137      	bne.n	8002f2a <left+0x7e>
		if (allPath[currentIndex-1].length <= snakeTailLen) {
 8002eba:	4b74      	ldr	r3, [pc, #464]	; (800308c <left+0x1e0>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	1e5a      	subs	r2, r3, #1
 8002ec0:	4973      	ldr	r1, [pc, #460]	; (8003090 <left+0x1e4>)
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	440b      	add	r3, r1
 8002ecc:	3304      	adds	r3, #4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a70      	ldr	r2, [pc, #448]	; (8003094 <left+0x1e8>)
 8002ed2:	8812      	ldrh	r2, [r2, #0]
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	dc19      	bgt.n	8002f0c <left+0x60>

							allPath[currentIndex-1].length +=speed;
 8002ed8:	4b6c      	ldr	r3, [pc, #432]	; (800308c <left+0x1e0>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	1e5a      	subs	r2, r3, #1
 8002ede:	496c      	ldr	r1, [pc, #432]	; (8003090 <left+0x1e4>)
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	3304      	adds	r3, #4
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a6a      	ldr	r2, [pc, #424]	; (8003098 <left+0x1ec>)
 8002ef0:	8812      	ldrh	r2, [r2, #0]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4a65      	ldr	r2, [pc, #404]	; (800308c <left+0x1e0>)
 8002ef6:	7812      	ldrb	r2, [r2, #0]
 8002ef8:	3a01      	subs	r2, #1
 8002efa:	4419      	add	r1, r3
 8002efc:	4864      	ldr	r0, [pc, #400]	; (8003090 <left+0x1e4>)
 8002efe:	4613      	mov	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4403      	add	r3, r0
 8002f08:	3304      	adds	r3, #4
 8002f0a:	6019      	str	r1, [r3, #0]
						}

			allPath[currentIndex-1].x1 = x1;
 8002f0c:	4b63      	ldr	r3, [pc, #396]	; (800309c <left+0x1f0>)
 8002f0e:	8819      	ldrh	r1, [r3, #0]
 8002f10:	4b5e      	ldr	r3, [pc, #376]	; (800308c <left+0x1e0>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	1e5a      	subs	r2, r3, #1
 8002f16:	4608      	mov	r0, r1
 8002f18:	495d      	ldr	r1, [pc, #372]	; (8003090 <left+0x1e4>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	440b      	add	r3, r1
 8002f24:	3308      	adds	r3, #8
 8002f26:	6018      	str	r0, [r3, #0]
 8002f28:	e089      	b.n	800303e <left+0x192>

		} else {
			if (currentIndex == 0) allPath[0].isTail = 0;
 8002f2a:	4b58      	ldr	r3, [pc, #352]	; (800308c <left+0x1e0>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d103      	bne.n	8002f3a <left+0x8e>
 8002f32:	4b57      	ldr	r3, [pc, #348]	; (8003090 <left+0x1e4>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	705a      	strb	r2, [r3, #1]
 8002f38:	e00b      	b.n	8002f52 <left+0xa6>
			else allPath[currentIndex-1].isTail = 1;
 8002f3a:	4b54      	ldr	r3, [pc, #336]	; (800308c <left+0x1e0>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	1e5a      	subs	r2, r3, #1
 8002f40:	4953      	ldr	r1, [pc, #332]	; (8003090 <left+0x1e4>)
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	2201      	movs	r2, #1
 8002f50:	701a      	strb	r2, [r3, #0]
			allPath[currentIndex].isTail = 0;
 8002f52:	4b4e      	ldr	r3, [pc, #312]	; (800308c <left+0x1e0>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	4619      	mov	r1, r3
 8002f58:	4a4d      	ldr	r2, [pc, #308]	; (8003090 <left+0x1e4>)
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	440b      	add	r3, r1
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4413      	add	r3, r2
 8002f64:	3301      	adds	r3, #1
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
			if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 8002f6a:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <left+0x1e8>)
 8002f6c:	881a      	ldrh	r2, [r3, #0]
 8002f6e:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <left+0x1f4>)
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d10e      	bne.n	8002f94 <left+0xe8>
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <left+0x1e8>)
 8002f78:	881a      	ldrh	r2, [r3, #0]
 8002f7a:	4b44      	ldr	r3, [pc, #272]	; (800308c <left+0x1e0>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4610      	mov	r0, r2
 8002f82:	4a43      	ldr	r2, [pc, #268]	; (8003090 <left+0x1e4>)
 8002f84:	460b      	mov	r3, r1
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	440b      	add	r3, r1
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3304      	adds	r3, #4
 8002f90:	6018      	str	r0, [r3, #0]
 8002f92:	e00b      	b.n	8002fac <left+0x100>
			else allPath[currentIndex].length = 0;
 8002f94:	4b3d      	ldr	r3, [pc, #244]	; (800308c <left+0x1e0>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4a3d      	ldr	r2, [pc, #244]	; (8003090 <left+0x1e4>)
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	440b      	add	r3, r1
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
			allPath[currentIndex].currentState = goLeft;
 8002fac:	4b37      	ldr	r3, [pc, #220]	; (800308c <left+0x1e0>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4a37      	ldr	r2, [pc, #220]	; (8003090 <left+0x1e4>)
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	440b      	add	r3, r1
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	701a      	strb	r2, [r3, #0]
			allPath[currentIndex].x1 = x1;
 8002fc2:	4b36      	ldr	r3, [pc, #216]	; (800309c <left+0x1f0>)
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	4b31      	ldr	r3, [pc, #196]	; (800308c <left+0x1e0>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4a30      	ldr	r2, [pc, #192]	; (8003090 <left+0x1e4>)
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	440b      	add	r3, r1
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	3308      	adds	r3, #8
 8002fdc:	6018      	str	r0, [r3, #0]
			allPath[currentIndex].x2 = x2;
 8002fde:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <left+0x1f8>)
 8002fe0:	881a      	ldrh	r2, [r3, #0]
 8002fe2:	4b2a      	ldr	r3, [pc, #168]	; (800308c <left+0x1e0>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4a29      	ldr	r2, [pc, #164]	; (8003090 <left+0x1e4>)
 8002fec:	460b      	mov	r3, r1
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	440b      	add	r3, r1
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	330c      	adds	r3, #12
 8002ff8:	6018      	str	r0, [r3, #0]
			allPath[currentIndex].y1 = y1;
 8002ffa:	4b2b      	ldr	r3, [pc, #172]	; (80030a8 <left+0x1fc>)
 8002ffc:	881a      	ldrh	r2, [r3, #0]
 8002ffe:	4b23      	ldr	r3, [pc, #140]	; (800308c <left+0x1e0>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	4a22      	ldr	r2, [pc, #136]	; (8003090 <left+0x1e4>)
 8003008:	460b      	mov	r3, r1
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	440b      	add	r3, r1
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	3310      	adds	r3, #16
 8003014:	6018      	str	r0, [r3, #0]
			allPath[currentIndex].y2 = y2;
 8003016:	4b25      	ldr	r3, [pc, #148]	; (80030ac <left+0x200>)
 8003018:	881a      	ldrh	r2, [r3, #0]
 800301a:	4b1c      	ldr	r3, [pc, #112]	; (800308c <left+0x1e0>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	4619      	mov	r1, r3
 8003020:	4610      	mov	r0, r2
 8003022:	4a1b      	ldr	r2, [pc, #108]	; (8003090 <left+0x1e4>)
 8003024:	460b      	mov	r3, r1
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	440b      	add	r3, r1
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	3314      	adds	r3, #20
 8003030:	6018      	str	r0, [r3, #0]
			currentIndex++;
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <left+0x1e0>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	3301      	adds	r3, #1
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4b14      	ldr	r3, [pc, #80]	; (800308c <left+0x1e0>)
 800303c:	701a      	strb	r2, [r3, #0]
		}
		prevState = goLeft;
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <left+0x1dc>)
 8003040:	2202      	movs	r2, #2
 8003042:	701a      	strb	r2, [r3, #0]
		//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;
		x1 -= speed;
 8003044:	4b15      	ldr	r3, [pc, #84]	; (800309c <left+0x1f0>)
 8003046:	881a      	ldrh	r2, [r3, #0]
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <left+0x1ec>)
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	b29a      	uxth	r2, r3
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <left+0x1f0>)
 8003052:	801a      	strh	r2, [r3, #0]
		x2 -= speed;
 8003054:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <left+0x1f8>)
 8003056:	881a      	ldrh	r2, [r3, #0]
 8003058:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <left+0x1ec>)
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	b29a      	uxth	r2, r3
 8003060:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <left+0x1f8>)
 8003062:	801a      	strh	r2, [r3, #0]


		lcd_Fill(x1, y1, x2, y2, BLUE);
 8003064:	4b0d      	ldr	r3, [pc, #52]	; (800309c <left+0x1f0>)
 8003066:	8818      	ldrh	r0, [r3, #0]
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <left+0x1fc>)
 800306a:	8819      	ldrh	r1, [r3, #0]
 800306c:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <left+0x1f8>)
 800306e:	881a      	ldrh	r2, [r3, #0]
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <left+0x200>)
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	241f      	movs	r4, #31
 8003076:	9400      	str	r4, [sp, #0]
 8003078:	f7fd ff66 	bl	8000f48 <lcd_Fill>
		delete_path();
 800307c:	f7ff fc9e 	bl	80029bc <delete_path>

}
 8003080:	bf00      	nop
 8003082:	3704      	adds	r7, #4
 8003084:	46bd      	mov	sp, r7
 8003086:	bd90      	pop	{r4, r7, pc}
 8003088:	2000001b 	.word	0x2000001b
 800308c:	200002c8 	.word	0x200002c8
 8003090:	200002cc 	.word	0x200002cc
 8003094:	2000001e 	.word	0x2000001e
 8003098:	20000020 	.word	0x20000020
 800309c:	20000012 	.word	0x20000012
 80030a0:	2000001c 	.word	0x2000001c
 80030a4:	20000016 	.word	0x20000016
 80030a8:	20000014 	.word	0x20000014
 80030ac:	20000018 	.word	0x20000018

080030b0 <up>:


void up() {
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af02      	add	r7, sp, #8

	if (prevState == goUp) {
 80030b6:	4b7b      	ldr	r3, [pc, #492]	; (80032a4 <up+0x1f4>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d143      	bne.n	8003146 <up+0x96>
		if (allPath[currentIndex-1].length <= snakeTailLen) {
 80030be:	4b7a      	ldr	r3, [pc, #488]	; (80032a8 <up+0x1f8>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	1e5a      	subs	r2, r3, #1
 80030c4:	4979      	ldr	r1, [pc, #484]	; (80032ac <up+0x1fc>)
 80030c6:	4613      	mov	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	3304      	adds	r3, #4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a76      	ldr	r2, [pc, #472]	; (80032b0 <up+0x200>)
 80030d6:	8812      	ldrh	r2, [r2, #0]
 80030d8:	4293      	cmp	r3, r2
 80030da:	dc19      	bgt.n	8003110 <up+0x60>

					allPath[currentIndex-1].length += speed;
 80030dc:	4b72      	ldr	r3, [pc, #456]	; (80032a8 <up+0x1f8>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	1e5a      	subs	r2, r3, #1
 80030e2:	4972      	ldr	r1, [pc, #456]	; (80032ac <up+0x1fc>)
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	440b      	add	r3, r1
 80030ee:	3304      	adds	r3, #4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a70      	ldr	r2, [pc, #448]	; (80032b4 <up+0x204>)
 80030f4:	8812      	ldrh	r2, [r2, #0]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4a6b      	ldr	r2, [pc, #428]	; (80032a8 <up+0x1f8>)
 80030fa:	7812      	ldrb	r2, [r2, #0]
 80030fc:	3a01      	subs	r2, #1
 80030fe:	4419      	add	r1, r3
 8003100:	486a      	ldr	r0, [pc, #424]	; (80032ac <up+0x1fc>)
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4403      	add	r3, r0
 800310c:	3304      	adds	r3, #4
 800310e:	6019      	str	r1, [r3, #0]
				}

		allPath[currentIndex-1].y1 -= y1 ;
 8003110:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <up+0x1f8>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	1e5a      	subs	r2, r3, #1
 8003116:	4965      	ldr	r1, [pc, #404]	; (80032ac <up+0x1fc>)
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	440b      	add	r3, r1
 8003122:	3310      	adds	r3, #16
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a64      	ldr	r2, [pc, #400]	; (80032b8 <up+0x208>)
 8003128:	8812      	ldrh	r2, [r2, #0]
 800312a:	4611      	mov	r1, r2
 800312c:	4a5e      	ldr	r2, [pc, #376]	; (80032a8 <up+0x1f8>)
 800312e:	7812      	ldrb	r2, [r2, #0]
 8003130:	3a01      	subs	r2, #1
 8003132:	1a59      	subs	r1, r3, r1
 8003134:	485d      	ldr	r0, [pc, #372]	; (80032ac <up+0x1fc>)
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4403      	add	r3, r0
 8003140:	3310      	adds	r3, #16
 8003142:	6019      	str	r1, [r3, #0]
 8003144:	e089      	b.n	800325a <up+0x1aa>


	} else {
		if (currentIndex == 0) allPath[0].isTail = 0;
 8003146:	4b58      	ldr	r3, [pc, #352]	; (80032a8 <up+0x1f8>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <up+0xa6>
 800314e:	4b57      	ldr	r3, [pc, #348]	; (80032ac <up+0x1fc>)
 8003150:	2200      	movs	r2, #0
 8003152:	705a      	strb	r2, [r3, #1]
 8003154:	e00b      	b.n	800316e <up+0xbe>
		else allPath[currentIndex-1].isTail = 1;
 8003156:	4b54      	ldr	r3, [pc, #336]	; (80032a8 <up+0x1f8>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	1e5a      	subs	r2, r3, #1
 800315c:	4953      	ldr	r1, [pc, #332]	; (80032ac <up+0x1fc>)
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	440b      	add	r3, r1
 8003168:	3301      	adds	r3, #1
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].isTail = 0;
 800316e:	4b4e      	ldr	r3, [pc, #312]	; (80032a8 <up+0x1f8>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	4619      	mov	r1, r3
 8003174:	4a4d      	ldr	r2, [pc, #308]	; (80032ac <up+0x1fc>)
 8003176:	460b      	mov	r3, r1
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	440b      	add	r3, r1
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	3301      	adds	r3, #1
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
		if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 8003186:	4b4a      	ldr	r3, [pc, #296]	; (80032b0 <up+0x200>)
 8003188:	881a      	ldrh	r2, [r3, #0]
 800318a:	4b4c      	ldr	r3, [pc, #304]	; (80032bc <up+0x20c>)
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	d10e      	bne.n	80031b0 <up+0x100>
 8003192:	4b47      	ldr	r3, [pc, #284]	; (80032b0 <up+0x200>)
 8003194:	881a      	ldrh	r2, [r3, #0]
 8003196:	4b44      	ldr	r3, [pc, #272]	; (80032a8 <up+0x1f8>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	4619      	mov	r1, r3
 800319c:	4610      	mov	r0, r2
 800319e:	4a43      	ldr	r2, [pc, #268]	; (80032ac <up+0x1fc>)
 80031a0:	460b      	mov	r3, r1
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	440b      	add	r3, r1
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	3304      	adds	r3, #4
 80031ac:	6018      	str	r0, [r3, #0]
 80031ae:	e00b      	b.n	80031c8 <up+0x118>
		else allPath[currentIndex].length = 0;
 80031b0:	4b3d      	ldr	r3, [pc, #244]	; (80032a8 <up+0x1f8>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	4619      	mov	r1, r3
 80031b6:	4a3d      	ldr	r2, [pc, #244]	; (80032ac <up+0x1fc>)
 80031b8:	460b      	mov	r3, r1
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	440b      	add	r3, r1
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	3304      	adds	r3, #4
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
		allPath[currentIndex].currentState = goUp;
 80031c8:	4b37      	ldr	r3, [pc, #220]	; (80032a8 <up+0x1f8>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	4619      	mov	r1, r3
 80031ce:	4a37      	ldr	r2, [pc, #220]	; (80032ac <up+0x1fc>)
 80031d0:	460b      	mov	r3, r1
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	440b      	add	r3, r1
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4413      	add	r3, r2
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].x1 = x1;
 80031de:	4b38      	ldr	r3, [pc, #224]	; (80032c0 <up+0x210>)
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <up+0x1f8>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	4a30      	ldr	r2, [pc, #192]	; (80032ac <up+0x1fc>)
 80031ec:	460b      	mov	r3, r1
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	440b      	add	r3, r1
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	3308      	adds	r3, #8
 80031f8:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].x2 = x2;
 80031fa:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <up+0x214>)
 80031fc:	881a      	ldrh	r2, [r3, #0]
 80031fe:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <up+0x1f8>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	4619      	mov	r1, r3
 8003204:	4610      	mov	r0, r2
 8003206:	4a29      	ldr	r2, [pc, #164]	; (80032ac <up+0x1fc>)
 8003208:	460b      	mov	r3, r1
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	440b      	add	r3, r1
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	330c      	adds	r3, #12
 8003214:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y1 = y1;
 8003216:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <up+0x208>)
 8003218:	881a      	ldrh	r2, [r3, #0]
 800321a:	4b23      	ldr	r3, [pc, #140]	; (80032a8 <up+0x1f8>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	4619      	mov	r1, r3
 8003220:	4610      	mov	r0, r2
 8003222:	4a22      	ldr	r2, [pc, #136]	; (80032ac <up+0x1fc>)
 8003224:	460b      	mov	r3, r1
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	440b      	add	r3, r1
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	3310      	adds	r3, #16
 8003230:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y2 = y2;
 8003232:	4b25      	ldr	r3, [pc, #148]	; (80032c8 <up+0x218>)
 8003234:	881a      	ldrh	r2, [r3, #0]
 8003236:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <up+0x1f8>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	4619      	mov	r1, r3
 800323c:	4610      	mov	r0, r2
 800323e:	4a1b      	ldr	r2, [pc, #108]	; (80032ac <up+0x1fc>)
 8003240:	460b      	mov	r3, r1
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	440b      	add	r3, r1
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	3314      	adds	r3, #20
 800324c:	6018      	str	r0, [r3, #0]
		currentIndex++;
 800324e:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <up+0x1f8>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <up+0x1f8>)
 8003258:	701a      	strb	r2, [r3, #0]
	}
	prevState = goUp;
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <up+0x1f4>)
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
	//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;

	y1 -= speed;
 8003260:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <up+0x208>)
 8003262:	881a      	ldrh	r2, [r3, #0]
 8003264:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <up+0x204>)
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	b29a      	uxth	r2, r3
 800326c:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <up+0x208>)
 800326e:	801a      	strh	r2, [r3, #0]
	y2 -= speed;
 8003270:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <up+0x218>)
 8003272:	881a      	ldrh	r2, [r3, #0]
 8003274:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <up+0x204>)
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	b29a      	uxth	r2, r3
 800327c:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <up+0x218>)
 800327e:	801a      	strh	r2, [r3, #0]


	lcd_Fill(x1, y1, x2, y2, BLUE);
 8003280:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <up+0x210>)
 8003282:	8818      	ldrh	r0, [r3, #0]
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <up+0x208>)
 8003286:	8819      	ldrh	r1, [r3, #0]
 8003288:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <up+0x214>)
 800328a:	881a      	ldrh	r2, [r3, #0]
 800328c:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <up+0x218>)
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	241f      	movs	r4, #31
 8003292:	9400      	str	r4, [sp, #0]
 8003294:	f7fd fe58 	bl	8000f48 <lcd_Fill>
	delete_path();
 8003298:	f7ff fb90 	bl	80029bc <delete_path>
}
 800329c:	bf00      	nop
 800329e:	3704      	adds	r7, #4
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd90      	pop	{r4, r7, pc}
 80032a4:	2000001b 	.word	0x2000001b
 80032a8:	200002c8 	.word	0x200002c8
 80032ac:	200002cc 	.word	0x200002cc
 80032b0:	2000001e 	.word	0x2000001e
 80032b4:	20000020 	.word	0x20000020
 80032b8:	20000014 	.word	0x20000014
 80032bc:	2000001c 	.word	0x2000001c
 80032c0:	20000012 	.word	0x20000012
 80032c4:	20000016 	.word	0x20000016
 80032c8:	20000018 	.word	0x20000018

080032cc <down>:


void down() {
 80032cc:	b590      	push	{r4, r7, lr}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af02      	add	r7, sp, #8

	if (prevState == goDown) {
 80032d2:	4b75      	ldr	r3, [pc, #468]	; (80034a8 <down+0x1dc>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d137      	bne.n	800334a <down+0x7e>
		if (allPath[currentIndex-1].length <= snakeTailLen) {
 80032da:	4b74      	ldr	r3, [pc, #464]	; (80034ac <down+0x1e0>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	1e5a      	subs	r2, r3, #1
 80032e0:	4973      	ldr	r1, [pc, #460]	; (80034b0 <down+0x1e4>)
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	440b      	add	r3, r1
 80032ec:	3304      	adds	r3, #4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a70      	ldr	r2, [pc, #448]	; (80034b4 <down+0x1e8>)
 80032f2:	8812      	ldrh	r2, [r2, #0]
 80032f4:	4293      	cmp	r3, r2
 80032f6:	dc19      	bgt.n	800332c <down+0x60>

			allPath[currentIndex-1].length += speed;
 80032f8:	4b6c      	ldr	r3, [pc, #432]	; (80034ac <down+0x1e0>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	1e5a      	subs	r2, r3, #1
 80032fe:	496c      	ldr	r1, [pc, #432]	; (80034b0 <down+0x1e4>)
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	440b      	add	r3, r1
 800330a:	3304      	adds	r3, #4
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6a      	ldr	r2, [pc, #424]	; (80034b8 <down+0x1ec>)
 8003310:	8812      	ldrh	r2, [r2, #0]
 8003312:	4611      	mov	r1, r2
 8003314:	4a65      	ldr	r2, [pc, #404]	; (80034ac <down+0x1e0>)
 8003316:	7812      	ldrb	r2, [r2, #0]
 8003318:	3a01      	subs	r2, #1
 800331a:	4419      	add	r1, r3
 800331c:	4864      	ldr	r0, [pc, #400]	; (80034b0 <down+0x1e4>)
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4403      	add	r3, r0
 8003328:	3304      	adds	r3, #4
 800332a:	6019      	str	r1, [r3, #0]
		}

		allPath[currentIndex-1].y2 = y2;
 800332c:	4b63      	ldr	r3, [pc, #396]	; (80034bc <down+0x1f0>)
 800332e:	8819      	ldrh	r1, [r3, #0]
 8003330:	4b5e      	ldr	r3, [pc, #376]	; (80034ac <down+0x1e0>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	1e5a      	subs	r2, r3, #1
 8003336:	4608      	mov	r0, r1
 8003338:	495d      	ldr	r1, [pc, #372]	; (80034b0 <down+0x1e4>)
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	440b      	add	r3, r1
 8003344:	3314      	adds	r3, #20
 8003346:	6018      	str	r0, [r3, #0]
 8003348:	e089      	b.n	800345e <down+0x192>
	} else {
		if (currentIndex == 0) allPath[0].isTail = 0;
 800334a:	4b58      	ldr	r3, [pc, #352]	; (80034ac <down+0x1e0>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d103      	bne.n	800335a <down+0x8e>
 8003352:	4b57      	ldr	r3, [pc, #348]	; (80034b0 <down+0x1e4>)
 8003354:	2200      	movs	r2, #0
 8003356:	705a      	strb	r2, [r3, #1]
 8003358:	e00b      	b.n	8003372 <down+0xa6>
		else allPath[currentIndex-1].isTail = 1;
 800335a:	4b54      	ldr	r3, [pc, #336]	; (80034ac <down+0x1e0>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	1e5a      	subs	r2, r3, #1
 8003360:	4953      	ldr	r1, [pc, #332]	; (80034b0 <down+0x1e4>)
 8003362:	4613      	mov	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	440b      	add	r3, r1
 800336c:	3301      	adds	r3, #1
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].isTail = 0;
 8003372:	4b4e      	ldr	r3, [pc, #312]	; (80034ac <down+0x1e0>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	4619      	mov	r1, r3
 8003378:	4a4d      	ldr	r2, [pc, #308]	; (80034b0 <down+0x1e4>)
 800337a:	460b      	mov	r3, r1
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	440b      	add	r3, r1
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	3301      	adds	r3, #1
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
		if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 800338a:	4b4a      	ldr	r3, [pc, #296]	; (80034b4 <down+0x1e8>)
 800338c:	881a      	ldrh	r2, [r3, #0]
 800338e:	4b4c      	ldr	r3, [pc, #304]	; (80034c0 <down+0x1f4>)
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d10e      	bne.n	80033b4 <down+0xe8>
 8003396:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <down+0x1e8>)
 8003398:	881a      	ldrh	r2, [r3, #0]
 800339a:	4b44      	ldr	r3, [pc, #272]	; (80034ac <down+0x1e0>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	4619      	mov	r1, r3
 80033a0:	4610      	mov	r0, r2
 80033a2:	4a43      	ldr	r2, [pc, #268]	; (80034b0 <down+0x1e4>)
 80033a4:	460b      	mov	r3, r1
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	440b      	add	r3, r1
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	3304      	adds	r3, #4
 80033b0:	6018      	str	r0, [r3, #0]
 80033b2:	e00b      	b.n	80033cc <down+0x100>
		else allPath[currentIndex].length = 0;
 80033b4:	4b3d      	ldr	r3, [pc, #244]	; (80034ac <down+0x1e0>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	4619      	mov	r1, r3
 80033ba:	4a3d      	ldr	r2, [pc, #244]	; (80034b0 <down+0x1e4>)
 80033bc:	460b      	mov	r3, r1
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	440b      	add	r3, r1
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	3304      	adds	r3, #4
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
		allPath[currentIndex].currentState = goDown;
 80033cc:	4b37      	ldr	r3, [pc, #220]	; (80034ac <down+0x1e0>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	4619      	mov	r1, r3
 80033d2:	4a37      	ldr	r2, [pc, #220]	; (80034b0 <down+0x1e4>)
 80033d4:	460b      	mov	r3, r1
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	440b      	add	r3, r1
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].x1 = x1;
 80033e2:	4b38      	ldr	r3, [pc, #224]	; (80034c4 <down+0x1f8>)
 80033e4:	881a      	ldrh	r2, [r3, #0]
 80033e6:	4b31      	ldr	r3, [pc, #196]	; (80034ac <down+0x1e0>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	4619      	mov	r1, r3
 80033ec:	4610      	mov	r0, r2
 80033ee:	4a30      	ldr	r2, [pc, #192]	; (80034b0 <down+0x1e4>)
 80033f0:	460b      	mov	r3, r1
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	440b      	add	r3, r1
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4413      	add	r3, r2
 80033fa:	3308      	adds	r3, #8
 80033fc:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].x2 = x2;
 80033fe:	4b32      	ldr	r3, [pc, #200]	; (80034c8 <down+0x1fc>)
 8003400:	881a      	ldrh	r2, [r3, #0]
 8003402:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <down+0x1e0>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	4619      	mov	r1, r3
 8003408:	4610      	mov	r0, r2
 800340a:	4a29      	ldr	r2, [pc, #164]	; (80034b0 <down+0x1e4>)
 800340c:	460b      	mov	r3, r1
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	440b      	add	r3, r1
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	330c      	adds	r3, #12
 8003418:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y1 = y1;
 800341a:	4b2c      	ldr	r3, [pc, #176]	; (80034cc <down+0x200>)
 800341c:	881a      	ldrh	r2, [r3, #0]
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <down+0x1e0>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	4a22      	ldr	r2, [pc, #136]	; (80034b0 <down+0x1e4>)
 8003428:	460b      	mov	r3, r1
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	440b      	add	r3, r1
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	3310      	adds	r3, #16
 8003434:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y2 = y2;
 8003436:	4b21      	ldr	r3, [pc, #132]	; (80034bc <down+0x1f0>)
 8003438:	881a      	ldrh	r2, [r3, #0]
 800343a:	4b1c      	ldr	r3, [pc, #112]	; (80034ac <down+0x1e0>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	4619      	mov	r1, r3
 8003440:	4610      	mov	r0, r2
 8003442:	4a1b      	ldr	r2, [pc, #108]	; (80034b0 <down+0x1e4>)
 8003444:	460b      	mov	r3, r1
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	440b      	add	r3, r1
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	3314      	adds	r3, #20
 8003450:	6018      	str	r0, [r3, #0]
		currentIndex++;
 8003452:	4b16      	ldr	r3, [pc, #88]	; (80034ac <down+0x1e0>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	3301      	adds	r3, #1
 8003458:	b2da      	uxtb	r2, r3
 800345a:	4b14      	ldr	r3, [pc, #80]	; (80034ac <down+0x1e0>)
 800345c:	701a      	strb	r2, [r3, #0]
	}
	prevState = goDown;
 800345e:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <down+0x1dc>)
 8003460:	2201      	movs	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
	//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;
		y1 += speed;
 8003464:	4b19      	ldr	r3, [pc, #100]	; (80034cc <down+0x200>)
 8003466:	881a      	ldrh	r2, [r3, #0]
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <down+0x1ec>)
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	4413      	add	r3, r2
 800346e:	b29a      	uxth	r2, r3
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <down+0x200>)
 8003472:	801a      	strh	r2, [r3, #0]
		y2 += speed;
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <down+0x1f0>)
 8003476:	881a      	ldrh	r2, [r3, #0]
 8003478:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <down+0x1ec>)
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	4413      	add	r3, r2
 800347e:	b29a      	uxth	r2, r3
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <down+0x1f0>)
 8003482:	801a      	strh	r2, [r3, #0]

		lcd_Fill(x1, y1, x2, y2, BLUE);
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <down+0x1f8>)
 8003486:	8818      	ldrh	r0, [r3, #0]
 8003488:	4b10      	ldr	r3, [pc, #64]	; (80034cc <down+0x200>)
 800348a:	8819      	ldrh	r1, [r3, #0]
 800348c:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <down+0x1fc>)
 800348e:	881a      	ldrh	r2, [r3, #0]
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <down+0x1f0>)
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	241f      	movs	r4, #31
 8003496:	9400      	str	r4, [sp, #0]
 8003498:	f7fd fd56 	bl	8000f48 <lcd_Fill>
		delete_path();
 800349c:	f7ff fa8e 	bl	80029bc <delete_path>
}
 80034a0:	bf00      	nop
 80034a2:	3704      	adds	r7, #4
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd90      	pop	{r4, r7, pc}
 80034a8:	2000001b 	.word	0x2000001b
 80034ac:	200002c8 	.word	0x200002c8
 80034b0:	200002cc 	.word	0x200002cc
 80034b4:	2000001e 	.word	0x2000001e
 80034b8:	20000020 	.word	0x20000020
 80034bc:	20000018 	.word	0x20000018
 80034c0:	2000001c 	.word	0x2000001c
 80034c4:	20000012 	.word	0x20000012
 80034c8:	20000016 	.word	0x20000016
 80034cc:	20000014 	.word	0x20000014

080034d0 <eat_food_success>:

void eat_food_success() {
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af02      	add	r7, sp, #8
	CREATE_FOOD = 1; //QUAY LAI HÀM TẠO FRUIT
 80034d6:	4b12      	ldr	r3, [pc, #72]	; (8003520 <eat_food_success+0x50>)
 80034d8:	2201      	movs	r2, #1
 80034da:	801a      	strh	r2, [r3, #0]
	count++; //tăng số điểm
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <eat_food_success+0x54>)
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <eat_food_success+0x54>)
 80034e6:	801a      	strh	r2, [r3, #0]
	snakeTailLen += 10;
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <eat_food_success+0x58>)
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	330a      	adds	r3, #10
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <eat_food_success+0x58>)
 80034f2:	801a      	strh	r2, [r3, #0]
	lcd_Fill(x_food, y_food, x_food+5, y_food+5, WHITE);
 80034f4:	4b0d      	ldr	r3, [pc, #52]	; (800352c <eat_food_success+0x5c>)
 80034f6:	8818      	ldrh	r0, [r3, #0]
 80034f8:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <eat_food_success+0x60>)
 80034fa:	8819      	ldrh	r1, [r3, #0]
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <eat_food_success+0x5c>)
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	3305      	adds	r3, #5
 8003502:	b29a      	uxth	r2, r3
 8003504:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <eat_food_success+0x60>)
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	3305      	adds	r3, #5
 800350a:	b29b      	uxth	r3, r3
 800350c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8003510:	9400      	str	r4, [sp, #0]
 8003512:	f7fd fd19 	bl	8000f48 <lcd_Fill>
}
 8003516:	bf00      	nop
 8003518:	3704      	adds	r7, #4
 800351a:	46bd      	mov	sp, r7
 800351c:	bd90      	pop	{r4, r7, pc}
 800351e:	bf00      	nop
 8003520:	20000022 	.word	0x20000022
 8003524:	200005a4 	.word	0x200005a4
 8003528:	2000001e 	.word	0x2000001e
 800352c:	200005a0 	.word	0x200005a0
 8003530:	200005a2 	.word	0x200005a2

08003534 <food>:

void food() {
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b083      	sub	sp, #12
 8003538:	af02      	add	r7, sp, #8
	if(CREATE_FOOD == 1) { // Tạo mồi nhậu
 800353a:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <food+0x204>)
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d12d      	bne.n	800359e <food+0x6a>
		x_food = random_eat(0,x_max-5);
 8003542:	23ef      	movs	r3, #239	; 0xef
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b05      	subs	r3, #5
 8003548:	b29b      	uxth	r3, r3
 800354a:	4619      	mov	r1, r3
 800354c:	2000      	movs	r0, #0
 800354e:	f7fe fd31 	bl	8001fb4 <random_eat>
 8003552:	4603      	mov	r3, r0
 8003554:	461a      	mov	r2, r3
 8003556:	4b79      	ldr	r3, [pc, #484]	; (800373c <food+0x208>)
 8003558:	801a      	strh	r2, [r3, #0]
		y_food = random_eat(100,y_max-5);
 800355a:	f240 133f 	movw	r3, #319	; 0x13f
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b05      	subs	r3, #5
 8003562:	b29b      	uxth	r3, r3
 8003564:	4619      	mov	r1, r3
 8003566:	2064      	movs	r0, #100	; 0x64
 8003568:	f7fe fd24 	bl	8001fb4 <random_eat>
 800356c:	4603      	mov	r3, r0
 800356e:	461a      	mov	r2, r3
 8003570:	4b73      	ldr	r3, [pc, #460]	; (8003740 <food+0x20c>)
 8003572:	801a      	strh	r2, [r3, #0]
		lcd_Fill(x_food, y_food, x_food+5, y_food+5, RED);
 8003574:	4b71      	ldr	r3, [pc, #452]	; (800373c <food+0x208>)
 8003576:	8818      	ldrh	r0, [r3, #0]
 8003578:	4b71      	ldr	r3, [pc, #452]	; (8003740 <food+0x20c>)
 800357a:	8819      	ldrh	r1, [r3, #0]
 800357c:	4b6f      	ldr	r3, [pc, #444]	; (800373c <food+0x208>)
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	3305      	adds	r3, #5
 8003582:	b29a      	uxth	r2, r3
 8003584:	4b6e      	ldr	r3, [pc, #440]	; (8003740 <food+0x20c>)
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	3305      	adds	r3, #5
 800358a:	b29b      	uxth	r3, r3
 800358c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8003590:	9400      	str	r4, [sp, #0]
 8003592:	f7fd fcd9 	bl	8000f48 <lcd_Fill>
		CREATE_FOOD = 0; // tránh tạo mồi liên tục
 8003596:	4b68      	ldr	r3, [pc, #416]	; (8003738 <food+0x204>)
 8003598:	2200      	movs	r2, #0
 800359a:	801a      	strh	r2, [r3, #0]
			)
			) {
			eat_food_success();
		}
	}
}
 800359c:	e0c7      	b.n	800372e <food+0x1fa>
		if((x2 == x_food) && (
 800359e:	4b69      	ldr	r3, [pc, #420]	; (8003744 <food+0x210>)
 80035a0:	881a      	ldrh	r2, [r3, #0]
 80035a2:	4b66      	ldr	r3, [pc, #408]	; (800373c <food+0x208>)
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d12a      	bne.n	8003600 <food+0xcc>
				(y1 >= y_food && y1 <= y_food+5)
 80035aa:	4b67      	ldr	r3, [pc, #412]	; (8003748 <food+0x214>)
 80035ac:	881a      	ldrh	r2, [r3, #0]
 80035ae:	4b64      	ldr	r3, [pc, #400]	; (8003740 <food+0x20c>)
 80035b0:	881b      	ldrh	r3, [r3, #0]
		if((x2 == x_food) && (
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d307      	bcc.n	80035c6 <food+0x92>
				(y1 >= y_food && y1 <= y_food+5)
 80035b6:	4b64      	ldr	r3, [pc, #400]	; (8003748 <food+0x214>)
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	4b60      	ldr	r3, [pc, #384]	; (8003740 <food+0x20c>)
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	3305      	adds	r3, #5
 80035c2:	429a      	cmp	r2, r3
 80035c4:	dd1a      	ble.n	80035fc <food+0xc8>
			||	(y2 >= y_food && y2 <= y_food+5)
 80035c6:	4b61      	ldr	r3, [pc, #388]	; (800374c <food+0x218>)
 80035c8:	881a      	ldrh	r2, [r3, #0]
 80035ca:	4b5d      	ldr	r3, [pc, #372]	; (8003740 <food+0x20c>)
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d307      	bcc.n	80035e2 <food+0xae>
 80035d2:	4b5e      	ldr	r3, [pc, #376]	; (800374c <food+0x218>)
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	4b59      	ldr	r3, [pc, #356]	; (8003740 <food+0x20c>)
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	3305      	adds	r3, #5
 80035de:	429a      	cmp	r2, r3
 80035e0:	dd0c      	ble.n	80035fc <food+0xc8>
			||  (y1 <= y_food && y2 >= y_food+5)
 80035e2:	4b59      	ldr	r3, [pc, #356]	; (8003748 <food+0x214>)
 80035e4:	881a      	ldrh	r2, [r3, #0]
 80035e6:	4b56      	ldr	r3, [pc, #344]	; (8003740 <food+0x20c>)
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d808      	bhi.n	8003600 <food+0xcc>
 80035ee:	4b54      	ldr	r3, [pc, #336]	; (8003740 <food+0x20c>)
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4a55      	ldr	r2, [pc, #340]	; (800374c <food+0x218>)
 80035f6:	8812      	ldrh	r2, [r2, #0]
 80035f8:	4293      	cmp	r3, r2
 80035fa:	da01      	bge.n	8003600 <food+0xcc>
			eat_food_success();
 80035fc:	f7ff ff68 	bl	80034d0 <eat_food_success>
		if((x1 == x_food+5) && (
 8003600:	4b53      	ldr	r3, [pc, #332]	; (8003750 <food+0x21c>)
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	4b4d      	ldr	r3, [pc, #308]	; (800373c <food+0x208>)
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	3305      	adds	r3, #5
 800360c:	429a      	cmp	r2, r3
 800360e:	d12a      	bne.n	8003666 <food+0x132>
				(y1 >= y_food && y1 <= y_food+5)
 8003610:	4b4d      	ldr	r3, [pc, #308]	; (8003748 <food+0x214>)
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	4b4a      	ldr	r3, [pc, #296]	; (8003740 <food+0x20c>)
 8003616:	881b      	ldrh	r3, [r3, #0]
		if((x1 == x_food+5) && (
 8003618:	429a      	cmp	r2, r3
 800361a:	d307      	bcc.n	800362c <food+0xf8>
				(y1 >= y_food && y1 <= y_food+5)
 800361c:	4b4a      	ldr	r3, [pc, #296]	; (8003748 <food+0x214>)
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	461a      	mov	r2, r3
 8003622:	4b47      	ldr	r3, [pc, #284]	; (8003740 <food+0x20c>)
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	3305      	adds	r3, #5
 8003628:	429a      	cmp	r2, r3
 800362a:	dd1a      	ble.n	8003662 <food+0x12e>
			||	(y2 >= y_food && y2 <= y_food+5)
 800362c:	4b47      	ldr	r3, [pc, #284]	; (800374c <food+0x218>)
 800362e:	881a      	ldrh	r2, [r3, #0]
 8003630:	4b43      	ldr	r3, [pc, #268]	; (8003740 <food+0x20c>)
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d307      	bcc.n	8003648 <food+0x114>
 8003638:	4b44      	ldr	r3, [pc, #272]	; (800374c <food+0x218>)
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	4b40      	ldr	r3, [pc, #256]	; (8003740 <food+0x20c>)
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	3305      	adds	r3, #5
 8003644:	429a      	cmp	r2, r3
 8003646:	dd0c      	ble.n	8003662 <food+0x12e>
			||  (y1 <= y_food && y2 >= y_food+5)
 8003648:	4b3f      	ldr	r3, [pc, #252]	; (8003748 <food+0x214>)
 800364a:	881a      	ldrh	r2, [r3, #0]
 800364c:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <food+0x20c>)
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d808      	bhi.n	8003666 <food+0x132>
 8003654:	4b3a      	ldr	r3, [pc, #232]	; (8003740 <food+0x20c>)
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	3304      	adds	r3, #4
 800365a:	4a3c      	ldr	r2, [pc, #240]	; (800374c <food+0x218>)
 800365c:	8812      	ldrh	r2, [r2, #0]
 800365e:	4293      	cmp	r3, r2
 8003660:	da01      	bge.n	8003666 <food+0x132>
			eat_food_success();
 8003662:	f7ff ff35 	bl	80034d0 <eat_food_success>
		if((y2 == y_food) && (
 8003666:	4b39      	ldr	r3, [pc, #228]	; (800374c <food+0x218>)
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	4b35      	ldr	r3, [pc, #212]	; (8003740 <food+0x20c>)
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d12a      	bne.n	80036c8 <food+0x194>
				(x1 >= x_food && x1 <= x_food+5)
 8003672:	4b37      	ldr	r3, [pc, #220]	; (8003750 <food+0x21c>)
 8003674:	881a      	ldrh	r2, [r3, #0]
 8003676:	4b31      	ldr	r3, [pc, #196]	; (800373c <food+0x208>)
 8003678:	881b      	ldrh	r3, [r3, #0]
		if((y2 == y_food) && (
 800367a:	429a      	cmp	r2, r3
 800367c:	d307      	bcc.n	800368e <food+0x15a>
				(x1 >= x_food && x1 <= x_food+5)
 800367e:	4b34      	ldr	r3, [pc, #208]	; (8003750 <food+0x21c>)
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	4b2d      	ldr	r3, [pc, #180]	; (800373c <food+0x208>)
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	3305      	adds	r3, #5
 800368a:	429a      	cmp	r2, r3
 800368c:	dd1a      	ble.n	80036c4 <food+0x190>
			||	(x2 >= x_food && x2 <= x_food+5)
 800368e:	4b2d      	ldr	r3, [pc, #180]	; (8003744 <food+0x210>)
 8003690:	881a      	ldrh	r2, [r3, #0]
 8003692:	4b2a      	ldr	r3, [pc, #168]	; (800373c <food+0x208>)
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d307      	bcc.n	80036aa <food+0x176>
 800369a:	4b2a      	ldr	r3, [pc, #168]	; (8003744 <food+0x210>)
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	4b26      	ldr	r3, [pc, #152]	; (800373c <food+0x208>)
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	3305      	adds	r3, #5
 80036a6:	429a      	cmp	r2, r3
 80036a8:	dd0c      	ble.n	80036c4 <food+0x190>
			||  (x1 <= x_food && x2 >= x_food+5)
 80036aa:	4b29      	ldr	r3, [pc, #164]	; (8003750 <food+0x21c>)
 80036ac:	881a      	ldrh	r2, [r3, #0]
 80036ae:	4b23      	ldr	r3, [pc, #140]	; (800373c <food+0x208>)
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d808      	bhi.n	80036c8 <food+0x194>
 80036b6:	4b21      	ldr	r3, [pc, #132]	; (800373c <food+0x208>)
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4a21      	ldr	r2, [pc, #132]	; (8003744 <food+0x210>)
 80036be:	8812      	ldrh	r2, [r2, #0]
 80036c0:	4293      	cmp	r3, r2
 80036c2:	da01      	bge.n	80036c8 <food+0x194>
			eat_food_success();
 80036c4:	f7ff ff04 	bl	80034d0 <eat_food_success>
		if((y1 == y_food+5) && (
 80036c8:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <food+0x214>)
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	461a      	mov	r2, r3
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <food+0x20c>)
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	3305      	adds	r3, #5
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d12a      	bne.n	800372e <food+0x1fa>
				(x1 >= x_food && x1 <= x_food+5)
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <food+0x21c>)
 80036da:	881a      	ldrh	r2, [r3, #0]
 80036dc:	4b17      	ldr	r3, [pc, #92]	; (800373c <food+0x208>)
 80036de:	881b      	ldrh	r3, [r3, #0]
		if((y1 == y_food+5) && (
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d307      	bcc.n	80036f4 <food+0x1c0>
				(x1 >= x_food && x1 <= x_food+5)
 80036e4:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <food+0x21c>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	4b14      	ldr	r3, [pc, #80]	; (800373c <food+0x208>)
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	3305      	adds	r3, #5
 80036f0:	429a      	cmp	r2, r3
 80036f2:	dd1a      	ble.n	800372a <food+0x1f6>
			||	(x2 >= x_food && x2 <= x_food+5)
 80036f4:	4b13      	ldr	r3, [pc, #76]	; (8003744 <food+0x210>)
 80036f6:	881a      	ldrh	r2, [r3, #0]
 80036f8:	4b10      	ldr	r3, [pc, #64]	; (800373c <food+0x208>)
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d307      	bcc.n	8003710 <food+0x1dc>
 8003700:	4b10      	ldr	r3, [pc, #64]	; (8003744 <food+0x210>)
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <food+0x208>)
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	3305      	adds	r3, #5
 800370c:	429a      	cmp	r2, r3
 800370e:	dd0c      	ble.n	800372a <food+0x1f6>
			||  (x1 <= x_food && x2 >= x_food+5)
 8003710:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <food+0x21c>)
 8003712:	881a      	ldrh	r2, [r3, #0]
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <food+0x208>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d808      	bhi.n	800372e <food+0x1fa>
 800371c:	4b07      	ldr	r3, [pc, #28]	; (800373c <food+0x208>)
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	3304      	adds	r3, #4
 8003722:	4a08      	ldr	r2, [pc, #32]	; (8003744 <food+0x210>)
 8003724:	8812      	ldrh	r2, [r2, #0]
 8003726:	4293      	cmp	r3, r2
 8003728:	da01      	bge.n	800372e <food+0x1fa>
			eat_food_success();
 800372a:	f7ff fed1 	bl	80034d0 <eat_food_success>
}
 800372e:	bf00      	nop
 8003730:	3704      	adds	r7, #4
 8003732:	46bd      	mov	sp, r7
 8003734:	bd90      	pop	{r4, r7, pc}
 8003736:	bf00      	nop
 8003738:	20000022 	.word	0x20000022
 800373c:	200005a0 	.word	0x200005a0
 8003740:	200005a2 	.word	0x200005a2
 8003744:	20000016 	.word	0x20000016
 8003748:	20000014 	.word	0x20000014
 800374c:	20000018 	.word	0x20000018
 8003750:	20000012 	.word	0x20000012

08003754 <move>:


void move() {
 8003754:	b590      	push	{r4, r7, lr}
 8003756:	b083      	sub	sp, #12
 8003758:	af02      	add	r7, sp, #8
	if(x1 <= 2 || x1 >= x_max || x2 <= 2 || x2 >= x_max
 800375a:	4b6e      	ldr	r3, [pc, #440]	; (8003914 <move+0x1c0>)
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d92a      	bls.n	80037b8 <move+0x64>
 8003762:	4b6c      	ldr	r3, [pc, #432]	; (8003914 <move+0x1c0>)
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	23ef      	movs	r3, #239	; 0xef
 800376a:	429a      	cmp	r2, r3
 800376c:	da24      	bge.n	80037b8 <move+0x64>
 800376e:	4b6a      	ldr	r3, [pc, #424]	; (8003918 <move+0x1c4>)
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d920      	bls.n	80037b8 <move+0x64>
 8003776:	4b68      	ldr	r3, [pc, #416]	; (8003918 <move+0x1c4>)
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	23ef      	movs	r3, #239	; 0xef
 800377e:	429a      	cmp	r2, r3
 8003780:	da1a      	bge.n	80037b8 <move+0x64>
	|| y1 <= y_min || y1 >= y_max || y2 <= y_min || y2 >= y_max - 2) { //đụng tường
 8003782:	4b66      	ldr	r3, [pc, #408]	; (800391c <move+0x1c8>)
 8003784:	881b      	ldrh	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	2364      	movs	r3, #100	; 0x64
 800378a:	429a      	cmp	r2, r3
 800378c:	dd14      	ble.n	80037b8 <move+0x64>
 800378e:	4b63      	ldr	r3, [pc, #396]	; (800391c <move+0x1c8>)
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	461a      	mov	r2, r3
 8003794:	f240 133f 	movw	r3, #319	; 0x13f
 8003798:	429a      	cmp	r2, r3
 800379a:	da0d      	bge.n	80037b8 <move+0x64>
 800379c:	4b60      	ldr	r3, [pc, #384]	; (8003920 <move+0x1cc>)
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	2364      	movs	r3, #100	; 0x64
 80037a4:	429a      	cmp	r2, r3
 80037a6:	dd07      	ble.n	80037b8 <move+0x64>
 80037a8:	4b5d      	ldr	r3, [pc, #372]	; (8003920 <move+0x1cc>)
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	f240 133f 	movw	r3, #319	; 0x13f
 80037b2:	3b02      	subs	r3, #2
 80037b4:	429a      	cmp	r2, r3
 80037b6:	db02      	blt.n	80037be <move+0x6a>
			game_over();
 80037b8:	f7fe fd46 	bl	8002248 <game_over>
			return;
 80037bc:	e0a6      	b.n	800390c <move+0x1b8>
	}
	led7_SetDigit(0, 0, 0);
 80037be:	2200      	movs	r2, #0
 80037c0:	2100      	movs	r1, #0
 80037c2:	2000      	movs	r0, #0
 80037c4:	f7fe f908 	bl	80019d8 <led7_SetDigit>
	led7_SetDigit(0, 1, 0);
 80037c8:	2200      	movs	r2, #0
 80037ca:	2101      	movs	r1, #1
 80037cc:	2000      	movs	r0, #0
 80037ce:	f7fe f903 	bl	80019d8 <led7_SetDigit>
	led7_SetDigit(count/10, 2, 0);
 80037d2:	4b54      	ldr	r3, [pc, #336]	; (8003924 <move+0x1d0>)
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	4a54      	ldr	r2, [pc, #336]	; (8003928 <move+0x1d4>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	08db      	lsrs	r3, r3, #3
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2200      	movs	r2, #0
 80037e2:	2102      	movs	r1, #2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe f8f7 	bl	80019d8 <led7_SetDigit>
	led7_SetDigit(count%10, 3, 0); //hiển thị điểm số
 80037ea:	4b4e      	ldr	r3, [pc, #312]	; (8003924 <move+0x1d0>)
 80037ec:	881a      	ldrh	r2, [r3, #0]
 80037ee:	4b4e      	ldr	r3, [pc, #312]	; (8003928 <move+0x1d4>)
 80037f0:	fba3 1302 	umull	r1, r3, r3, r2
 80037f4:	08d9      	lsrs	r1, r3, #3
 80037f6:	460b      	mov	r3, r1
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	b29b      	uxth	r3, r3
 8003802:	2200      	movs	r2, #0
 8003804:	2103      	movs	r1, #3
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe f8e6 	bl	80019d8 <led7_SetDigit>
//	count++;

	food();
 800380c:	f7ff fe92 	bl	8003534 <food>
	if (snakeSelfBite(x1,y1,x2,y2,0)) {
 8003810:	4b40      	ldr	r3, [pc, #256]	; (8003914 <move+0x1c0>)
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	b218      	sxth	r0, r3
 8003816:	4b41      	ldr	r3, [pc, #260]	; (800391c <move+0x1c8>)
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	b219      	sxth	r1, r3
 800381c:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <move+0x1c4>)
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	b21a      	sxth	r2, r3
 8003822:	4b3f      	ldr	r3, [pc, #252]	; (8003920 <move+0x1cc>)
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b21b      	sxth	r3, r3
 8003828:	2400      	movs	r4, #0
 800382a:	9400      	str	r4, [sp, #0]
 800382c:	f7fe fe64 	bl	80024f8 <snakeSelfBite>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <move+0xe8>
		game_over();
 8003836:	f7fe fd07 	bl	8002248 <game_over>
		return;
 800383a:	e067      	b.n	800390c <move+0x1b8>
	}
	if (level >= 1) {
 800383c:	4b3b      	ldr	r3, [pc, #236]	; (800392c <move+0x1d8>)
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <move+0x100>
		if (checkCollision()) {
 8003844:	f7fe fffa 	bl	800283c <checkCollision>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <move+0x100>
			game_over();
 800384e:	f7fe fcfb 	bl	8002248 <game_over>
			return;
 8003852:	e05b      	b.n	800390c <move+0x1b8>
		}
	}
	if(level == 2) {
 8003854:	4b35      	ldr	r3, [pc, #212]	; (800392c <move+0x1d8>)
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d101      	bne.n	8003860 <move+0x10c>
		moveWall();
 800385c:	f7fe fe8e 	bl	800257c <moveWall>

	}
		 // mode 3
	 //mode 2 va 3
	//snake move with button
	if (button_count[6] == 1) {
 8003860:	4b33      	ldr	r3, [pc, #204]	; (8003930 <move+0x1dc>)
 8003862:	899b      	ldrh	r3, [r3, #12]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d10b      	bne.n	8003880 <move+0x12c>
		if (firstState != goDown) {
 8003868:	4b32      	ldr	r3, [pc, #200]	; (8003934 <move+0x1e0>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d036      	beq.n	80038de <move+0x18a>
			prevState = firstState;
 8003870:	4b30      	ldr	r3, [pc, #192]	; (8003934 <move+0x1e0>)
 8003872:	781a      	ldrb	r2, [r3, #0]
 8003874:	4b30      	ldr	r3, [pc, #192]	; (8003938 <move+0x1e4>)
 8003876:	701a      	strb	r2, [r3, #0]
			firstState = goUp;
 8003878:	4b2e      	ldr	r3, [pc, #184]	; (8003934 <move+0x1e0>)
 800387a:	2200      	movs	r2, #0
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	e02e      	b.n	80038de <move+0x18a>
		}
	}
	else if (button_count[14] == 1) {
 8003880:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <move+0x1dc>)
 8003882:	8b9b      	ldrh	r3, [r3, #28]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d10b      	bne.n	80038a0 <move+0x14c>
		if (firstState != goUp) {
 8003888:	4b2a      	ldr	r3, [pc, #168]	; (8003934 <move+0x1e0>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d026      	beq.n	80038de <move+0x18a>
			prevState = firstState;
 8003890:	4b28      	ldr	r3, [pc, #160]	; (8003934 <move+0x1e0>)
 8003892:	781a      	ldrb	r2, [r3, #0]
 8003894:	4b28      	ldr	r3, [pc, #160]	; (8003938 <move+0x1e4>)
 8003896:	701a      	strb	r2, [r3, #0]
			firstState = goDown;
 8003898:	4b26      	ldr	r3, [pc, #152]	; (8003934 <move+0x1e0>)
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]
 800389e:	e01e      	b.n	80038de <move+0x18a>
		}
	}
	else if (button_count[11] == 1) {
 80038a0:	4b23      	ldr	r3, [pc, #140]	; (8003930 <move+0x1dc>)
 80038a2:	8adb      	ldrh	r3, [r3, #22]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d10b      	bne.n	80038c0 <move+0x16c>
		if (firstState != goLeft) {
 80038a8:	4b22      	ldr	r3, [pc, #136]	; (8003934 <move+0x1e0>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d016      	beq.n	80038de <move+0x18a>
			prevState = firstState;
 80038b0:	4b20      	ldr	r3, [pc, #128]	; (8003934 <move+0x1e0>)
 80038b2:	781a      	ldrb	r2, [r3, #0]
 80038b4:	4b20      	ldr	r3, [pc, #128]	; (8003938 <move+0x1e4>)
 80038b6:	701a      	strb	r2, [r3, #0]
			firstState = goRight;
 80038b8:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <move+0x1e0>)
 80038ba:	2203      	movs	r2, #3
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	e00e      	b.n	80038de <move+0x18a>
		}
	}
	else if (button_count[9] == 1) {
 80038c0:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <move+0x1dc>)
 80038c2:	8a5b      	ldrh	r3, [r3, #18]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d10a      	bne.n	80038de <move+0x18a>
		if (firstState != goRight) {
 80038c8:	4b1a      	ldr	r3, [pc, #104]	; (8003934 <move+0x1e0>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d006      	beq.n	80038de <move+0x18a>
			prevState = firstState;
 80038d0:	4b18      	ldr	r3, [pc, #96]	; (8003934 <move+0x1e0>)
 80038d2:	781a      	ldrb	r2, [r3, #0]
 80038d4:	4b18      	ldr	r3, [pc, #96]	; (8003938 <move+0x1e4>)
 80038d6:	701a      	strb	r2, [r3, #0]
			firstState = goLeft;
 80038d8:	4b16      	ldr	r3, [pc, #88]	; (8003934 <move+0x1e0>)
 80038da:	2202      	movs	r2, #2
 80038dc:	701a      	strb	r2, [r3, #0]
		}
	}
	switch (firstState) {
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <move+0x1e0>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b03      	cmp	r3, #3
 80038e4:	d00c      	beq.n	8003900 <move+0x1ac>
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	dc0d      	bgt.n	8003906 <move+0x1b2>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <move+0x1a0>
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d003      	beq.n	80038fa <move+0x1a6>
 80038f2:	e008      	b.n	8003906 <move+0x1b2>
		case goUp:
			up();
 80038f4:	f7ff fbdc 	bl	80030b0 <up>
			break;
 80038f8:	e008      	b.n	800390c <move+0x1b8>
		case goDown:
			down();
 80038fa:	f7ff fce7 	bl	80032cc <down>
			break;
 80038fe:	e005      	b.n	800390c <move+0x1b8>
		case goRight:
			right();
 8003900:	f7ff f9d2 	bl	8002ca8 <right>
			break;
 8003904:	e002      	b.n	800390c <move+0x1b8>
		default:
			left();
 8003906:	f7ff fad1 	bl	8002eac <left>
			break;
 800390a:	bf00      	nop
	}
}
 800390c:	3704      	adds	r7, #4
 800390e:	46bd      	mov	sp, r7
 8003910:	bd90      	pop	{r4, r7, pc}
 8003912:	bf00      	nop
 8003914:	20000012 	.word	0x20000012
 8003918:	20000016 	.word	0x20000016
 800391c:	20000014 	.word	0x20000014
 8003920:	20000018 	.word	0x20000018
 8003924:	200005a4 	.word	0x200005a4
 8003928:	cccccccd 	.word	0xcccccccd
 800392c:	200002c6 	.word	0x200002c6
 8003930:	200001e0 	.word	0x200001e0
 8003934:	2000001a 	.word	0x2000001a
 8003938:	2000001b 	.word	0x2000001b

0800393c <wall>:

void wall(uint16_t difficult) {
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af04      	add	r7, sp, #16
 8003942:	4603      	mov	r3, r0
 8003944:	80fb      	strh	r3, [r7, #6]
	level = difficult;
 8003946:	4a4b      	ldr	r2, [pc, #300]	; (8003a74 <wall+0x138>)
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	8013      	strh	r3, [r2, #0]


	lcd_ShowStr(10,10,"SNAKE GAME!!!",WHITE,BLACK,16,0);
 800394c:	2300      	movs	r3, #0
 800394e:	9302      	str	r3, [sp, #8]
 8003950:	2310      	movs	r3, #16
 8003952:	9301      	str	r3, [sp, #4]
 8003954:	2300      	movs	r3, #0
 8003956:	9300      	str	r3, [sp, #0]
 8003958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800395c:	4a46      	ldr	r2, [pc, #280]	; (8003a78 <wall+0x13c>)
 800395e:	210a      	movs	r1, #10
 8003960:	200a      	movs	r0, #10
 8003962:	f7fd ff3d 	bl	80017e0 <lcd_ShowStr>


//	hiện thị score hiện tại
	lcd_ShowStr(10,30,"Diem so cua ban la: ",WHITE,BLACK,16,0);
 8003966:	2300      	movs	r3, #0
 8003968:	9302      	str	r3, [sp, #8]
 800396a:	2310      	movs	r3, #16
 800396c:	9301      	str	r3, [sp, #4]
 800396e:	2300      	movs	r3, #0
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003976:	4a41      	ldr	r2, [pc, #260]	; (8003a7c <wall+0x140>)
 8003978:	211e      	movs	r1, #30
 800397a:	200a      	movs	r0, #10
 800397c:	f7fd ff30 	bl	80017e0 <lcd_ShowStr>
	if(count < 10)
 8003980:	4b3f      	ldr	r3, [pc, #252]	; (8003a80 <wall+0x144>)
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	2b09      	cmp	r3, #9
 8003986:	d80e      	bhi.n	80039a6 <wall+0x6a>
		lcd_ShowIntNum(164,30,count,1,WHITE,BLACK,16);
 8003988:	4b3d      	ldr	r3, [pc, #244]	; (8003a80 <wall+0x144>)
 800398a:	881a      	ldrh	r2, [r3, #0]
 800398c:	2310      	movs	r3, #16
 800398e:	9302      	str	r3, [sp, #8]
 8003990:	2300      	movs	r3, #0
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	2301      	movs	r3, #1
 800399c:	211e      	movs	r1, #30
 800399e:	20a4      	movs	r0, #164	; 0xa4
 80039a0:	f7fd fcc6 	bl	8001330 <lcd_ShowIntNum>
 80039a4:	e00d      	b.n	80039c2 <wall+0x86>
	else
		lcd_ShowIntNum(164,30,count,2,WHITE,BLACK,16);
 80039a6:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <wall+0x144>)
 80039a8:	881a      	ldrh	r2, [r3, #0]
 80039aa:	2310      	movs	r3, #16
 80039ac:	9302      	str	r3, [sp, #8]
 80039ae:	2300      	movs	r3, #0
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	2302      	movs	r3, #2
 80039ba:	211e      	movs	r1, #30
 80039bc:	20a4      	movs	r0, #164	; 0xa4
 80039be:	f7fd fcb7 	bl	8001330 <lcd_ShowIntNum>


	// hiển thị max score
	lcd_ShowStr(10,50,"Diem so cao nhat la: ",WHITE,BLACK,16,0);
 80039c2:	2300      	movs	r3, #0
 80039c4:	9302      	str	r3, [sp, #8]
 80039c6:	2310      	movs	r3, #16
 80039c8:	9301      	str	r3, [sp, #4]
 80039ca:	2300      	movs	r3, #0
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039d2:	4a2c      	ldr	r2, [pc, #176]	; (8003a84 <wall+0x148>)
 80039d4:	2132      	movs	r1, #50	; 0x32
 80039d6:	200a      	movs	r0, #10
 80039d8:	f7fd ff02 	bl	80017e0 <lcd_ShowStr>
	if(max_count < 10)
 80039dc:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <wall+0x14c>)
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	2b09      	cmp	r3, #9
 80039e2:	d80e      	bhi.n	8003a02 <wall+0xc6>
		lcd_ShowIntNum(173,50,max_count,1,WHITE,BLACK,16);
 80039e4:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <wall+0x14c>)
 80039e6:	881a      	ldrh	r2, [r3, #0]
 80039e8:	2310      	movs	r3, #16
 80039ea:	9302      	str	r3, [sp, #8]
 80039ec:	2300      	movs	r3, #0
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	2301      	movs	r3, #1
 80039f8:	2132      	movs	r1, #50	; 0x32
 80039fa:	20ad      	movs	r0, #173	; 0xad
 80039fc:	f7fd fc98 	bl	8001330 <lcd_ShowIntNum>
 8003a00:	e00d      	b.n	8003a1e <wall+0xe2>
	else
		lcd_ShowIntNum(173,50,max_count,2,WHITE,BLACK,16);
 8003a02:	4b21      	ldr	r3, [pc, #132]	; (8003a88 <wall+0x14c>)
 8003a04:	881a      	ldrh	r2, [r3, #0]
 8003a06:	2310      	movs	r3, #16
 8003a08:	9302      	str	r3, [sp, #8]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	2302      	movs	r3, #2
 8003a16:	2132      	movs	r1, #50	; 0x32
 8003a18:	20ad      	movs	r0, #173	; 0xad
 8003a1a:	f7fd fc89 	bl	8001330 <lcd_ShowIntNum>


	lcd_ShowStr(10,70,"Do kho: ",WHITE,BLACK,16,0);
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9302      	str	r3, [sp, #8]
 8003a22:	2310      	movs	r3, #16
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	2300      	movs	r3, #0
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a2e:	4a17      	ldr	r2, [pc, #92]	; (8003a8c <wall+0x150>)
 8003a30:	2146      	movs	r1, #70	; 0x46
 8003a32:	200a      	movs	r0, #10
 8003a34:	f7fd fed4 	bl	80017e0 <lcd_ShowStr>
	lcd_ShowIntNum(70,70,difficult,1,WHITE,BLACK,16);
 8003a38:	88fa      	ldrh	r2, [r7, #6]
 8003a3a:	2310      	movs	r3, #16
 8003a3c:	9302      	str	r3, [sp, #8]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2301      	movs	r3, #1
 8003a4a:	2146      	movs	r1, #70	; 0x46
 8003a4c:	2046      	movs	r0, #70	; 0x46
 8003a4e:	f7fd fc6f 	bl	8001330 <lcd_ShowIntNum>

	lcd_DrawRectangle(0, 100, x_max, y_max, RED); //TẠO TƯỜNG
 8003a52:	23ef      	movs	r3, #239	; 0xef
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	f240 133f 	movw	r3, #319	; 0x13f
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8003a60:	9100      	str	r1, [sp, #0]
 8003a62:	2164      	movs	r1, #100	; 0x64
 8003a64:	2000      	movs	r0, #0
 8003a66:	f7fd fb40 	bl	80010ea <lcd_DrawRectangle>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	200002c6 	.word	0x200002c6
 8003a78:	0800ab6c 	.word	0x0800ab6c
 8003a7c:	0800ab7c 	.word	0x0800ab7c
 8003a80:	200005a4 	.word	0x200005a4
 8003a84:	0800ab94 	.word	0x0800ab94
 8003a88:	200005a6 	.word	0x200005a6
 8003a8c:	0800abac 	.word	0x0800abac

08003a90 <timer_init>:

uint16_t flag_Sensor = 0;
uint16_t timer_Sensor = 0;
uint16_t timer_Sensor_MUL = 0;

void timer_init(){
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003a94:	4803      	ldr	r0, [pc, #12]	; (8003aa4 <timer_init+0x14>)
 8003a96:	f003 fdb3 	bl	8007600 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8003a9a:	4803      	ldr	r0, [pc, #12]	; (8003aa8 <timer_init+0x18>)
 8003a9c:	f003 fd48 	bl	8007530 <HAL_TIM_Base_Start>
}
 8003aa0:	bf00      	nop
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20000658 	.word	0x20000658
 8003aa8:	20000610 	.word	0x20000610

08003aac <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8003ab6:	4a08      	ldr	r2, [pc, #32]	; (8003ad8 <setTimer2+0x2c>)
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8003abc:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <setTimer2+0x2c>)
 8003abe:	881a      	ldrh	r2, [r3, #0]
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <setTimer2+0x30>)
 8003ac2:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <setTimer2+0x34>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	801a      	strh	r2, [r3, #0]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	200005ac 	.word	0x200005ac
 8003adc:	200005aa 	.word	0x200005aa
 8003ae0:	200005a8 	.word	0x200005a8

08003ae4 <setTimerSendSensor>:

void setTimerSendSensor(uint16_t duration)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	80fb      	strh	r3, [r7, #6]
	timer_Sensor_MUL = duration/TIMER_CYCLE_2;
 8003aee:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <setTimerSendSensor+0x2c>)
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	8013      	strh	r3, [r2, #0]
	timer_Sensor = timer_Sensor_MUL;
 8003af4:	4b06      	ldr	r3, [pc, #24]	; (8003b10 <setTimerSendSensor+0x2c>)
 8003af6:	881a      	ldrh	r2, [r3, #0]
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <setTimerSendSensor+0x30>)
 8003afa:	801a      	strh	r2, [r3, #0]
	flag_Sensor = 0;
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <setTimerSendSensor+0x34>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	801a      	strh	r2, [r3, #0]
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	200005b2 	.word	0x200005b2
 8003b14:	200005b0 	.word	0x200005b0
 8003b18:	200005ae 	.word	0x200005ae

08003b1c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2c:	d12b      	bne.n	8003b86 <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(timer2_counter > 0){
 8003b2e:	4b18      	ldr	r3, [pc, #96]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d010      	beq.n	8003b58 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8003b36:	4b16      	ldr	r3, [pc, #88]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	4b14      	ldr	r3, [pc, #80]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003b40:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8003b4a:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003b52:	881a      	ldrh	r2, [r3, #0]
 8003b54:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003b56:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timer_Sensor > 0)
 8003b58:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d010      	beq.n	8003b82 <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timer_Sensor--;
 8003b60:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b6a:	801a      	strh	r2, [r3, #0]
			if (timer_Sensor <= 0)
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d106      	bne.n	8003b82 <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				flag_Sensor = 1;
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	801a      	strh	r2, [r3, #0]
				timer_Sensor = timer_Sensor_MUL;
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003b7c:	881a      	ldrh	r2, [r3, #0]
 8003b7e:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003b80:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8003b82:	f7fd fe9d 	bl	80018c0 <led7_Scan>
	}
}
 8003b86:	bf00      	nop
 8003b88:	3708      	adds	r7, #8
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	200005aa 	.word	0x200005aa
 8003b94:	200005a8 	.word	0x200005a8
 8003b98:	200005ac 	.word	0x200005ac
 8003b9c:	200005b0 	.word	0x200005b0
 8003ba0:	200005ae 	.word	0x200005ae
 8003ba4:	200005b2 	.word	0x200005b2

08003ba8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003bac:	4b17      	ldr	r3, [pc, #92]	; (8003c0c <MX_SPI1_Init+0x64>)
 8003bae:	4a18      	ldr	r2, [pc, #96]	; (8003c10 <MX_SPI1_Init+0x68>)
 8003bb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003bb2:	4b16      	ldr	r3, [pc, #88]	; (8003c0c <MX_SPI1_Init+0x64>)
 8003bb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003bba:	4b14      	ldr	r3, [pc, #80]	; (8003c0c <MX_SPI1_Init+0x64>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bc0:	4b12      	ldr	r3, [pc, #72]	; (8003c0c <MX_SPI1_Init+0x64>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc6:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <MX_SPI1_Init+0x64>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <MX_SPI1_Init+0x64>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bd2:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <MX_SPI1_Init+0x64>)
 8003bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bda:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <MX_SPI1_Init+0x64>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003be0:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <MX_SPI1_Init+0x64>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003be6:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <MX_SPI1_Init+0x64>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bec:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <MX_SPI1_Init+0x64>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003bf2:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <MX_SPI1_Init+0x64>)
 8003bf4:	220a      	movs	r2, #10
 8003bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bf8:	4804      	ldr	r0, [pc, #16]	; (8003c0c <MX_SPI1_Init+0x64>)
 8003bfa:	f002 fe5d 	bl	80068b8 <HAL_SPI_Init>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003c04:	f7fe f97e 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	200005b4 	.word	0x200005b4
 8003c10:	40013000 	.word	0x40013000

08003c14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	; 0x28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c1c:	f107 0314 	add.w	r3, r7, #20
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	605a      	str	r2, [r3, #4]
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a19      	ldr	r2, [pc, #100]	; (8003c98 <HAL_SPI_MspInit+0x84>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d12b      	bne.n	8003c8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <HAL_SPI_MspInit+0x88>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	4a17      	ldr	r2, [pc, #92]	; (8003c9c <HAL_SPI_MspInit+0x88>)
 8003c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c44:	6453      	str	r3, [r2, #68]	; 0x44
 8003c46:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <HAL_SPI_MspInit+0x88>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <HAL_SPI_MspInit+0x88>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a10      	ldr	r2, [pc, #64]	; (8003c9c <HAL_SPI_MspInit+0x88>)
 8003c5c:	f043 0302 	orr.w	r3, r3, #2
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <HAL_SPI_MspInit+0x88>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003c6e:	2338      	movs	r3, #56	; 0x38
 8003c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c72:	2302      	movs	r3, #2
 8003c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c7e:	2305      	movs	r3, #5
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c82:	f107 0314 	add.w	r3, r7, #20
 8003c86:	4619      	mov	r1, r3
 8003c88:	4805      	ldr	r0, [pc, #20]	; (8003ca0 <HAL_SPI_MspInit+0x8c>)
 8003c8a:	f001 fe83 	bl	8005994 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003c8e:	bf00      	nop
 8003c90:	3728      	adds	r7, #40	; 0x28
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40013000 	.word	0x40013000
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40020400 	.word	0x40020400

08003ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	4a0f      	ldr	r2, [pc, #60]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cba:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	4a08      	ldr	r2, [pc, #32]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd6:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_MspInit+0x4c>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800

08003cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cf8:	e7fe      	b.n	8003cf8 <NMI_Handler+0x4>

08003cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cfe:	e7fe      	b.n	8003cfe <HardFault_Handler+0x4>

08003d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d04:	e7fe      	b.n	8003d04 <MemManage_Handler+0x4>

08003d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d06:	b480      	push	{r7}
 8003d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d0a:	e7fe      	b.n	8003d0a <BusFault_Handler+0x4>

08003d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d10:	e7fe      	b.n	8003d10 <UsageFault_Handler+0x4>

08003d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d12:	b480      	push	{r7}
 8003d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d24:	bf00      	nop
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d32:	bf00      	nop
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d40:	f000 fcbe 	bl	80046c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d44:	bf00      	nop
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003d4c:	4802      	ldr	r0, [pc, #8]	; (8003d58 <TIM2_IRQHandler+0x10>)
 8003d4e:	f003 fd20 	bl	8007792 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000658 	.word	0x20000658

08003d5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d60:	4802      	ldr	r0, [pc, #8]	; (8003d6c <USART1_IRQHandler+0x10>)
 8003d62:	f004 fc5b 	bl	800861c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200006ec 	.word	0x200006ec

08003d70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d74:	4802      	ldr	r0, [pc, #8]	; (8003d80 <USART2_IRQHandler+0x10>)
 8003d76:	f004 fc51 	bl	800861c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000730 	.word	0x20000730

08003d84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d88:	4802      	ldr	r0, [pc, #8]	; (8003d94 <DMA2_Stream0_IRQHandler+0x10>)
 8003d8a:	f001 fb99 	bl	80054c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000180 	.word	0x20000180

08003d98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
	return 1;
 8003d9c:	2301      	movs	r3, #1
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <_kill>:

int _kill(int pid, int sig)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003db2:	f005 fe3b 	bl	8009a2c <__errno>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2216      	movs	r2, #22
 8003dba:	601a      	str	r2, [r3, #0]
	return -1;
 8003dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <_exit>:

void _exit (int status)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ffe7 	bl	8003da8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003dda:	e7fe      	b.n	8003dda <_exit+0x12>

08003ddc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e00a      	b.n	8003e04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003dee:	f3af 8000 	nop.w
 8003df2:	4601      	mov	r1, r0
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	60ba      	str	r2, [r7, #8]
 8003dfa:	b2ca      	uxtb	r2, r1
 8003dfc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	3301      	adds	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	dbf0      	blt.n	8003dee <_read+0x12>
	}

return len;
 8003e0c:	687b      	ldr	r3, [r7, #4]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e009      	b.n	8003e3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	60ba      	str	r2, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	dbf1      	blt.n	8003e28 <_write+0x12>
	}
	return len;
 8003e44:	687b      	ldr	r3, [r7, #4]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <_close>:

int _close(int file)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
	return -1;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e76:	605a      	str	r2, [r3, #4]
	return 0;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <_isatty>:

int _isatty(int file)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
	return 1;
 8003e8e:	2301      	movs	r3, #1
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
	return 0;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ec0:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <_sbrk+0x5c>)
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <_sbrk+0x60>)
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <_sbrk+0x64>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ed4:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <_sbrk+0x64>)
 8003ed6:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <_sbrk+0x68>)
 8003ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <_sbrk+0x64>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d207      	bcs.n	8003ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ee8:	f005 fda0 	bl	8009a2c <__errno>
 8003eec:	4603      	mov	r3, r0
 8003eee:	220c      	movs	r2, #12
 8003ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef6:	e009      	b.n	8003f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ef8:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <_sbrk+0x64>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003efe:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <_sbrk+0x64>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	4a05      	ldr	r2, [pc, #20]	; (8003f1c <_sbrk+0x64>)
 8003f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20020000 	.word	0x20020000
 8003f18:	00000400 	.word	0x00000400
 8003f1c:	2000060c 	.word	0x2000060c
 8003f20:	200008c8 	.word	0x200008c8

08003f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <SystemInit+0x20>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	4a05      	ldr	r2, [pc, #20]	; (8003f44 <SystemInit+0x20>)
 8003f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	e000ed00 	.word	0xe000ed00

08003f48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f4e:	f107 0308 	add.w	r3, r7, #8
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	609a      	str	r2, [r3, #8]
 8003f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f5c:	463b      	mov	r3, r7
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f64:	4b1e      	ldr	r3, [pc, #120]	; (8003fe0 <MX_TIM1_Init+0x98>)
 8003f66:	4a1f      	ldr	r2, [pc, #124]	; (8003fe4 <MX_TIM1_Init+0x9c>)
 8003f68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8003f6a:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <MX_TIM1_Init+0x98>)
 8003f6c:	2253      	movs	r2, #83	; 0x53
 8003f6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f70:	4b1b      	ldr	r3, [pc, #108]	; (8003fe0 <MX_TIM1_Init+0x98>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003f76:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <MX_TIM1_Init+0x98>)
 8003f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f7e:	4b18      	ldr	r3, [pc, #96]	; (8003fe0 <MX_TIM1_Init+0x98>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f84:	4b16      	ldr	r3, [pc, #88]	; (8003fe0 <MX_TIM1_Init+0x98>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f8a:	4b15      	ldr	r3, [pc, #84]	; (8003fe0 <MX_TIM1_Init+0x98>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f90:	4813      	ldr	r0, [pc, #76]	; (8003fe0 <MX_TIM1_Init+0x98>)
 8003f92:	f003 fa7d 	bl	8007490 <HAL_TIM_Base_Init>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003f9c:	f7fd ffb2 	bl	8001f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fa4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003fa6:	f107 0308 	add.w	r3, r7, #8
 8003faa:	4619      	mov	r1, r3
 8003fac:	480c      	ldr	r0, [pc, #48]	; (8003fe0 <MX_TIM1_Init+0x98>)
 8003fae:	f003 fdbb 	bl	8007b28 <HAL_TIM_ConfigClockSource>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003fb8:	f7fd ffa4 	bl	8001f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fc4:	463b      	mov	r3, r7
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4805      	ldr	r0, [pc, #20]	; (8003fe0 <MX_TIM1_Init+0x98>)
 8003fca:	f004 f987 	bl	80082dc <HAL_TIMEx_MasterConfigSynchronization>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003fd4:	f7fd ff96 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003fd8:	bf00      	nop
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000610 	.word	0x20000610
 8003fe4:	40010000 	.word	0x40010000

08003fe8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fee:	f107 0308 	add.w	r3, r7, #8
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	605a      	str	r2, [r3, #4]
 8003ff8:	609a      	str	r2, [r3, #8]
 8003ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ffc:	463b      	mov	r3, r7
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004004:	4b1d      	ldr	r3, [pc, #116]	; (800407c <MX_TIM2_Init+0x94>)
 8004006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800400a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <MX_TIM2_Init+0x94>)
 800400e:	f240 3247 	movw	r2, #839	; 0x347
 8004012:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004014:	4b19      	ldr	r3, [pc, #100]	; (800407c <MX_TIM2_Init+0x94>)
 8004016:	2200      	movs	r2, #0
 8004018:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800401a:	4b18      	ldr	r3, [pc, #96]	; (800407c <MX_TIM2_Init+0x94>)
 800401c:	2263      	movs	r2, #99	; 0x63
 800401e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004020:	4b16      	ldr	r3, [pc, #88]	; (800407c <MX_TIM2_Init+0x94>)
 8004022:	2200      	movs	r2, #0
 8004024:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004026:	4b15      	ldr	r3, [pc, #84]	; (800407c <MX_TIM2_Init+0x94>)
 8004028:	2200      	movs	r2, #0
 800402a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800402c:	4813      	ldr	r0, [pc, #76]	; (800407c <MX_TIM2_Init+0x94>)
 800402e:	f003 fa2f 	bl	8007490 <HAL_TIM_Base_Init>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004038:	f7fd ff64 	bl	8001f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800403c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004040:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004042:	f107 0308 	add.w	r3, r7, #8
 8004046:	4619      	mov	r1, r3
 8004048:	480c      	ldr	r0, [pc, #48]	; (800407c <MX_TIM2_Init+0x94>)
 800404a:	f003 fd6d 	bl	8007b28 <HAL_TIM_ConfigClockSource>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004054:	f7fd ff56 	bl	8001f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004058:	2300      	movs	r3, #0
 800405a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800405c:	2300      	movs	r3, #0
 800405e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004060:	463b      	mov	r3, r7
 8004062:	4619      	mov	r1, r3
 8004064:	4805      	ldr	r0, [pc, #20]	; (800407c <MX_TIM2_Init+0x94>)
 8004066:	f004 f939 	bl	80082dc <HAL_TIMEx_MasterConfigSynchronization>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004070:	f7fd ff48 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004074:	bf00      	nop
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	20000658 	.word	0x20000658

08004080 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004086:	1d3b      	adds	r3, r7, #4
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	60da      	str	r2, [r3, #12]
 8004092:	611a      	str	r2, [r3, #16]
 8004094:	615a      	str	r2, [r3, #20]
 8004096:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004098:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <MX_TIM13_Init+0x94>)
 800409a:	4a1f      	ldr	r2, [pc, #124]	; (8004118 <MX_TIM13_Init+0x98>)
 800409c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 800409e:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <MX_TIM13_Init+0x94>)
 80040a0:	f240 3247 	movw	r2, #839	; 0x347
 80040a4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040a6:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <MX_TIM13_Init+0x94>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80040ac:	4b19      	ldr	r3, [pc, #100]	; (8004114 <MX_TIM13_Init+0x94>)
 80040ae:	2263      	movs	r2, #99	; 0x63
 80040b0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040b2:	4b18      	ldr	r3, [pc, #96]	; (8004114 <MX_TIM13_Init+0x94>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040b8:	4b16      	ldr	r3, [pc, #88]	; (8004114 <MX_TIM13_Init+0x94>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80040be:	4815      	ldr	r0, [pc, #84]	; (8004114 <MX_TIM13_Init+0x94>)
 80040c0:	f003 f9e6 	bl	8007490 <HAL_TIM_Base_Init>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80040ca:	f7fd ff1b 	bl	8001f04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80040ce:	4811      	ldr	r0, [pc, #68]	; (8004114 <MX_TIM13_Init+0x94>)
 80040d0:	f003 fb06 	bl	80076e0 <HAL_TIM_PWM_Init>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80040da:	f7fd ff13 	bl	8001f04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040de:	2360      	movs	r3, #96	; 0x60
 80040e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040ee:	1d3b      	adds	r3, r7, #4
 80040f0:	2200      	movs	r2, #0
 80040f2:	4619      	mov	r1, r3
 80040f4:	4807      	ldr	r0, [pc, #28]	; (8004114 <MX_TIM13_Init+0x94>)
 80040f6:	f003 fc55 	bl	80079a4 <HAL_TIM_PWM_ConfigChannel>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8004100:	f7fd ff00 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004104:	4803      	ldr	r0, [pc, #12]	; (8004114 <MX_TIM13_Init+0x94>)
 8004106:	f000 f85b 	bl	80041c0 <HAL_TIM_MspPostInit>

}
 800410a:	bf00      	nop
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	200006a0 	.word	0x200006a0
 8004118:	40001c00 	.word	0x40001c00

0800411c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a22      	ldr	r2, [pc, #136]	; (80041b4 <HAL_TIM_Base_MspInit+0x98>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d10e      	bne.n	800414c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	4b21      	ldr	r3, [pc, #132]	; (80041b8 <HAL_TIM_Base_MspInit+0x9c>)
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	4a20      	ldr	r2, [pc, #128]	; (80041b8 <HAL_TIM_Base_MspInit+0x9c>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	6453      	str	r3, [r2, #68]	; 0x44
 800413e:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <HAL_TIM_Base_MspInit+0x9c>)
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800414a:	e02e      	b.n	80041aa <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004154:	d116      	bne.n	8004184 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <HAL_TIM_Base_MspInit+0x9c>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	4a16      	ldr	r2, [pc, #88]	; (80041b8 <HAL_TIM_Base_MspInit+0x9c>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6413      	str	r3, [r2, #64]	; 0x40
 8004166:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <HAL_TIM_Base_MspInit+0x9c>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004172:	2200      	movs	r2, #0
 8004174:	2100      	movs	r1, #0
 8004176:	201c      	movs	r0, #28
 8004178:	f000 ffd3 	bl	8005122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800417c:	201c      	movs	r0, #28
 800417e:	f000 ffec 	bl	800515a <HAL_NVIC_EnableIRQ>
}
 8004182:	e012      	b.n	80041aa <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a0c      	ldr	r2, [pc, #48]	; (80041bc <HAL_TIM_Base_MspInit+0xa0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d10d      	bne.n	80041aa <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_TIM_Base_MspInit+0x9c>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	4a08      	ldr	r2, [pc, #32]	; (80041b8 <HAL_TIM_Base_MspInit+0x9c>)
 8004198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419c:	6413      	str	r3, [r2, #64]	; 0x40
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <HAL_TIM_Base_MspInit+0x9c>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
}
 80041aa:	bf00      	nop
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40010000 	.word	0x40010000
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40001c00 	.word	0x40001c00

080041c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c8:	f107 030c 	add.w	r3, r7, #12
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	60da      	str	r2, [r3, #12]
 80041d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a12      	ldr	r2, [pc, #72]	; (8004228 <HAL_TIM_MspPostInit+0x68>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d11e      	bne.n	8004220 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80041e2:	2300      	movs	r3, #0
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	4b11      	ldr	r3, [pc, #68]	; (800422c <HAL_TIM_MspPostInit+0x6c>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	4a10      	ldr	r2, [pc, #64]	; (800422c <HAL_TIM_MspPostInit+0x6c>)
 80041ec:	f043 0320 	orr.w	r3, r3, #32
 80041f0:	6313      	str	r3, [r2, #48]	; 0x30
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <HAL_TIM_MspPostInit+0x6c>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	60bb      	str	r3, [r7, #8]
 80041fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004202:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004204:	2302      	movs	r3, #2
 8004206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420c:	2300      	movs	r3, #0
 800420e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004210:	2309      	movs	r3, #9
 8004212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004214:	f107 030c 	add.w	r3, r7, #12
 8004218:	4619      	mov	r1, r3
 800421a:	4805      	ldr	r0, [pc, #20]	; (8004230 <HAL_TIM_MspPostInit+0x70>)
 800421c:	f001 fbba 	bl	8005994 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8004220:	bf00      	nop
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40001c00 	.word	0x40001c00
 800422c:	40023800 	.word	0x40023800
 8004230:	40021400 	.word	0x40021400

08004234 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8004238:	2201      	movs	r2, #1
 800423a:	4906      	ldr	r1, [pc, #24]	; (8004254 <uart_init_esp+0x20>)
 800423c:	4806      	ldr	r0, [pc, #24]	; (8004258 <uart_init_esp+0x24>)
 800423e:	f004 f9bc 	bl	80085ba <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8004242:	2201      	movs	r2, #1
 8004244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004248:	4804      	ldr	r0, [pc, #16]	; (800425c <uart_init_esp+0x28>)
 800424a:	f001 fd3f 	bl	8005ccc <HAL_GPIO_WritePin>
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	200006e9 	.word	0x200006e9
 8004258:	20000730 	.word	0x20000730
 800425c:	40021400 	.word	0x40021400

08004260 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 800426c:	887a      	ldrh	r2, [r7, #2]
 800426e:	230a      	movs	r3, #10
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	4803      	ldr	r0, [pc, #12]	; (8004280 <uart_EspSendBytes+0x20>)
 8004274:	f004 f90f 	bl	8008496 <HAL_UART_Transmit>
}
 8004278:	bf00      	nop
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000730 	.word	0x20000730

08004284 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a19      	ldr	r2, [pc, #100]	; (80042f8 <HAL_UART_RxCpltCallback+0x74>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d10a      	bne.n	80042ac <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8004296:	230a      	movs	r3, #10
 8004298:	2201      	movs	r2, #1
 800429a:	4918      	ldr	r1, [pc, #96]	; (80042fc <HAL_UART_RxCpltCallback+0x78>)
 800429c:	4818      	ldr	r0, [pc, #96]	; (8004300 <HAL_UART_RxCpltCallback+0x7c>)
 800429e:	f004 f8fa 	bl	8008496 <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80042a2:	2201      	movs	r2, #1
 80042a4:	4915      	ldr	r1, [pc, #84]	; (80042fc <HAL_UART_RxCpltCallback+0x78>)
 80042a6:	4816      	ldr	r0, [pc, #88]	; (8004300 <HAL_UART_RxCpltCallback+0x7c>)
 80042a8:	f004 f987 	bl	80085ba <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a14      	ldr	r2, [pc, #80]	; (8004304 <HAL_UART_RxCpltCallback+0x80>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d11b      	bne.n	80042ee <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 80042b6:	4b14      	ldr	r3, [pc, #80]	; (8004308 <HAL_UART_RxCpltCallback+0x84>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b4f      	cmp	r3, #79	; 0x4f
 80042bc:	d103      	bne.n	80042c6 <HAL_UART_RxCpltCallback+0x42>
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <HAL_UART_RxCpltCallback+0x88>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	e00e      	b.n	80042e4 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_UART_RxCpltCallback+0x84>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b61      	cmp	r3, #97	; 0x61
 80042cc:	d103      	bne.n	80042d6 <HAL_UART_RxCpltCallback+0x52>
 80042ce:	4b10      	ldr	r3, [pc, #64]	; (8004310 <HAL_UART_RxCpltCallback+0x8c>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	701a      	strb	r2, [r3, #0]
 80042d4:	e006      	b.n	80042e4 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 80042d6:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <HAL_UART_RxCpltCallback+0x84>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b41      	cmp	r3, #65	; 0x41
 80042dc:	d102      	bne.n	80042e4 <HAL_UART_RxCpltCallback+0x60>
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <HAL_UART_RxCpltCallback+0x8c>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 80042e4:	2201      	movs	r2, #1
 80042e6:	4908      	ldr	r1, [pc, #32]	; (8004308 <HAL_UART_RxCpltCallback+0x84>)
 80042e8:	480a      	ldr	r0, [pc, #40]	; (8004314 <HAL_UART_RxCpltCallback+0x90>)
 80042ea:	f004 f966 	bl	80085ba <HAL_UART_Receive_IT>
	}
}
 80042ee:	bf00      	nop
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40011000 	.word	0x40011000
 80042fc:	200006e8 	.word	0x200006e8
 8004300:	200006ec 	.word	0x200006ec
 8004304:	40004400 	.word	0x40004400
 8004308:	200006e9 	.word	0x200006e9
 800430c:	200006ea 	.word	0x200006ea
 8004310:	200002b8 	.word	0x200002b8
 8004314:	20000730 	.word	0x20000730

08004318 <uartSendSensor>:
	if(check_esp == 1) return 1;
	return 0;
}
//snprintf(str2, sizeof(str2), "%d", val);

void uartSendSensor() {
 8004318:	b580      	push	{r7, lr}
 800431a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800431e:	af00      	add	r7, sp, #0
	char *str = "#";
 8004320:	4b36      	ldr	r3, [pc, #216]	; (80043fc <uartSendSensor+0xe4>)
 8004322:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
	char str1[50] = "SENSOR#";
 8004326:	4a36      	ldr	r2, [pc, #216]	; (8004400 <uartSendSensor+0xe8>)
 8004328:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800432c:	6810      	ldr	r0, [r2, #0]
 800432e:	6851      	ldr	r1, [r2, #4]
 8004330:	c303      	stmia	r3!, {r0, r1}
 8004332:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004336:	222a      	movs	r2, #42	; 0x2a
 8004338:	2100      	movs	r1, #0
 800433a:	4618      	mov	r0, r3
 800433c:	f005 fb19 	bl	8009972 <memset>
//	char str3[60] = "Temperature: ";
	char *str2[50];
	snprintf(str2, sizeof(str2), "%d", (uint16_t)sensor_GetTemperature());
 8004340:	f7fd fe1a 	bl	8001f78 <sensor_GetTemperature>
 8004344:	eef0 7a40 	vmov.f32	s15, s0
 8004348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800434c:	ee17 3a90 	vmov	r3, s15
 8004350:	b29b      	uxth	r3, r3
 8004352:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8004356:	4a2b      	ldr	r2, [pc, #172]	; (8004404 <uartSendSensor+0xec>)
 8004358:	21c8      	movs	r1, #200	; 0xc8
 800435a:	f005 fa93 	bl	8009884 <sniprintf>
	strcat(str1, str2);
 800435e:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8004362:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004366:	4611      	mov	r1, r2
 8004368:	4618      	mov	r0, r3
 800436a:	f005 fb0a 	bl	8009982 <strcat>
	strcat(str1,str);
 800436e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004372:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8004376:	4618      	mov	r0, r3
 8004378:	f005 fb03 	bl	8009982 <strcat>
	//get ánh sáng
	char *str3[50];
	snprintf(str3, sizeof(str3), "%d", (uint16_t)sensor_GetLight());
 800437c:	f7fd fde4 	bl	8001f48 <sensor_GetLight>
 8004380:	4603      	mov	r3, r0
 8004382:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8004386:	4a1f      	ldr	r2, [pc, #124]	; (8004404 <uartSendSensor+0xec>)
 8004388:	21c8      	movs	r1, #200	; 0xc8
 800438a:	f005 fa7b 	bl	8009884 <sniprintf>
	strcat(str1, str3);
 800438e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8004392:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f005 faf2 	bl	8009982 <strcat>
	strcat(str1,str);
 800439e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80043a2:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 80043a6:	4618      	mov	r0, r3
 80043a8:	f005 faeb 	bl	8009982 <strcat>
	// get Power
	char *str4[50];

	snprintf(str4, sizeof(str4), "%d", (uint16_t)sensor_GetPotentiometer());
 80043ac:	f7fd fdd8 	bl	8001f60 <sensor_GetPotentiometer>
 80043b0:	4603      	mov	r3, r0
 80043b2:	4638      	mov	r0, r7
 80043b4:	4a13      	ldr	r2, [pc, #76]	; (8004404 <uartSendSensor+0xec>)
 80043b6:	21c8      	movs	r1, #200	; 0xc8
 80043b8:	f005 fa64 	bl	8009884 <sniprintf>
	strcat(str1, str4);
 80043bc:	463a      	mov	r2, r7
 80043be:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80043c2:	4611      	mov	r1, r2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f005 fadc 	bl	8009982 <strcat>
	strcat(str1,str);
 80043ca:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80043ce:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 80043d2:	4618      	mov	r0, r3
 80043d4:	f005 fad5 	bl	8009982 <strcat>
	// gửi data
	uart_EspSendBytes(str1, strlen(str1));
 80043d8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fb fef7 	bl	80001d0 <strlen>
 80043e2:	4603      	mov	r3, r0
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff ff37 	bl	8004260 <uart_EspSendBytes>
}
 80043f2:	bf00      	nop
 80043f4:	f507 7724 	add.w	r7, r7, #656	; 0x290
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	0800abcc 	.word	0x0800abcc
 8004400:	0800abd0 	.word	0x0800abd0
 8004404:	0800abc0 	.word	0x0800abc0

08004408 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <MX_USART1_UART_Init+0x4c>)
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <MX_USART1_UART_Init+0x50>)
 8004410:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <MX_USART1_UART_Init+0x4c>)
 8004414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004418:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <MX_USART1_UART_Init+0x4c>)
 800441c:	2200      	movs	r2, #0
 800441e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <MX_USART1_UART_Init+0x4c>)
 8004422:	2200      	movs	r2, #0
 8004424:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004426:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <MX_USART1_UART_Init+0x4c>)
 8004428:	2200      	movs	r2, #0
 800442a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <MX_USART1_UART_Init+0x4c>)
 800442e:	220c      	movs	r2, #12
 8004430:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <MX_USART1_UART_Init+0x4c>)
 8004434:	2200      	movs	r2, #0
 8004436:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <MX_USART1_UART_Init+0x4c>)
 800443a:	2200      	movs	r2, #0
 800443c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800443e:	4805      	ldr	r0, [pc, #20]	; (8004454 <MX_USART1_UART_Init+0x4c>)
 8004440:	f003 ffdc 	bl	80083fc <HAL_UART_Init>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800444a:	f7fd fd5b 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800444e:	bf00      	nop
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	200006ec 	.word	0x200006ec
 8004458:	40011000 	.word	0x40011000

0800445c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004460:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <MX_USART2_UART_Init+0x4c>)
 8004462:	4a12      	ldr	r2, [pc, #72]	; (80044ac <MX_USART2_UART_Init+0x50>)
 8004464:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004466:	4b10      	ldr	r3, [pc, #64]	; (80044a8 <MX_USART2_UART_Init+0x4c>)
 8004468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800446c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800446e:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <MX_USART2_UART_Init+0x4c>)
 8004470:	2200      	movs	r2, #0
 8004472:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <MX_USART2_UART_Init+0x4c>)
 8004476:	2200      	movs	r2, #0
 8004478:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <MX_USART2_UART_Init+0x4c>)
 800447c:	2200      	movs	r2, #0
 800447e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <MX_USART2_UART_Init+0x4c>)
 8004482:	220c      	movs	r2, #12
 8004484:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <MX_USART2_UART_Init+0x4c>)
 8004488:	2200      	movs	r2, #0
 800448a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <MX_USART2_UART_Init+0x4c>)
 800448e:	2200      	movs	r2, #0
 8004490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004492:	4805      	ldr	r0, [pc, #20]	; (80044a8 <MX_USART2_UART_Init+0x4c>)
 8004494:	f003 ffb2 	bl	80083fc <HAL_UART_Init>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800449e:	f7fd fd31 	bl	8001f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000730 	.word	0x20000730
 80044ac:	40004400 	.word	0x40004400

080044b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08c      	sub	sp, #48	; 0x30
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b8:	f107 031c 	add.w	r3, r7, #28
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a3a      	ldr	r2, [pc, #232]	; (80045b8 <HAL_UART_MspInit+0x108>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d135      	bne.n	800453e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	4b39      	ldr	r3, [pc, #228]	; (80045bc <HAL_UART_MspInit+0x10c>)
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	4a38      	ldr	r2, [pc, #224]	; (80045bc <HAL_UART_MspInit+0x10c>)
 80044dc:	f043 0310 	orr.w	r3, r3, #16
 80044e0:	6453      	str	r3, [r2, #68]	; 0x44
 80044e2:	4b36      	ldr	r3, [pc, #216]	; (80045bc <HAL_UART_MspInit+0x10c>)
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	4b32      	ldr	r3, [pc, #200]	; (80045bc <HAL_UART_MspInit+0x10c>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	4a31      	ldr	r2, [pc, #196]	; (80045bc <HAL_UART_MspInit+0x10c>)
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	6313      	str	r3, [r2, #48]	; 0x30
 80044fe:	4b2f      	ldr	r3, [pc, #188]	; (80045bc <HAL_UART_MspInit+0x10c>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800450a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800450e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004510:	2302      	movs	r3, #2
 8004512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004514:	2300      	movs	r3, #0
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004518:	2303      	movs	r3, #3
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800451c:	2307      	movs	r3, #7
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004520:	f107 031c 	add.w	r3, r7, #28
 8004524:	4619      	mov	r1, r3
 8004526:	4826      	ldr	r0, [pc, #152]	; (80045c0 <HAL_UART_MspInit+0x110>)
 8004528:	f001 fa34 	bl	8005994 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800452c:	2200      	movs	r2, #0
 800452e:	2100      	movs	r1, #0
 8004530:	2025      	movs	r0, #37	; 0x25
 8004532:	f000 fdf6 	bl	8005122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004536:	2025      	movs	r0, #37	; 0x25
 8004538:	f000 fe0f 	bl	800515a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800453c:	e038      	b.n	80045b0 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a20      	ldr	r2, [pc, #128]	; (80045c4 <HAL_UART_MspInit+0x114>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d133      	bne.n	80045b0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004548:	2300      	movs	r3, #0
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <HAL_UART_MspInit+0x10c>)
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	4a1a      	ldr	r2, [pc, #104]	; (80045bc <HAL_UART_MspInit+0x10c>)
 8004552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004556:	6413      	str	r3, [r2, #64]	; 0x40
 8004558:	4b18      	ldr	r3, [pc, #96]	; (80045bc <HAL_UART_MspInit+0x10c>)
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	4b14      	ldr	r3, [pc, #80]	; (80045bc <HAL_UART_MspInit+0x10c>)
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	4a13      	ldr	r2, [pc, #76]	; (80045bc <HAL_UART_MspInit+0x10c>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6313      	str	r3, [r2, #48]	; 0x30
 8004574:	4b11      	ldr	r3, [pc, #68]	; (80045bc <HAL_UART_MspInit+0x10c>)
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004580:	230c      	movs	r3, #12
 8004582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004584:	2302      	movs	r3, #2
 8004586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004588:	2300      	movs	r3, #0
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800458c:	2303      	movs	r3, #3
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004590:	2307      	movs	r3, #7
 8004592:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004594:	f107 031c 	add.w	r3, r7, #28
 8004598:	4619      	mov	r1, r3
 800459a:	4809      	ldr	r0, [pc, #36]	; (80045c0 <HAL_UART_MspInit+0x110>)
 800459c:	f001 f9fa 	bl	8005994 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80045a0:	2200      	movs	r2, #0
 80045a2:	2100      	movs	r1, #0
 80045a4:	2026      	movs	r0, #38	; 0x26
 80045a6:	f000 fdbc 	bl	8005122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80045aa:	2026      	movs	r0, #38	; 0x26
 80045ac:	f000 fdd5 	bl	800515a <HAL_NVIC_EnableIRQ>
}
 80045b0:	bf00      	nop
 80045b2:	3730      	adds	r7, #48	; 0x30
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40011000 	.word	0x40011000
 80045bc:	40023800 	.word	0x40023800
 80045c0:	40020000 	.word	0x40020000
 80045c4:	40004400 	.word	0x40004400

080045c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80045c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004600 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80045cc:	480d      	ldr	r0, [pc, #52]	; (8004604 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80045ce:	490e      	ldr	r1, [pc, #56]	; (8004608 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80045d0:	4a0e      	ldr	r2, [pc, #56]	; (800460c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80045d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045d4:	e002      	b.n	80045dc <LoopCopyDataInit>

080045d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045da:	3304      	adds	r3, #4

080045dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045e0:	d3f9      	bcc.n	80045d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045e2:	4a0b      	ldr	r2, [pc, #44]	; (8004610 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80045e4:	4c0b      	ldr	r4, [pc, #44]	; (8004614 <LoopFillZerobss+0x26>)
  movs r3, #0
 80045e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045e8:	e001      	b.n	80045ee <LoopFillZerobss>

080045ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045ec:	3204      	adds	r2, #4

080045ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045f0:	d3fb      	bcc.n	80045ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80045f2:	f7ff fc97 	bl	8003f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045f6:	f005 fa1f 	bl	8009a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045fa:	f7fd fa11 	bl	8001a20 <main>
  bx  lr    
 80045fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004600:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004608:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 800460c:	08011bb0 	.word	0x08011bb0
  ldr r2, =_sbss
 8004610:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8004614:	200008c4 	.word	0x200008c4

08004618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004618:	e7fe      	b.n	8004618 <ADC_IRQHandler>
	...

0800461c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004620:	4b0e      	ldr	r3, [pc, #56]	; (800465c <HAL_Init+0x40>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a0d      	ldr	r2, [pc, #52]	; (800465c <HAL_Init+0x40>)
 8004626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800462a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800462c:	4b0b      	ldr	r3, [pc, #44]	; (800465c <HAL_Init+0x40>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a0a      	ldr	r2, [pc, #40]	; (800465c <HAL_Init+0x40>)
 8004632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004638:	4b08      	ldr	r3, [pc, #32]	; (800465c <HAL_Init+0x40>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a07      	ldr	r2, [pc, #28]	; (800465c <HAL_Init+0x40>)
 800463e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004644:	2003      	movs	r0, #3
 8004646:	f000 fd61 	bl	800510c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800464a:	200f      	movs	r0, #15
 800464c:	f000 f808 	bl	8004660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004650:	f7ff fb28 	bl	8003ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40023c00 	.word	0x40023c00

08004660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004668:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <HAL_InitTick+0x54>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <HAL_InitTick+0x58>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	4619      	mov	r1, r3
 8004672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004676:	fbb3 f3f1 	udiv	r3, r3, r1
 800467a:	fbb2 f3f3 	udiv	r3, r2, r3
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fd79 	bl	8005176 <HAL_SYSTICK_Config>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e00e      	b.n	80046ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b0f      	cmp	r3, #15
 8004692:	d80a      	bhi.n	80046aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004694:	2200      	movs	r2, #0
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	f04f 30ff 	mov.w	r0, #4294967295
 800469c:	f000 fd41 	bl	8005122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046a0:	4a06      	ldr	r2, [pc, #24]	; (80046bc <HAL_InitTick+0x5c>)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	e000      	b.n	80046ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	200000b4 	.word	0x200000b4
 80046b8:	200000bc 	.word	0x200000bc
 80046bc:	200000b8 	.word	0x200000b8

080046c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046c4:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <HAL_IncTick+0x20>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <HAL_IncTick+0x24>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4413      	add	r3, r2
 80046d0:	4a04      	ldr	r2, [pc, #16]	; (80046e4 <HAL_IncTick+0x24>)
 80046d2:	6013      	str	r3, [r2, #0]
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	200000bc 	.word	0x200000bc
 80046e4:	20000774 	.word	0x20000774

080046e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  return uwTick;
 80046ec:	4b03      	ldr	r3, [pc, #12]	; (80046fc <HAL_GetTick+0x14>)
 80046ee:	681b      	ldr	r3, [r3, #0]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	20000774 	.word	0x20000774

08004700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004708:	f7ff ffee 	bl	80046e8 <HAL_GetTick>
 800470c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004718:	d005      	beq.n	8004726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800471a:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <HAL_Delay+0x44>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004726:	bf00      	nop
 8004728:	f7ff ffde 	bl	80046e8 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	429a      	cmp	r2, r3
 8004736:	d8f7      	bhi.n	8004728 <HAL_Delay+0x28>
  {
  }
}
 8004738:	bf00      	nop
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	200000bc 	.word	0x200000bc

08004748 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e033      	b.n	80047c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fb ff92 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f003 0310 	and.w	r3, r3, #16
 8004782:	2b00      	cmp	r3, #0
 8004784:	d118      	bne.n	80047b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800478e:	f023 0302 	bic.w	r3, r3, #2
 8004792:	f043 0202 	orr.w	r2, r3, #2
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fa68 	bl	8004c70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f023 0303 	bic.w	r3, r3, #3
 80047ae:	f043 0201 	orr.w	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40
 80047b6:	e001      	b.n	80047bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b086      	sub	sp, #24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_ADC_Start_DMA+0x1e>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e0e9      	b.n	80049c2 <HAL_ADC_Start_DMA+0x1f2>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b01      	cmp	r3, #1
 8004802:	d018      	beq.n	8004836 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004814:	4b6d      	ldr	r3, [pc, #436]	; (80049cc <HAL_ADC_Start_DMA+0x1fc>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a6d      	ldr	r2, [pc, #436]	; (80049d0 <HAL_ADC_Start_DMA+0x200>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	0c9a      	lsrs	r2, r3, #18
 8004820:	4613      	mov	r3, r2
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	4413      	add	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004828:	e002      	b.n	8004830 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3b01      	subs	r3, #1
 800482e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f9      	bne.n	800482a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004844:	d107      	bne.n	8004856 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004854:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b01      	cmp	r3, #1
 8004862:	f040 80a1 	bne.w	80049a8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004890:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a4:	d106      	bne.n	80048b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048aa:	f023 0206 	bic.w	r2, r3, #6
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	645a      	str	r2, [r3, #68]	; 0x44
 80048b2:	e002      	b.n	80048ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048c2:	4b44      	ldr	r3, [pc, #272]	; (80049d4 <HAL_ADC_Start_DMA+0x204>)
 80048c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	4a43      	ldr	r2, [pc, #268]	; (80049d8 <HAL_ADC_Start_DMA+0x208>)
 80048cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	4a42      	ldr	r2, [pc, #264]	; (80049dc <HAL_ADC_Start_DMA+0x20c>)
 80048d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	4a41      	ldr	r2, [pc, #260]	; (80049e0 <HAL_ADC_Start_DMA+0x210>)
 80048dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80048e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685a      	ldr	r2, [r3, #4]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80048f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004906:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	334c      	adds	r3, #76	; 0x4c
 8004912:	4619      	mov	r1, r3
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f000 fce8 	bl	80052ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	2b00      	cmp	r3, #0
 8004926:	d12a      	bne.n	800497e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2d      	ldr	r2, [pc, #180]	; (80049e4 <HAL_ADC_Start_DMA+0x214>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d015      	beq.n	800495e <HAL_ADC_Start_DMA+0x18e>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a2c      	ldr	r2, [pc, #176]	; (80049e8 <HAL_ADC_Start_DMA+0x218>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d105      	bne.n	8004948 <HAL_ADC_Start_DMA+0x178>
 800493c:	4b25      	ldr	r3, [pc, #148]	; (80049d4 <HAL_ADC_Start_DMA+0x204>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a27      	ldr	r2, [pc, #156]	; (80049ec <HAL_ADC_Start_DMA+0x21c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d136      	bne.n	80049c0 <HAL_ADC_Start_DMA+0x1f0>
 8004952:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <HAL_ADC_Start_DMA+0x204>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f003 0310 	and.w	r3, r3, #16
 800495a:	2b00      	cmp	r3, #0
 800495c:	d130      	bne.n	80049c0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d129      	bne.n	80049c0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800497a:	609a      	str	r2, [r3, #8]
 800497c:	e020      	b.n	80049c0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <HAL_ADC_Start_DMA+0x214>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d11b      	bne.n	80049c0 <HAL_ADC_Start_DMA+0x1f0>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d114      	bne.n	80049c0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80049a4:	609a      	str	r2, [r3, #8]
 80049a6:	e00b      	b.n	80049c0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	f043 0210 	orr.w	r2, r3, #16
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b8:	f043 0201 	orr.w	r2, r3, #1
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	200000b4 	.word	0x200000b4
 80049d0:	431bde83 	.word	0x431bde83
 80049d4:	40012300 	.word	0x40012300
 80049d8:	08004e69 	.word	0x08004e69
 80049dc:	08004f23 	.word	0x08004f23
 80049e0:	08004f3f 	.word	0x08004f3f
 80049e4:	40012000 	.word	0x40012000
 80049e8:	40012100 	.word	0x40012100
 80049ec:	40012200 	.word	0x40012200

080049f0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x1c>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e105      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x228>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b09      	cmp	r3, #9
 8004a56:	d925      	bls.n	8004aa4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68d9      	ldr	r1, [r3, #12]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	461a      	mov	r2, r3
 8004a66:	4613      	mov	r3, r2
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3b1e      	subs	r3, #30
 8004a6e:	2207      	movs	r2, #7
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	43da      	mvns	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	400a      	ands	r2, r1
 8004a7c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68d9      	ldr	r1, [r3, #12]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	4618      	mov	r0, r3
 8004a90:	4603      	mov	r3, r0
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	4403      	add	r3, r0
 8004a96:	3b1e      	subs	r3, #30
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	60da      	str	r2, [r3, #12]
 8004aa2:	e022      	b.n	8004aea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6919      	ldr	r1, [r3, #16]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	4413      	add	r3, r2
 8004ab8:	2207      	movs	r2, #7
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	43da      	mvns	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	400a      	ands	r2, r1
 8004ac6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6919      	ldr	r1, [r3, #16]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	4618      	mov	r0, r3
 8004ada:	4603      	mov	r3, r0
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	4403      	add	r3, r0
 8004ae0:	409a      	lsls	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b06      	cmp	r3, #6
 8004af0:	d824      	bhi.n	8004b3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	3b05      	subs	r3, #5
 8004b04:	221f      	movs	r2, #31
 8004b06:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0a:	43da      	mvns	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	400a      	ands	r2, r1
 8004b12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	4618      	mov	r0, r3
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3b05      	subs	r3, #5
 8004b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	635a      	str	r2, [r3, #52]	; 0x34
 8004b3a:	e04c      	b.n	8004bd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b0c      	cmp	r3, #12
 8004b42:	d824      	bhi.n	8004b8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	3b23      	subs	r3, #35	; 0x23
 8004b56:	221f      	movs	r2, #31
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	43da      	mvns	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	400a      	ands	r2, r1
 8004b64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	4618      	mov	r0, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3b23      	subs	r3, #35	; 0x23
 8004b80:	fa00 f203 	lsl.w	r2, r0, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	631a      	str	r2, [r3, #48]	; 0x30
 8004b8c:	e023      	b.n	8004bd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3b41      	subs	r3, #65	; 0x41
 8004ba0:	221f      	movs	r2, #31
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43da      	mvns	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	400a      	ands	r2, r1
 8004bae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	3b41      	subs	r3, #65	; 0x41
 8004bca:	fa00 f203 	lsl.w	r2, r0, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bd6:	4b22      	ldr	r3, [pc, #136]	; (8004c60 <HAL_ADC_ConfigChannel+0x234>)
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <HAL_ADC_ConfigChannel+0x238>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d109      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x1cc>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b12      	cmp	r3, #18
 8004bea:	d105      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a19      	ldr	r2, [pc, #100]	; (8004c64 <HAL_ADC_ConfigChannel+0x238>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d123      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x21e>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b10      	cmp	r3, #16
 8004c08:	d003      	beq.n	8004c12 <HAL_ADC_ConfigChannel+0x1e6>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b11      	cmp	r3, #17
 8004c10:	d11b      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b10      	cmp	r3, #16
 8004c24:	d111      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c26:	4b10      	ldr	r3, [pc, #64]	; (8004c68 <HAL_ADC_ConfigChannel+0x23c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a10      	ldr	r2, [pc, #64]	; (8004c6c <HAL_ADC_ConfigChannel+0x240>)
 8004c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c30:	0c9a      	lsrs	r2, r3, #18
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c3c:	e002      	b.n	8004c44 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	3b01      	subs	r3, #1
 8004c42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f9      	bne.n	8004c3e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr
 8004c60:	40012300 	.word	0x40012300
 8004c64:	40012000 	.word	0x40012000
 8004c68:	200000b4 	.word	0x200000b4
 8004c6c:	431bde83 	.word	0x431bde83

08004c70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c78:	4b79      	ldr	r3, [pc, #484]	; (8004e60 <ADC_Init+0x1f0>)
 8004c7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	431a      	orrs	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ca4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6859      	ldr	r1, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	021a      	lsls	r2, r3, #8
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004cc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6859      	ldr	r1, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6899      	ldr	r1, [r3, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	4a58      	ldr	r2, [pc, #352]	; (8004e64 <ADC_Init+0x1f4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d022      	beq.n	8004d4e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d16:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6899      	ldr	r1, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6899      	ldr	r1, [r3, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	609a      	str	r2, [r3, #8]
 8004d4c:	e00f      	b.n	8004d6e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0202 	bic.w	r2, r2, #2
 8004d7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6899      	ldr	r1, [r3, #8]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	7e1b      	ldrb	r3, [r3, #24]
 8004d88:	005a      	lsls	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01b      	beq.n	8004dd4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004daa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004dba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6859      	ldr	r1, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	035a      	lsls	r2, r3, #13
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
 8004dd2:	e007      	b.n	8004de4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004de2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	051a      	lsls	r2, r3, #20
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6899      	ldr	r1, [r3, #8]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e26:	025a      	lsls	r2, r3, #9
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6899      	ldr	r1, [r3, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	029a      	lsls	r2, r3, #10
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	609a      	str	r2, [r3, #8]
}
 8004e54:	bf00      	nop
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	40012300 	.word	0x40012300
 8004e64:	0f000001 	.word	0x0f000001

08004e68 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d13c      	bne.n	8004efc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d12b      	bne.n	8004ef4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d127      	bne.n	8004ef4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d006      	beq.n	8004ec0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d119      	bne.n	8004ef4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0220 	bic.w	r2, r2, #32
 8004ece:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d105      	bne.n	8004ef4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	f043 0201 	orr.w	r2, r3, #1
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f7ff fd7b 	bl	80049f0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004efa:	e00e      	b.n	8004f1a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f7ff fd85 	bl	8004a18 <HAL_ADC_ErrorCallback>
}
 8004f0e:	e004      	b.n	8004f1a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4798      	blx	r3
}
 8004f1a:	bf00      	nop
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff fd67 	bl	8004a04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2240      	movs	r2, #64	; 0x40
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	f043 0204 	orr.w	r2, r3, #4
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fd5a 	bl	8004a18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f88:	4013      	ands	r3, r2
 8004f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f9e:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	60d3      	str	r3, [r2, #12]
}
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	e000ed00 	.word	0xe000ed00

08004fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <__NVIC_GetPriorityGrouping+0x18>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	0a1b      	lsrs	r3, r3, #8
 8004fbe:	f003 0307 	and.w	r3, r3, #7
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	e000ed00 	.word	0xe000ed00

08004fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	db0b      	blt.n	8004ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	f003 021f 	and.w	r2, r3, #31
 8004fe8:	4907      	ldr	r1, [pc, #28]	; (8005008 <__NVIC_EnableIRQ+0x38>)
 8004fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	e000e100 	.word	0xe000e100

0800500c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	4603      	mov	r3, r0
 8005014:	6039      	str	r1, [r7, #0]
 8005016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501c:	2b00      	cmp	r3, #0
 800501e:	db0a      	blt.n	8005036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	b2da      	uxtb	r2, r3
 8005024:	490c      	ldr	r1, [pc, #48]	; (8005058 <__NVIC_SetPriority+0x4c>)
 8005026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502a:	0112      	lsls	r2, r2, #4
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	440b      	add	r3, r1
 8005030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005034:	e00a      	b.n	800504c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	b2da      	uxtb	r2, r3
 800503a:	4908      	ldr	r1, [pc, #32]	; (800505c <__NVIC_SetPriority+0x50>)
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	3b04      	subs	r3, #4
 8005044:	0112      	lsls	r2, r2, #4
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	440b      	add	r3, r1
 800504a:	761a      	strb	r2, [r3, #24]
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	e000e100 	.word	0xe000e100
 800505c:	e000ed00 	.word	0xe000ed00

08005060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005060:	b480      	push	{r7}
 8005062:	b089      	sub	sp, #36	; 0x24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	f1c3 0307 	rsb	r3, r3, #7
 800507a:	2b04      	cmp	r3, #4
 800507c:	bf28      	it	cs
 800507e:	2304      	movcs	r3, #4
 8005080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3304      	adds	r3, #4
 8005086:	2b06      	cmp	r3, #6
 8005088:	d902      	bls.n	8005090 <NVIC_EncodePriority+0x30>
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	3b03      	subs	r3, #3
 800508e:	e000      	b.n	8005092 <NVIC_EncodePriority+0x32>
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005094:	f04f 32ff 	mov.w	r2, #4294967295
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	43da      	mvns	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	401a      	ands	r2, r3
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050a8:	f04f 31ff 	mov.w	r1, #4294967295
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	fa01 f303 	lsl.w	r3, r1, r3
 80050b2:	43d9      	mvns	r1, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b8:	4313      	orrs	r3, r2
         );
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3724      	adds	r7, #36	; 0x24
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050d8:	d301      	bcc.n	80050de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050da:	2301      	movs	r3, #1
 80050dc:	e00f      	b.n	80050fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050de:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <SysTick_Config+0x40>)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050e6:	210f      	movs	r1, #15
 80050e8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ec:	f7ff ff8e 	bl	800500c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050f0:	4b05      	ldr	r3, [pc, #20]	; (8005108 <SysTick_Config+0x40>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050f6:	4b04      	ldr	r3, [pc, #16]	; (8005108 <SysTick_Config+0x40>)
 80050f8:	2207      	movs	r2, #7
 80050fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	e000e010 	.word	0xe000e010

0800510c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff ff29 	bl	8004f6c <__NVIC_SetPriorityGrouping>
}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005122:	b580      	push	{r7, lr}
 8005124:	b086      	sub	sp, #24
 8005126:	af00      	add	r7, sp, #0
 8005128:	4603      	mov	r3, r0
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	607a      	str	r2, [r7, #4]
 800512e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005134:	f7ff ff3e 	bl	8004fb4 <__NVIC_GetPriorityGrouping>
 8005138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	6978      	ldr	r0, [r7, #20]
 8005140:	f7ff ff8e 	bl	8005060 <NVIC_EncodePriority>
 8005144:	4602      	mov	r2, r0
 8005146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800514a:	4611      	mov	r1, r2
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff ff5d 	bl	800500c <__NVIC_SetPriority>
}
 8005152:	bf00      	nop
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b082      	sub	sp, #8
 800515e:	af00      	add	r7, sp, #0
 8005160:	4603      	mov	r3, r0
 8005162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005168:	4618      	mov	r0, r3
 800516a:	f7ff ff31 	bl	8004fd0 <__NVIC_EnableIRQ>
}
 800516e:	bf00      	nop
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff ffa2 	bl	80050c8 <SysTick_Config>
 8005184:	4603      	mov	r3, r0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800519c:	f7ff faa4 	bl	80046e8 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e099      	b.n	80052e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0201 	bic.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051cc:	e00f      	b.n	80051ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051ce:	f7ff fa8b 	bl	80046e8 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b05      	cmp	r3, #5
 80051da:	d908      	bls.n	80051ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2203      	movs	r2, #3
 80051e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e078      	b.n	80052e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e8      	bne.n	80051ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4b38      	ldr	r3, [pc, #224]	; (80052e8 <HAL_DMA_Init+0x158>)
 8005208:	4013      	ands	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800521a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a1b      	ldr	r3, [r3, #32]
 8005238:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	2b04      	cmp	r3, #4
 8005246:	d107      	bne.n	8005258 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	4313      	orrs	r3, r2
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f023 0307 	bic.w	r3, r3, #7
 800526e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	4313      	orrs	r3, r2
 8005278:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	2b04      	cmp	r3, #4
 8005280:	d117      	bne.n	80052b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00e      	beq.n	80052b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fb01 	bl	800589c <DMA_CheckFifoParam>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2240      	movs	r2, #64	; 0x40
 80052a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80052ae:	2301      	movs	r3, #1
 80052b0:	e016      	b.n	80052e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fab8 	bl	8005830 <DMA_CalcBaseAndBitshift>
 80052c0:	4603      	mov	r3, r0
 80052c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c8:	223f      	movs	r2, #63	; 0x3f
 80052ca:	409a      	lsls	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	f010803f 	.word	0xf010803f

080052ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005302:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_DMA_Start_IT+0x26>
 800530e:	2302      	movs	r3, #2
 8005310:	e040      	b.n	8005394 <HAL_DMA_Start_IT+0xa8>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b01      	cmp	r3, #1
 8005324:	d12f      	bne.n	8005386 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2202      	movs	r2, #2
 800532a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 fa4a 	bl	80057d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005344:	223f      	movs	r2, #63	; 0x3f
 8005346:	409a      	lsls	r2, r3
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0216 	orr.w	r2, r2, #22
 800535a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d007      	beq.n	8005374 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 0208 	orr.w	r2, r2, #8
 8005372:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	e005      	b.n	8005392 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800538e:	2302      	movs	r3, #2
 8005390:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005392:	7dfb      	ldrb	r3, [r7, #23]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80053aa:	f7ff f99d 	bl	80046e8 <HAL_GetTick>
 80053ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d008      	beq.n	80053ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2280      	movs	r2, #128	; 0x80
 80053c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e052      	b.n	8005474 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0216 	bic.w	r2, r2, #22
 80053dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695a      	ldr	r2, [r3, #20]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d103      	bne.n	80053fe <HAL_DMA_Abort+0x62>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d007      	beq.n	800540e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0208 	bic.w	r2, r2, #8
 800540c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0201 	bic.w	r2, r2, #1
 800541c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800541e:	e013      	b.n	8005448 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005420:	f7ff f962 	bl	80046e8 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b05      	cmp	r3, #5
 800542c:	d90c      	bls.n	8005448 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2203      	movs	r2, #3
 8005438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e015      	b.n	8005474 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e4      	bne.n	8005420 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545a:	223f      	movs	r2, #63	; 0x3f
 800545c:	409a      	lsls	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d004      	beq.n	800549a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2280      	movs	r2, #128	; 0x80
 8005494:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e00c      	b.n	80054b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2205      	movs	r2, #5
 800549e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0201 	bic.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054cc:	4b8e      	ldr	r3, [pc, #568]	; (8005708 <HAL_DMA_IRQHandler+0x248>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a8e      	ldr	r2, [pc, #568]	; (800570c <HAL_DMA_IRQHandler+0x24c>)
 80054d2:	fba2 2303 	umull	r2, r3, r2, r3
 80054d6:	0a9b      	lsrs	r3, r3, #10
 80054d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ea:	2208      	movs	r2, #8
 80054ec:	409a      	lsls	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d01a      	beq.n	800552c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d013      	beq.n	800552c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0204 	bic.w	r2, r2, #4
 8005512:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005518:	2208      	movs	r2, #8
 800551a:	409a      	lsls	r2, r3
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	f043 0201 	orr.w	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005530:	2201      	movs	r2, #1
 8005532:	409a      	lsls	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d012      	beq.n	8005562 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00b      	beq.n	8005562 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554e:	2201      	movs	r2, #1
 8005550:	409a      	lsls	r2, r3
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555a:	f043 0202 	orr.w	r2, r3, #2
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005566:	2204      	movs	r2, #4
 8005568:	409a      	lsls	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d012      	beq.n	8005598 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00b      	beq.n	8005598 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005584:	2204      	movs	r2, #4
 8005586:	409a      	lsls	r2, r3
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005590:	f043 0204 	orr.w	r2, r3, #4
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800559c:	2210      	movs	r2, #16
 800559e:	409a      	lsls	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d043      	beq.n	8005630 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0308 	and.w	r3, r3, #8
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d03c      	beq.n	8005630 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ba:	2210      	movs	r2, #16
 80055bc:	409a      	lsls	r2, r3
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d018      	beq.n	8005602 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d108      	bne.n	80055f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d024      	beq.n	8005630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	4798      	blx	r3
 80055ee:	e01f      	b.n	8005630 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01b      	beq.n	8005630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	4798      	blx	r3
 8005600:	e016      	b.n	8005630 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d107      	bne.n	8005620 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0208 	bic.w	r2, r2, #8
 800561e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005634:	2220      	movs	r2, #32
 8005636:	409a      	lsls	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4013      	ands	r3, r2
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 808f 	beq.w	8005760 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0310 	and.w	r3, r3, #16
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 8087 	beq.w	8005760 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005656:	2220      	movs	r2, #32
 8005658:	409a      	lsls	r2, r3
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b05      	cmp	r3, #5
 8005668:	d136      	bne.n	80056d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0216 	bic.w	r2, r2, #22
 8005678:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695a      	ldr	r2, [r3, #20]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005688:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d103      	bne.n	800569a <HAL_DMA_IRQHandler+0x1da>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005696:	2b00      	cmp	r3, #0
 8005698:	d007      	beq.n	80056aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0208 	bic.w	r2, r2, #8
 80056a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ae:	223f      	movs	r2, #63	; 0x3f
 80056b0:	409a      	lsls	r2, r3
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d07e      	beq.n	80057cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
        }
        return;
 80056d6:	e079      	b.n	80057cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d01d      	beq.n	8005722 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10d      	bne.n	8005710 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d031      	beq.n	8005760 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	4798      	blx	r3
 8005704:	e02c      	b.n	8005760 <HAL_DMA_IRQHandler+0x2a0>
 8005706:	bf00      	nop
 8005708:	200000b4 	.word	0x200000b4
 800570c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d023      	beq.n	8005760 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	4798      	blx	r3
 8005720:	e01e      	b.n	8005760 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10f      	bne.n	8005750 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0210 	bic.w	r2, r2, #16
 800573e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005754:	2b00      	cmp	r3, #0
 8005756:	d003      	beq.n	8005760 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005764:	2b00      	cmp	r3, #0
 8005766:	d032      	beq.n	80057ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d022      	beq.n	80057ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2205      	movs	r2, #5
 8005778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0201 	bic.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	3301      	adds	r3, #1
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	429a      	cmp	r2, r3
 8005796:	d307      	bcc.n	80057a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f2      	bne.n	800578c <HAL_DMA_IRQHandler+0x2cc>
 80057a6:	e000      	b.n	80057aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80057a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	4798      	blx	r3
 80057ca:	e000      	b.n	80057ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80057cc:	bf00      	nop
    }
  }
}
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d108      	bne.n	8005814 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005812:	e007      	b.n	8005824 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	60da      	str	r2, [r3, #12]
}
 8005824:	bf00      	nop
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	3b10      	subs	r3, #16
 8005840:	4a14      	ldr	r2, [pc, #80]	; (8005894 <DMA_CalcBaseAndBitshift+0x64>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	091b      	lsrs	r3, r3, #4
 8005848:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800584a:	4a13      	ldr	r2, [pc, #76]	; (8005898 <DMA_CalcBaseAndBitshift+0x68>)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4413      	add	r3, r2
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b03      	cmp	r3, #3
 800585c:	d909      	bls.n	8005872 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	1d1a      	adds	r2, r3, #4
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	659a      	str	r2, [r3, #88]	; 0x58
 8005870:	e007      	b.n	8005882 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800587a:	f023 0303 	bic.w	r3, r3, #3
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	aaaaaaab 	.word	0xaaaaaaab
 8005898:	08011ab8 	.word	0x08011ab8

0800589c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d11f      	bne.n	80058f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d856      	bhi.n	800596a <DMA_CheckFifoParam+0xce>
 80058bc:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <DMA_CheckFifoParam+0x28>)
 80058be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c2:	bf00      	nop
 80058c4:	080058d5 	.word	0x080058d5
 80058c8:	080058e7 	.word	0x080058e7
 80058cc:	080058d5 	.word	0x080058d5
 80058d0:	0800596b 	.word	0x0800596b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d046      	beq.n	800596e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058e4:	e043      	b.n	800596e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058ee:	d140      	bne.n	8005972 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f4:	e03d      	b.n	8005972 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fe:	d121      	bne.n	8005944 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b03      	cmp	r3, #3
 8005904:	d837      	bhi.n	8005976 <DMA_CheckFifoParam+0xda>
 8005906:	a201      	add	r2, pc, #4	; (adr r2, 800590c <DMA_CheckFifoParam+0x70>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	0800591d 	.word	0x0800591d
 8005910:	08005923 	.word	0x08005923
 8005914:	0800591d 	.word	0x0800591d
 8005918:	08005935 	.word	0x08005935
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
      break;
 8005920:	e030      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d025      	beq.n	800597a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005932:	e022      	b.n	800597a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800593c:	d11f      	bne.n	800597e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005942:	e01c      	b.n	800597e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d903      	bls.n	8005952 <DMA_CheckFifoParam+0xb6>
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	2b03      	cmp	r3, #3
 800594e:	d003      	beq.n	8005958 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005950:	e018      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
      break;
 8005956:	e015      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00e      	beq.n	8005982 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
      break;
 8005968:	e00b      	b.n	8005982 <DMA_CheckFifoParam+0xe6>
      break;
 800596a:	bf00      	nop
 800596c:	e00a      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;
 800596e:	bf00      	nop
 8005970:	e008      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;
 8005972:	bf00      	nop
 8005974:	e006      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;
 8005976:	bf00      	nop
 8005978:	e004      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;
 800597a:	bf00      	nop
 800597c:	e002      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;   
 800597e:	bf00      	nop
 8005980:	e000      	b.n	8005984 <DMA_CheckFifoParam+0xe8>
      break;
 8005982:	bf00      	nop
    }
  } 
  
  return status; 
 8005984:	7bfb      	ldrb	r3, [r7, #15]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop

08005994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005994:	b480      	push	{r7}
 8005996:	b089      	sub	sp, #36	; 0x24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800599e:	2300      	movs	r3, #0
 80059a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059aa:	2300      	movs	r3, #0
 80059ac:	61fb      	str	r3, [r7, #28]
 80059ae:	e16b      	b.n	8005c88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059b0:	2201      	movs	r2, #1
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4013      	ands	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	f040 815a 	bne.w	8005c82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d005      	beq.n	80059e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d130      	bne.n	8005a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	2203      	movs	r2, #3
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	43db      	mvns	r3, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4013      	ands	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	091b      	lsrs	r3, r3, #4
 8005a32:	f003 0201 	and.w	r2, r3, #1
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f003 0303 	and.w	r3, r3, #3
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d017      	beq.n	8005a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	2203      	movs	r2, #3
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	43db      	mvns	r3, r3
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 0303 	and.w	r3, r3, #3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d123      	bne.n	8005ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	08da      	lsrs	r2, r3, #3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3208      	adds	r2, #8
 8005a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	220f      	movs	r2, #15
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	43db      	mvns	r3, r3
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	08da      	lsrs	r2, r3, #3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3208      	adds	r2, #8
 8005ad2:	69b9      	ldr	r1, [r7, #24]
 8005ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	2203      	movs	r2, #3
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	4013      	ands	r3, r2
 8005aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f003 0203 	and.w	r2, r3, #3
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	fa02 f303 	lsl.w	r3, r2, r3
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 80b4 	beq.w	8005c82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	4b60      	ldr	r3, [pc, #384]	; (8005ca0 <HAL_GPIO_Init+0x30c>)
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	4a5f      	ldr	r2, [pc, #380]	; (8005ca0 <HAL_GPIO_Init+0x30c>)
 8005b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b28:	6453      	str	r3, [r2, #68]	; 0x44
 8005b2a:	4b5d      	ldr	r3, [pc, #372]	; (8005ca0 <HAL_GPIO_Init+0x30c>)
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b36:	4a5b      	ldr	r2, [pc, #364]	; (8005ca4 <HAL_GPIO_Init+0x310>)
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	089b      	lsrs	r3, r3, #2
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	220f      	movs	r2, #15
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43db      	mvns	r3, r3
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	4013      	ands	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a52      	ldr	r2, [pc, #328]	; (8005ca8 <HAL_GPIO_Init+0x314>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d02b      	beq.n	8005bba <HAL_GPIO_Init+0x226>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a51      	ldr	r2, [pc, #324]	; (8005cac <HAL_GPIO_Init+0x318>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d025      	beq.n	8005bb6 <HAL_GPIO_Init+0x222>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a50      	ldr	r2, [pc, #320]	; (8005cb0 <HAL_GPIO_Init+0x31c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d01f      	beq.n	8005bb2 <HAL_GPIO_Init+0x21e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a4f      	ldr	r2, [pc, #316]	; (8005cb4 <HAL_GPIO_Init+0x320>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d019      	beq.n	8005bae <HAL_GPIO_Init+0x21a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a4e      	ldr	r2, [pc, #312]	; (8005cb8 <HAL_GPIO_Init+0x324>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <HAL_GPIO_Init+0x216>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a4d      	ldr	r2, [pc, #308]	; (8005cbc <HAL_GPIO_Init+0x328>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00d      	beq.n	8005ba6 <HAL_GPIO_Init+0x212>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a4c      	ldr	r2, [pc, #304]	; (8005cc0 <HAL_GPIO_Init+0x32c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d007      	beq.n	8005ba2 <HAL_GPIO_Init+0x20e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a4b      	ldr	r2, [pc, #300]	; (8005cc4 <HAL_GPIO_Init+0x330>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d101      	bne.n	8005b9e <HAL_GPIO_Init+0x20a>
 8005b9a:	2307      	movs	r3, #7
 8005b9c:	e00e      	b.n	8005bbc <HAL_GPIO_Init+0x228>
 8005b9e:	2308      	movs	r3, #8
 8005ba0:	e00c      	b.n	8005bbc <HAL_GPIO_Init+0x228>
 8005ba2:	2306      	movs	r3, #6
 8005ba4:	e00a      	b.n	8005bbc <HAL_GPIO_Init+0x228>
 8005ba6:	2305      	movs	r3, #5
 8005ba8:	e008      	b.n	8005bbc <HAL_GPIO_Init+0x228>
 8005baa:	2304      	movs	r3, #4
 8005bac:	e006      	b.n	8005bbc <HAL_GPIO_Init+0x228>
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e004      	b.n	8005bbc <HAL_GPIO_Init+0x228>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e002      	b.n	8005bbc <HAL_GPIO_Init+0x228>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <HAL_GPIO_Init+0x228>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	f002 0203 	and.w	r2, r2, #3
 8005bc2:	0092      	lsls	r2, r2, #2
 8005bc4:	4093      	lsls	r3, r2
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bcc:	4935      	ldr	r1, [pc, #212]	; (8005ca4 <HAL_GPIO_Init+0x310>)
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	089b      	lsrs	r3, r3, #2
 8005bd2:	3302      	adds	r3, #2
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bda:	4b3b      	ldr	r3, [pc, #236]	; (8005cc8 <HAL_GPIO_Init+0x334>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	43db      	mvns	r3, r3
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	4013      	ands	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bfe:	4a32      	ldr	r2, [pc, #200]	; (8005cc8 <HAL_GPIO_Init+0x334>)
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005c04:	4b30      	ldr	r3, [pc, #192]	; (8005cc8 <HAL_GPIO_Init+0x334>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4013      	ands	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c28:	4a27      	ldr	r2, [pc, #156]	; (8005cc8 <HAL_GPIO_Init+0x334>)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c2e:	4b26      	ldr	r3, [pc, #152]	; (8005cc8 <HAL_GPIO_Init+0x334>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	43db      	mvns	r3, r3
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c52:	4a1d      	ldr	r2, [pc, #116]	; (8005cc8 <HAL_GPIO_Init+0x334>)
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c58:	4b1b      	ldr	r3, [pc, #108]	; (8005cc8 <HAL_GPIO_Init+0x334>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	43db      	mvns	r3, r3
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	4013      	ands	r3, r2
 8005c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c7c:	4a12      	ldr	r2, [pc, #72]	; (8005cc8 <HAL_GPIO_Init+0x334>)
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	3301      	adds	r3, #1
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b0f      	cmp	r3, #15
 8005c8c:	f67f ae90 	bls.w	80059b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	3724      	adds	r7, #36	; 0x24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	40013800 	.word	0x40013800
 8005ca8:	40020000 	.word	0x40020000
 8005cac:	40020400 	.word	0x40020400
 8005cb0:	40020800 	.word	0x40020800
 8005cb4:	40020c00 	.word	0x40020c00
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	40021400 	.word	0x40021400
 8005cc0:	40021800 	.word	0x40021800
 8005cc4:	40021c00 	.word	0x40021c00
 8005cc8:	40013c00 	.word	0x40013c00

08005ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	807b      	strh	r3, [r7, #2]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cdc:	787b      	ldrb	r3, [r7, #1]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ce2:	887a      	ldrh	r2, [r7, #2]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ce8:	e003      	b.n	8005cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005cea:	887b      	ldrh	r3, [r7, #2]
 8005cec:	041a      	lsls	r2, r3, #16
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	619a      	str	r2, [r3, #24]
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e12b      	b.n	8005f6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fb f816 	bl	8000d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2224      	movs	r2, #36	; 0x24
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0201 	bic.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d64:	f000 fd80 	bl	8006868 <HAL_RCC_GetPCLK1Freq>
 8005d68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	4a81      	ldr	r2, [pc, #516]	; (8005f74 <HAL_I2C_Init+0x274>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d807      	bhi.n	8005d84 <HAL_I2C_Init+0x84>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4a80      	ldr	r2, [pc, #512]	; (8005f78 <HAL_I2C_Init+0x278>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	bf94      	ite	ls
 8005d7c:	2301      	movls	r3, #1
 8005d7e:	2300      	movhi	r3, #0
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	e006      	b.n	8005d92 <HAL_I2C_Init+0x92>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4a7d      	ldr	r2, [pc, #500]	; (8005f7c <HAL_I2C_Init+0x27c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	bf94      	ite	ls
 8005d8c:	2301      	movls	r3, #1
 8005d8e:	2300      	movhi	r3, #0
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e0e7      	b.n	8005f6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4a78      	ldr	r2, [pc, #480]	; (8005f80 <HAL_I2C_Init+0x280>)
 8005d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005da2:	0c9b      	lsrs	r3, r3, #18
 8005da4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	4a6a      	ldr	r2, [pc, #424]	; (8005f74 <HAL_I2C_Init+0x274>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d802      	bhi.n	8005dd4 <HAL_I2C_Init+0xd4>
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	e009      	b.n	8005de8 <HAL_I2C_Init+0xe8>
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005dda:	fb02 f303 	mul.w	r3, r2, r3
 8005dde:	4a69      	ldr	r2, [pc, #420]	; (8005f84 <HAL_I2C_Init+0x284>)
 8005de0:	fba2 2303 	umull	r2, r3, r2, r3
 8005de4:	099b      	lsrs	r3, r3, #6
 8005de6:	3301      	adds	r3, #1
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6812      	ldr	r2, [r2, #0]
 8005dec:	430b      	orrs	r3, r1
 8005dee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005dfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	495c      	ldr	r1, [pc, #368]	; (8005f74 <HAL_I2C_Init+0x274>)
 8005e04:	428b      	cmp	r3, r1
 8005e06:	d819      	bhi.n	8005e3c <HAL_I2C_Init+0x13c>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	1e59      	subs	r1, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e16:	1c59      	adds	r1, r3, #1
 8005e18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005e1c:	400b      	ands	r3, r1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <HAL_I2C_Init+0x138>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	1e59      	subs	r1, r3, #1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e30:	3301      	adds	r3, #1
 8005e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e36:	e051      	b.n	8005edc <HAL_I2C_Init+0x1dc>
 8005e38:	2304      	movs	r3, #4
 8005e3a:	e04f      	b.n	8005edc <HAL_I2C_Init+0x1dc>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d111      	bne.n	8005e68 <HAL_I2C_Init+0x168>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	1e58      	subs	r0, r3, #1
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6859      	ldr	r1, [r3, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	440b      	add	r3, r1
 8005e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e56:	3301      	adds	r3, #1
 8005e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	bf0c      	ite	eq
 8005e60:	2301      	moveq	r3, #1
 8005e62:	2300      	movne	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	e012      	b.n	8005e8e <HAL_I2C_Init+0x18e>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	1e58      	subs	r0, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6859      	ldr	r1, [r3, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	440b      	add	r3, r1
 8005e76:	0099      	lsls	r1, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e7e:	3301      	adds	r3, #1
 8005e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	bf0c      	ite	eq
 8005e88:	2301      	moveq	r3, #1
 8005e8a:	2300      	movne	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <HAL_I2C_Init+0x196>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e022      	b.n	8005edc <HAL_I2C_Init+0x1dc>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10e      	bne.n	8005ebc <HAL_I2C_Init+0x1bc>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1e58      	subs	r0, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6859      	ldr	r1, [r3, #4]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	440b      	add	r3, r1
 8005eac:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eba:	e00f      	b.n	8005edc <HAL_I2C_Init+0x1dc>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	1e58      	subs	r0, r3, #1
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6859      	ldr	r1, [r3, #4]
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	0099      	lsls	r1, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	6809      	ldr	r1, [r1, #0]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69da      	ldr	r2, [r3, #28]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005f0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6911      	ldr	r1, [r2, #16]
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	68d2      	ldr	r2, [r2, #12]
 8005f16:	4311      	orrs	r1, r2
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695a      	ldr	r2, [r3, #20]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	000186a0 	.word	0x000186a0
 8005f78:	001e847f 	.word	0x001e847f
 8005f7c:	003d08ff 	.word	0x003d08ff
 8005f80:	431bde83 	.word	0x431bde83
 8005f84:	10624dd3 	.word	0x10624dd3

08005f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e267      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d075      	beq.n	8006092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fa6:	4b88      	ldr	r3, [pc, #544]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 030c 	and.w	r3, r3, #12
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d00c      	beq.n	8005fcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fb2:	4b85      	ldr	r3, [pc, #532]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fba:	2b08      	cmp	r3, #8
 8005fbc:	d112      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fbe:	4b82      	ldr	r3, [pc, #520]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fca:	d10b      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fcc:	4b7e      	ldr	r3, [pc, #504]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d05b      	beq.n	8006090 <HAL_RCC_OscConfig+0x108>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d157      	bne.n	8006090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e242      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fec:	d106      	bne.n	8005ffc <HAL_RCC_OscConfig+0x74>
 8005fee:	4b76      	ldr	r3, [pc, #472]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a75      	ldr	r2, [pc, #468]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff8:	6013      	str	r3, [r2, #0]
 8005ffa:	e01d      	b.n	8006038 <HAL_RCC_OscConfig+0xb0>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006004:	d10c      	bne.n	8006020 <HAL_RCC_OscConfig+0x98>
 8006006:	4b70      	ldr	r3, [pc, #448]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a6f      	ldr	r2, [pc, #444]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 800600c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	4b6d      	ldr	r3, [pc, #436]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a6c      	ldr	r2, [pc, #432]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 8006018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	e00b      	b.n	8006038 <HAL_RCC_OscConfig+0xb0>
 8006020:	4b69      	ldr	r3, [pc, #420]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a68      	ldr	r2, [pc, #416]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 8006026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800602a:	6013      	str	r3, [r2, #0]
 800602c:	4b66      	ldr	r3, [pc, #408]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a65      	ldr	r2, [pc, #404]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 8006032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d013      	beq.n	8006068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006040:	f7fe fb52 	bl	80046e8 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006048:	f7fe fb4e 	bl	80046e8 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b64      	cmp	r3, #100	; 0x64
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e207      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800605a:	4b5b      	ldr	r3, [pc, #364]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0f0      	beq.n	8006048 <HAL_RCC_OscConfig+0xc0>
 8006066:	e014      	b.n	8006092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006068:	f7fe fb3e 	bl	80046e8 <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006070:	f7fe fb3a 	bl	80046e8 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b64      	cmp	r3, #100	; 0x64
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e1f3      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006082:	4b51      	ldr	r3, [pc, #324]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f0      	bne.n	8006070 <HAL_RCC_OscConfig+0xe8>
 800608e:	e000      	b.n	8006092 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d063      	beq.n	8006166 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800609e:	4b4a      	ldr	r3, [pc, #296]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00b      	beq.n	80060c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060aa:	4b47      	ldr	r3, [pc, #284]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060b2:	2b08      	cmp	r3, #8
 80060b4:	d11c      	bne.n	80060f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060b6:	4b44      	ldr	r3, [pc, #272]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d116      	bne.n	80060f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060c2:	4b41      	ldr	r3, [pc, #260]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <HAL_RCC_OscConfig+0x152>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d001      	beq.n	80060da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e1c7      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060da:	4b3b      	ldr	r3, [pc, #236]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	4937      	ldr	r1, [pc, #220]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ee:	e03a      	b.n	8006166 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d020      	beq.n	800613a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060f8:	4b34      	ldr	r3, [pc, #208]	; (80061cc <HAL_RCC_OscConfig+0x244>)
 80060fa:	2201      	movs	r2, #1
 80060fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060fe:	f7fe faf3 	bl	80046e8 <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006104:	e008      	b.n	8006118 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006106:	f7fe faef 	bl	80046e8 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	2b02      	cmp	r3, #2
 8006112:	d901      	bls.n	8006118 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e1a8      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006118:	4b2b      	ldr	r3, [pc, #172]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0f0      	beq.n	8006106 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006124:	4b28      	ldr	r3, [pc, #160]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	4925      	ldr	r1, [pc, #148]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 8006134:	4313      	orrs	r3, r2
 8006136:	600b      	str	r3, [r1, #0]
 8006138:	e015      	b.n	8006166 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800613a:	4b24      	ldr	r3, [pc, #144]	; (80061cc <HAL_RCC_OscConfig+0x244>)
 800613c:	2200      	movs	r2, #0
 800613e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006140:	f7fe fad2 	bl	80046e8 <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006148:	f7fe face 	bl	80046e8 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e187      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800615a:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1f0      	bne.n	8006148 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d036      	beq.n	80061e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d016      	beq.n	80061a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800617a:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <HAL_RCC_OscConfig+0x248>)
 800617c:	2201      	movs	r2, #1
 800617e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006180:	f7fe fab2 	bl	80046e8 <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006188:	f7fe faae 	bl	80046e8 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e167      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800619a:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <HAL_RCC_OscConfig+0x240>)
 800619c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCC_OscConfig+0x200>
 80061a6:	e01b      	b.n	80061e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061a8:	4b09      	ldr	r3, [pc, #36]	; (80061d0 <HAL_RCC_OscConfig+0x248>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061ae:	f7fe fa9b 	bl	80046e8 <HAL_GetTick>
 80061b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061b4:	e00e      	b.n	80061d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061b6:	f7fe fa97 	bl	80046e8 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d907      	bls.n	80061d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e150      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
 80061c8:	40023800 	.word	0x40023800
 80061cc:	42470000 	.word	0x42470000
 80061d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061d4:	4b88      	ldr	r3, [pc, #544]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 80061d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1ea      	bne.n	80061b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 8097 	beq.w	800631c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061ee:	2300      	movs	r3, #0
 80061f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061f2:	4b81      	ldr	r3, [pc, #516]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10f      	bne.n	800621e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061fe:	2300      	movs	r3, #0
 8006200:	60bb      	str	r3, [r7, #8]
 8006202:	4b7d      	ldr	r3, [pc, #500]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	4a7c      	ldr	r2, [pc, #496]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 8006208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800620c:	6413      	str	r3, [r2, #64]	; 0x40
 800620e:	4b7a      	ldr	r3, [pc, #488]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006216:	60bb      	str	r3, [r7, #8]
 8006218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800621a:	2301      	movs	r3, #1
 800621c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800621e:	4b77      	ldr	r3, [pc, #476]	; (80063fc <HAL_RCC_OscConfig+0x474>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006226:	2b00      	cmp	r3, #0
 8006228:	d118      	bne.n	800625c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800622a:	4b74      	ldr	r3, [pc, #464]	; (80063fc <HAL_RCC_OscConfig+0x474>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a73      	ldr	r2, [pc, #460]	; (80063fc <HAL_RCC_OscConfig+0x474>)
 8006230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006236:	f7fe fa57 	bl	80046e8 <HAL_GetTick>
 800623a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800623c:	e008      	b.n	8006250 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800623e:	f7fe fa53 	bl	80046e8 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d901      	bls.n	8006250 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e10c      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006250:	4b6a      	ldr	r3, [pc, #424]	; (80063fc <HAL_RCC_OscConfig+0x474>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0f0      	beq.n	800623e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d106      	bne.n	8006272 <HAL_RCC_OscConfig+0x2ea>
 8006264:	4b64      	ldr	r3, [pc, #400]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 8006266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006268:	4a63      	ldr	r2, [pc, #396]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	6713      	str	r3, [r2, #112]	; 0x70
 8006270:	e01c      	b.n	80062ac <HAL_RCC_OscConfig+0x324>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	2b05      	cmp	r3, #5
 8006278:	d10c      	bne.n	8006294 <HAL_RCC_OscConfig+0x30c>
 800627a:	4b5f      	ldr	r3, [pc, #380]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 800627c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627e:	4a5e      	ldr	r2, [pc, #376]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 8006280:	f043 0304 	orr.w	r3, r3, #4
 8006284:	6713      	str	r3, [r2, #112]	; 0x70
 8006286:	4b5c      	ldr	r3, [pc, #368]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 8006288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628a:	4a5b      	ldr	r2, [pc, #364]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 800628c:	f043 0301 	orr.w	r3, r3, #1
 8006290:	6713      	str	r3, [r2, #112]	; 0x70
 8006292:	e00b      	b.n	80062ac <HAL_RCC_OscConfig+0x324>
 8006294:	4b58      	ldr	r3, [pc, #352]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 8006296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006298:	4a57      	ldr	r2, [pc, #348]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 800629a:	f023 0301 	bic.w	r3, r3, #1
 800629e:	6713      	str	r3, [r2, #112]	; 0x70
 80062a0:	4b55      	ldr	r3, [pc, #340]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 80062a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a4:	4a54      	ldr	r2, [pc, #336]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 80062a6:	f023 0304 	bic.w	r3, r3, #4
 80062aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d015      	beq.n	80062e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b4:	f7fe fa18 	bl	80046e8 <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062ba:	e00a      	b.n	80062d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062bc:	f7fe fa14 	bl	80046e8 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e0cb      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d2:	4b49      	ldr	r3, [pc, #292]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 80062d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0ee      	beq.n	80062bc <HAL_RCC_OscConfig+0x334>
 80062de:	e014      	b.n	800630a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062e0:	f7fe fa02 	bl	80046e8 <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062e6:	e00a      	b.n	80062fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062e8:	f7fe f9fe 	bl	80046e8 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e0b5      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062fe:	4b3e      	ldr	r3, [pc, #248]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 8006300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1ee      	bne.n	80062e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800630a:	7dfb      	ldrb	r3, [r7, #23]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d105      	bne.n	800631c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006310:	4b39      	ldr	r3, [pc, #228]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	4a38      	ldr	r2, [pc, #224]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 8006316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800631a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 80a1 	beq.w	8006468 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006326:	4b34      	ldr	r3, [pc, #208]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 030c 	and.w	r3, r3, #12
 800632e:	2b08      	cmp	r3, #8
 8006330:	d05c      	beq.n	80063ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d141      	bne.n	80063be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800633a:	4b31      	ldr	r3, [pc, #196]	; (8006400 <HAL_RCC_OscConfig+0x478>)
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006340:	f7fe f9d2 	bl	80046e8 <HAL_GetTick>
 8006344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006346:	e008      	b.n	800635a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006348:	f7fe f9ce 	bl	80046e8 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e087      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800635a:	4b27      	ldr	r3, [pc, #156]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1f0      	bne.n	8006348 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69da      	ldr	r2, [r3, #28]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006374:	019b      	lsls	r3, r3, #6
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637c:	085b      	lsrs	r3, r3, #1
 800637e:	3b01      	subs	r3, #1
 8006380:	041b      	lsls	r3, r3, #16
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	061b      	lsls	r3, r3, #24
 800638a:	491b      	ldr	r1, [pc, #108]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 800638c:	4313      	orrs	r3, r2
 800638e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006390:	4b1b      	ldr	r3, [pc, #108]	; (8006400 <HAL_RCC_OscConfig+0x478>)
 8006392:	2201      	movs	r2, #1
 8006394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006396:	f7fe f9a7 	bl	80046e8 <HAL_GetTick>
 800639a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800639c:	e008      	b.n	80063b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800639e:	f7fe f9a3 	bl	80046e8 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e05c      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063b0:	4b11      	ldr	r3, [pc, #68]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0f0      	beq.n	800639e <HAL_RCC_OscConfig+0x416>
 80063bc:	e054      	b.n	8006468 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063be:	4b10      	ldr	r3, [pc, #64]	; (8006400 <HAL_RCC_OscConfig+0x478>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c4:	f7fe f990 	bl	80046e8 <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063cc:	f7fe f98c 	bl	80046e8 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e045      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063de:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <HAL_RCC_OscConfig+0x470>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1f0      	bne.n	80063cc <HAL_RCC_OscConfig+0x444>
 80063ea:	e03d      	b.n	8006468 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d107      	bne.n	8006404 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e038      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
 80063f8:	40023800 	.word	0x40023800
 80063fc:	40007000 	.word	0x40007000
 8006400:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006404:	4b1b      	ldr	r3, [pc, #108]	; (8006474 <HAL_RCC_OscConfig+0x4ec>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d028      	beq.n	8006464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800641c:	429a      	cmp	r2, r3
 800641e:	d121      	bne.n	8006464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800642a:	429a      	cmp	r2, r3
 800642c:	d11a      	bne.n	8006464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006434:	4013      	ands	r3, r2
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800643a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800643c:	4293      	cmp	r3, r2
 800643e:	d111      	bne.n	8006464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	085b      	lsrs	r3, r3, #1
 800644c:	3b01      	subs	r3, #1
 800644e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006450:	429a      	cmp	r2, r3
 8006452:	d107      	bne.n	8006464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006460:	429a      	cmp	r2, r3
 8006462:	d001      	beq.n	8006468 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e000      	b.n	800646a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	40023800 	.word	0x40023800

08006478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e0cc      	b.n	8006626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800648c:	4b68      	ldr	r3, [pc, #416]	; (8006630 <HAL_RCC_ClockConfig+0x1b8>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d90c      	bls.n	80064b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800649a:	4b65      	ldr	r3, [pc, #404]	; (8006630 <HAL_RCC_ClockConfig+0x1b8>)
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	b2d2      	uxtb	r2, r2
 80064a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a2:	4b63      	ldr	r3, [pc, #396]	; (8006630 <HAL_RCC_ClockConfig+0x1b8>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0307 	and.w	r3, r3, #7
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d001      	beq.n	80064b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e0b8      	b.n	8006626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d020      	beq.n	8006502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064cc:	4b59      	ldr	r3, [pc, #356]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	4a58      	ldr	r2, [pc, #352]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0308 	and.w	r3, r3, #8
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d005      	beq.n	80064f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064e4:	4b53      	ldr	r3, [pc, #332]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	4a52      	ldr	r2, [pc, #328]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 80064ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064f0:	4b50      	ldr	r3, [pc, #320]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	494d      	ldr	r1, [pc, #308]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d044      	beq.n	8006598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d107      	bne.n	8006526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006516:	4b47      	ldr	r3, [pc, #284]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d119      	bne.n	8006556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e07f      	b.n	8006626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b02      	cmp	r3, #2
 800652c:	d003      	beq.n	8006536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006532:	2b03      	cmp	r3, #3
 8006534:	d107      	bne.n	8006546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006536:	4b3f      	ldr	r3, [pc, #252]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d109      	bne.n	8006556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e06f      	b.n	8006626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006546:	4b3b      	ldr	r3, [pc, #236]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e067      	b.n	8006626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006556:	4b37      	ldr	r3, [pc, #220]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f023 0203 	bic.w	r2, r3, #3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	4934      	ldr	r1, [pc, #208]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 8006564:	4313      	orrs	r3, r2
 8006566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006568:	f7fe f8be 	bl	80046e8 <HAL_GetTick>
 800656c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800656e:	e00a      	b.n	8006586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006570:	f7fe f8ba 	bl	80046e8 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	f241 3288 	movw	r2, #5000	; 0x1388
 800657e:	4293      	cmp	r3, r2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e04f      	b.n	8006626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006586:	4b2b      	ldr	r3, [pc, #172]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f003 020c 	and.w	r2, r3, #12
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	429a      	cmp	r2, r3
 8006596:	d1eb      	bne.n	8006570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006598:	4b25      	ldr	r3, [pc, #148]	; (8006630 <HAL_RCC_ClockConfig+0x1b8>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d20c      	bcs.n	80065c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065a6:	4b22      	ldr	r3, [pc, #136]	; (8006630 <HAL_RCC_ClockConfig+0x1b8>)
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ae:	4b20      	ldr	r3, [pc, #128]	; (8006630 <HAL_RCC_ClockConfig+0x1b8>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0307 	and.w	r3, r3, #7
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d001      	beq.n	80065c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e032      	b.n	8006626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d008      	beq.n	80065de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065cc:	4b19      	ldr	r3, [pc, #100]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	4916      	ldr	r1, [pc, #88]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d009      	beq.n	80065fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065ea:	4b12      	ldr	r3, [pc, #72]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	490e      	ldr	r1, [pc, #56]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065fe:	f000 f821 	bl	8006644 <HAL_RCC_GetSysClockFreq>
 8006602:	4602      	mov	r2, r0
 8006604:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <HAL_RCC_ClockConfig+0x1bc>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	091b      	lsrs	r3, r3, #4
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	490a      	ldr	r1, [pc, #40]	; (8006638 <HAL_RCC_ClockConfig+0x1c0>)
 8006610:	5ccb      	ldrb	r3, [r1, r3]
 8006612:	fa22 f303 	lsr.w	r3, r2, r3
 8006616:	4a09      	ldr	r2, [pc, #36]	; (800663c <HAL_RCC_ClockConfig+0x1c4>)
 8006618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <HAL_RCC_ClockConfig+0x1c8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	f7fe f81e 	bl	8004660 <HAL_InitTick>

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	40023c00 	.word	0x40023c00
 8006634:	40023800 	.word	0x40023800
 8006638:	08011aa0 	.word	0x08011aa0
 800663c:	200000b4 	.word	0x200000b4
 8006640:	200000b8 	.word	0x200000b8

08006644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006648:	b094      	sub	sp, #80	; 0x50
 800664a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	647b      	str	r3, [r7, #68]	; 0x44
 8006650:	2300      	movs	r3, #0
 8006652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006654:	2300      	movs	r3, #0
 8006656:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800665c:	4b79      	ldr	r3, [pc, #484]	; (8006844 <HAL_RCC_GetSysClockFreq+0x200>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 030c 	and.w	r3, r3, #12
 8006664:	2b08      	cmp	r3, #8
 8006666:	d00d      	beq.n	8006684 <HAL_RCC_GetSysClockFreq+0x40>
 8006668:	2b08      	cmp	r3, #8
 800666a:	f200 80e1 	bhi.w	8006830 <HAL_RCC_GetSysClockFreq+0x1ec>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <HAL_RCC_GetSysClockFreq+0x34>
 8006672:	2b04      	cmp	r3, #4
 8006674:	d003      	beq.n	800667e <HAL_RCC_GetSysClockFreq+0x3a>
 8006676:	e0db      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006678:	4b73      	ldr	r3, [pc, #460]	; (8006848 <HAL_RCC_GetSysClockFreq+0x204>)
 800667a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800667c:	e0db      	b.n	8006836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800667e:	4b73      	ldr	r3, [pc, #460]	; (800684c <HAL_RCC_GetSysClockFreq+0x208>)
 8006680:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006682:	e0d8      	b.n	8006836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006684:	4b6f      	ldr	r3, [pc, #444]	; (8006844 <HAL_RCC_GetSysClockFreq+0x200>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800668c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800668e:	4b6d      	ldr	r3, [pc, #436]	; (8006844 <HAL_RCC_GetSysClockFreq+0x200>)
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d063      	beq.n	8006762 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800669a:	4b6a      	ldr	r3, [pc, #424]	; (8006844 <HAL_RCC_GetSysClockFreq+0x200>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	099b      	lsrs	r3, r3, #6
 80066a0:	2200      	movs	r2, #0
 80066a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80066a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ac:	633b      	str	r3, [r7, #48]	; 0x30
 80066ae:	2300      	movs	r3, #0
 80066b0:	637b      	str	r3, [r7, #52]	; 0x34
 80066b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80066b6:	4622      	mov	r2, r4
 80066b8:	462b      	mov	r3, r5
 80066ba:	f04f 0000 	mov.w	r0, #0
 80066be:	f04f 0100 	mov.w	r1, #0
 80066c2:	0159      	lsls	r1, r3, #5
 80066c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066c8:	0150      	lsls	r0, r2, #5
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4621      	mov	r1, r4
 80066d0:	1a51      	subs	r1, r2, r1
 80066d2:	6139      	str	r1, [r7, #16]
 80066d4:	4629      	mov	r1, r5
 80066d6:	eb63 0301 	sbc.w	r3, r3, r1
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066e8:	4659      	mov	r1, fp
 80066ea:	018b      	lsls	r3, r1, #6
 80066ec:	4651      	mov	r1, sl
 80066ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80066f2:	4651      	mov	r1, sl
 80066f4:	018a      	lsls	r2, r1, #6
 80066f6:	4651      	mov	r1, sl
 80066f8:	ebb2 0801 	subs.w	r8, r2, r1
 80066fc:	4659      	mov	r1, fp
 80066fe:	eb63 0901 	sbc.w	r9, r3, r1
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	f04f 0300 	mov.w	r3, #0
 800670a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800670e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006716:	4690      	mov	r8, r2
 8006718:	4699      	mov	r9, r3
 800671a:	4623      	mov	r3, r4
 800671c:	eb18 0303 	adds.w	r3, r8, r3
 8006720:	60bb      	str	r3, [r7, #8]
 8006722:	462b      	mov	r3, r5
 8006724:	eb49 0303 	adc.w	r3, r9, r3
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006736:	4629      	mov	r1, r5
 8006738:	024b      	lsls	r3, r1, #9
 800673a:	4621      	mov	r1, r4
 800673c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006740:	4621      	mov	r1, r4
 8006742:	024a      	lsls	r2, r1, #9
 8006744:	4610      	mov	r0, r2
 8006746:	4619      	mov	r1, r3
 8006748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800674a:	2200      	movs	r2, #0
 800674c:	62bb      	str	r3, [r7, #40]	; 0x28
 800674e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006750:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006754:	f7f9 fd94 	bl	8000280 <__aeabi_uldivmod>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4613      	mov	r3, r2
 800675e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006760:	e058      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006762:	4b38      	ldr	r3, [pc, #224]	; (8006844 <HAL_RCC_GetSysClockFreq+0x200>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	099b      	lsrs	r3, r3, #6
 8006768:	2200      	movs	r2, #0
 800676a:	4618      	mov	r0, r3
 800676c:	4611      	mov	r1, r2
 800676e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006772:	623b      	str	r3, [r7, #32]
 8006774:	2300      	movs	r3, #0
 8006776:	627b      	str	r3, [r7, #36]	; 0x24
 8006778:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800677c:	4642      	mov	r2, r8
 800677e:	464b      	mov	r3, r9
 8006780:	f04f 0000 	mov.w	r0, #0
 8006784:	f04f 0100 	mov.w	r1, #0
 8006788:	0159      	lsls	r1, r3, #5
 800678a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800678e:	0150      	lsls	r0, r2, #5
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	4641      	mov	r1, r8
 8006796:	ebb2 0a01 	subs.w	sl, r2, r1
 800679a:	4649      	mov	r1, r9
 800679c:	eb63 0b01 	sbc.w	fp, r3, r1
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	f04f 0300 	mov.w	r3, #0
 80067a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067b4:	ebb2 040a 	subs.w	r4, r2, sl
 80067b8:	eb63 050b 	sbc.w	r5, r3, fp
 80067bc:	f04f 0200 	mov.w	r2, #0
 80067c0:	f04f 0300 	mov.w	r3, #0
 80067c4:	00eb      	lsls	r3, r5, #3
 80067c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067ca:	00e2      	lsls	r2, r4, #3
 80067cc:	4614      	mov	r4, r2
 80067ce:	461d      	mov	r5, r3
 80067d0:	4643      	mov	r3, r8
 80067d2:	18e3      	adds	r3, r4, r3
 80067d4:	603b      	str	r3, [r7, #0]
 80067d6:	464b      	mov	r3, r9
 80067d8:	eb45 0303 	adc.w	r3, r5, r3
 80067dc:	607b      	str	r3, [r7, #4]
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	f04f 0300 	mov.w	r3, #0
 80067e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80067ea:	4629      	mov	r1, r5
 80067ec:	028b      	lsls	r3, r1, #10
 80067ee:	4621      	mov	r1, r4
 80067f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80067f4:	4621      	mov	r1, r4
 80067f6:	028a      	lsls	r2, r1, #10
 80067f8:	4610      	mov	r0, r2
 80067fa:	4619      	mov	r1, r3
 80067fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067fe:	2200      	movs	r2, #0
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	61fa      	str	r2, [r7, #28]
 8006804:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006808:	f7f9 fd3a 	bl	8000280 <__aeabi_uldivmod>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	4613      	mov	r3, r2
 8006812:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006814:	4b0b      	ldr	r3, [pc, #44]	; (8006844 <HAL_RCC_GetSysClockFreq+0x200>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	0c1b      	lsrs	r3, r3, #16
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	3301      	adds	r3, #1
 8006820:	005b      	lsls	r3, r3, #1
 8006822:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006824:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006828:	fbb2 f3f3 	udiv	r3, r2, r3
 800682c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800682e:	e002      	b.n	8006836 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006830:	4b05      	ldr	r3, [pc, #20]	; (8006848 <HAL_RCC_GetSysClockFreq+0x204>)
 8006832:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006836:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006838:	4618      	mov	r0, r3
 800683a:	3750      	adds	r7, #80	; 0x50
 800683c:	46bd      	mov	sp, r7
 800683e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006842:	bf00      	nop
 8006844:	40023800 	.word	0x40023800
 8006848:	00f42400 	.word	0x00f42400
 800684c:	007a1200 	.word	0x007a1200

08006850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006850:	b480      	push	{r7}
 8006852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006854:	4b03      	ldr	r3, [pc, #12]	; (8006864 <HAL_RCC_GetHCLKFreq+0x14>)
 8006856:	681b      	ldr	r3, [r3, #0]
}
 8006858:	4618      	mov	r0, r3
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	200000b4 	.word	0x200000b4

08006868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800686c:	f7ff fff0 	bl	8006850 <HAL_RCC_GetHCLKFreq>
 8006870:	4602      	mov	r2, r0
 8006872:	4b05      	ldr	r3, [pc, #20]	; (8006888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	0a9b      	lsrs	r3, r3, #10
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	4903      	ldr	r1, [pc, #12]	; (800688c <HAL_RCC_GetPCLK1Freq+0x24>)
 800687e:	5ccb      	ldrb	r3, [r1, r3]
 8006880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006884:	4618      	mov	r0, r3
 8006886:	bd80      	pop	{r7, pc}
 8006888:	40023800 	.word	0x40023800
 800688c:	08011ab0 	.word	0x08011ab0

08006890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006894:	f7ff ffdc 	bl	8006850 <HAL_RCC_GetHCLKFreq>
 8006898:	4602      	mov	r2, r0
 800689a:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	0b5b      	lsrs	r3, r3, #13
 80068a0:	f003 0307 	and.w	r3, r3, #7
 80068a4:	4903      	ldr	r1, [pc, #12]	; (80068b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068a6:	5ccb      	ldrb	r3, [r1, r3]
 80068a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40023800 	.word	0x40023800
 80068b4:	08011ab0 	.word	0x08011ab0

080068b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e07b      	b.n	80069c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d108      	bne.n	80068e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068da:	d009      	beq.n	80068f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	61da      	str	r2, [r3, #28]
 80068e2:	e005      	b.n	80068f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d106      	bne.n	8006910 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7fd f982 	bl	8003c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2202      	movs	r2, #2
 8006914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006926:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006938:	431a      	orrs	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006960:	431a      	orrs	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006974:	ea42 0103 	orr.w	r1, r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	0c1b      	lsrs	r3, r3, #16
 800698e:	f003 0104 	and.w	r1, r3, #4
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	f003 0210 	and.w	r2, r3, #16
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69da      	ldr	r2, [r3, #28]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b088      	sub	sp, #32
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	603b      	str	r3, [r7, #0]
 80069d6:	4613      	mov	r3, r2
 80069d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d101      	bne.n	80069ec <HAL_SPI_Transmit+0x22>
 80069e8:	2302      	movs	r3, #2
 80069ea:	e126      	b.n	8006c3a <HAL_SPI_Transmit+0x270>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069f4:	f7fd fe78 	bl	80046e8 <HAL_GetTick>
 80069f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d002      	beq.n	8006a10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a0e:	e10b      	b.n	8006c28 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <HAL_SPI_Transmit+0x52>
 8006a16:	88fb      	ldrh	r3, [r7, #6]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d102      	bne.n	8006a22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006a20:	e102      	b.n	8006c28 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2203      	movs	r2, #3
 8006a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	88fa      	ldrh	r2, [r7, #6]
 8006a3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	88fa      	ldrh	r2, [r7, #6]
 8006a40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a68:	d10f      	bne.n	8006a8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a94:	2b40      	cmp	r3, #64	; 0x40
 8006a96:	d007      	beq.n	8006aa8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ab0:	d14b      	bne.n	8006b4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <HAL_SPI_Transmit+0xf6>
 8006aba:	8afb      	ldrh	r3, [r7, #22]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d13e      	bne.n	8006b3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac4:	881a      	ldrh	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad0:	1c9a      	adds	r2, r3, #2
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ae4:	e02b      	b.n	8006b3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d112      	bne.n	8006b1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af8:	881a      	ldrh	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b04:	1c9a      	adds	r2, r3, #2
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b18:	e011      	b.n	8006b3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b1a:	f7fd fde5 	bl	80046e8 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d803      	bhi.n	8006b32 <HAL_SPI_Transmit+0x168>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d102      	bne.n	8006b38 <HAL_SPI_Transmit+0x16e>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d102      	bne.n	8006b3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b3c:	e074      	b.n	8006c28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1ce      	bne.n	8006ae6 <HAL_SPI_Transmit+0x11c>
 8006b48:	e04c      	b.n	8006be4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <HAL_SPI_Transmit+0x18e>
 8006b52:	8afb      	ldrh	r3, [r7, #22]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d140      	bne.n	8006bda <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	330c      	adds	r3, #12
 8006b62:	7812      	ldrb	r2, [r2, #0]
 8006b64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b7e:	e02c      	b.n	8006bda <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d113      	bne.n	8006bb6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	330c      	adds	r3, #12
 8006b98:	7812      	ldrb	r2, [r2, #0]
 8006b9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	3b01      	subs	r3, #1
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006bb4:	e011      	b.n	8006bda <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bb6:	f7fd fd97 	bl	80046e8 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d803      	bhi.n	8006bce <HAL_SPI_Transmit+0x204>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bcc:	d102      	bne.n	8006bd4 <HAL_SPI_Transmit+0x20a>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d102      	bne.n	8006bda <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006bd8:	e026      	b.n	8006c28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1cd      	bne.n	8006b80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fbcb 	bl	8007384 <SPI_EndRxTxTransaction>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c02:	2300      	movs	r3, #0
 8006c04:	613b      	str	r3, [r7, #16]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	613b      	str	r3, [r7, #16]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	77fb      	strb	r3, [r7, #31]
 8006c24:	e000      	b.n	8006c28 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006c26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c38:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b088      	sub	sp, #32
 8006c46:	af02      	add	r7, sp, #8
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	603b      	str	r3, [r7, #0]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c5e:	d112      	bne.n	8006c86 <HAL_SPI_Receive+0x44>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10e      	bne.n	8006c86 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006c70:	88fa      	ldrh	r2, [r7, #6]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	4613      	mov	r3, r2
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 f8f1 	bl	8006e64 <HAL_SPI_TransmitReceive>
 8006c82:	4603      	mov	r3, r0
 8006c84:	e0ea      	b.n	8006e5c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_SPI_Receive+0x52>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e0e3      	b.n	8006e5c <HAL_SPI_Receive+0x21a>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c9c:	f7fd fd24 	bl	80046e8 <HAL_GetTick>
 8006ca0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d002      	beq.n	8006cb4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006cae:	2302      	movs	r3, #2
 8006cb0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cb2:	e0ca      	b.n	8006e4a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <HAL_SPI_Receive+0x7e>
 8006cba:	88fb      	ldrh	r3, [r7, #6]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d102      	bne.n	8006cc6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006cc4:	e0c1      	b.n	8006e4a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2204      	movs	r2, #4
 8006cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	88fa      	ldrh	r2, [r7, #6]
 8006cde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	88fa      	ldrh	r2, [r7, #6]
 8006ce4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d0c:	d10f      	bne.n	8006d2e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d38:	2b40      	cmp	r3, #64	; 0x40
 8006d3a:	d007      	beq.n	8006d4c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d162      	bne.n	8006e1a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006d54:	e02e      	b.n	8006db4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d115      	bne.n	8006d90 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f103 020c 	add.w	r2, r3, #12
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d70:	7812      	ldrb	r2, [r2, #0]
 8006d72:	b2d2      	uxtb	r2, r2
 8006d74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d8e:	e011      	b.n	8006db4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d90:	f7fd fcaa 	bl	80046e8 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d803      	bhi.n	8006da8 <HAL_SPI_Receive+0x166>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da6:	d102      	bne.n	8006dae <HAL_SPI_Receive+0x16c>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d102      	bne.n	8006db4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006db2:	e04a      	b.n	8006e4a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1cb      	bne.n	8006d56 <HAL_SPI_Receive+0x114>
 8006dbe:	e031      	b.n	8006e24 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d113      	bne.n	8006df6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd8:	b292      	uxth	r2, r2
 8006dda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de0:	1c9a      	adds	r2, r3, #2
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	3b01      	subs	r3, #1
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006df4:	e011      	b.n	8006e1a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006df6:	f7fd fc77 	bl	80046e8 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d803      	bhi.n	8006e0e <HAL_SPI_Receive+0x1cc>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0c:	d102      	bne.n	8006e14 <HAL_SPI_Receive+0x1d2>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d102      	bne.n	8006e1a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e18:	e017      	b.n	8006e4a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1cd      	bne.n	8006dc0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 fa45 	bl	80072b8 <SPI_EndRxTransaction>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2220      	movs	r2, #32
 8006e38:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	75fb      	strb	r3, [r7, #23]
 8006e46:	e000      	b.n	8006e4a <HAL_SPI_Receive+0x208>
  }

error :
 8006e48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08c      	sub	sp, #48	; 0x30
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e72:	2301      	movs	r3, #1
 8006e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d101      	bne.n	8006e8a <HAL_SPI_TransmitReceive+0x26>
 8006e86:	2302      	movs	r3, #2
 8006e88:	e18a      	b.n	80071a0 <HAL_SPI_TransmitReceive+0x33c>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e92:	f7fd fc29 	bl	80046e8 <HAL_GetTick>
 8006e96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006ea8:	887b      	ldrh	r3, [r7, #2]
 8006eaa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006eac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d00f      	beq.n	8006ed4 <HAL_SPI_TransmitReceive+0x70>
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eba:	d107      	bne.n	8006ecc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d103      	bne.n	8006ecc <HAL_SPI_TransmitReceive+0x68>
 8006ec4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d003      	beq.n	8006ed4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006ecc:	2302      	movs	r3, #2
 8006ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ed2:	e15b      	b.n	800718c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d005      	beq.n	8006ee6 <HAL_SPI_TransmitReceive+0x82>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <HAL_SPI_TransmitReceive+0x82>
 8006ee0:	887b      	ldrh	r3, [r7, #2]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d103      	bne.n	8006eee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006eec:	e14e      	b.n	800718c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	d003      	beq.n	8006f02 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2205      	movs	r2, #5
 8006efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	887a      	ldrh	r2, [r7, #2]
 8006f12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	887a      	ldrh	r2, [r7, #2]
 8006f18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	887a      	ldrh	r2, [r7, #2]
 8006f24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	887a      	ldrh	r2, [r7, #2]
 8006f2a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f42:	2b40      	cmp	r3, #64	; 0x40
 8006f44:	d007      	beq.n	8006f56 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f5e:	d178      	bne.n	8007052 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <HAL_SPI_TransmitReceive+0x10a>
 8006f68:	8b7b      	ldrh	r3, [r7, #26]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d166      	bne.n	800703c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	881a      	ldrh	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7e:	1c9a      	adds	r2, r3, #2
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f92:	e053      	b.n	800703c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d11b      	bne.n	8006fda <HAL_SPI_TransmitReceive+0x176>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d016      	beq.n	8006fda <HAL_SPI_TransmitReceive+0x176>
 8006fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d113      	bne.n	8006fda <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb6:	881a      	ldrh	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc2:	1c9a      	adds	r2, r3, #2
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d119      	bne.n	800701c <HAL_SPI_TransmitReceive+0x1b8>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d014      	beq.n	800701c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffc:	b292      	uxth	r2, r2
 8006ffe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007004:	1c9a      	adds	r2, r3, #2
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800700e:	b29b      	uxth	r3, r3
 8007010:	3b01      	subs	r3, #1
 8007012:	b29a      	uxth	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007018:	2301      	movs	r3, #1
 800701a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800701c:	f7fd fb64 	bl	80046e8 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007028:	429a      	cmp	r2, r3
 800702a:	d807      	bhi.n	800703c <HAL_SPI_TransmitReceive+0x1d8>
 800702c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007032:	d003      	beq.n	800703c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800703a:	e0a7      	b.n	800718c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1a6      	bne.n	8006f94 <HAL_SPI_TransmitReceive+0x130>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800704a:	b29b      	uxth	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1a1      	bne.n	8006f94 <HAL_SPI_TransmitReceive+0x130>
 8007050:	e07c      	b.n	800714c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_SPI_TransmitReceive+0x1fc>
 800705a:	8b7b      	ldrh	r3, [r7, #26]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d16b      	bne.n	8007138 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	330c      	adds	r3, #12
 800706a:	7812      	ldrb	r2, [r2, #0]
 800706c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800707c:	b29b      	uxth	r3, r3
 800707e:	3b01      	subs	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007086:	e057      	b.n	8007138 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b02      	cmp	r3, #2
 8007094:	d11c      	bne.n	80070d0 <HAL_SPI_TransmitReceive+0x26c>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800709a:	b29b      	uxth	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	d017      	beq.n	80070d0 <HAL_SPI_TransmitReceive+0x26c>
 80070a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d114      	bne.n	80070d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	330c      	adds	r3, #12
 80070b0:	7812      	ldrb	r2, [r2, #0]
 80070b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d119      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x2ae>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d014      	beq.n	8007112 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f2:	b2d2      	uxtb	r2, r2
 80070f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007104:	b29b      	uxth	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	b29a      	uxth	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800710e:	2301      	movs	r3, #1
 8007110:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007112:	f7fd fae9 	bl	80046e8 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800711e:	429a      	cmp	r2, r3
 8007120:	d803      	bhi.n	800712a <HAL_SPI_TransmitReceive+0x2c6>
 8007122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007128:	d102      	bne.n	8007130 <HAL_SPI_TransmitReceive+0x2cc>
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712c:	2b00      	cmp	r3, #0
 800712e:	d103      	bne.n	8007138 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007136:	e029      	b.n	800718c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1a2      	bne.n	8007088 <HAL_SPI_TransmitReceive+0x224>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d19d      	bne.n	8007088 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800714c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800714e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 f917 	bl	8007384 <SPI_EndRxTxTransaction>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d006      	beq.n	800716a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2220      	movs	r2, #32
 8007166:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007168:	e010      	b.n	800718c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10b      	bne.n	800718a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007172:	2300      	movs	r3, #0
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	617b      	str	r3, [r7, #20]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	617b      	str	r3, [r7, #20]
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	e000      	b.n	800718c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800718a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800719c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3730      	adds	r7, #48	; 0x30
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	4613      	mov	r3, r2
 80071b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071b8:	f7fd fa96 	bl	80046e8 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c0:	1a9b      	subs	r3, r3, r2
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	4413      	add	r3, r2
 80071c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071c8:	f7fd fa8e 	bl	80046e8 <HAL_GetTick>
 80071cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071ce:	4b39      	ldr	r3, [pc, #228]	; (80072b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	015b      	lsls	r3, r3, #5
 80071d4:	0d1b      	lsrs	r3, r3, #20
 80071d6:	69fa      	ldr	r2, [r7, #28]
 80071d8:	fb02 f303 	mul.w	r3, r2, r3
 80071dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071de:	e054      	b.n	800728a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e6:	d050      	beq.n	800728a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071e8:	f7fd fa7e 	bl	80046e8 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	69fa      	ldr	r2, [r7, #28]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d902      	bls.n	80071fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d13d      	bne.n	800727a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800720c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007216:	d111      	bne.n	800723c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007220:	d004      	beq.n	800722c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800722a:	d107      	bne.n	800723c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800723a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007244:	d10f      	bne.n	8007266 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007264:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e017      	b.n	80072aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d101      	bne.n	8007284 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	3b01      	subs	r3, #1
 8007288:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	4013      	ands	r3, r2
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	429a      	cmp	r2, r3
 8007298:	bf0c      	ite	eq
 800729a:	2301      	moveq	r3, #1
 800729c:	2300      	movne	r3, #0
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	461a      	mov	r2, r3
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d19b      	bne.n	80071e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3720      	adds	r7, #32
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	200000b4 	.word	0x200000b4

080072b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af02      	add	r7, sp, #8
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072cc:	d111      	bne.n	80072f2 <SPI_EndRxTransaction+0x3a>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d6:	d004      	beq.n	80072e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072e0:	d107      	bne.n	80072f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072fa:	d12a      	bne.n	8007352 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007304:	d012      	beq.n	800732c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2200      	movs	r2, #0
 800730e:	2180      	movs	r1, #128	; 0x80
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7ff ff49 	bl	80071a8 <SPI_WaitFlagStateUntilTimeout>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d02d      	beq.n	8007378 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007320:	f043 0220 	orr.w	r2, r3, #32
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e026      	b.n	800737a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2200      	movs	r2, #0
 8007334:	2101      	movs	r1, #1
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f7ff ff36 	bl	80071a8 <SPI_WaitFlagStateUntilTimeout>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d01a      	beq.n	8007378 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007346:	f043 0220 	orr.w	r2, r3, #32
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e013      	b.n	800737a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2200      	movs	r2, #0
 800735a:	2101      	movs	r1, #1
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f7ff ff23 	bl	80071a8 <SPI_WaitFlagStateUntilTimeout>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d007      	beq.n	8007378 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736c:	f043 0220 	orr.w	r2, r3, #32
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e000      	b.n	800737a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b088      	sub	sp, #32
 8007388:	af02      	add	r7, sp, #8
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007390:	4b1b      	ldr	r3, [pc, #108]	; (8007400 <SPI_EndRxTxTransaction+0x7c>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a1b      	ldr	r2, [pc, #108]	; (8007404 <SPI_EndRxTxTransaction+0x80>)
 8007396:	fba2 2303 	umull	r2, r3, r2, r3
 800739a:	0d5b      	lsrs	r3, r3, #21
 800739c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073a0:	fb02 f303 	mul.w	r3, r2, r3
 80073a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ae:	d112      	bne.n	80073d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2200      	movs	r2, #0
 80073b8:	2180      	movs	r1, #128	; 0x80
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f7ff fef4 	bl	80071a8 <SPI_WaitFlagStateUntilTimeout>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d016      	beq.n	80073f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ca:	f043 0220 	orr.w	r2, r3, #32
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e00f      	b.n	80073f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00a      	beq.n	80073f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	3b01      	subs	r3, #1
 80073e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ec:	2b80      	cmp	r3, #128	; 0x80
 80073ee:	d0f2      	beq.n	80073d6 <SPI_EndRxTxTransaction+0x52>
 80073f0:	e000      	b.n	80073f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80073f2:	bf00      	nop
  }

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	200000b4 	.word	0x200000b4
 8007404:	165e9f81 	.word	0x165e9f81

08007408 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e034      	b.n	8007488 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d106      	bne.n	8007438 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f7f9 fb1e 	bl	8000a74 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3308      	adds	r3, #8
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f002 f84e 	bl	80094e4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6818      	ldr	r0, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	461a      	mov	r2, r3
 8007452:	68b9      	ldr	r1, [r7, #8]
 8007454:	f002 f898 	bl	8009588 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6858      	ldr	r0, [r3, #4]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007464:	6879      	ldr	r1, [r7, #4]
 8007466:	f002 f8cd 	bl	8009604 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	6892      	ldr	r2, [r2, #8]
 8007472:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	6892      	ldr	r2, [r2, #8]
 800747e:	f041 0101 	orr.w	r1, r1, #1
 8007482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e041      	b.n	8007526 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d106      	bne.n	80074bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7fc fe30 	bl	800411c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4619      	mov	r1, r3
 80074ce:	4610      	mov	r0, r2
 80074d0:	f000 fc1a 	bl	8007d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b01      	cmp	r3, #1
 8007542:	d001      	beq.n	8007548 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e046      	b.n	80075d6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a23      	ldr	r2, [pc, #140]	; (80075e4 <HAL_TIM_Base_Start+0xb4>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d022      	beq.n	80075a0 <HAL_TIM_Base_Start+0x70>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007562:	d01d      	beq.n	80075a0 <HAL_TIM_Base_Start+0x70>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a1f      	ldr	r2, [pc, #124]	; (80075e8 <HAL_TIM_Base_Start+0xb8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d018      	beq.n	80075a0 <HAL_TIM_Base_Start+0x70>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1e      	ldr	r2, [pc, #120]	; (80075ec <HAL_TIM_Base_Start+0xbc>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d013      	beq.n	80075a0 <HAL_TIM_Base_Start+0x70>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a1c      	ldr	r2, [pc, #112]	; (80075f0 <HAL_TIM_Base_Start+0xc0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d00e      	beq.n	80075a0 <HAL_TIM_Base_Start+0x70>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a1b      	ldr	r2, [pc, #108]	; (80075f4 <HAL_TIM_Base_Start+0xc4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d009      	beq.n	80075a0 <HAL_TIM_Base_Start+0x70>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a19      	ldr	r2, [pc, #100]	; (80075f8 <HAL_TIM_Base_Start+0xc8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d004      	beq.n	80075a0 <HAL_TIM_Base_Start+0x70>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a18      	ldr	r2, [pc, #96]	; (80075fc <HAL_TIM_Base_Start+0xcc>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d111      	bne.n	80075c4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b06      	cmp	r3, #6
 80075b0:	d010      	beq.n	80075d4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f042 0201 	orr.w	r2, r2, #1
 80075c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075c2:	e007      	b.n	80075d4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f042 0201 	orr.w	r2, r2, #1
 80075d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	40010000 	.word	0x40010000
 80075e8:	40000400 	.word	0x40000400
 80075ec:	40000800 	.word	0x40000800
 80075f0:	40000c00 	.word	0x40000c00
 80075f4:	40010400 	.word	0x40010400
 80075f8:	40014000 	.word	0x40014000
 80075fc:	40001800 	.word	0x40001800

08007600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b01      	cmp	r3, #1
 8007612:	d001      	beq.n	8007618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e04e      	b.n	80076b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f042 0201 	orr.w	r2, r2, #1
 800762e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a23      	ldr	r2, [pc, #140]	; (80076c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d022      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x80>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007642:	d01d      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x80>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a1f      	ldr	r2, [pc, #124]	; (80076c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d018      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x80>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a1e      	ldr	r2, [pc, #120]	; (80076cc <HAL_TIM_Base_Start_IT+0xcc>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d013      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x80>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a1c      	ldr	r2, [pc, #112]	; (80076d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00e      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x80>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a1b      	ldr	r2, [pc, #108]	; (80076d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d009      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x80>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a19      	ldr	r2, [pc, #100]	; (80076d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d004      	beq.n	8007680 <HAL_TIM_Base_Start_IT+0x80>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a18      	ldr	r2, [pc, #96]	; (80076dc <HAL_TIM_Base_Start_IT+0xdc>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d111      	bne.n	80076a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b06      	cmp	r3, #6
 8007690:	d010      	beq.n	80076b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f042 0201 	orr.w	r2, r2, #1
 80076a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a2:	e007      	b.n	80076b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0201 	orr.w	r2, r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	40010000 	.word	0x40010000
 80076c8:	40000400 	.word	0x40000400
 80076cc:	40000800 	.word	0x40000800
 80076d0:	40000c00 	.word	0x40000c00
 80076d4:	40010400 	.word	0x40010400
 80076d8:	40014000 	.word	0x40014000
 80076dc:	40001800 	.word	0x40001800

080076e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e041      	b.n	8007776 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d106      	bne.n	800770c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f839 	bl	800777e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	3304      	adds	r3, #4
 800771c:	4619      	mov	r1, r3
 800771e:	4610      	mov	r0, r2
 8007720:	f000 faf2 	bl	8007d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800777e:	b480      	push	{r7}
 8007780:	b083      	sub	sp, #12
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d122      	bne.n	80077ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d11b      	bne.n	80077ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f06f 0202 	mvn.w	r2, #2
 80077be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	699b      	ldr	r3, [r3, #24]
 80077cc:	f003 0303 	and.w	r3, r3, #3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fa78 	bl	8007cca <HAL_TIM_IC_CaptureCallback>
 80077da:	e005      	b.n	80077e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fa6a 	bl	8007cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa7b 	bl	8007cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d122      	bne.n	8007842 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b04      	cmp	r3, #4
 8007808:	d11b      	bne.n	8007842 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f06f 0204 	mvn.w	r2, #4
 8007812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fa4e 	bl	8007cca <HAL_TIM_IC_CaptureCallback>
 800782e:	e005      	b.n	800783c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fa40 	bl	8007cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fa51 	bl	8007cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	f003 0308 	and.w	r3, r3, #8
 800784c:	2b08      	cmp	r3, #8
 800784e:	d122      	bne.n	8007896 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	f003 0308 	and.w	r3, r3, #8
 800785a:	2b08      	cmp	r3, #8
 800785c:	d11b      	bne.n	8007896 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f06f 0208 	mvn.w	r2, #8
 8007866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2204      	movs	r2, #4
 800786c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	f003 0303 	and.w	r3, r3, #3
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fa24 	bl	8007cca <HAL_TIM_IC_CaptureCallback>
 8007882:	e005      	b.n	8007890 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fa16 	bl	8007cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fa27 	bl	8007cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	f003 0310 	and.w	r3, r3, #16
 80078a0:	2b10      	cmp	r3, #16
 80078a2:	d122      	bne.n	80078ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f003 0310 	and.w	r3, r3, #16
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d11b      	bne.n	80078ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f06f 0210 	mvn.w	r2, #16
 80078ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2208      	movs	r2, #8
 80078c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d003      	beq.n	80078d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f9fa 	bl	8007cca <HAL_TIM_IC_CaptureCallback>
 80078d6:	e005      	b.n	80078e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f9ec 	bl	8007cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f9fd 	bl	8007cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d10e      	bne.n	8007916 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b01      	cmp	r3, #1
 8007904:	d107      	bne.n	8007916 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f06f 0201 	mvn.w	r2, #1
 800790e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7fc f903 	bl	8003b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007920:	2b80      	cmp	r3, #128	; 0x80
 8007922:	d10e      	bne.n	8007942 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792e:	2b80      	cmp	r3, #128	; 0x80
 8007930:	d107      	bne.n	8007942 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800793a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fd53 	bl	80083e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794c:	2b40      	cmp	r3, #64	; 0x40
 800794e:	d10e      	bne.n	800796e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795a:	2b40      	cmp	r3, #64	; 0x40
 800795c:	d107      	bne.n	800796e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f9c2 	bl	8007cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	f003 0320 	and.w	r3, r3, #32
 8007978:	2b20      	cmp	r3, #32
 800797a:	d10e      	bne.n	800799a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b20      	cmp	r3, #32
 8007988:	d107      	bne.n	800799a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f06f 0220 	mvn.w	r2, #32
 8007992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fd1d 	bl	80083d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800799a:	bf00      	nop
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d101      	bne.n	80079c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079be:	2302      	movs	r3, #2
 80079c0:	e0ae      	b.n	8007b20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b0c      	cmp	r3, #12
 80079ce:	f200 809f 	bhi.w	8007b10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80079d2:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d8:	08007a0d 	.word	0x08007a0d
 80079dc:	08007b11 	.word	0x08007b11
 80079e0:	08007b11 	.word	0x08007b11
 80079e4:	08007b11 	.word	0x08007b11
 80079e8:	08007a4d 	.word	0x08007a4d
 80079ec:	08007b11 	.word	0x08007b11
 80079f0:	08007b11 	.word	0x08007b11
 80079f4:	08007b11 	.word	0x08007b11
 80079f8:	08007a8f 	.word	0x08007a8f
 80079fc:	08007b11 	.word	0x08007b11
 8007a00:	08007b11 	.word	0x08007b11
 8007a04:	08007b11 	.word	0x08007b11
 8007a08:	08007acf 	.word	0x08007acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68b9      	ldr	r1, [r7, #8]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 fa18 	bl	8007e48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	699a      	ldr	r2, [r3, #24]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0208 	orr.w	r2, r2, #8
 8007a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	699a      	ldr	r2, [r3, #24]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 0204 	bic.w	r2, r2, #4
 8007a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6999      	ldr	r1, [r3, #24]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	691a      	ldr	r2, [r3, #16]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	619a      	str	r2, [r3, #24]
      break;
 8007a4a:	e064      	b.n	8007b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68b9      	ldr	r1, [r7, #8]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 fa68 	bl	8007f28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699a      	ldr	r2, [r3, #24]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	699a      	ldr	r2, [r3, #24]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6999      	ldr	r1, [r3, #24]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	021a      	lsls	r2, r3, #8
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	619a      	str	r2, [r3, #24]
      break;
 8007a8c:	e043      	b.n	8007b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68b9      	ldr	r1, [r7, #8]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 fabd 	bl	8008014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69da      	ldr	r2, [r3, #28]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f042 0208 	orr.w	r2, r2, #8
 8007aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	69da      	ldr	r2, [r3, #28]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f022 0204 	bic.w	r2, r2, #4
 8007ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	69d9      	ldr	r1, [r3, #28]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	691a      	ldr	r2, [r3, #16]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	61da      	str	r2, [r3, #28]
      break;
 8007acc:	e023      	b.n	8007b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68b9      	ldr	r1, [r7, #8]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f000 fb11 	bl	80080fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69da      	ldr	r2, [r3, #28]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69da      	ldr	r2, [r3, #28]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69d9      	ldr	r1, [r3, #28]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	021a      	lsls	r2, r3, #8
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	61da      	str	r2, [r3, #28]
      break;
 8007b0e:	e002      	b.n	8007b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]
      break;
 8007b14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d101      	bne.n	8007b44 <HAL_TIM_ConfigClockSource+0x1c>
 8007b40:	2302      	movs	r3, #2
 8007b42:	e0b4      	b.n	8007cae <HAL_TIM_ConfigClockSource+0x186>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b7c:	d03e      	beq.n	8007bfc <HAL_TIM_ConfigClockSource+0xd4>
 8007b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b82:	f200 8087 	bhi.w	8007c94 <HAL_TIM_ConfigClockSource+0x16c>
 8007b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b8a:	f000 8086 	beq.w	8007c9a <HAL_TIM_ConfigClockSource+0x172>
 8007b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b92:	d87f      	bhi.n	8007c94 <HAL_TIM_ConfigClockSource+0x16c>
 8007b94:	2b70      	cmp	r3, #112	; 0x70
 8007b96:	d01a      	beq.n	8007bce <HAL_TIM_ConfigClockSource+0xa6>
 8007b98:	2b70      	cmp	r3, #112	; 0x70
 8007b9a:	d87b      	bhi.n	8007c94 <HAL_TIM_ConfigClockSource+0x16c>
 8007b9c:	2b60      	cmp	r3, #96	; 0x60
 8007b9e:	d050      	beq.n	8007c42 <HAL_TIM_ConfigClockSource+0x11a>
 8007ba0:	2b60      	cmp	r3, #96	; 0x60
 8007ba2:	d877      	bhi.n	8007c94 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba4:	2b50      	cmp	r3, #80	; 0x50
 8007ba6:	d03c      	beq.n	8007c22 <HAL_TIM_ConfigClockSource+0xfa>
 8007ba8:	2b50      	cmp	r3, #80	; 0x50
 8007baa:	d873      	bhi.n	8007c94 <HAL_TIM_ConfigClockSource+0x16c>
 8007bac:	2b40      	cmp	r3, #64	; 0x40
 8007bae:	d058      	beq.n	8007c62 <HAL_TIM_ConfigClockSource+0x13a>
 8007bb0:	2b40      	cmp	r3, #64	; 0x40
 8007bb2:	d86f      	bhi.n	8007c94 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb4:	2b30      	cmp	r3, #48	; 0x30
 8007bb6:	d064      	beq.n	8007c82 <HAL_TIM_ConfigClockSource+0x15a>
 8007bb8:	2b30      	cmp	r3, #48	; 0x30
 8007bba:	d86b      	bhi.n	8007c94 <HAL_TIM_ConfigClockSource+0x16c>
 8007bbc:	2b20      	cmp	r3, #32
 8007bbe:	d060      	beq.n	8007c82 <HAL_TIM_ConfigClockSource+0x15a>
 8007bc0:	2b20      	cmp	r3, #32
 8007bc2:	d867      	bhi.n	8007c94 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d05c      	beq.n	8007c82 <HAL_TIM_ConfigClockSource+0x15a>
 8007bc8:	2b10      	cmp	r3, #16
 8007bca:	d05a      	beq.n	8007c82 <HAL_TIM_ConfigClockSource+0x15a>
 8007bcc:	e062      	b.n	8007c94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	6899      	ldr	r1, [r3, #8]
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	f000 fb5d 	bl	800829c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	609a      	str	r2, [r3, #8]
      break;
 8007bfa:	e04f      	b.n	8007c9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6818      	ldr	r0, [r3, #0]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	6899      	ldr	r1, [r3, #8]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f000 fb46 	bl	800829c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689a      	ldr	r2, [r3, #8]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c1e:	609a      	str	r2, [r3, #8]
      break;
 8007c20:	e03c      	b.n	8007c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	6859      	ldr	r1, [r3, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	f000 faba 	bl	80081a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2150      	movs	r1, #80	; 0x50
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fb13 	bl	8008266 <TIM_ITRx_SetConfig>
      break;
 8007c40:	e02c      	b.n	8007c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6818      	ldr	r0, [r3, #0]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	6859      	ldr	r1, [r3, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f000 fad9 	bl	8008206 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2160      	movs	r1, #96	; 0x60
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 fb03 	bl	8008266 <TIM_ITRx_SetConfig>
      break;
 8007c60:	e01c      	b.n	8007c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6818      	ldr	r0, [r3, #0]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	6859      	ldr	r1, [r3, #4]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	f000 fa9a 	bl	80081a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2140      	movs	r1, #64	; 0x40
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 faf3 	bl	8008266 <TIM_ITRx_SetConfig>
      break;
 8007c80:	e00c      	b.n	8007c9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	f000 faea 	bl	8008266 <TIM_ITRx_SetConfig>
      break;
 8007c92:	e003      	b.n	8007c9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	73fb      	strb	r3, [r7, #15]
      break;
 8007c98:	e000      	b.n	8007c9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b083      	sub	sp, #12
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ce6:	bf00      	nop
 8007ce8:	370c      	adds	r7, #12
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cfa:	bf00      	nop
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
	...

08007d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a40      	ldr	r2, [pc, #256]	; (8007e1c <TIM_Base_SetConfig+0x114>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d013      	beq.n	8007d48 <TIM_Base_SetConfig+0x40>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d26:	d00f      	beq.n	8007d48 <TIM_Base_SetConfig+0x40>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a3d      	ldr	r2, [pc, #244]	; (8007e20 <TIM_Base_SetConfig+0x118>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00b      	beq.n	8007d48 <TIM_Base_SetConfig+0x40>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a3c      	ldr	r2, [pc, #240]	; (8007e24 <TIM_Base_SetConfig+0x11c>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d007      	beq.n	8007d48 <TIM_Base_SetConfig+0x40>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a3b      	ldr	r2, [pc, #236]	; (8007e28 <TIM_Base_SetConfig+0x120>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d003      	beq.n	8007d48 <TIM_Base_SetConfig+0x40>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a3a      	ldr	r2, [pc, #232]	; (8007e2c <TIM_Base_SetConfig+0x124>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d108      	bne.n	8007d5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a2f      	ldr	r2, [pc, #188]	; (8007e1c <TIM_Base_SetConfig+0x114>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d02b      	beq.n	8007dba <TIM_Base_SetConfig+0xb2>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d68:	d027      	beq.n	8007dba <TIM_Base_SetConfig+0xb2>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a2c      	ldr	r2, [pc, #176]	; (8007e20 <TIM_Base_SetConfig+0x118>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d023      	beq.n	8007dba <TIM_Base_SetConfig+0xb2>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a2b      	ldr	r2, [pc, #172]	; (8007e24 <TIM_Base_SetConfig+0x11c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d01f      	beq.n	8007dba <TIM_Base_SetConfig+0xb2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a2a      	ldr	r2, [pc, #168]	; (8007e28 <TIM_Base_SetConfig+0x120>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d01b      	beq.n	8007dba <TIM_Base_SetConfig+0xb2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a29      	ldr	r2, [pc, #164]	; (8007e2c <TIM_Base_SetConfig+0x124>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d017      	beq.n	8007dba <TIM_Base_SetConfig+0xb2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a28      	ldr	r2, [pc, #160]	; (8007e30 <TIM_Base_SetConfig+0x128>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d013      	beq.n	8007dba <TIM_Base_SetConfig+0xb2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a27      	ldr	r2, [pc, #156]	; (8007e34 <TIM_Base_SetConfig+0x12c>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00f      	beq.n	8007dba <TIM_Base_SetConfig+0xb2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a26      	ldr	r2, [pc, #152]	; (8007e38 <TIM_Base_SetConfig+0x130>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d00b      	beq.n	8007dba <TIM_Base_SetConfig+0xb2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a25      	ldr	r2, [pc, #148]	; (8007e3c <TIM_Base_SetConfig+0x134>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d007      	beq.n	8007dba <TIM_Base_SetConfig+0xb2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a24      	ldr	r2, [pc, #144]	; (8007e40 <TIM_Base_SetConfig+0x138>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d003      	beq.n	8007dba <TIM_Base_SetConfig+0xb2>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a23      	ldr	r2, [pc, #140]	; (8007e44 <TIM_Base_SetConfig+0x13c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d108      	bne.n	8007dcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a0a      	ldr	r2, [pc, #40]	; (8007e1c <TIM_Base_SetConfig+0x114>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d003      	beq.n	8007e00 <TIM_Base_SetConfig+0xf8>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a0c      	ldr	r2, [pc, #48]	; (8007e2c <TIM_Base_SetConfig+0x124>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d103      	bne.n	8007e08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	691a      	ldr	r2, [r3, #16]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	615a      	str	r2, [r3, #20]
}
 8007e0e:	bf00      	nop
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	40010000 	.word	0x40010000
 8007e20:	40000400 	.word	0x40000400
 8007e24:	40000800 	.word	0x40000800
 8007e28:	40000c00 	.word	0x40000c00
 8007e2c:	40010400 	.word	0x40010400
 8007e30:	40014000 	.word	0x40014000
 8007e34:	40014400 	.word	0x40014400
 8007e38:	40014800 	.word	0x40014800
 8007e3c:	40001800 	.word	0x40001800
 8007e40:	40001c00 	.word	0x40001c00
 8007e44:	40002000 	.word	0x40002000

08007e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	f023 0201 	bic.w	r2, r3, #1
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 0303 	bic.w	r3, r3, #3
 8007e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f023 0302 	bic.w	r3, r3, #2
 8007e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a20      	ldr	r2, [pc, #128]	; (8007f20 <TIM_OC1_SetConfig+0xd8>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d003      	beq.n	8007eac <TIM_OC1_SetConfig+0x64>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a1f      	ldr	r2, [pc, #124]	; (8007f24 <TIM_OC1_SetConfig+0xdc>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d10c      	bne.n	8007ec6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f023 0308 	bic.w	r3, r3, #8
 8007eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	697a      	ldr	r2, [r7, #20]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f023 0304 	bic.w	r3, r3, #4
 8007ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a15      	ldr	r2, [pc, #84]	; (8007f20 <TIM_OC1_SetConfig+0xd8>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d003      	beq.n	8007ed6 <TIM_OC1_SetConfig+0x8e>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a14      	ldr	r2, [pc, #80]	; (8007f24 <TIM_OC1_SetConfig+0xdc>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d111      	bne.n	8007efa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	621a      	str	r2, [r3, #32]
}
 8007f14:	bf00      	nop
 8007f16:	371c      	adds	r7, #28
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	40010000 	.word	0x40010000
 8007f24:	40010400 	.word	0x40010400

08007f28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b087      	sub	sp, #28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	f023 0210 	bic.w	r2, r3, #16
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f023 0320 	bic.w	r3, r3, #32
 8007f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a22      	ldr	r2, [pc, #136]	; (800800c <TIM_OC2_SetConfig+0xe4>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d003      	beq.n	8007f90 <TIM_OC2_SetConfig+0x68>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a21      	ldr	r2, [pc, #132]	; (8008010 <TIM_OC2_SetConfig+0xe8>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d10d      	bne.n	8007fac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	011b      	lsls	r3, r3, #4
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007faa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a17      	ldr	r2, [pc, #92]	; (800800c <TIM_OC2_SetConfig+0xe4>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d003      	beq.n	8007fbc <TIM_OC2_SetConfig+0x94>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a16      	ldr	r2, [pc, #88]	; (8008010 <TIM_OC2_SetConfig+0xe8>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d113      	bne.n	8007fe4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	697a      	ldr	r2, [r7, #20]
 8007ffc:	621a      	str	r2, [r3, #32]
}
 8007ffe:	bf00      	nop
 8008000:	371c      	adds	r7, #28
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	40010000 	.word	0x40010000
 8008010:	40010400 	.word	0x40010400

08008014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008014:	b480      	push	{r7}
 8008016:	b087      	sub	sp, #28
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f023 0303 	bic.w	r3, r3, #3
 800804a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	4313      	orrs	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800805c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	021b      	lsls	r3, r3, #8
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	4313      	orrs	r3, r2
 8008068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a21      	ldr	r2, [pc, #132]	; (80080f4 <TIM_OC3_SetConfig+0xe0>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d003      	beq.n	800807a <TIM_OC3_SetConfig+0x66>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a20      	ldr	r2, [pc, #128]	; (80080f8 <TIM_OC3_SetConfig+0xe4>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d10d      	bne.n	8008096 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008080:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	021b      	lsls	r3, r3, #8
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	4313      	orrs	r3, r2
 800808c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a16      	ldr	r2, [pc, #88]	; (80080f4 <TIM_OC3_SetConfig+0xe0>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d003      	beq.n	80080a6 <TIM_OC3_SetConfig+0x92>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a15      	ldr	r2, [pc, #84]	; (80080f8 <TIM_OC3_SetConfig+0xe4>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d113      	bne.n	80080ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	4313      	orrs	r3, r2
 80080c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	011b      	lsls	r3, r3, #4
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	621a      	str	r2, [r3, #32]
}
 80080e8:	bf00      	nop
 80080ea:	371c      	adds	r7, #28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	40010000 	.word	0x40010000
 80080f8:	40010400 	.word	0x40010400

080080fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800812a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	021b      	lsls	r3, r3, #8
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	4313      	orrs	r3, r2
 800813e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	031b      	lsls	r3, r3, #12
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	4313      	orrs	r3, r2
 8008152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a12      	ldr	r2, [pc, #72]	; (80081a0 <TIM_OC4_SetConfig+0xa4>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d003      	beq.n	8008164 <TIM_OC4_SetConfig+0x68>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a11      	ldr	r2, [pc, #68]	; (80081a4 <TIM_OC4_SetConfig+0xa8>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d109      	bne.n	8008178 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800816a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	019b      	lsls	r3, r3, #6
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	4313      	orrs	r3, r2
 8008176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	697a      	ldr	r2, [r7, #20]
 800817c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	621a      	str	r2, [r3, #32]
}
 8008192:	bf00      	nop
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	40010000 	.word	0x40010000
 80081a4:	40010400 	.word	0x40010400

080081a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	f023 0201 	bic.w	r2, r3, #1
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	011b      	lsls	r3, r3, #4
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	4313      	orrs	r3, r2
 80081dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f023 030a 	bic.w	r3, r3, #10
 80081e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081e6:	697a      	ldr	r2, [r7, #20]
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	621a      	str	r2, [r3, #32]
}
 80081fa:	bf00      	nop
 80081fc:	371c      	adds	r7, #28
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008206:	b480      	push	{r7}
 8008208:	b087      	sub	sp, #28
 800820a:	af00      	add	r7, sp, #0
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	f023 0210 	bic.w	r2, r3, #16
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008230:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	031b      	lsls	r3, r3, #12
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	4313      	orrs	r3, r2
 800823a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008242:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	011b      	lsls	r3, r3, #4
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	4313      	orrs	r3, r2
 800824c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	621a      	str	r2, [r3, #32]
}
 800825a:	bf00      	nop
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008266:	b480      	push	{r7}
 8008268:	b085      	sub	sp, #20
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	4313      	orrs	r3, r2
 8008284:	f043 0307 	orr.w	r3, r3, #7
 8008288:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	609a      	str	r2, [r3, #8]
}
 8008290:	bf00      	nop
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	021a      	lsls	r2, r3, #8
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	431a      	orrs	r2, r3
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	609a      	str	r2, [r3, #8]
}
 80082d0:	bf00      	nop
 80082d2:	371c      	adds	r7, #28
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d101      	bne.n	80082f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082f0:	2302      	movs	r3, #2
 80082f2:	e05a      	b.n	80083aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a21      	ldr	r2, [pc, #132]	; (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d022      	beq.n	800837e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008340:	d01d      	beq.n	800837e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a1d      	ldr	r2, [pc, #116]	; (80083bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d018      	beq.n	800837e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a1b      	ldr	r2, [pc, #108]	; (80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d013      	beq.n	800837e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a1a      	ldr	r2, [pc, #104]	; (80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d00e      	beq.n	800837e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a18      	ldr	r2, [pc, #96]	; (80083c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d009      	beq.n	800837e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a17      	ldr	r2, [pc, #92]	; (80083cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d004      	beq.n	800837e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a15      	ldr	r2, [pc, #84]	; (80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d10c      	bne.n	8008398 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	4313      	orrs	r3, r2
 800838e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	40010000 	.word	0x40010000
 80083bc:	40000400 	.word	0x40000400
 80083c0:	40000800 	.word	0x40000800
 80083c4:	40000c00 	.word	0x40000c00
 80083c8:	40010400 	.word	0x40010400
 80083cc:	40014000 	.word	0x40014000
 80083d0:	40001800 	.word	0x40001800

080083d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e03f      	b.n	800848e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d106      	bne.n	8008428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7fc f844 	bl	80044b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2224      	movs	r2, #36	; 0x24
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68da      	ldr	r2, [r3, #12]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800843e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fddb 	bl	8008ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	695a      	ldr	r2, [r3, #20]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2220      	movs	r2, #32
 8008488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b08a      	sub	sp, #40	; 0x28
 800849a:	af02      	add	r7, sp, #8
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	603b      	str	r3, [r7, #0]
 80084a2:	4613      	mov	r3, r2
 80084a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b20      	cmp	r3, #32
 80084b4:	d17c      	bne.n	80085b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <HAL_UART_Transmit+0x2c>
 80084bc:	88fb      	ldrh	r3, [r7, #6]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d101      	bne.n	80084c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e075      	b.n	80085b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d101      	bne.n	80084d4 <HAL_UART_Transmit+0x3e>
 80084d0:	2302      	movs	r3, #2
 80084d2:	e06e      	b.n	80085b2 <HAL_UART_Transmit+0x11c>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2221      	movs	r2, #33	; 0x21
 80084e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084ea:	f7fc f8fd 	bl	80046e8 <HAL_GetTick>
 80084ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	88fa      	ldrh	r2, [r7, #6]
 80084f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	88fa      	ldrh	r2, [r7, #6]
 80084fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008504:	d108      	bne.n	8008518 <HAL_UART_Transmit+0x82>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d104      	bne.n	8008518 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800850e:	2300      	movs	r3, #0
 8008510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	61bb      	str	r3, [r7, #24]
 8008516:	e003      	b.n	8008520 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800851c:	2300      	movs	r3, #0
 800851e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008528:	e02a      	b.n	8008580 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2200      	movs	r2, #0
 8008532:	2180      	movs	r1, #128	; 0x80
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 fb1f 	bl	8008b78 <UART_WaitOnFlagUntilTimeout>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e036      	b.n	80085b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10b      	bne.n	8008562 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008558:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	3302      	adds	r3, #2
 800855e:	61bb      	str	r3, [r7, #24]
 8008560:	e007      	b.n	8008572 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	781a      	ldrb	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	3301      	adds	r3, #1
 8008570:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008576:	b29b      	uxth	r3, r3
 8008578:	3b01      	subs	r3, #1
 800857a:	b29a      	uxth	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008584:	b29b      	uxth	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1cf      	bne.n	800852a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2200      	movs	r2, #0
 8008592:	2140      	movs	r1, #64	; 0x40
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 faef 	bl	8008b78 <UART_WaitOnFlagUntilTimeout>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e006      	b.n	80085b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2220      	movs	r2, #32
 80085a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	e000      	b.n	80085b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80085b0:	2302      	movs	r3, #2
  }
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3720      	adds	r7, #32
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	60b9      	str	r1, [r7, #8]
 80085c4:	4613      	mov	r3, r2
 80085c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b20      	cmp	r3, #32
 80085d2:	d11d      	bne.n	8008610 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <HAL_UART_Receive_IT+0x26>
 80085da:	88fb      	ldrh	r3, [r7, #6]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e016      	b.n	8008612 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d101      	bne.n	80085f2 <HAL_UART_Receive_IT+0x38>
 80085ee:	2302      	movs	r3, #2
 80085f0:	e00f      	b.n	8008612 <HAL_UART_Receive_IT+0x58>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008600:	88fb      	ldrh	r3, [r7, #6]
 8008602:	461a      	mov	r2, r3
 8008604:	68b9      	ldr	r1, [r7, #8]
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	f000 fb24 	bl	8008c54 <UART_Start_Receive_IT>
 800860c:	4603      	mov	r3, r0
 800860e:	e000      	b.n	8008612 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008610:	2302      	movs	r3, #2
  }
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b0ba      	sub	sp, #232	; 0xe8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008642:	2300      	movs	r3, #0
 8008644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008648:	2300      	movs	r3, #0
 800864a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800864e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008652:	f003 030f 	and.w	r3, r3, #15
 8008656:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800865a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10f      	bne.n	8008682 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008666:	f003 0320 	and.w	r3, r3, #32
 800866a:	2b00      	cmp	r3, #0
 800866c:	d009      	beq.n	8008682 <HAL_UART_IRQHandler+0x66>
 800866e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008672:	f003 0320 	and.w	r3, r3, #32
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fc03 	bl	8008e86 <UART_Receive_IT>
      return;
 8008680:	e256      	b.n	8008b30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008686:	2b00      	cmp	r3, #0
 8008688:	f000 80de 	beq.w	8008848 <HAL_UART_IRQHandler+0x22c>
 800868c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b00      	cmp	r3, #0
 8008696:	d106      	bne.n	80086a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800869c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 80d1 	beq.w	8008848 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00b      	beq.n	80086ca <HAL_UART_IRQHandler+0xae>
 80086b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d005      	beq.n	80086ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	f043 0201 	orr.w	r2, r3, #1
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ce:	f003 0304 	and.w	r3, r3, #4
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00b      	beq.n	80086ee <HAL_UART_IRQHandler+0xd2>
 80086d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	f043 0202 	orr.w	r2, r3, #2
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00b      	beq.n	8008712 <HAL_UART_IRQHandler+0xf6>
 80086fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d005      	beq.n	8008712 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870a:	f043 0204 	orr.w	r2, r3, #4
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008716:	f003 0308 	and.w	r3, r3, #8
 800871a:	2b00      	cmp	r3, #0
 800871c:	d011      	beq.n	8008742 <HAL_UART_IRQHandler+0x126>
 800871e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008722:	f003 0320 	and.w	r3, r3, #32
 8008726:	2b00      	cmp	r3, #0
 8008728:	d105      	bne.n	8008736 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800872a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873a:	f043 0208 	orr.w	r2, r3, #8
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 81ed 	beq.w	8008b26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800874c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008750:	f003 0320 	and.w	r3, r3, #32
 8008754:	2b00      	cmp	r3, #0
 8008756:	d008      	beq.n	800876a <HAL_UART_IRQHandler+0x14e>
 8008758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800875c:	f003 0320 	and.w	r3, r3, #32
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fb8e 	bl	8008e86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008774:	2b40      	cmp	r3, #64	; 0x40
 8008776:	bf0c      	ite	eq
 8008778:	2301      	moveq	r3, #1
 800877a:	2300      	movne	r3, #0
 800877c:	b2db      	uxtb	r3, r3
 800877e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008786:	f003 0308 	and.w	r3, r3, #8
 800878a:	2b00      	cmp	r3, #0
 800878c:	d103      	bne.n	8008796 <HAL_UART_IRQHandler+0x17a>
 800878e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008792:	2b00      	cmp	r3, #0
 8008794:	d04f      	beq.n	8008836 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 fa96 	bl	8008cc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a6:	2b40      	cmp	r3, #64	; 0x40
 80087a8:	d141      	bne.n	800882e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3314      	adds	r3, #20
 80087b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3314      	adds	r3, #20
 80087d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087e6:	e841 2300 	strex	r3, r2, [r1]
 80087ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1d9      	bne.n	80087aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d013      	beq.n	8008826 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008802:	4a7d      	ldr	r2, [pc, #500]	; (80089f8 <HAL_UART_IRQHandler+0x3dc>)
 8008804:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880a:	4618      	mov	r0, r3
 800880c:	f7fc fe36 	bl	800547c <HAL_DMA_Abort_IT>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d016      	beq.n	8008844 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008820:	4610      	mov	r0, r2
 8008822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008824:	e00e      	b.n	8008844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f990 	bl	8008b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882c:	e00a      	b.n	8008844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f98c 	bl	8008b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008834:	e006      	b.n	8008844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f988 	bl	8008b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008842:	e170      	b.n	8008b26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008844:	bf00      	nop
    return;
 8008846:	e16e      	b.n	8008b26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800884c:	2b01      	cmp	r3, #1
 800884e:	f040 814a 	bne.w	8008ae6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008856:	f003 0310 	and.w	r3, r3, #16
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 8143 	beq.w	8008ae6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008864:	f003 0310 	and.w	r3, r3, #16
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 813c 	beq.w	8008ae6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800886e:	2300      	movs	r3, #0
 8008870:	60bb      	str	r3, [r7, #8]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	60bb      	str	r3, [r7, #8]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	60bb      	str	r3, [r7, #8]
 8008882:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888e:	2b40      	cmp	r3, #64	; 0x40
 8008890:	f040 80b4 	bne.w	80089fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 8140 	beq.w	8008b2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088b2:	429a      	cmp	r2, r3
 80088b4:	f080 8139 	bcs.w	8008b2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c4:	69db      	ldr	r3, [r3, #28]
 80088c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ca:	f000 8088 	beq.w	80089de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	330c      	adds	r3, #12
 80088d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	330c      	adds	r3, #12
 80088f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80088fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80088fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008902:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008906:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800890a:	e841 2300 	strex	r3, r2, [r1]
 800890e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1d9      	bne.n	80088ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	3314      	adds	r3, #20
 8008920:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008924:	e853 3f00 	ldrex	r3, [r3]
 8008928:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800892a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800892c:	f023 0301 	bic.w	r3, r3, #1
 8008930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3314      	adds	r3, #20
 800893a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800893e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008942:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008946:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e1      	bne.n	800891a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3314      	adds	r3, #20
 800895c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008960:	e853 3f00 	ldrex	r3, [r3]
 8008964:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800896c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3314      	adds	r3, #20
 8008976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800897a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800897c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008980:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e3      	bne.n	8008956 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2220      	movs	r2, #32
 8008992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	330c      	adds	r3, #12
 80089a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089ae:	f023 0310 	bic.w	r3, r3, #16
 80089b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	330c      	adds	r3, #12
 80089bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80089c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80089c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089c8:	e841 2300 	strex	r3, r2, [r1]
 80089cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80089ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1e3      	bne.n	800899c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	4618      	mov	r0, r3
 80089da:	f7fc fcdf 	bl	800539c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f8b6 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089f4:	e099      	b.n	8008b2a <HAL_UART_IRQHandler+0x50e>
 80089f6:	bf00      	nop
 80089f8:	08008d8f 	.word	0x08008d8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 808b 	beq.w	8008b2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 8086 	beq.w	8008b2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	330c      	adds	r3, #12
 8008a28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	330c      	adds	r3, #12
 8008a42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a46:	647a      	str	r2, [r7, #68]	; 0x44
 8008a48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e3      	bne.n	8008a22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3314      	adds	r3, #20
 8008a60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	623b      	str	r3, [r7, #32]
   return(result);
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	f023 0301 	bic.w	r3, r3, #1
 8008a70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3314      	adds	r3, #20
 8008a7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a7e:	633a      	str	r2, [r7, #48]	; 0x30
 8008a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a86:	e841 2300 	strex	r3, r2, [r1]
 8008a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1e3      	bne.n	8008a5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	330c      	adds	r3, #12
 8008aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	e853 3f00 	ldrex	r3, [r3]
 8008aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 0310 	bic.w	r3, r3, #16
 8008ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	330c      	adds	r3, #12
 8008ac0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008ac4:	61fa      	str	r2, [r7, #28]
 8008ac6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	69b9      	ldr	r1, [r7, #24]
 8008aca:	69fa      	ldr	r2, [r7, #28]
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e3      	bne.n	8008aa0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008adc:	4619      	mov	r1, r3
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f83e 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ae4:	e023      	b.n	8008b2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d009      	beq.n	8008b06 <HAL_UART_IRQHandler+0x4ea>
 8008af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f959 	bl	8008db6 <UART_Transmit_IT>
    return;
 8008b04:	e014      	b.n	8008b30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00e      	beq.n	8008b30 <HAL_UART_IRQHandler+0x514>
 8008b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d008      	beq.n	8008b30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f999 	bl	8008e56 <UART_EndTransmit_IT>
    return;
 8008b24:	e004      	b.n	8008b30 <HAL_UART_IRQHandler+0x514>
    return;
 8008b26:	bf00      	nop
 8008b28:	e002      	b.n	8008b30 <HAL_UART_IRQHandler+0x514>
      return;
 8008b2a:	bf00      	nop
 8008b2c:	e000      	b.n	8008b30 <HAL_UART_IRQHandler+0x514>
      return;
 8008b2e:	bf00      	nop
  }
}
 8008b30:	37e8      	adds	r7, #232	; 0xe8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop

08008b38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b090      	sub	sp, #64	; 0x40
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	603b      	str	r3, [r7, #0]
 8008b84:	4613      	mov	r3, r2
 8008b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b88:	e050      	b.n	8008c2c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b90:	d04c      	beq.n	8008c2c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d007      	beq.n	8008ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b98:	f7fb fda6 	bl	80046e8 <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d241      	bcs.n	8008c2c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	330c      	adds	r3, #12
 8008bae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb2:	e853 3f00 	ldrex	r3, [r3]
 8008bb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	330c      	adds	r3, #12
 8008bc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bc8:	637a      	str	r2, [r7, #52]	; 0x34
 8008bca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bd0:	e841 2300 	strex	r3, r2, [r1]
 8008bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1e5      	bne.n	8008ba8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3314      	adds	r3, #20
 8008be2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	e853 3f00 	ldrex	r3, [r3]
 8008bea:	613b      	str	r3, [r7, #16]
   return(result);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f023 0301 	bic.w	r3, r3, #1
 8008bf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	3314      	adds	r3, #20
 8008bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bfc:	623a      	str	r2, [r7, #32]
 8008bfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c00:	69f9      	ldr	r1, [r7, #28]
 8008c02:	6a3a      	ldr	r2, [r7, #32]
 8008c04:	e841 2300 	strex	r3, r2, [r1]
 8008c08:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1e5      	bne.n	8008bdc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2220      	movs	r2, #32
 8008c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e00f      	b.n	8008c4c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	4013      	ands	r3, r2
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	bf0c      	ite	eq
 8008c3c:	2301      	moveq	r3, #1
 8008c3e:	2300      	movne	r3, #0
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	461a      	mov	r2, r3
 8008c44:	79fb      	ldrb	r3, [r7, #7]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d09f      	beq.n	8008b8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3740      	adds	r7, #64	; 0x40
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	88fa      	ldrh	r2, [r7, #6]
 8008c6c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	88fa      	ldrh	r2, [r7, #6]
 8008c72:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2222      	movs	r2, #34	; 0x22
 8008c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68da      	ldr	r2, [r3, #12]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c98:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	695a      	ldr	r2, [r3, #20]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f042 0201 	orr.w	r2, r2, #1
 8008ca8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68da      	ldr	r2, [r3, #12]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f042 0220 	orr.w	r2, r2, #32
 8008cb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b095      	sub	sp, #84	; 0x54
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	330c      	adds	r3, #12
 8008cd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cda:	e853 3f00 	ldrex	r3, [r3]
 8008cde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	330c      	adds	r3, #12
 8008cee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cf0:	643a      	str	r2, [r7, #64]	; 0x40
 8008cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cf8:	e841 2300 	strex	r3, r2, [r1]
 8008cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1e5      	bne.n	8008cd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	3314      	adds	r3, #20
 8008d0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	e853 3f00 	ldrex	r3, [r3]
 8008d12:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	f023 0301 	bic.w	r3, r3, #1
 8008d1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3314      	adds	r3, #20
 8008d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d2c:	e841 2300 	strex	r3, r2, [r1]
 8008d30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1e5      	bne.n	8008d04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d119      	bne.n	8008d74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	330c      	adds	r3, #12
 8008d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	e853 3f00 	ldrex	r3, [r3]
 8008d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f023 0310 	bic.w	r3, r3, #16
 8008d56:	647b      	str	r3, [r7, #68]	; 0x44
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	330c      	adds	r3, #12
 8008d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d60:	61ba      	str	r2, [r7, #24]
 8008d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d64:	6979      	ldr	r1, [r7, #20]
 8008d66:	69ba      	ldr	r2, [r7, #24]
 8008d68:	e841 2300 	strex	r3, r2, [r1]
 8008d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1e5      	bne.n	8008d40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2220      	movs	r2, #32
 8008d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008d82:	bf00      	nop
 8008d84:	3754      	adds	r7, #84	; 0x54
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b084      	sub	sp, #16
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f7ff fecf 	bl	8008b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dae:	bf00      	nop
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b085      	sub	sp, #20
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b21      	cmp	r3, #33	; 0x21
 8008dc8:	d13e      	bne.n	8008e48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dd2:	d114      	bne.n	8008dfe <UART_Transmit_IT+0x48>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d110      	bne.n	8008dfe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	461a      	mov	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008df0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	1c9a      	adds	r2, r3, #2
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	621a      	str	r2, [r3, #32]
 8008dfc:	e008      	b.n	8008e10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	1c59      	adds	r1, r3, #1
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	6211      	str	r1, [r2, #32]
 8008e08:	781a      	ldrb	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	3b01      	subs	r3, #1
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10f      	bne.n	8008e44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68da      	ldr	r2, [r3, #12]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68da      	ldr	r2, [r3, #12]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	e000      	b.n	8008e4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e48:	2302      	movs	r3, #2
  }
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b082      	sub	sp, #8
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68da      	ldr	r2, [r3, #12]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2220      	movs	r2, #32
 8008e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f7ff fe5e 	bl	8008b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b08c      	sub	sp, #48	; 0x30
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b22      	cmp	r3, #34	; 0x22
 8008e98:	f040 80ab 	bne.w	8008ff2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ea4:	d117      	bne.n	8008ed6 <UART_Receive_IT+0x50>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d113      	bne.n	8008ed6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ece:	1c9a      	adds	r2, r3, #2
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8008ed4:	e026      	b.n	8008f24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee8:	d007      	beq.n	8008efa <UART_Receive_IT+0x74>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10a      	bne.n	8008f08 <UART_Receive_IT+0x82>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d106      	bne.n	8008f08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	b2da      	uxtb	r2, r3
 8008f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f04:	701a      	strb	r2, [r3, #0]
 8008f06:	e008      	b.n	8008f1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	4619      	mov	r1, r3
 8008f32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d15a      	bne.n	8008fee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f022 0220 	bic.w	r2, r2, #32
 8008f46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	695a      	ldr	r2, [r3, #20]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f022 0201 	bic.w	r2, r2, #1
 8008f66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2220      	movs	r2, #32
 8008f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d135      	bne.n	8008fe4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	330c      	adds	r3, #12
 8008f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	e853 3f00 	ldrex	r3, [r3]
 8008f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f023 0310 	bic.w	r3, r3, #16
 8008f94:	627b      	str	r3, [r7, #36]	; 0x24
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	330c      	adds	r3, #12
 8008f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f9e:	623a      	str	r2, [r7, #32]
 8008fa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa2:	69f9      	ldr	r1, [r7, #28]
 8008fa4:	6a3a      	ldr	r2, [r7, #32]
 8008fa6:	e841 2300 	strex	r3, r2, [r1]
 8008faa:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1e5      	bne.n	8008f7e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 0310 	and.w	r3, r3, #16
 8008fbc:	2b10      	cmp	r3, #16
 8008fbe:	d10a      	bne.n	8008fd6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	60fb      	str	r3, [r7, #12]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f7ff fdbf 	bl	8008b60 <HAL_UARTEx_RxEventCallback>
 8008fe2:	e002      	b.n	8008fea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f7fb f94d 	bl	8004284 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	e002      	b.n	8008ff4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e000      	b.n	8008ff4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008ff2:	2302      	movs	r3, #2
  }
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3730      	adds	r7, #48	; 0x30
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009000:	b0c0      	sub	sp, #256	; 0x100
 8009002:	af00      	add	r7, sp, #0
 8009004:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009018:	68d9      	ldr	r1, [r3, #12]
 800901a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	ea40 0301 	orr.w	r3, r0, r1
 8009024:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800902a:	689a      	ldr	r2, [r3, #8]
 800902c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	431a      	orrs	r2, r3
 8009034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	431a      	orrs	r2, r3
 800903c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009040:	69db      	ldr	r3, [r3, #28]
 8009042:	4313      	orrs	r3, r2
 8009044:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009054:	f021 010c 	bic.w	r1, r1, #12
 8009058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009062:	430b      	orrs	r3, r1
 8009064:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009076:	6999      	ldr	r1, [r3, #24]
 8009078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	ea40 0301 	orr.w	r3, r0, r1
 8009082:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	4b8f      	ldr	r3, [pc, #572]	; (80092c8 <UART_SetConfig+0x2cc>)
 800908c:	429a      	cmp	r2, r3
 800908e:	d005      	beq.n	800909c <UART_SetConfig+0xa0>
 8009090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	4b8d      	ldr	r3, [pc, #564]	; (80092cc <UART_SetConfig+0x2d0>)
 8009098:	429a      	cmp	r2, r3
 800909a:	d104      	bne.n	80090a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800909c:	f7fd fbf8 	bl	8006890 <HAL_RCC_GetPCLK2Freq>
 80090a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80090a4:	e003      	b.n	80090ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090a6:	f7fd fbdf 	bl	8006868 <HAL_RCC_GetPCLK1Freq>
 80090aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090b8:	f040 810c 	bne.w	80092d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090c0:	2200      	movs	r2, #0
 80090c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80090ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80090ce:	4622      	mov	r2, r4
 80090d0:	462b      	mov	r3, r5
 80090d2:	1891      	adds	r1, r2, r2
 80090d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80090d6:	415b      	adcs	r3, r3
 80090d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80090de:	4621      	mov	r1, r4
 80090e0:	eb12 0801 	adds.w	r8, r2, r1
 80090e4:	4629      	mov	r1, r5
 80090e6:	eb43 0901 	adc.w	r9, r3, r1
 80090ea:	f04f 0200 	mov.w	r2, #0
 80090ee:	f04f 0300 	mov.w	r3, #0
 80090f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090fe:	4690      	mov	r8, r2
 8009100:	4699      	mov	r9, r3
 8009102:	4623      	mov	r3, r4
 8009104:	eb18 0303 	adds.w	r3, r8, r3
 8009108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800910c:	462b      	mov	r3, r5
 800910e:	eb49 0303 	adc.w	r3, r9, r3
 8009112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009122:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009126:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800912a:	460b      	mov	r3, r1
 800912c:	18db      	adds	r3, r3, r3
 800912e:	653b      	str	r3, [r7, #80]	; 0x50
 8009130:	4613      	mov	r3, r2
 8009132:	eb42 0303 	adc.w	r3, r2, r3
 8009136:	657b      	str	r3, [r7, #84]	; 0x54
 8009138:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800913c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009140:	f7f7 f89e 	bl	8000280 <__aeabi_uldivmod>
 8009144:	4602      	mov	r2, r0
 8009146:	460b      	mov	r3, r1
 8009148:	4b61      	ldr	r3, [pc, #388]	; (80092d0 <UART_SetConfig+0x2d4>)
 800914a:	fba3 2302 	umull	r2, r3, r3, r2
 800914e:	095b      	lsrs	r3, r3, #5
 8009150:	011c      	lsls	r4, r3, #4
 8009152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009156:	2200      	movs	r2, #0
 8009158:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800915c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009160:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009164:	4642      	mov	r2, r8
 8009166:	464b      	mov	r3, r9
 8009168:	1891      	adds	r1, r2, r2
 800916a:	64b9      	str	r1, [r7, #72]	; 0x48
 800916c:	415b      	adcs	r3, r3
 800916e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009170:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009174:	4641      	mov	r1, r8
 8009176:	eb12 0a01 	adds.w	sl, r2, r1
 800917a:	4649      	mov	r1, r9
 800917c:	eb43 0b01 	adc.w	fp, r3, r1
 8009180:	f04f 0200 	mov.w	r2, #0
 8009184:	f04f 0300 	mov.w	r3, #0
 8009188:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800918c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009194:	4692      	mov	sl, r2
 8009196:	469b      	mov	fp, r3
 8009198:	4643      	mov	r3, r8
 800919a:	eb1a 0303 	adds.w	r3, sl, r3
 800919e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091a2:	464b      	mov	r3, r9
 80091a4:	eb4b 0303 	adc.w	r3, fp, r3
 80091a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80091ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80091bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80091c0:	460b      	mov	r3, r1
 80091c2:	18db      	adds	r3, r3, r3
 80091c4:	643b      	str	r3, [r7, #64]	; 0x40
 80091c6:	4613      	mov	r3, r2
 80091c8:	eb42 0303 	adc.w	r3, r2, r3
 80091cc:	647b      	str	r3, [r7, #68]	; 0x44
 80091ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80091d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80091d6:	f7f7 f853 	bl	8000280 <__aeabi_uldivmod>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4611      	mov	r1, r2
 80091e0:	4b3b      	ldr	r3, [pc, #236]	; (80092d0 <UART_SetConfig+0x2d4>)
 80091e2:	fba3 2301 	umull	r2, r3, r3, r1
 80091e6:	095b      	lsrs	r3, r3, #5
 80091e8:	2264      	movs	r2, #100	; 0x64
 80091ea:	fb02 f303 	mul.w	r3, r2, r3
 80091ee:	1acb      	subs	r3, r1, r3
 80091f0:	00db      	lsls	r3, r3, #3
 80091f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80091f6:	4b36      	ldr	r3, [pc, #216]	; (80092d0 <UART_SetConfig+0x2d4>)
 80091f8:	fba3 2302 	umull	r2, r3, r3, r2
 80091fc:	095b      	lsrs	r3, r3, #5
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009204:	441c      	add	r4, r3
 8009206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800920a:	2200      	movs	r2, #0
 800920c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009210:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009214:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009218:	4642      	mov	r2, r8
 800921a:	464b      	mov	r3, r9
 800921c:	1891      	adds	r1, r2, r2
 800921e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009220:	415b      	adcs	r3, r3
 8009222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009224:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009228:	4641      	mov	r1, r8
 800922a:	1851      	adds	r1, r2, r1
 800922c:	6339      	str	r1, [r7, #48]	; 0x30
 800922e:	4649      	mov	r1, r9
 8009230:	414b      	adcs	r3, r1
 8009232:	637b      	str	r3, [r7, #52]	; 0x34
 8009234:	f04f 0200 	mov.w	r2, #0
 8009238:	f04f 0300 	mov.w	r3, #0
 800923c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009240:	4659      	mov	r1, fp
 8009242:	00cb      	lsls	r3, r1, #3
 8009244:	4651      	mov	r1, sl
 8009246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800924a:	4651      	mov	r1, sl
 800924c:	00ca      	lsls	r2, r1, #3
 800924e:	4610      	mov	r0, r2
 8009250:	4619      	mov	r1, r3
 8009252:	4603      	mov	r3, r0
 8009254:	4642      	mov	r2, r8
 8009256:	189b      	adds	r3, r3, r2
 8009258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800925c:	464b      	mov	r3, r9
 800925e:	460a      	mov	r2, r1
 8009260:	eb42 0303 	adc.w	r3, r2, r3
 8009264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009274:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009278:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800927c:	460b      	mov	r3, r1
 800927e:	18db      	adds	r3, r3, r3
 8009280:	62bb      	str	r3, [r7, #40]	; 0x28
 8009282:	4613      	mov	r3, r2
 8009284:	eb42 0303 	adc.w	r3, r2, r3
 8009288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800928a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800928e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009292:	f7f6 fff5 	bl	8000280 <__aeabi_uldivmod>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4b0d      	ldr	r3, [pc, #52]	; (80092d0 <UART_SetConfig+0x2d4>)
 800929c:	fba3 1302 	umull	r1, r3, r3, r2
 80092a0:	095b      	lsrs	r3, r3, #5
 80092a2:	2164      	movs	r1, #100	; 0x64
 80092a4:	fb01 f303 	mul.w	r3, r1, r3
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	00db      	lsls	r3, r3, #3
 80092ac:	3332      	adds	r3, #50	; 0x32
 80092ae:	4a08      	ldr	r2, [pc, #32]	; (80092d0 <UART_SetConfig+0x2d4>)
 80092b0:	fba2 2303 	umull	r2, r3, r2, r3
 80092b4:	095b      	lsrs	r3, r3, #5
 80092b6:	f003 0207 	and.w	r2, r3, #7
 80092ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4422      	add	r2, r4
 80092c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80092c4:	e106      	b.n	80094d4 <UART_SetConfig+0x4d8>
 80092c6:	bf00      	nop
 80092c8:	40011000 	.word	0x40011000
 80092cc:	40011400 	.word	0x40011400
 80092d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092d8:	2200      	movs	r2, #0
 80092da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80092de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80092e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80092e6:	4642      	mov	r2, r8
 80092e8:	464b      	mov	r3, r9
 80092ea:	1891      	adds	r1, r2, r2
 80092ec:	6239      	str	r1, [r7, #32]
 80092ee:	415b      	adcs	r3, r3
 80092f0:	627b      	str	r3, [r7, #36]	; 0x24
 80092f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092f6:	4641      	mov	r1, r8
 80092f8:	1854      	adds	r4, r2, r1
 80092fa:	4649      	mov	r1, r9
 80092fc:	eb43 0501 	adc.w	r5, r3, r1
 8009300:	f04f 0200 	mov.w	r2, #0
 8009304:	f04f 0300 	mov.w	r3, #0
 8009308:	00eb      	lsls	r3, r5, #3
 800930a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800930e:	00e2      	lsls	r2, r4, #3
 8009310:	4614      	mov	r4, r2
 8009312:	461d      	mov	r5, r3
 8009314:	4643      	mov	r3, r8
 8009316:	18e3      	adds	r3, r4, r3
 8009318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800931c:	464b      	mov	r3, r9
 800931e:	eb45 0303 	adc.w	r3, r5, r3
 8009322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009332:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009336:	f04f 0200 	mov.w	r2, #0
 800933a:	f04f 0300 	mov.w	r3, #0
 800933e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009342:	4629      	mov	r1, r5
 8009344:	008b      	lsls	r3, r1, #2
 8009346:	4621      	mov	r1, r4
 8009348:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800934c:	4621      	mov	r1, r4
 800934e:	008a      	lsls	r2, r1, #2
 8009350:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009354:	f7f6 ff94 	bl	8000280 <__aeabi_uldivmod>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	4b60      	ldr	r3, [pc, #384]	; (80094e0 <UART_SetConfig+0x4e4>)
 800935e:	fba3 2302 	umull	r2, r3, r3, r2
 8009362:	095b      	lsrs	r3, r3, #5
 8009364:	011c      	lsls	r4, r3, #4
 8009366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800936a:	2200      	movs	r2, #0
 800936c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009370:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009374:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009378:	4642      	mov	r2, r8
 800937a:	464b      	mov	r3, r9
 800937c:	1891      	adds	r1, r2, r2
 800937e:	61b9      	str	r1, [r7, #24]
 8009380:	415b      	adcs	r3, r3
 8009382:	61fb      	str	r3, [r7, #28]
 8009384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009388:	4641      	mov	r1, r8
 800938a:	1851      	adds	r1, r2, r1
 800938c:	6139      	str	r1, [r7, #16]
 800938e:	4649      	mov	r1, r9
 8009390:	414b      	adcs	r3, r1
 8009392:	617b      	str	r3, [r7, #20]
 8009394:	f04f 0200 	mov.w	r2, #0
 8009398:	f04f 0300 	mov.w	r3, #0
 800939c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093a0:	4659      	mov	r1, fp
 80093a2:	00cb      	lsls	r3, r1, #3
 80093a4:	4651      	mov	r1, sl
 80093a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093aa:	4651      	mov	r1, sl
 80093ac:	00ca      	lsls	r2, r1, #3
 80093ae:	4610      	mov	r0, r2
 80093b0:	4619      	mov	r1, r3
 80093b2:	4603      	mov	r3, r0
 80093b4:	4642      	mov	r2, r8
 80093b6:	189b      	adds	r3, r3, r2
 80093b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093bc:	464b      	mov	r3, r9
 80093be:	460a      	mov	r2, r1
 80093c0:	eb42 0303 	adc.w	r3, r2, r3
 80093c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80093d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80093d4:	f04f 0200 	mov.w	r2, #0
 80093d8:	f04f 0300 	mov.w	r3, #0
 80093dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80093e0:	4649      	mov	r1, r9
 80093e2:	008b      	lsls	r3, r1, #2
 80093e4:	4641      	mov	r1, r8
 80093e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093ea:	4641      	mov	r1, r8
 80093ec:	008a      	lsls	r2, r1, #2
 80093ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80093f2:	f7f6 ff45 	bl	8000280 <__aeabi_uldivmod>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	4611      	mov	r1, r2
 80093fc:	4b38      	ldr	r3, [pc, #224]	; (80094e0 <UART_SetConfig+0x4e4>)
 80093fe:	fba3 2301 	umull	r2, r3, r3, r1
 8009402:	095b      	lsrs	r3, r3, #5
 8009404:	2264      	movs	r2, #100	; 0x64
 8009406:	fb02 f303 	mul.w	r3, r2, r3
 800940a:	1acb      	subs	r3, r1, r3
 800940c:	011b      	lsls	r3, r3, #4
 800940e:	3332      	adds	r3, #50	; 0x32
 8009410:	4a33      	ldr	r2, [pc, #204]	; (80094e0 <UART_SetConfig+0x4e4>)
 8009412:	fba2 2303 	umull	r2, r3, r2, r3
 8009416:	095b      	lsrs	r3, r3, #5
 8009418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800941c:	441c      	add	r4, r3
 800941e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009422:	2200      	movs	r2, #0
 8009424:	673b      	str	r3, [r7, #112]	; 0x70
 8009426:	677a      	str	r2, [r7, #116]	; 0x74
 8009428:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800942c:	4642      	mov	r2, r8
 800942e:	464b      	mov	r3, r9
 8009430:	1891      	adds	r1, r2, r2
 8009432:	60b9      	str	r1, [r7, #8]
 8009434:	415b      	adcs	r3, r3
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800943c:	4641      	mov	r1, r8
 800943e:	1851      	adds	r1, r2, r1
 8009440:	6039      	str	r1, [r7, #0]
 8009442:	4649      	mov	r1, r9
 8009444:	414b      	adcs	r3, r1
 8009446:	607b      	str	r3, [r7, #4]
 8009448:	f04f 0200 	mov.w	r2, #0
 800944c:	f04f 0300 	mov.w	r3, #0
 8009450:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009454:	4659      	mov	r1, fp
 8009456:	00cb      	lsls	r3, r1, #3
 8009458:	4651      	mov	r1, sl
 800945a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800945e:	4651      	mov	r1, sl
 8009460:	00ca      	lsls	r2, r1, #3
 8009462:	4610      	mov	r0, r2
 8009464:	4619      	mov	r1, r3
 8009466:	4603      	mov	r3, r0
 8009468:	4642      	mov	r2, r8
 800946a:	189b      	adds	r3, r3, r2
 800946c:	66bb      	str	r3, [r7, #104]	; 0x68
 800946e:	464b      	mov	r3, r9
 8009470:	460a      	mov	r2, r1
 8009472:	eb42 0303 	adc.w	r3, r2, r3
 8009476:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	663b      	str	r3, [r7, #96]	; 0x60
 8009482:	667a      	str	r2, [r7, #100]	; 0x64
 8009484:	f04f 0200 	mov.w	r2, #0
 8009488:	f04f 0300 	mov.w	r3, #0
 800948c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009490:	4649      	mov	r1, r9
 8009492:	008b      	lsls	r3, r1, #2
 8009494:	4641      	mov	r1, r8
 8009496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800949a:	4641      	mov	r1, r8
 800949c:	008a      	lsls	r2, r1, #2
 800949e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80094a2:	f7f6 feed 	bl	8000280 <__aeabi_uldivmod>
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	4b0d      	ldr	r3, [pc, #52]	; (80094e0 <UART_SetConfig+0x4e4>)
 80094ac:	fba3 1302 	umull	r1, r3, r3, r2
 80094b0:	095b      	lsrs	r3, r3, #5
 80094b2:	2164      	movs	r1, #100	; 0x64
 80094b4:	fb01 f303 	mul.w	r3, r1, r3
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	011b      	lsls	r3, r3, #4
 80094bc:	3332      	adds	r3, #50	; 0x32
 80094be:	4a08      	ldr	r2, [pc, #32]	; (80094e0 <UART_SetConfig+0x4e4>)
 80094c0:	fba2 2303 	umull	r2, r3, r2, r3
 80094c4:	095b      	lsrs	r3, r3, #5
 80094c6:	f003 020f 	and.w	r2, r3, #15
 80094ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4422      	add	r2, r4
 80094d2:	609a      	str	r2, [r3, #8]
}
 80094d4:	bf00      	nop
 80094d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80094da:	46bd      	mov	sp, r7
 80094dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094e0:	51eb851f 	.word	0x51eb851f

080094e4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80094ee:	2300      	movs	r3, #0
 80094f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094fc:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	4b20      	ldr	r3, [pc, #128]	; (8009584 <FSMC_NORSRAM_Init+0xa0>)
 8009502:	4013      	ands	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800950e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8009514:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800951a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8009520:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8009526:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800952c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8009532:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8009538:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800953e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8009544:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800954a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8009550:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	4313      	orrs	r3, r2
 8009556:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	2b08      	cmp	r3, #8
 800955e:	d103      	bne.n	8009568 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009566:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68f9      	ldr	r1, [r7, #12]
 8009570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	fff00080 	.word	0xfff00080

08009588 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009588:	b480      	push	{r7}
 800958a:	b087      	sub	sp, #28
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009594:	2300      	movs	r3, #0
 8009596:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095a2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80095aa:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80095b6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80095be:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80095c6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80095d0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	3b02      	subs	r3, #2
 80095d8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80095da:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80095e0:	4313      	orrs	r3, r2
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	1c5a      	adds	r2, r3, #1
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6979      	ldr	r1, [r7, #20]
 80095f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	371c      	adds	r7, #28
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
	...

08009604 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009604:	b480      	push	{r7}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8009612:	2300      	movs	r3, #0
 8009614:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800961c:	d122      	bne.n	8009664 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009626:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	4b15      	ldr	r3, [pc, #84]	; (8009680 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800962c:	4013      	ands	r3, r2
 800962e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800963a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009642:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800964a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009650:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	4313      	orrs	r3, r2
 8009656:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	6979      	ldr	r1, [r7, #20]
 800965e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009662:	e005      	b.n	8009670 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800966c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	371c      	adds	r7, #28
 8009676:	46bd      	mov	sp, r7
 8009678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop
 8009680:	cff00000 	.word	0xcff00000

08009684 <rand>:
 8009684:	4b16      	ldr	r3, [pc, #88]	; (80096e0 <rand+0x5c>)
 8009686:	b510      	push	{r4, lr}
 8009688:	681c      	ldr	r4, [r3, #0]
 800968a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800968c:	b9b3      	cbnz	r3, 80096bc <rand+0x38>
 800968e:	2018      	movs	r0, #24
 8009690:	f000 fa64 	bl	8009b5c <malloc>
 8009694:	4602      	mov	r2, r0
 8009696:	6320      	str	r0, [r4, #48]	; 0x30
 8009698:	b920      	cbnz	r0, 80096a4 <rand+0x20>
 800969a:	4b12      	ldr	r3, [pc, #72]	; (80096e4 <rand+0x60>)
 800969c:	4812      	ldr	r0, [pc, #72]	; (80096e8 <rand+0x64>)
 800969e:	2152      	movs	r1, #82	; 0x52
 80096a0:	f000 f9f2 	bl	8009a88 <__assert_func>
 80096a4:	4911      	ldr	r1, [pc, #68]	; (80096ec <rand+0x68>)
 80096a6:	4b12      	ldr	r3, [pc, #72]	; (80096f0 <rand+0x6c>)
 80096a8:	e9c0 1300 	strd	r1, r3, [r0]
 80096ac:	4b11      	ldr	r3, [pc, #68]	; (80096f4 <rand+0x70>)
 80096ae:	6083      	str	r3, [r0, #8]
 80096b0:	230b      	movs	r3, #11
 80096b2:	8183      	strh	r3, [r0, #12]
 80096b4:	2100      	movs	r1, #0
 80096b6:	2001      	movs	r0, #1
 80096b8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80096bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80096be:	480e      	ldr	r0, [pc, #56]	; (80096f8 <rand+0x74>)
 80096c0:	690b      	ldr	r3, [r1, #16]
 80096c2:	694c      	ldr	r4, [r1, #20]
 80096c4:	4a0d      	ldr	r2, [pc, #52]	; (80096fc <rand+0x78>)
 80096c6:	4358      	muls	r0, r3
 80096c8:	fb02 0004 	mla	r0, r2, r4, r0
 80096cc:	fba3 3202 	umull	r3, r2, r3, r2
 80096d0:	3301      	adds	r3, #1
 80096d2:	eb40 0002 	adc.w	r0, r0, r2
 80096d6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80096da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80096de:	bd10      	pop	{r4, pc}
 80096e0:	20000118 	.word	0x20000118
 80096e4:	08011ac0 	.word	0x08011ac0
 80096e8:	08011ad7 	.word	0x08011ad7
 80096ec:	abcd330e 	.word	0xabcd330e
 80096f0:	e66d1234 	.word	0xe66d1234
 80096f4:	0005deec 	.word	0x0005deec
 80096f8:	5851f42d 	.word	0x5851f42d
 80096fc:	4c957f2d 	.word	0x4c957f2d

08009700 <std>:
 8009700:	2300      	movs	r3, #0
 8009702:	b510      	push	{r4, lr}
 8009704:	4604      	mov	r4, r0
 8009706:	e9c0 3300 	strd	r3, r3, [r0]
 800970a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800970e:	6083      	str	r3, [r0, #8]
 8009710:	8181      	strh	r1, [r0, #12]
 8009712:	6643      	str	r3, [r0, #100]	; 0x64
 8009714:	81c2      	strh	r2, [r0, #14]
 8009716:	6183      	str	r3, [r0, #24]
 8009718:	4619      	mov	r1, r3
 800971a:	2208      	movs	r2, #8
 800971c:	305c      	adds	r0, #92	; 0x5c
 800971e:	f000 f928 	bl	8009972 <memset>
 8009722:	4b0d      	ldr	r3, [pc, #52]	; (8009758 <std+0x58>)
 8009724:	6263      	str	r3, [r4, #36]	; 0x24
 8009726:	4b0d      	ldr	r3, [pc, #52]	; (800975c <std+0x5c>)
 8009728:	62a3      	str	r3, [r4, #40]	; 0x28
 800972a:	4b0d      	ldr	r3, [pc, #52]	; (8009760 <std+0x60>)
 800972c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800972e:	4b0d      	ldr	r3, [pc, #52]	; (8009764 <std+0x64>)
 8009730:	6323      	str	r3, [r4, #48]	; 0x30
 8009732:	4b0d      	ldr	r3, [pc, #52]	; (8009768 <std+0x68>)
 8009734:	6224      	str	r4, [r4, #32]
 8009736:	429c      	cmp	r4, r3
 8009738:	d006      	beq.n	8009748 <std+0x48>
 800973a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800973e:	4294      	cmp	r4, r2
 8009740:	d002      	beq.n	8009748 <std+0x48>
 8009742:	33d0      	adds	r3, #208	; 0xd0
 8009744:	429c      	cmp	r4, r3
 8009746:	d105      	bne.n	8009754 <std+0x54>
 8009748:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800974c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009750:	f000 b996 	b.w	8009a80 <__retarget_lock_init_recursive>
 8009754:	bd10      	pop	{r4, pc}
 8009756:	bf00      	nop
 8009758:	080098ed 	.word	0x080098ed
 800975c:	0800990f 	.word	0x0800990f
 8009760:	08009947 	.word	0x08009947
 8009764:	0800996b 	.word	0x0800996b
 8009768:	20000778 	.word	0x20000778

0800976c <stdio_exit_handler>:
 800976c:	4a02      	ldr	r2, [pc, #8]	; (8009778 <stdio_exit_handler+0xc>)
 800976e:	4903      	ldr	r1, [pc, #12]	; (800977c <stdio_exit_handler+0x10>)
 8009770:	4803      	ldr	r0, [pc, #12]	; (8009780 <stdio_exit_handler+0x14>)
 8009772:	f000 b869 	b.w	8009848 <_fwalk_sglue>
 8009776:	bf00      	nop
 8009778:	200000c0 	.word	0x200000c0
 800977c:	0800a3a1 	.word	0x0800a3a1
 8009780:	200000cc 	.word	0x200000cc

08009784 <cleanup_stdio>:
 8009784:	6841      	ldr	r1, [r0, #4]
 8009786:	4b0c      	ldr	r3, [pc, #48]	; (80097b8 <cleanup_stdio+0x34>)
 8009788:	4299      	cmp	r1, r3
 800978a:	b510      	push	{r4, lr}
 800978c:	4604      	mov	r4, r0
 800978e:	d001      	beq.n	8009794 <cleanup_stdio+0x10>
 8009790:	f000 fe06 	bl	800a3a0 <_fflush_r>
 8009794:	68a1      	ldr	r1, [r4, #8]
 8009796:	4b09      	ldr	r3, [pc, #36]	; (80097bc <cleanup_stdio+0x38>)
 8009798:	4299      	cmp	r1, r3
 800979a:	d002      	beq.n	80097a2 <cleanup_stdio+0x1e>
 800979c:	4620      	mov	r0, r4
 800979e:	f000 fdff 	bl	800a3a0 <_fflush_r>
 80097a2:	68e1      	ldr	r1, [r4, #12]
 80097a4:	4b06      	ldr	r3, [pc, #24]	; (80097c0 <cleanup_stdio+0x3c>)
 80097a6:	4299      	cmp	r1, r3
 80097a8:	d004      	beq.n	80097b4 <cleanup_stdio+0x30>
 80097aa:	4620      	mov	r0, r4
 80097ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097b0:	f000 bdf6 	b.w	800a3a0 <_fflush_r>
 80097b4:	bd10      	pop	{r4, pc}
 80097b6:	bf00      	nop
 80097b8:	20000778 	.word	0x20000778
 80097bc:	200007e0 	.word	0x200007e0
 80097c0:	20000848 	.word	0x20000848

080097c4 <global_stdio_init.part.0>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	4b0b      	ldr	r3, [pc, #44]	; (80097f4 <global_stdio_init.part.0+0x30>)
 80097c8:	4c0b      	ldr	r4, [pc, #44]	; (80097f8 <global_stdio_init.part.0+0x34>)
 80097ca:	4a0c      	ldr	r2, [pc, #48]	; (80097fc <global_stdio_init.part.0+0x38>)
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	4620      	mov	r0, r4
 80097d0:	2200      	movs	r2, #0
 80097d2:	2104      	movs	r1, #4
 80097d4:	f7ff ff94 	bl	8009700 <std>
 80097d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80097dc:	2201      	movs	r2, #1
 80097de:	2109      	movs	r1, #9
 80097e0:	f7ff ff8e 	bl	8009700 <std>
 80097e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80097e8:	2202      	movs	r2, #2
 80097ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097ee:	2112      	movs	r1, #18
 80097f0:	f7ff bf86 	b.w	8009700 <std>
 80097f4:	200008b0 	.word	0x200008b0
 80097f8:	20000778 	.word	0x20000778
 80097fc:	0800976d 	.word	0x0800976d

08009800 <__sfp_lock_acquire>:
 8009800:	4801      	ldr	r0, [pc, #4]	; (8009808 <__sfp_lock_acquire+0x8>)
 8009802:	f000 b93e 	b.w	8009a82 <__retarget_lock_acquire_recursive>
 8009806:	bf00      	nop
 8009808:	200008b9 	.word	0x200008b9

0800980c <__sfp_lock_release>:
 800980c:	4801      	ldr	r0, [pc, #4]	; (8009814 <__sfp_lock_release+0x8>)
 800980e:	f000 b939 	b.w	8009a84 <__retarget_lock_release_recursive>
 8009812:	bf00      	nop
 8009814:	200008b9 	.word	0x200008b9

08009818 <__sinit>:
 8009818:	b510      	push	{r4, lr}
 800981a:	4604      	mov	r4, r0
 800981c:	f7ff fff0 	bl	8009800 <__sfp_lock_acquire>
 8009820:	6a23      	ldr	r3, [r4, #32]
 8009822:	b11b      	cbz	r3, 800982c <__sinit+0x14>
 8009824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009828:	f7ff bff0 	b.w	800980c <__sfp_lock_release>
 800982c:	4b04      	ldr	r3, [pc, #16]	; (8009840 <__sinit+0x28>)
 800982e:	6223      	str	r3, [r4, #32]
 8009830:	4b04      	ldr	r3, [pc, #16]	; (8009844 <__sinit+0x2c>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1f5      	bne.n	8009824 <__sinit+0xc>
 8009838:	f7ff ffc4 	bl	80097c4 <global_stdio_init.part.0>
 800983c:	e7f2      	b.n	8009824 <__sinit+0xc>
 800983e:	bf00      	nop
 8009840:	08009785 	.word	0x08009785
 8009844:	200008b0 	.word	0x200008b0

08009848 <_fwalk_sglue>:
 8009848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800984c:	4607      	mov	r7, r0
 800984e:	4688      	mov	r8, r1
 8009850:	4614      	mov	r4, r2
 8009852:	2600      	movs	r6, #0
 8009854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009858:	f1b9 0901 	subs.w	r9, r9, #1
 800985c:	d505      	bpl.n	800986a <_fwalk_sglue+0x22>
 800985e:	6824      	ldr	r4, [r4, #0]
 8009860:	2c00      	cmp	r4, #0
 8009862:	d1f7      	bne.n	8009854 <_fwalk_sglue+0xc>
 8009864:	4630      	mov	r0, r6
 8009866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800986a:	89ab      	ldrh	r3, [r5, #12]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d907      	bls.n	8009880 <_fwalk_sglue+0x38>
 8009870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009874:	3301      	adds	r3, #1
 8009876:	d003      	beq.n	8009880 <_fwalk_sglue+0x38>
 8009878:	4629      	mov	r1, r5
 800987a:	4638      	mov	r0, r7
 800987c:	47c0      	blx	r8
 800987e:	4306      	orrs	r6, r0
 8009880:	3568      	adds	r5, #104	; 0x68
 8009882:	e7e9      	b.n	8009858 <_fwalk_sglue+0x10>

08009884 <sniprintf>:
 8009884:	b40c      	push	{r2, r3}
 8009886:	b530      	push	{r4, r5, lr}
 8009888:	4b17      	ldr	r3, [pc, #92]	; (80098e8 <sniprintf+0x64>)
 800988a:	1e0c      	subs	r4, r1, #0
 800988c:	681d      	ldr	r5, [r3, #0]
 800988e:	b09d      	sub	sp, #116	; 0x74
 8009890:	da08      	bge.n	80098a4 <sniprintf+0x20>
 8009892:	238b      	movs	r3, #139	; 0x8b
 8009894:	602b      	str	r3, [r5, #0]
 8009896:	f04f 30ff 	mov.w	r0, #4294967295
 800989a:	b01d      	add	sp, #116	; 0x74
 800989c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098a0:	b002      	add	sp, #8
 80098a2:	4770      	bx	lr
 80098a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80098a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80098ac:	bf14      	ite	ne
 80098ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80098b2:	4623      	moveq	r3, r4
 80098b4:	9304      	str	r3, [sp, #16]
 80098b6:	9307      	str	r3, [sp, #28]
 80098b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098bc:	9002      	str	r0, [sp, #8]
 80098be:	9006      	str	r0, [sp, #24]
 80098c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80098c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80098c6:	ab21      	add	r3, sp, #132	; 0x84
 80098c8:	a902      	add	r1, sp, #8
 80098ca:	4628      	mov	r0, r5
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	f000 fa53 	bl	8009d78 <_svfiprintf_r>
 80098d2:	1c43      	adds	r3, r0, #1
 80098d4:	bfbc      	itt	lt
 80098d6:	238b      	movlt	r3, #139	; 0x8b
 80098d8:	602b      	strlt	r3, [r5, #0]
 80098da:	2c00      	cmp	r4, #0
 80098dc:	d0dd      	beq.n	800989a <sniprintf+0x16>
 80098de:	9b02      	ldr	r3, [sp, #8]
 80098e0:	2200      	movs	r2, #0
 80098e2:	701a      	strb	r2, [r3, #0]
 80098e4:	e7d9      	b.n	800989a <sniprintf+0x16>
 80098e6:	bf00      	nop
 80098e8:	20000118 	.word	0x20000118

080098ec <__sread>:
 80098ec:	b510      	push	{r4, lr}
 80098ee:	460c      	mov	r4, r1
 80098f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f4:	f000 f876 	bl	80099e4 <_read_r>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	bfab      	itete	ge
 80098fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009900:	181b      	addge	r3, r3, r0
 8009902:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009906:	bfac      	ite	ge
 8009908:	6563      	strge	r3, [r4, #84]	; 0x54
 800990a:	81a3      	strhlt	r3, [r4, #12]
 800990c:	bd10      	pop	{r4, pc}

0800990e <__swrite>:
 800990e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009912:	461f      	mov	r7, r3
 8009914:	898b      	ldrh	r3, [r1, #12]
 8009916:	05db      	lsls	r3, r3, #23
 8009918:	4605      	mov	r5, r0
 800991a:	460c      	mov	r4, r1
 800991c:	4616      	mov	r6, r2
 800991e:	d505      	bpl.n	800992c <__swrite+0x1e>
 8009920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009924:	2302      	movs	r3, #2
 8009926:	2200      	movs	r2, #0
 8009928:	f000 f84a 	bl	80099c0 <_lseek_r>
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009936:	81a3      	strh	r3, [r4, #12]
 8009938:	4632      	mov	r2, r6
 800993a:	463b      	mov	r3, r7
 800993c:	4628      	mov	r0, r5
 800993e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009942:	f000 b861 	b.w	8009a08 <_write_r>

08009946 <__sseek>:
 8009946:	b510      	push	{r4, lr}
 8009948:	460c      	mov	r4, r1
 800994a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994e:	f000 f837 	bl	80099c0 <_lseek_r>
 8009952:	1c43      	adds	r3, r0, #1
 8009954:	89a3      	ldrh	r3, [r4, #12]
 8009956:	bf15      	itete	ne
 8009958:	6560      	strne	r0, [r4, #84]	; 0x54
 800995a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800995e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009962:	81a3      	strheq	r3, [r4, #12]
 8009964:	bf18      	it	ne
 8009966:	81a3      	strhne	r3, [r4, #12]
 8009968:	bd10      	pop	{r4, pc}

0800996a <__sclose>:
 800996a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800996e:	f000 b817 	b.w	80099a0 <_close_r>

08009972 <memset>:
 8009972:	4402      	add	r2, r0
 8009974:	4603      	mov	r3, r0
 8009976:	4293      	cmp	r3, r2
 8009978:	d100      	bne.n	800997c <memset+0xa>
 800997a:	4770      	bx	lr
 800997c:	f803 1b01 	strb.w	r1, [r3], #1
 8009980:	e7f9      	b.n	8009976 <memset+0x4>

08009982 <strcat>:
 8009982:	b510      	push	{r4, lr}
 8009984:	4602      	mov	r2, r0
 8009986:	7814      	ldrb	r4, [r2, #0]
 8009988:	4613      	mov	r3, r2
 800998a:	3201      	adds	r2, #1
 800998c:	2c00      	cmp	r4, #0
 800998e:	d1fa      	bne.n	8009986 <strcat+0x4>
 8009990:	3b01      	subs	r3, #1
 8009992:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009996:	f803 2f01 	strb.w	r2, [r3, #1]!
 800999a:	2a00      	cmp	r2, #0
 800999c:	d1f9      	bne.n	8009992 <strcat+0x10>
 800999e:	bd10      	pop	{r4, pc}

080099a0 <_close_r>:
 80099a0:	b538      	push	{r3, r4, r5, lr}
 80099a2:	4d06      	ldr	r5, [pc, #24]	; (80099bc <_close_r+0x1c>)
 80099a4:	2300      	movs	r3, #0
 80099a6:	4604      	mov	r4, r0
 80099a8:	4608      	mov	r0, r1
 80099aa:	602b      	str	r3, [r5, #0]
 80099ac:	f7fa fa4f 	bl	8003e4e <_close>
 80099b0:	1c43      	adds	r3, r0, #1
 80099b2:	d102      	bne.n	80099ba <_close_r+0x1a>
 80099b4:	682b      	ldr	r3, [r5, #0]
 80099b6:	b103      	cbz	r3, 80099ba <_close_r+0x1a>
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	bd38      	pop	{r3, r4, r5, pc}
 80099bc:	200008b4 	.word	0x200008b4

080099c0 <_lseek_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4d07      	ldr	r5, [pc, #28]	; (80099e0 <_lseek_r+0x20>)
 80099c4:	4604      	mov	r4, r0
 80099c6:	4608      	mov	r0, r1
 80099c8:	4611      	mov	r1, r2
 80099ca:	2200      	movs	r2, #0
 80099cc:	602a      	str	r2, [r5, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	f7fa fa64 	bl	8003e9c <_lseek>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	d102      	bne.n	80099de <_lseek_r+0x1e>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	b103      	cbz	r3, 80099de <_lseek_r+0x1e>
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	bd38      	pop	{r3, r4, r5, pc}
 80099e0:	200008b4 	.word	0x200008b4

080099e4 <_read_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4d07      	ldr	r5, [pc, #28]	; (8009a04 <_read_r+0x20>)
 80099e8:	4604      	mov	r4, r0
 80099ea:	4608      	mov	r0, r1
 80099ec:	4611      	mov	r1, r2
 80099ee:	2200      	movs	r2, #0
 80099f0:	602a      	str	r2, [r5, #0]
 80099f2:	461a      	mov	r2, r3
 80099f4:	f7fa f9f2 	bl	8003ddc <_read>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d102      	bne.n	8009a02 <_read_r+0x1e>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	b103      	cbz	r3, 8009a02 <_read_r+0x1e>
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	200008b4 	.word	0x200008b4

08009a08 <_write_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4d07      	ldr	r5, [pc, #28]	; (8009a28 <_write_r+0x20>)
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	4608      	mov	r0, r1
 8009a10:	4611      	mov	r1, r2
 8009a12:	2200      	movs	r2, #0
 8009a14:	602a      	str	r2, [r5, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	f7fa f9fd 	bl	8003e16 <_write>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d102      	bne.n	8009a26 <_write_r+0x1e>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	b103      	cbz	r3, 8009a26 <_write_r+0x1e>
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
 8009a28:	200008b4 	.word	0x200008b4

08009a2c <__errno>:
 8009a2c:	4b01      	ldr	r3, [pc, #4]	; (8009a34 <__errno+0x8>)
 8009a2e:	6818      	ldr	r0, [r3, #0]
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	20000118 	.word	0x20000118

08009a38 <__libc_init_array>:
 8009a38:	b570      	push	{r4, r5, r6, lr}
 8009a3a:	4d0d      	ldr	r5, [pc, #52]	; (8009a70 <__libc_init_array+0x38>)
 8009a3c:	4c0d      	ldr	r4, [pc, #52]	; (8009a74 <__libc_init_array+0x3c>)
 8009a3e:	1b64      	subs	r4, r4, r5
 8009a40:	10a4      	asrs	r4, r4, #2
 8009a42:	2600      	movs	r6, #0
 8009a44:	42a6      	cmp	r6, r4
 8009a46:	d109      	bne.n	8009a5c <__libc_init_array+0x24>
 8009a48:	4d0b      	ldr	r5, [pc, #44]	; (8009a78 <__libc_init_array+0x40>)
 8009a4a:	4c0c      	ldr	r4, [pc, #48]	; (8009a7c <__libc_init_array+0x44>)
 8009a4c:	f000 fffa 	bl	800aa44 <_init>
 8009a50:	1b64      	subs	r4, r4, r5
 8009a52:	10a4      	asrs	r4, r4, #2
 8009a54:	2600      	movs	r6, #0
 8009a56:	42a6      	cmp	r6, r4
 8009a58:	d105      	bne.n	8009a66 <__libc_init_array+0x2e>
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}
 8009a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a60:	4798      	blx	r3
 8009a62:	3601      	adds	r6, #1
 8009a64:	e7ee      	b.n	8009a44 <__libc_init_array+0xc>
 8009a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a6a:	4798      	blx	r3
 8009a6c:	3601      	adds	r6, #1
 8009a6e:	e7f2      	b.n	8009a56 <__libc_init_array+0x1e>
 8009a70:	08011ba8 	.word	0x08011ba8
 8009a74:	08011ba8 	.word	0x08011ba8
 8009a78:	08011ba8 	.word	0x08011ba8
 8009a7c:	08011bac 	.word	0x08011bac

08009a80 <__retarget_lock_init_recursive>:
 8009a80:	4770      	bx	lr

08009a82 <__retarget_lock_acquire_recursive>:
 8009a82:	4770      	bx	lr

08009a84 <__retarget_lock_release_recursive>:
 8009a84:	4770      	bx	lr
	...

08009a88 <__assert_func>:
 8009a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a8a:	4614      	mov	r4, r2
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	4b09      	ldr	r3, [pc, #36]	; (8009ab4 <__assert_func+0x2c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4605      	mov	r5, r0
 8009a94:	68d8      	ldr	r0, [r3, #12]
 8009a96:	b14c      	cbz	r4, 8009aac <__assert_func+0x24>
 8009a98:	4b07      	ldr	r3, [pc, #28]	; (8009ab8 <__assert_func+0x30>)
 8009a9a:	9100      	str	r1, [sp, #0]
 8009a9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009aa0:	4906      	ldr	r1, [pc, #24]	; (8009abc <__assert_func+0x34>)
 8009aa2:	462b      	mov	r3, r5
 8009aa4:	f000 fca4 	bl	800a3f0 <fiprintf>
 8009aa8:	f000 fcec 	bl	800a484 <abort>
 8009aac:	4b04      	ldr	r3, [pc, #16]	; (8009ac0 <__assert_func+0x38>)
 8009aae:	461c      	mov	r4, r3
 8009ab0:	e7f3      	b.n	8009a9a <__assert_func+0x12>
 8009ab2:	bf00      	nop
 8009ab4:	20000118 	.word	0x20000118
 8009ab8:	08011b2f 	.word	0x08011b2f
 8009abc:	08011b3c 	.word	0x08011b3c
 8009ac0:	08011b6a 	.word	0x08011b6a

08009ac4 <_free_r>:
 8009ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ac6:	2900      	cmp	r1, #0
 8009ac8:	d044      	beq.n	8009b54 <_free_r+0x90>
 8009aca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ace:	9001      	str	r0, [sp, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ad6:	bfb8      	it	lt
 8009ad8:	18e4      	addlt	r4, r4, r3
 8009ada:	f000 f8e7 	bl	8009cac <__malloc_lock>
 8009ade:	4a1e      	ldr	r2, [pc, #120]	; (8009b58 <_free_r+0x94>)
 8009ae0:	9801      	ldr	r0, [sp, #4]
 8009ae2:	6813      	ldr	r3, [r2, #0]
 8009ae4:	b933      	cbnz	r3, 8009af4 <_free_r+0x30>
 8009ae6:	6063      	str	r3, [r4, #4]
 8009ae8:	6014      	str	r4, [r2, #0]
 8009aea:	b003      	add	sp, #12
 8009aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009af0:	f000 b8e2 	b.w	8009cb8 <__malloc_unlock>
 8009af4:	42a3      	cmp	r3, r4
 8009af6:	d908      	bls.n	8009b0a <_free_r+0x46>
 8009af8:	6825      	ldr	r5, [r4, #0]
 8009afa:	1961      	adds	r1, r4, r5
 8009afc:	428b      	cmp	r3, r1
 8009afe:	bf01      	itttt	eq
 8009b00:	6819      	ldreq	r1, [r3, #0]
 8009b02:	685b      	ldreq	r3, [r3, #4]
 8009b04:	1949      	addeq	r1, r1, r5
 8009b06:	6021      	streq	r1, [r4, #0]
 8009b08:	e7ed      	b.n	8009ae6 <_free_r+0x22>
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	b10b      	cbz	r3, 8009b14 <_free_r+0x50>
 8009b10:	42a3      	cmp	r3, r4
 8009b12:	d9fa      	bls.n	8009b0a <_free_r+0x46>
 8009b14:	6811      	ldr	r1, [r2, #0]
 8009b16:	1855      	adds	r5, r2, r1
 8009b18:	42a5      	cmp	r5, r4
 8009b1a:	d10b      	bne.n	8009b34 <_free_r+0x70>
 8009b1c:	6824      	ldr	r4, [r4, #0]
 8009b1e:	4421      	add	r1, r4
 8009b20:	1854      	adds	r4, r2, r1
 8009b22:	42a3      	cmp	r3, r4
 8009b24:	6011      	str	r1, [r2, #0]
 8009b26:	d1e0      	bne.n	8009aea <_free_r+0x26>
 8009b28:	681c      	ldr	r4, [r3, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	6053      	str	r3, [r2, #4]
 8009b2e:	440c      	add	r4, r1
 8009b30:	6014      	str	r4, [r2, #0]
 8009b32:	e7da      	b.n	8009aea <_free_r+0x26>
 8009b34:	d902      	bls.n	8009b3c <_free_r+0x78>
 8009b36:	230c      	movs	r3, #12
 8009b38:	6003      	str	r3, [r0, #0]
 8009b3a:	e7d6      	b.n	8009aea <_free_r+0x26>
 8009b3c:	6825      	ldr	r5, [r4, #0]
 8009b3e:	1961      	adds	r1, r4, r5
 8009b40:	428b      	cmp	r3, r1
 8009b42:	bf04      	itt	eq
 8009b44:	6819      	ldreq	r1, [r3, #0]
 8009b46:	685b      	ldreq	r3, [r3, #4]
 8009b48:	6063      	str	r3, [r4, #4]
 8009b4a:	bf04      	itt	eq
 8009b4c:	1949      	addeq	r1, r1, r5
 8009b4e:	6021      	streq	r1, [r4, #0]
 8009b50:	6054      	str	r4, [r2, #4]
 8009b52:	e7ca      	b.n	8009aea <_free_r+0x26>
 8009b54:	b003      	add	sp, #12
 8009b56:	bd30      	pop	{r4, r5, pc}
 8009b58:	200008bc 	.word	0x200008bc

08009b5c <malloc>:
 8009b5c:	4b02      	ldr	r3, [pc, #8]	; (8009b68 <malloc+0xc>)
 8009b5e:	4601      	mov	r1, r0
 8009b60:	6818      	ldr	r0, [r3, #0]
 8009b62:	f000 b823 	b.w	8009bac <_malloc_r>
 8009b66:	bf00      	nop
 8009b68:	20000118 	.word	0x20000118

08009b6c <sbrk_aligned>:
 8009b6c:	b570      	push	{r4, r5, r6, lr}
 8009b6e:	4e0e      	ldr	r6, [pc, #56]	; (8009ba8 <sbrk_aligned+0x3c>)
 8009b70:	460c      	mov	r4, r1
 8009b72:	6831      	ldr	r1, [r6, #0]
 8009b74:	4605      	mov	r5, r0
 8009b76:	b911      	cbnz	r1, 8009b7e <sbrk_aligned+0x12>
 8009b78:	f000 fc66 	bl	800a448 <_sbrk_r>
 8009b7c:	6030      	str	r0, [r6, #0]
 8009b7e:	4621      	mov	r1, r4
 8009b80:	4628      	mov	r0, r5
 8009b82:	f000 fc61 	bl	800a448 <_sbrk_r>
 8009b86:	1c43      	adds	r3, r0, #1
 8009b88:	d00a      	beq.n	8009ba0 <sbrk_aligned+0x34>
 8009b8a:	1cc4      	adds	r4, r0, #3
 8009b8c:	f024 0403 	bic.w	r4, r4, #3
 8009b90:	42a0      	cmp	r0, r4
 8009b92:	d007      	beq.n	8009ba4 <sbrk_aligned+0x38>
 8009b94:	1a21      	subs	r1, r4, r0
 8009b96:	4628      	mov	r0, r5
 8009b98:	f000 fc56 	bl	800a448 <_sbrk_r>
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	d101      	bne.n	8009ba4 <sbrk_aligned+0x38>
 8009ba0:	f04f 34ff 	mov.w	r4, #4294967295
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	200008c0 	.word	0x200008c0

08009bac <_malloc_r>:
 8009bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bb0:	1ccd      	adds	r5, r1, #3
 8009bb2:	f025 0503 	bic.w	r5, r5, #3
 8009bb6:	3508      	adds	r5, #8
 8009bb8:	2d0c      	cmp	r5, #12
 8009bba:	bf38      	it	cc
 8009bbc:	250c      	movcc	r5, #12
 8009bbe:	2d00      	cmp	r5, #0
 8009bc0:	4607      	mov	r7, r0
 8009bc2:	db01      	blt.n	8009bc8 <_malloc_r+0x1c>
 8009bc4:	42a9      	cmp	r1, r5
 8009bc6:	d905      	bls.n	8009bd4 <_malloc_r+0x28>
 8009bc8:	230c      	movs	r3, #12
 8009bca:	603b      	str	r3, [r7, #0]
 8009bcc:	2600      	movs	r6, #0
 8009bce:	4630      	mov	r0, r6
 8009bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ca8 <_malloc_r+0xfc>
 8009bd8:	f000 f868 	bl	8009cac <__malloc_lock>
 8009bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8009be0:	461c      	mov	r4, r3
 8009be2:	bb5c      	cbnz	r4, 8009c3c <_malloc_r+0x90>
 8009be4:	4629      	mov	r1, r5
 8009be6:	4638      	mov	r0, r7
 8009be8:	f7ff ffc0 	bl	8009b6c <sbrk_aligned>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	4604      	mov	r4, r0
 8009bf0:	d155      	bne.n	8009c9e <_malloc_r+0xf2>
 8009bf2:	f8d8 4000 	ldr.w	r4, [r8]
 8009bf6:	4626      	mov	r6, r4
 8009bf8:	2e00      	cmp	r6, #0
 8009bfa:	d145      	bne.n	8009c88 <_malloc_r+0xdc>
 8009bfc:	2c00      	cmp	r4, #0
 8009bfe:	d048      	beq.n	8009c92 <_malloc_r+0xe6>
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	4631      	mov	r1, r6
 8009c04:	4638      	mov	r0, r7
 8009c06:	eb04 0903 	add.w	r9, r4, r3
 8009c0a:	f000 fc1d 	bl	800a448 <_sbrk_r>
 8009c0e:	4581      	cmp	r9, r0
 8009c10:	d13f      	bne.n	8009c92 <_malloc_r+0xe6>
 8009c12:	6821      	ldr	r1, [r4, #0]
 8009c14:	1a6d      	subs	r5, r5, r1
 8009c16:	4629      	mov	r1, r5
 8009c18:	4638      	mov	r0, r7
 8009c1a:	f7ff ffa7 	bl	8009b6c <sbrk_aligned>
 8009c1e:	3001      	adds	r0, #1
 8009c20:	d037      	beq.n	8009c92 <_malloc_r+0xe6>
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	442b      	add	r3, r5
 8009c26:	6023      	str	r3, [r4, #0]
 8009c28:	f8d8 3000 	ldr.w	r3, [r8]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d038      	beq.n	8009ca2 <_malloc_r+0xf6>
 8009c30:	685a      	ldr	r2, [r3, #4]
 8009c32:	42a2      	cmp	r2, r4
 8009c34:	d12b      	bne.n	8009c8e <_malloc_r+0xe2>
 8009c36:	2200      	movs	r2, #0
 8009c38:	605a      	str	r2, [r3, #4]
 8009c3a:	e00f      	b.n	8009c5c <_malloc_r+0xb0>
 8009c3c:	6822      	ldr	r2, [r4, #0]
 8009c3e:	1b52      	subs	r2, r2, r5
 8009c40:	d41f      	bmi.n	8009c82 <_malloc_r+0xd6>
 8009c42:	2a0b      	cmp	r2, #11
 8009c44:	d917      	bls.n	8009c76 <_malloc_r+0xca>
 8009c46:	1961      	adds	r1, r4, r5
 8009c48:	42a3      	cmp	r3, r4
 8009c4a:	6025      	str	r5, [r4, #0]
 8009c4c:	bf18      	it	ne
 8009c4e:	6059      	strne	r1, [r3, #4]
 8009c50:	6863      	ldr	r3, [r4, #4]
 8009c52:	bf08      	it	eq
 8009c54:	f8c8 1000 	streq.w	r1, [r8]
 8009c58:	5162      	str	r2, [r4, r5]
 8009c5a:	604b      	str	r3, [r1, #4]
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	f104 060b 	add.w	r6, r4, #11
 8009c62:	f000 f829 	bl	8009cb8 <__malloc_unlock>
 8009c66:	f026 0607 	bic.w	r6, r6, #7
 8009c6a:	1d23      	adds	r3, r4, #4
 8009c6c:	1af2      	subs	r2, r6, r3
 8009c6e:	d0ae      	beq.n	8009bce <_malloc_r+0x22>
 8009c70:	1b9b      	subs	r3, r3, r6
 8009c72:	50a3      	str	r3, [r4, r2]
 8009c74:	e7ab      	b.n	8009bce <_malloc_r+0x22>
 8009c76:	42a3      	cmp	r3, r4
 8009c78:	6862      	ldr	r2, [r4, #4]
 8009c7a:	d1dd      	bne.n	8009c38 <_malloc_r+0x8c>
 8009c7c:	f8c8 2000 	str.w	r2, [r8]
 8009c80:	e7ec      	b.n	8009c5c <_malloc_r+0xb0>
 8009c82:	4623      	mov	r3, r4
 8009c84:	6864      	ldr	r4, [r4, #4]
 8009c86:	e7ac      	b.n	8009be2 <_malloc_r+0x36>
 8009c88:	4634      	mov	r4, r6
 8009c8a:	6876      	ldr	r6, [r6, #4]
 8009c8c:	e7b4      	b.n	8009bf8 <_malloc_r+0x4c>
 8009c8e:	4613      	mov	r3, r2
 8009c90:	e7cc      	b.n	8009c2c <_malloc_r+0x80>
 8009c92:	230c      	movs	r3, #12
 8009c94:	603b      	str	r3, [r7, #0]
 8009c96:	4638      	mov	r0, r7
 8009c98:	f000 f80e 	bl	8009cb8 <__malloc_unlock>
 8009c9c:	e797      	b.n	8009bce <_malloc_r+0x22>
 8009c9e:	6025      	str	r5, [r4, #0]
 8009ca0:	e7dc      	b.n	8009c5c <_malloc_r+0xb0>
 8009ca2:	605b      	str	r3, [r3, #4]
 8009ca4:	deff      	udf	#255	; 0xff
 8009ca6:	bf00      	nop
 8009ca8:	200008bc 	.word	0x200008bc

08009cac <__malloc_lock>:
 8009cac:	4801      	ldr	r0, [pc, #4]	; (8009cb4 <__malloc_lock+0x8>)
 8009cae:	f7ff bee8 	b.w	8009a82 <__retarget_lock_acquire_recursive>
 8009cb2:	bf00      	nop
 8009cb4:	200008b8 	.word	0x200008b8

08009cb8 <__malloc_unlock>:
 8009cb8:	4801      	ldr	r0, [pc, #4]	; (8009cc0 <__malloc_unlock+0x8>)
 8009cba:	f7ff bee3 	b.w	8009a84 <__retarget_lock_release_recursive>
 8009cbe:	bf00      	nop
 8009cc0:	200008b8 	.word	0x200008b8

08009cc4 <__ssputs_r>:
 8009cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc8:	688e      	ldr	r6, [r1, #8]
 8009cca:	461f      	mov	r7, r3
 8009ccc:	42be      	cmp	r6, r7
 8009cce:	680b      	ldr	r3, [r1, #0]
 8009cd0:	4682      	mov	sl, r0
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	4690      	mov	r8, r2
 8009cd6:	d82c      	bhi.n	8009d32 <__ssputs_r+0x6e>
 8009cd8:	898a      	ldrh	r2, [r1, #12]
 8009cda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cde:	d026      	beq.n	8009d2e <__ssputs_r+0x6a>
 8009ce0:	6965      	ldr	r5, [r4, #20]
 8009ce2:	6909      	ldr	r1, [r1, #16]
 8009ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ce8:	eba3 0901 	sub.w	r9, r3, r1
 8009cec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cf0:	1c7b      	adds	r3, r7, #1
 8009cf2:	444b      	add	r3, r9
 8009cf4:	106d      	asrs	r5, r5, #1
 8009cf6:	429d      	cmp	r5, r3
 8009cf8:	bf38      	it	cc
 8009cfa:	461d      	movcc	r5, r3
 8009cfc:	0553      	lsls	r3, r2, #21
 8009cfe:	d527      	bpl.n	8009d50 <__ssputs_r+0x8c>
 8009d00:	4629      	mov	r1, r5
 8009d02:	f7ff ff53 	bl	8009bac <_malloc_r>
 8009d06:	4606      	mov	r6, r0
 8009d08:	b360      	cbz	r0, 8009d64 <__ssputs_r+0xa0>
 8009d0a:	6921      	ldr	r1, [r4, #16]
 8009d0c:	464a      	mov	r2, r9
 8009d0e:	f000 fbab 	bl	800a468 <memcpy>
 8009d12:	89a3      	ldrh	r3, [r4, #12]
 8009d14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d1c:	81a3      	strh	r3, [r4, #12]
 8009d1e:	6126      	str	r6, [r4, #16]
 8009d20:	6165      	str	r5, [r4, #20]
 8009d22:	444e      	add	r6, r9
 8009d24:	eba5 0509 	sub.w	r5, r5, r9
 8009d28:	6026      	str	r6, [r4, #0]
 8009d2a:	60a5      	str	r5, [r4, #8]
 8009d2c:	463e      	mov	r6, r7
 8009d2e:	42be      	cmp	r6, r7
 8009d30:	d900      	bls.n	8009d34 <__ssputs_r+0x70>
 8009d32:	463e      	mov	r6, r7
 8009d34:	6820      	ldr	r0, [r4, #0]
 8009d36:	4632      	mov	r2, r6
 8009d38:	4641      	mov	r1, r8
 8009d3a:	f000 fb6b 	bl	800a414 <memmove>
 8009d3e:	68a3      	ldr	r3, [r4, #8]
 8009d40:	1b9b      	subs	r3, r3, r6
 8009d42:	60a3      	str	r3, [r4, #8]
 8009d44:	6823      	ldr	r3, [r4, #0]
 8009d46:	4433      	add	r3, r6
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d50:	462a      	mov	r2, r5
 8009d52:	f000 fb9e 	bl	800a492 <_realloc_r>
 8009d56:	4606      	mov	r6, r0
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d1e0      	bne.n	8009d1e <__ssputs_r+0x5a>
 8009d5c:	6921      	ldr	r1, [r4, #16]
 8009d5e:	4650      	mov	r0, sl
 8009d60:	f7ff feb0 	bl	8009ac4 <_free_r>
 8009d64:	230c      	movs	r3, #12
 8009d66:	f8ca 3000 	str.w	r3, [sl]
 8009d6a:	89a3      	ldrh	r3, [r4, #12]
 8009d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d70:	81a3      	strh	r3, [r4, #12]
 8009d72:	f04f 30ff 	mov.w	r0, #4294967295
 8009d76:	e7e9      	b.n	8009d4c <__ssputs_r+0x88>

08009d78 <_svfiprintf_r>:
 8009d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7c:	4698      	mov	r8, r3
 8009d7e:	898b      	ldrh	r3, [r1, #12]
 8009d80:	061b      	lsls	r3, r3, #24
 8009d82:	b09d      	sub	sp, #116	; 0x74
 8009d84:	4607      	mov	r7, r0
 8009d86:	460d      	mov	r5, r1
 8009d88:	4614      	mov	r4, r2
 8009d8a:	d50e      	bpl.n	8009daa <_svfiprintf_r+0x32>
 8009d8c:	690b      	ldr	r3, [r1, #16]
 8009d8e:	b963      	cbnz	r3, 8009daa <_svfiprintf_r+0x32>
 8009d90:	2140      	movs	r1, #64	; 0x40
 8009d92:	f7ff ff0b 	bl	8009bac <_malloc_r>
 8009d96:	6028      	str	r0, [r5, #0]
 8009d98:	6128      	str	r0, [r5, #16]
 8009d9a:	b920      	cbnz	r0, 8009da6 <_svfiprintf_r+0x2e>
 8009d9c:	230c      	movs	r3, #12
 8009d9e:	603b      	str	r3, [r7, #0]
 8009da0:	f04f 30ff 	mov.w	r0, #4294967295
 8009da4:	e0d0      	b.n	8009f48 <_svfiprintf_r+0x1d0>
 8009da6:	2340      	movs	r3, #64	; 0x40
 8009da8:	616b      	str	r3, [r5, #20]
 8009daa:	2300      	movs	r3, #0
 8009dac:	9309      	str	r3, [sp, #36]	; 0x24
 8009dae:	2320      	movs	r3, #32
 8009db0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009db8:	2330      	movs	r3, #48	; 0x30
 8009dba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009f60 <_svfiprintf_r+0x1e8>
 8009dbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009dc2:	f04f 0901 	mov.w	r9, #1
 8009dc6:	4623      	mov	r3, r4
 8009dc8:	469a      	mov	sl, r3
 8009dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dce:	b10a      	cbz	r2, 8009dd4 <_svfiprintf_r+0x5c>
 8009dd0:	2a25      	cmp	r2, #37	; 0x25
 8009dd2:	d1f9      	bne.n	8009dc8 <_svfiprintf_r+0x50>
 8009dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8009dd8:	d00b      	beq.n	8009df2 <_svfiprintf_r+0x7a>
 8009dda:	465b      	mov	r3, fp
 8009ddc:	4622      	mov	r2, r4
 8009dde:	4629      	mov	r1, r5
 8009de0:	4638      	mov	r0, r7
 8009de2:	f7ff ff6f 	bl	8009cc4 <__ssputs_r>
 8009de6:	3001      	adds	r0, #1
 8009de8:	f000 80a9 	beq.w	8009f3e <_svfiprintf_r+0x1c6>
 8009dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dee:	445a      	add	r2, fp
 8009df0:	9209      	str	r2, [sp, #36]	; 0x24
 8009df2:	f89a 3000 	ldrb.w	r3, [sl]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 80a1 	beq.w	8009f3e <_svfiprintf_r+0x1c6>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e06:	f10a 0a01 	add.w	sl, sl, #1
 8009e0a:	9304      	str	r3, [sp, #16]
 8009e0c:	9307      	str	r3, [sp, #28]
 8009e0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e12:	931a      	str	r3, [sp, #104]	; 0x68
 8009e14:	4654      	mov	r4, sl
 8009e16:	2205      	movs	r2, #5
 8009e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e1c:	4850      	ldr	r0, [pc, #320]	; (8009f60 <_svfiprintf_r+0x1e8>)
 8009e1e:	f7f6 f9df 	bl	80001e0 <memchr>
 8009e22:	9a04      	ldr	r2, [sp, #16]
 8009e24:	b9d8      	cbnz	r0, 8009e5e <_svfiprintf_r+0xe6>
 8009e26:	06d0      	lsls	r0, r2, #27
 8009e28:	bf44      	itt	mi
 8009e2a:	2320      	movmi	r3, #32
 8009e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e30:	0711      	lsls	r1, r2, #28
 8009e32:	bf44      	itt	mi
 8009e34:	232b      	movmi	r3, #43	; 0x2b
 8009e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8009e40:	d015      	beq.n	8009e6e <_svfiprintf_r+0xf6>
 8009e42:	9a07      	ldr	r2, [sp, #28]
 8009e44:	4654      	mov	r4, sl
 8009e46:	2000      	movs	r0, #0
 8009e48:	f04f 0c0a 	mov.w	ip, #10
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e52:	3b30      	subs	r3, #48	; 0x30
 8009e54:	2b09      	cmp	r3, #9
 8009e56:	d94d      	bls.n	8009ef4 <_svfiprintf_r+0x17c>
 8009e58:	b1b0      	cbz	r0, 8009e88 <_svfiprintf_r+0x110>
 8009e5a:	9207      	str	r2, [sp, #28]
 8009e5c:	e014      	b.n	8009e88 <_svfiprintf_r+0x110>
 8009e5e:	eba0 0308 	sub.w	r3, r0, r8
 8009e62:	fa09 f303 	lsl.w	r3, r9, r3
 8009e66:	4313      	orrs	r3, r2
 8009e68:	9304      	str	r3, [sp, #16]
 8009e6a:	46a2      	mov	sl, r4
 8009e6c:	e7d2      	b.n	8009e14 <_svfiprintf_r+0x9c>
 8009e6e:	9b03      	ldr	r3, [sp, #12]
 8009e70:	1d19      	adds	r1, r3, #4
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	9103      	str	r1, [sp, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	bfbb      	ittet	lt
 8009e7a:	425b      	neglt	r3, r3
 8009e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e80:	9307      	strge	r3, [sp, #28]
 8009e82:	9307      	strlt	r3, [sp, #28]
 8009e84:	bfb8      	it	lt
 8009e86:	9204      	strlt	r2, [sp, #16]
 8009e88:	7823      	ldrb	r3, [r4, #0]
 8009e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8009e8c:	d10c      	bne.n	8009ea8 <_svfiprintf_r+0x130>
 8009e8e:	7863      	ldrb	r3, [r4, #1]
 8009e90:	2b2a      	cmp	r3, #42	; 0x2a
 8009e92:	d134      	bne.n	8009efe <_svfiprintf_r+0x186>
 8009e94:	9b03      	ldr	r3, [sp, #12]
 8009e96:	1d1a      	adds	r2, r3, #4
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	9203      	str	r2, [sp, #12]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	bfb8      	it	lt
 8009ea0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ea4:	3402      	adds	r4, #2
 8009ea6:	9305      	str	r3, [sp, #20]
 8009ea8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009f70 <_svfiprintf_r+0x1f8>
 8009eac:	7821      	ldrb	r1, [r4, #0]
 8009eae:	2203      	movs	r2, #3
 8009eb0:	4650      	mov	r0, sl
 8009eb2:	f7f6 f995 	bl	80001e0 <memchr>
 8009eb6:	b138      	cbz	r0, 8009ec8 <_svfiprintf_r+0x150>
 8009eb8:	9b04      	ldr	r3, [sp, #16]
 8009eba:	eba0 000a 	sub.w	r0, r0, sl
 8009ebe:	2240      	movs	r2, #64	; 0x40
 8009ec0:	4082      	lsls	r2, r0
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	3401      	adds	r4, #1
 8009ec6:	9304      	str	r3, [sp, #16]
 8009ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ecc:	4825      	ldr	r0, [pc, #148]	; (8009f64 <_svfiprintf_r+0x1ec>)
 8009ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ed2:	2206      	movs	r2, #6
 8009ed4:	f7f6 f984 	bl	80001e0 <memchr>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	d038      	beq.n	8009f4e <_svfiprintf_r+0x1d6>
 8009edc:	4b22      	ldr	r3, [pc, #136]	; (8009f68 <_svfiprintf_r+0x1f0>)
 8009ede:	bb1b      	cbnz	r3, 8009f28 <_svfiprintf_r+0x1b0>
 8009ee0:	9b03      	ldr	r3, [sp, #12]
 8009ee2:	3307      	adds	r3, #7
 8009ee4:	f023 0307 	bic.w	r3, r3, #7
 8009ee8:	3308      	adds	r3, #8
 8009eea:	9303      	str	r3, [sp, #12]
 8009eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eee:	4433      	add	r3, r6
 8009ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef2:	e768      	b.n	8009dc6 <_svfiprintf_r+0x4e>
 8009ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ef8:	460c      	mov	r4, r1
 8009efa:	2001      	movs	r0, #1
 8009efc:	e7a6      	b.n	8009e4c <_svfiprintf_r+0xd4>
 8009efe:	2300      	movs	r3, #0
 8009f00:	3401      	adds	r4, #1
 8009f02:	9305      	str	r3, [sp, #20]
 8009f04:	4619      	mov	r1, r3
 8009f06:	f04f 0c0a 	mov.w	ip, #10
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f10:	3a30      	subs	r2, #48	; 0x30
 8009f12:	2a09      	cmp	r2, #9
 8009f14:	d903      	bls.n	8009f1e <_svfiprintf_r+0x1a6>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d0c6      	beq.n	8009ea8 <_svfiprintf_r+0x130>
 8009f1a:	9105      	str	r1, [sp, #20]
 8009f1c:	e7c4      	b.n	8009ea8 <_svfiprintf_r+0x130>
 8009f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f22:	4604      	mov	r4, r0
 8009f24:	2301      	movs	r3, #1
 8009f26:	e7f0      	b.n	8009f0a <_svfiprintf_r+0x192>
 8009f28:	ab03      	add	r3, sp, #12
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	462a      	mov	r2, r5
 8009f2e:	4b0f      	ldr	r3, [pc, #60]	; (8009f6c <_svfiprintf_r+0x1f4>)
 8009f30:	a904      	add	r1, sp, #16
 8009f32:	4638      	mov	r0, r7
 8009f34:	f3af 8000 	nop.w
 8009f38:	1c42      	adds	r2, r0, #1
 8009f3a:	4606      	mov	r6, r0
 8009f3c:	d1d6      	bne.n	8009eec <_svfiprintf_r+0x174>
 8009f3e:	89ab      	ldrh	r3, [r5, #12]
 8009f40:	065b      	lsls	r3, r3, #25
 8009f42:	f53f af2d 	bmi.w	8009da0 <_svfiprintf_r+0x28>
 8009f46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f48:	b01d      	add	sp, #116	; 0x74
 8009f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4e:	ab03      	add	r3, sp, #12
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	462a      	mov	r2, r5
 8009f54:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <_svfiprintf_r+0x1f4>)
 8009f56:	a904      	add	r1, sp, #16
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f000 f879 	bl	800a050 <_printf_i>
 8009f5e:	e7eb      	b.n	8009f38 <_svfiprintf_r+0x1c0>
 8009f60:	08011b6b 	.word	0x08011b6b
 8009f64:	08011b75 	.word	0x08011b75
 8009f68:	00000000 	.word	0x00000000
 8009f6c:	08009cc5 	.word	0x08009cc5
 8009f70:	08011b71 	.word	0x08011b71

08009f74 <_printf_common>:
 8009f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	4616      	mov	r6, r2
 8009f7a:	4699      	mov	r9, r3
 8009f7c:	688a      	ldr	r2, [r1, #8]
 8009f7e:	690b      	ldr	r3, [r1, #16]
 8009f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f84:	4293      	cmp	r3, r2
 8009f86:	bfb8      	it	lt
 8009f88:	4613      	movlt	r3, r2
 8009f8a:	6033      	str	r3, [r6, #0]
 8009f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f90:	4607      	mov	r7, r0
 8009f92:	460c      	mov	r4, r1
 8009f94:	b10a      	cbz	r2, 8009f9a <_printf_common+0x26>
 8009f96:	3301      	adds	r3, #1
 8009f98:	6033      	str	r3, [r6, #0]
 8009f9a:	6823      	ldr	r3, [r4, #0]
 8009f9c:	0699      	lsls	r1, r3, #26
 8009f9e:	bf42      	ittt	mi
 8009fa0:	6833      	ldrmi	r3, [r6, #0]
 8009fa2:	3302      	addmi	r3, #2
 8009fa4:	6033      	strmi	r3, [r6, #0]
 8009fa6:	6825      	ldr	r5, [r4, #0]
 8009fa8:	f015 0506 	ands.w	r5, r5, #6
 8009fac:	d106      	bne.n	8009fbc <_printf_common+0x48>
 8009fae:	f104 0a19 	add.w	sl, r4, #25
 8009fb2:	68e3      	ldr	r3, [r4, #12]
 8009fb4:	6832      	ldr	r2, [r6, #0]
 8009fb6:	1a9b      	subs	r3, r3, r2
 8009fb8:	42ab      	cmp	r3, r5
 8009fba:	dc26      	bgt.n	800a00a <_printf_common+0x96>
 8009fbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fc0:	1e13      	subs	r3, r2, #0
 8009fc2:	6822      	ldr	r2, [r4, #0]
 8009fc4:	bf18      	it	ne
 8009fc6:	2301      	movne	r3, #1
 8009fc8:	0692      	lsls	r2, r2, #26
 8009fca:	d42b      	bmi.n	800a024 <_printf_common+0xb0>
 8009fcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fd0:	4649      	mov	r1, r9
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	47c0      	blx	r8
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	d01e      	beq.n	800a018 <_printf_common+0xa4>
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	6922      	ldr	r2, [r4, #16]
 8009fde:	f003 0306 	and.w	r3, r3, #6
 8009fe2:	2b04      	cmp	r3, #4
 8009fe4:	bf02      	ittt	eq
 8009fe6:	68e5      	ldreq	r5, [r4, #12]
 8009fe8:	6833      	ldreq	r3, [r6, #0]
 8009fea:	1aed      	subeq	r5, r5, r3
 8009fec:	68a3      	ldr	r3, [r4, #8]
 8009fee:	bf0c      	ite	eq
 8009ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ff4:	2500      	movne	r5, #0
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	bfc4      	itt	gt
 8009ffa:	1a9b      	subgt	r3, r3, r2
 8009ffc:	18ed      	addgt	r5, r5, r3
 8009ffe:	2600      	movs	r6, #0
 800a000:	341a      	adds	r4, #26
 800a002:	42b5      	cmp	r5, r6
 800a004:	d11a      	bne.n	800a03c <_printf_common+0xc8>
 800a006:	2000      	movs	r0, #0
 800a008:	e008      	b.n	800a01c <_printf_common+0xa8>
 800a00a:	2301      	movs	r3, #1
 800a00c:	4652      	mov	r2, sl
 800a00e:	4649      	mov	r1, r9
 800a010:	4638      	mov	r0, r7
 800a012:	47c0      	blx	r8
 800a014:	3001      	adds	r0, #1
 800a016:	d103      	bne.n	800a020 <_printf_common+0xac>
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a020:	3501      	adds	r5, #1
 800a022:	e7c6      	b.n	8009fb2 <_printf_common+0x3e>
 800a024:	18e1      	adds	r1, r4, r3
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	2030      	movs	r0, #48	; 0x30
 800a02a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a02e:	4422      	add	r2, r4
 800a030:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a034:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a038:	3302      	adds	r3, #2
 800a03a:	e7c7      	b.n	8009fcc <_printf_common+0x58>
 800a03c:	2301      	movs	r3, #1
 800a03e:	4622      	mov	r2, r4
 800a040:	4649      	mov	r1, r9
 800a042:	4638      	mov	r0, r7
 800a044:	47c0      	blx	r8
 800a046:	3001      	adds	r0, #1
 800a048:	d0e6      	beq.n	800a018 <_printf_common+0xa4>
 800a04a:	3601      	adds	r6, #1
 800a04c:	e7d9      	b.n	800a002 <_printf_common+0x8e>
	...

0800a050 <_printf_i>:
 800a050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a054:	7e0f      	ldrb	r7, [r1, #24]
 800a056:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a058:	2f78      	cmp	r7, #120	; 0x78
 800a05a:	4691      	mov	r9, r2
 800a05c:	4680      	mov	r8, r0
 800a05e:	460c      	mov	r4, r1
 800a060:	469a      	mov	sl, r3
 800a062:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a066:	d807      	bhi.n	800a078 <_printf_i+0x28>
 800a068:	2f62      	cmp	r7, #98	; 0x62
 800a06a:	d80a      	bhi.n	800a082 <_printf_i+0x32>
 800a06c:	2f00      	cmp	r7, #0
 800a06e:	f000 80d4 	beq.w	800a21a <_printf_i+0x1ca>
 800a072:	2f58      	cmp	r7, #88	; 0x58
 800a074:	f000 80c0 	beq.w	800a1f8 <_printf_i+0x1a8>
 800a078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a07c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a080:	e03a      	b.n	800a0f8 <_printf_i+0xa8>
 800a082:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a086:	2b15      	cmp	r3, #21
 800a088:	d8f6      	bhi.n	800a078 <_printf_i+0x28>
 800a08a:	a101      	add	r1, pc, #4	; (adr r1, 800a090 <_printf_i+0x40>)
 800a08c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a090:	0800a0e9 	.word	0x0800a0e9
 800a094:	0800a0fd 	.word	0x0800a0fd
 800a098:	0800a079 	.word	0x0800a079
 800a09c:	0800a079 	.word	0x0800a079
 800a0a0:	0800a079 	.word	0x0800a079
 800a0a4:	0800a079 	.word	0x0800a079
 800a0a8:	0800a0fd 	.word	0x0800a0fd
 800a0ac:	0800a079 	.word	0x0800a079
 800a0b0:	0800a079 	.word	0x0800a079
 800a0b4:	0800a079 	.word	0x0800a079
 800a0b8:	0800a079 	.word	0x0800a079
 800a0bc:	0800a201 	.word	0x0800a201
 800a0c0:	0800a129 	.word	0x0800a129
 800a0c4:	0800a1bb 	.word	0x0800a1bb
 800a0c8:	0800a079 	.word	0x0800a079
 800a0cc:	0800a079 	.word	0x0800a079
 800a0d0:	0800a223 	.word	0x0800a223
 800a0d4:	0800a079 	.word	0x0800a079
 800a0d8:	0800a129 	.word	0x0800a129
 800a0dc:	0800a079 	.word	0x0800a079
 800a0e0:	0800a079 	.word	0x0800a079
 800a0e4:	0800a1c3 	.word	0x0800a1c3
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	1d1a      	adds	r2, r3, #4
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	602a      	str	r2, [r5, #0]
 800a0f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e09f      	b.n	800a23c <_printf_i+0x1ec>
 800a0fc:	6820      	ldr	r0, [r4, #0]
 800a0fe:	682b      	ldr	r3, [r5, #0]
 800a100:	0607      	lsls	r7, r0, #24
 800a102:	f103 0104 	add.w	r1, r3, #4
 800a106:	6029      	str	r1, [r5, #0]
 800a108:	d501      	bpl.n	800a10e <_printf_i+0xbe>
 800a10a:	681e      	ldr	r6, [r3, #0]
 800a10c:	e003      	b.n	800a116 <_printf_i+0xc6>
 800a10e:	0646      	lsls	r6, r0, #25
 800a110:	d5fb      	bpl.n	800a10a <_printf_i+0xba>
 800a112:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a116:	2e00      	cmp	r6, #0
 800a118:	da03      	bge.n	800a122 <_printf_i+0xd2>
 800a11a:	232d      	movs	r3, #45	; 0x2d
 800a11c:	4276      	negs	r6, r6
 800a11e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a122:	485a      	ldr	r0, [pc, #360]	; (800a28c <_printf_i+0x23c>)
 800a124:	230a      	movs	r3, #10
 800a126:	e012      	b.n	800a14e <_printf_i+0xfe>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	6820      	ldr	r0, [r4, #0]
 800a12c:	1d19      	adds	r1, r3, #4
 800a12e:	6029      	str	r1, [r5, #0]
 800a130:	0605      	lsls	r5, r0, #24
 800a132:	d501      	bpl.n	800a138 <_printf_i+0xe8>
 800a134:	681e      	ldr	r6, [r3, #0]
 800a136:	e002      	b.n	800a13e <_printf_i+0xee>
 800a138:	0641      	lsls	r1, r0, #25
 800a13a:	d5fb      	bpl.n	800a134 <_printf_i+0xe4>
 800a13c:	881e      	ldrh	r6, [r3, #0]
 800a13e:	4853      	ldr	r0, [pc, #332]	; (800a28c <_printf_i+0x23c>)
 800a140:	2f6f      	cmp	r7, #111	; 0x6f
 800a142:	bf0c      	ite	eq
 800a144:	2308      	moveq	r3, #8
 800a146:	230a      	movne	r3, #10
 800a148:	2100      	movs	r1, #0
 800a14a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a14e:	6865      	ldr	r5, [r4, #4]
 800a150:	60a5      	str	r5, [r4, #8]
 800a152:	2d00      	cmp	r5, #0
 800a154:	bfa2      	ittt	ge
 800a156:	6821      	ldrge	r1, [r4, #0]
 800a158:	f021 0104 	bicge.w	r1, r1, #4
 800a15c:	6021      	strge	r1, [r4, #0]
 800a15e:	b90e      	cbnz	r6, 800a164 <_printf_i+0x114>
 800a160:	2d00      	cmp	r5, #0
 800a162:	d04b      	beq.n	800a1fc <_printf_i+0x1ac>
 800a164:	4615      	mov	r5, r2
 800a166:	fbb6 f1f3 	udiv	r1, r6, r3
 800a16a:	fb03 6711 	mls	r7, r3, r1, r6
 800a16e:	5dc7      	ldrb	r7, [r0, r7]
 800a170:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a174:	4637      	mov	r7, r6
 800a176:	42bb      	cmp	r3, r7
 800a178:	460e      	mov	r6, r1
 800a17a:	d9f4      	bls.n	800a166 <_printf_i+0x116>
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d10b      	bne.n	800a198 <_printf_i+0x148>
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	07de      	lsls	r6, r3, #31
 800a184:	d508      	bpl.n	800a198 <_printf_i+0x148>
 800a186:	6923      	ldr	r3, [r4, #16]
 800a188:	6861      	ldr	r1, [r4, #4]
 800a18a:	4299      	cmp	r1, r3
 800a18c:	bfde      	ittt	le
 800a18e:	2330      	movle	r3, #48	; 0x30
 800a190:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a194:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a198:	1b52      	subs	r2, r2, r5
 800a19a:	6122      	str	r2, [r4, #16]
 800a19c:	f8cd a000 	str.w	sl, [sp]
 800a1a0:	464b      	mov	r3, r9
 800a1a2:	aa03      	add	r2, sp, #12
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	f7ff fee4 	bl	8009f74 <_printf_common>
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d14a      	bne.n	800a246 <_printf_i+0x1f6>
 800a1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b4:	b004      	add	sp, #16
 800a1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	f043 0320 	orr.w	r3, r3, #32
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	4833      	ldr	r0, [pc, #204]	; (800a290 <_printf_i+0x240>)
 800a1c4:	2778      	movs	r7, #120	; 0x78
 800a1c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	6829      	ldr	r1, [r5, #0]
 800a1ce:	061f      	lsls	r7, r3, #24
 800a1d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1d4:	d402      	bmi.n	800a1dc <_printf_i+0x18c>
 800a1d6:	065f      	lsls	r7, r3, #25
 800a1d8:	bf48      	it	mi
 800a1da:	b2b6      	uxthmi	r6, r6
 800a1dc:	07df      	lsls	r7, r3, #31
 800a1de:	bf48      	it	mi
 800a1e0:	f043 0320 	orrmi.w	r3, r3, #32
 800a1e4:	6029      	str	r1, [r5, #0]
 800a1e6:	bf48      	it	mi
 800a1e8:	6023      	strmi	r3, [r4, #0]
 800a1ea:	b91e      	cbnz	r6, 800a1f4 <_printf_i+0x1a4>
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	f023 0320 	bic.w	r3, r3, #32
 800a1f2:	6023      	str	r3, [r4, #0]
 800a1f4:	2310      	movs	r3, #16
 800a1f6:	e7a7      	b.n	800a148 <_printf_i+0xf8>
 800a1f8:	4824      	ldr	r0, [pc, #144]	; (800a28c <_printf_i+0x23c>)
 800a1fa:	e7e4      	b.n	800a1c6 <_printf_i+0x176>
 800a1fc:	4615      	mov	r5, r2
 800a1fe:	e7bd      	b.n	800a17c <_printf_i+0x12c>
 800a200:	682b      	ldr	r3, [r5, #0]
 800a202:	6826      	ldr	r6, [r4, #0]
 800a204:	6961      	ldr	r1, [r4, #20]
 800a206:	1d18      	adds	r0, r3, #4
 800a208:	6028      	str	r0, [r5, #0]
 800a20a:	0635      	lsls	r5, r6, #24
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	d501      	bpl.n	800a214 <_printf_i+0x1c4>
 800a210:	6019      	str	r1, [r3, #0]
 800a212:	e002      	b.n	800a21a <_printf_i+0x1ca>
 800a214:	0670      	lsls	r0, r6, #25
 800a216:	d5fb      	bpl.n	800a210 <_printf_i+0x1c0>
 800a218:	8019      	strh	r1, [r3, #0]
 800a21a:	2300      	movs	r3, #0
 800a21c:	6123      	str	r3, [r4, #16]
 800a21e:	4615      	mov	r5, r2
 800a220:	e7bc      	b.n	800a19c <_printf_i+0x14c>
 800a222:	682b      	ldr	r3, [r5, #0]
 800a224:	1d1a      	adds	r2, r3, #4
 800a226:	602a      	str	r2, [r5, #0]
 800a228:	681d      	ldr	r5, [r3, #0]
 800a22a:	6862      	ldr	r2, [r4, #4]
 800a22c:	2100      	movs	r1, #0
 800a22e:	4628      	mov	r0, r5
 800a230:	f7f5 ffd6 	bl	80001e0 <memchr>
 800a234:	b108      	cbz	r0, 800a23a <_printf_i+0x1ea>
 800a236:	1b40      	subs	r0, r0, r5
 800a238:	6060      	str	r0, [r4, #4]
 800a23a:	6863      	ldr	r3, [r4, #4]
 800a23c:	6123      	str	r3, [r4, #16]
 800a23e:	2300      	movs	r3, #0
 800a240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a244:	e7aa      	b.n	800a19c <_printf_i+0x14c>
 800a246:	6923      	ldr	r3, [r4, #16]
 800a248:	462a      	mov	r2, r5
 800a24a:	4649      	mov	r1, r9
 800a24c:	4640      	mov	r0, r8
 800a24e:	47d0      	blx	sl
 800a250:	3001      	adds	r0, #1
 800a252:	d0ad      	beq.n	800a1b0 <_printf_i+0x160>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	079b      	lsls	r3, r3, #30
 800a258:	d413      	bmi.n	800a282 <_printf_i+0x232>
 800a25a:	68e0      	ldr	r0, [r4, #12]
 800a25c:	9b03      	ldr	r3, [sp, #12]
 800a25e:	4298      	cmp	r0, r3
 800a260:	bfb8      	it	lt
 800a262:	4618      	movlt	r0, r3
 800a264:	e7a6      	b.n	800a1b4 <_printf_i+0x164>
 800a266:	2301      	movs	r3, #1
 800a268:	4632      	mov	r2, r6
 800a26a:	4649      	mov	r1, r9
 800a26c:	4640      	mov	r0, r8
 800a26e:	47d0      	blx	sl
 800a270:	3001      	adds	r0, #1
 800a272:	d09d      	beq.n	800a1b0 <_printf_i+0x160>
 800a274:	3501      	adds	r5, #1
 800a276:	68e3      	ldr	r3, [r4, #12]
 800a278:	9903      	ldr	r1, [sp, #12]
 800a27a:	1a5b      	subs	r3, r3, r1
 800a27c:	42ab      	cmp	r3, r5
 800a27e:	dcf2      	bgt.n	800a266 <_printf_i+0x216>
 800a280:	e7eb      	b.n	800a25a <_printf_i+0x20a>
 800a282:	2500      	movs	r5, #0
 800a284:	f104 0619 	add.w	r6, r4, #25
 800a288:	e7f5      	b.n	800a276 <_printf_i+0x226>
 800a28a:	bf00      	nop
 800a28c:	08011b7c 	.word	0x08011b7c
 800a290:	08011b8d 	.word	0x08011b8d

0800a294 <__sflush_r>:
 800a294:	898a      	ldrh	r2, [r1, #12]
 800a296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a29a:	4605      	mov	r5, r0
 800a29c:	0710      	lsls	r0, r2, #28
 800a29e:	460c      	mov	r4, r1
 800a2a0:	d458      	bmi.n	800a354 <__sflush_r+0xc0>
 800a2a2:	684b      	ldr	r3, [r1, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	dc05      	bgt.n	800a2b4 <__sflush_r+0x20>
 800a2a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	dc02      	bgt.n	800a2b4 <__sflush_r+0x20>
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2b6:	2e00      	cmp	r6, #0
 800a2b8:	d0f9      	beq.n	800a2ae <__sflush_r+0x1a>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2c0:	682f      	ldr	r7, [r5, #0]
 800a2c2:	6a21      	ldr	r1, [r4, #32]
 800a2c4:	602b      	str	r3, [r5, #0]
 800a2c6:	d032      	beq.n	800a32e <__sflush_r+0x9a>
 800a2c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	075a      	lsls	r2, r3, #29
 800a2ce:	d505      	bpl.n	800a2dc <__sflush_r+0x48>
 800a2d0:	6863      	ldr	r3, [r4, #4]
 800a2d2:	1ac0      	subs	r0, r0, r3
 800a2d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2d6:	b10b      	cbz	r3, 800a2dc <__sflush_r+0x48>
 800a2d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2da:	1ac0      	subs	r0, r0, r3
 800a2dc:	2300      	movs	r3, #0
 800a2de:	4602      	mov	r2, r0
 800a2e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2e2:	6a21      	ldr	r1, [r4, #32]
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	47b0      	blx	r6
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	d106      	bne.n	800a2fc <__sflush_r+0x68>
 800a2ee:	6829      	ldr	r1, [r5, #0]
 800a2f0:	291d      	cmp	r1, #29
 800a2f2:	d82b      	bhi.n	800a34c <__sflush_r+0xb8>
 800a2f4:	4a29      	ldr	r2, [pc, #164]	; (800a39c <__sflush_r+0x108>)
 800a2f6:	410a      	asrs	r2, r1
 800a2f8:	07d6      	lsls	r6, r2, #31
 800a2fa:	d427      	bmi.n	800a34c <__sflush_r+0xb8>
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	6062      	str	r2, [r4, #4]
 800a300:	04d9      	lsls	r1, r3, #19
 800a302:	6922      	ldr	r2, [r4, #16]
 800a304:	6022      	str	r2, [r4, #0]
 800a306:	d504      	bpl.n	800a312 <__sflush_r+0x7e>
 800a308:	1c42      	adds	r2, r0, #1
 800a30a:	d101      	bne.n	800a310 <__sflush_r+0x7c>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	b903      	cbnz	r3, 800a312 <__sflush_r+0x7e>
 800a310:	6560      	str	r0, [r4, #84]	; 0x54
 800a312:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a314:	602f      	str	r7, [r5, #0]
 800a316:	2900      	cmp	r1, #0
 800a318:	d0c9      	beq.n	800a2ae <__sflush_r+0x1a>
 800a31a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a31e:	4299      	cmp	r1, r3
 800a320:	d002      	beq.n	800a328 <__sflush_r+0x94>
 800a322:	4628      	mov	r0, r5
 800a324:	f7ff fbce 	bl	8009ac4 <_free_r>
 800a328:	2000      	movs	r0, #0
 800a32a:	6360      	str	r0, [r4, #52]	; 0x34
 800a32c:	e7c0      	b.n	800a2b0 <__sflush_r+0x1c>
 800a32e:	2301      	movs	r3, #1
 800a330:	4628      	mov	r0, r5
 800a332:	47b0      	blx	r6
 800a334:	1c41      	adds	r1, r0, #1
 800a336:	d1c8      	bne.n	800a2ca <__sflush_r+0x36>
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d0c5      	beq.n	800a2ca <__sflush_r+0x36>
 800a33e:	2b1d      	cmp	r3, #29
 800a340:	d001      	beq.n	800a346 <__sflush_r+0xb2>
 800a342:	2b16      	cmp	r3, #22
 800a344:	d101      	bne.n	800a34a <__sflush_r+0xb6>
 800a346:	602f      	str	r7, [r5, #0]
 800a348:	e7b1      	b.n	800a2ae <__sflush_r+0x1a>
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a350:	81a3      	strh	r3, [r4, #12]
 800a352:	e7ad      	b.n	800a2b0 <__sflush_r+0x1c>
 800a354:	690f      	ldr	r7, [r1, #16]
 800a356:	2f00      	cmp	r7, #0
 800a358:	d0a9      	beq.n	800a2ae <__sflush_r+0x1a>
 800a35a:	0793      	lsls	r3, r2, #30
 800a35c:	680e      	ldr	r6, [r1, #0]
 800a35e:	bf08      	it	eq
 800a360:	694b      	ldreq	r3, [r1, #20]
 800a362:	600f      	str	r7, [r1, #0]
 800a364:	bf18      	it	ne
 800a366:	2300      	movne	r3, #0
 800a368:	eba6 0807 	sub.w	r8, r6, r7
 800a36c:	608b      	str	r3, [r1, #8]
 800a36e:	f1b8 0f00 	cmp.w	r8, #0
 800a372:	dd9c      	ble.n	800a2ae <__sflush_r+0x1a>
 800a374:	6a21      	ldr	r1, [r4, #32]
 800a376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a378:	4643      	mov	r3, r8
 800a37a:	463a      	mov	r2, r7
 800a37c:	4628      	mov	r0, r5
 800a37e:	47b0      	blx	r6
 800a380:	2800      	cmp	r0, #0
 800a382:	dc06      	bgt.n	800a392 <__sflush_r+0xfe>
 800a384:	89a3      	ldrh	r3, [r4, #12]
 800a386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a38a:	81a3      	strh	r3, [r4, #12]
 800a38c:	f04f 30ff 	mov.w	r0, #4294967295
 800a390:	e78e      	b.n	800a2b0 <__sflush_r+0x1c>
 800a392:	4407      	add	r7, r0
 800a394:	eba8 0800 	sub.w	r8, r8, r0
 800a398:	e7e9      	b.n	800a36e <__sflush_r+0xda>
 800a39a:	bf00      	nop
 800a39c:	dfbffffe 	.word	0xdfbffffe

0800a3a0 <_fflush_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	690b      	ldr	r3, [r1, #16]
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	b913      	cbnz	r3, 800a3b0 <_fflush_r+0x10>
 800a3aa:	2500      	movs	r5, #0
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	bd38      	pop	{r3, r4, r5, pc}
 800a3b0:	b118      	cbz	r0, 800a3ba <_fflush_r+0x1a>
 800a3b2:	6a03      	ldr	r3, [r0, #32]
 800a3b4:	b90b      	cbnz	r3, 800a3ba <_fflush_r+0x1a>
 800a3b6:	f7ff fa2f 	bl	8009818 <__sinit>
 800a3ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d0f3      	beq.n	800a3aa <_fflush_r+0xa>
 800a3c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3c4:	07d0      	lsls	r0, r2, #31
 800a3c6:	d404      	bmi.n	800a3d2 <_fflush_r+0x32>
 800a3c8:	0599      	lsls	r1, r3, #22
 800a3ca:	d402      	bmi.n	800a3d2 <_fflush_r+0x32>
 800a3cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ce:	f7ff fb58 	bl	8009a82 <__retarget_lock_acquire_recursive>
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	f7ff ff5d 	bl	800a294 <__sflush_r>
 800a3da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3dc:	07da      	lsls	r2, r3, #31
 800a3de:	4605      	mov	r5, r0
 800a3e0:	d4e4      	bmi.n	800a3ac <_fflush_r+0xc>
 800a3e2:	89a3      	ldrh	r3, [r4, #12]
 800a3e4:	059b      	lsls	r3, r3, #22
 800a3e6:	d4e1      	bmi.n	800a3ac <_fflush_r+0xc>
 800a3e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ea:	f7ff fb4b 	bl	8009a84 <__retarget_lock_release_recursive>
 800a3ee:	e7dd      	b.n	800a3ac <_fflush_r+0xc>

0800a3f0 <fiprintf>:
 800a3f0:	b40e      	push	{r1, r2, r3}
 800a3f2:	b503      	push	{r0, r1, lr}
 800a3f4:	4601      	mov	r1, r0
 800a3f6:	ab03      	add	r3, sp, #12
 800a3f8:	4805      	ldr	r0, [pc, #20]	; (800a410 <fiprintf+0x20>)
 800a3fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3fe:	6800      	ldr	r0, [r0, #0]
 800a400:	9301      	str	r3, [sp, #4]
 800a402:	f000 f89f 	bl	800a544 <_vfiprintf_r>
 800a406:	b002      	add	sp, #8
 800a408:	f85d eb04 	ldr.w	lr, [sp], #4
 800a40c:	b003      	add	sp, #12
 800a40e:	4770      	bx	lr
 800a410:	20000118 	.word	0x20000118

0800a414 <memmove>:
 800a414:	4288      	cmp	r0, r1
 800a416:	b510      	push	{r4, lr}
 800a418:	eb01 0402 	add.w	r4, r1, r2
 800a41c:	d902      	bls.n	800a424 <memmove+0x10>
 800a41e:	4284      	cmp	r4, r0
 800a420:	4623      	mov	r3, r4
 800a422:	d807      	bhi.n	800a434 <memmove+0x20>
 800a424:	1e43      	subs	r3, r0, #1
 800a426:	42a1      	cmp	r1, r4
 800a428:	d008      	beq.n	800a43c <memmove+0x28>
 800a42a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a42e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a432:	e7f8      	b.n	800a426 <memmove+0x12>
 800a434:	4402      	add	r2, r0
 800a436:	4601      	mov	r1, r0
 800a438:	428a      	cmp	r2, r1
 800a43a:	d100      	bne.n	800a43e <memmove+0x2a>
 800a43c:	bd10      	pop	{r4, pc}
 800a43e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a442:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a446:	e7f7      	b.n	800a438 <memmove+0x24>

0800a448 <_sbrk_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4d06      	ldr	r5, [pc, #24]	; (800a464 <_sbrk_r+0x1c>)
 800a44c:	2300      	movs	r3, #0
 800a44e:	4604      	mov	r4, r0
 800a450:	4608      	mov	r0, r1
 800a452:	602b      	str	r3, [r5, #0]
 800a454:	f7f9 fd30 	bl	8003eb8 <_sbrk>
 800a458:	1c43      	adds	r3, r0, #1
 800a45a:	d102      	bne.n	800a462 <_sbrk_r+0x1a>
 800a45c:	682b      	ldr	r3, [r5, #0]
 800a45e:	b103      	cbz	r3, 800a462 <_sbrk_r+0x1a>
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	bd38      	pop	{r3, r4, r5, pc}
 800a464:	200008b4 	.word	0x200008b4

0800a468 <memcpy>:
 800a468:	440a      	add	r2, r1
 800a46a:	4291      	cmp	r1, r2
 800a46c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a470:	d100      	bne.n	800a474 <memcpy+0xc>
 800a472:	4770      	bx	lr
 800a474:	b510      	push	{r4, lr}
 800a476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a47a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a47e:	4291      	cmp	r1, r2
 800a480:	d1f9      	bne.n	800a476 <memcpy+0xe>
 800a482:	bd10      	pop	{r4, pc}

0800a484 <abort>:
 800a484:	b508      	push	{r3, lr}
 800a486:	2006      	movs	r0, #6
 800a488:	f000 fa34 	bl	800a8f4 <raise>
 800a48c:	2001      	movs	r0, #1
 800a48e:	f7f9 fc9b 	bl	8003dc8 <_exit>

0800a492 <_realloc_r>:
 800a492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a496:	4680      	mov	r8, r0
 800a498:	4614      	mov	r4, r2
 800a49a:	460e      	mov	r6, r1
 800a49c:	b921      	cbnz	r1, 800a4a8 <_realloc_r+0x16>
 800a49e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a2:	4611      	mov	r1, r2
 800a4a4:	f7ff bb82 	b.w	8009bac <_malloc_r>
 800a4a8:	b92a      	cbnz	r2, 800a4b6 <_realloc_r+0x24>
 800a4aa:	f7ff fb0b 	bl	8009ac4 <_free_r>
 800a4ae:	4625      	mov	r5, r4
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b6:	f000 fa39 	bl	800a92c <_malloc_usable_size_r>
 800a4ba:	4284      	cmp	r4, r0
 800a4bc:	4607      	mov	r7, r0
 800a4be:	d802      	bhi.n	800a4c6 <_realloc_r+0x34>
 800a4c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4c4:	d812      	bhi.n	800a4ec <_realloc_r+0x5a>
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	4640      	mov	r0, r8
 800a4ca:	f7ff fb6f 	bl	8009bac <_malloc_r>
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d0ed      	beq.n	800a4b0 <_realloc_r+0x1e>
 800a4d4:	42bc      	cmp	r4, r7
 800a4d6:	4622      	mov	r2, r4
 800a4d8:	4631      	mov	r1, r6
 800a4da:	bf28      	it	cs
 800a4dc:	463a      	movcs	r2, r7
 800a4de:	f7ff ffc3 	bl	800a468 <memcpy>
 800a4e2:	4631      	mov	r1, r6
 800a4e4:	4640      	mov	r0, r8
 800a4e6:	f7ff faed 	bl	8009ac4 <_free_r>
 800a4ea:	e7e1      	b.n	800a4b0 <_realloc_r+0x1e>
 800a4ec:	4635      	mov	r5, r6
 800a4ee:	e7df      	b.n	800a4b0 <_realloc_r+0x1e>

0800a4f0 <__sfputc_r>:
 800a4f0:	6893      	ldr	r3, [r2, #8]
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	b410      	push	{r4}
 800a4f8:	6093      	str	r3, [r2, #8]
 800a4fa:	da08      	bge.n	800a50e <__sfputc_r+0x1e>
 800a4fc:	6994      	ldr	r4, [r2, #24]
 800a4fe:	42a3      	cmp	r3, r4
 800a500:	db01      	blt.n	800a506 <__sfputc_r+0x16>
 800a502:	290a      	cmp	r1, #10
 800a504:	d103      	bne.n	800a50e <__sfputc_r+0x1e>
 800a506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a50a:	f000 b935 	b.w	800a778 <__swbuf_r>
 800a50e:	6813      	ldr	r3, [r2, #0]
 800a510:	1c58      	adds	r0, r3, #1
 800a512:	6010      	str	r0, [r2, #0]
 800a514:	7019      	strb	r1, [r3, #0]
 800a516:	4608      	mov	r0, r1
 800a518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <__sfputs_r>:
 800a51e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a520:	4606      	mov	r6, r0
 800a522:	460f      	mov	r7, r1
 800a524:	4614      	mov	r4, r2
 800a526:	18d5      	adds	r5, r2, r3
 800a528:	42ac      	cmp	r4, r5
 800a52a:	d101      	bne.n	800a530 <__sfputs_r+0x12>
 800a52c:	2000      	movs	r0, #0
 800a52e:	e007      	b.n	800a540 <__sfputs_r+0x22>
 800a530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a534:	463a      	mov	r2, r7
 800a536:	4630      	mov	r0, r6
 800a538:	f7ff ffda 	bl	800a4f0 <__sfputc_r>
 800a53c:	1c43      	adds	r3, r0, #1
 800a53e:	d1f3      	bne.n	800a528 <__sfputs_r+0xa>
 800a540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a544 <_vfiprintf_r>:
 800a544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a548:	460d      	mov	r5, r1
 800a54a:	b09d      	sub	sp, #116	; 0x74
 800a54c:	4614      	mov	r4, r2
 800a54e:	4698      	mov	r8, r3
 800a550:	4606      	mov	r6, r0
 800a552:	b118      	cbz	r0, 800a55c <_vfiprintf_r+0x18>
 800a554:	6a03      	ldr	r3, [r0, #32]
 800a556:	b90b      	cbnz	r3, 800a55c <_vfiprintf_r+0x18>
 800a558:	f7ff f95e 	bl	8009818 <__sinit>
 800a55c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a55e:	07d9      	lsls	r1, r3, #31
 800a560:	d405      	bmi.n	800a56e <_vfiprintf_r+0x2a>
 800a562:	89ab      	ldrh	r3, [r5, #12]
 800a564:	059a      	lsls	r2, r3, #22
 800a566:	d402      	bmi.n	800a56e <_vfiprintf_r+0x2a>
 800a568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a56a:	f7ff fa8a 	bl	8009a82 <__retarget_lock_acquire_recursive>
 800a56e:	89ab      	ldrh	r3, [r5, #12]
 800a570:	071b      	lsls	r3, r3, #28
 800a572:	d501      	bpl.n	800a578 <_vfiprintf_r+0x34>
 800a574:	692b      	ldr	r3, [r5, #16]
 800a576:	b99b      	cbnz	r3, 800a5a0 <_vfiprintf_r+0x5c>
 800a578:	4629      	mov	r1, r5
 800a57a:	4630      	mov	r0, r6
 800a57c:	f000 f93a 	bl	800a7f4 <__swsetup_r>
 800a580:	b170      	cbz	r0, 800a5a0 <_vfiprintf_r+0x5c>
 800a582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a584:	07dc      	lsls	r4, r3, #31
 800a586:	d504      	bpl.n	800a592 <_vfiprintf_r+0x4e>
 800a588:	f04f 30ff 	mov.w	r0, #4294967295
 800a58c:	b01d      	add	sp, #116	; 0x74
 800a58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a592:	89ab      	ldrh	r3, [r5, #12]
 800a594:	0598      	lsls	r0, r3, #22
 800a596:	d4f7      	bmi.n	800a588 <_vfiprintf_r+0x44>
 800a598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a59a:	f7ff fa73 	bl	8009a84 <__retarget_lock_release_recursive>
 800a59e:	e7f3      	b.n	800a588 <_vfiprintf_r+0x44>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a4:	2320      	movs	r3, #32
 800a5a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5ae:	2330      	movs	r3, #48	; 0x30
 800a5b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a764 <_vfiprintf_r+0x220>
 800a5b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5b8:	f04f 0901 	mov.w	r9, #1
 800a5bc:	4623      	mov	r3, r4
 800a5be:	469a      	mov	sl, r3
 800a5c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5c4:	b10a      	cbz	r2, 800a5ca <_vfiprintf_r+0x86>
 800a5c6:	2a25      	cmp	r2, #37	; 0x25
 800a5c8:	d1f9      	bne.n	800a5be <_vfiprintf_r+0x7a>
 800a5ca:	ebba 0b04 	subs.w	fp, sl, r4
 800a5ce:	d00b      	beq.n	800a5e8 <_vfiprintf_r+0xa4>
 800a5d0:	465b      	mov	r3, fp
 800a5d2:	4622      	mov	r2, r4
 800a5d4:	4629      	mov	r1, r5
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	f7ff ffa1 	bl	800a51e <__sfputs_r>
 800a5dc:	3001      	adds	r0, #1
 800a5de:	f000 80a9 	beq.w	800a734 <_vfiprintf_r+0x1f0>
 800a5e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5e4:	445a      	add	r2, fp
 800a5e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a5e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 80a1 	beq.w	800a734 <_vfiprintf_r+0x1f0>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5fc:	f10a 0a01 	add.w	sl, sl, #1
 800a600:	9304      	str	r3, [sp, #16]
 800a602:	9307      	str	r3, [sp, #28]
 800a604:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a608:	931a      	str	r3, [sp, #104]	; 0x68
 800a60a:	4654      	mov	r4, sl
 800a60c:	2205      	movs	r2, #5
 800a60e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a612:	4854      	ldr	r0, [pc, #336]	; (800a764 <_vfiprintf_r+0x220>)
 800a614:	f7f5 fde4 	bl	80001e0 <memchr>
 800a618:	9a04      	ldr	r2, [sp, #16]
 800a61a:	b9d8      	cbnz	r0, 800a654 <_vfiprintf_r+0x110>
 800a61c:	06d1      	lsls	r1, r2, #27
 800a61e:	bf44      	itt	mi
 800a620:	2320      	movmi	r3, #32
 800a622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a626:	0713      	lsls	r3, r2, #28
 800a628:	bf44      	itt	mi
 800a62a:	232b      	movmi	r3, #43	; 0x2b
 800a62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a630:	f89a 3000 	ldrb.w	r3, [sl]
 800a634:	2b2a      	cmp	r3, #42	; 0x2a
 800a636:	d015      	beq.n	800a664 <_vfiprintf_r+0x120>
 800a638:	9a07      	ldr	r2, [sp, #28]
 800a63a:	4654      	mov	r4, sl
 800a63c:	2000      	movs	r0, #0
 800a63e:	f04f 0c0a 	mov.w	ip, #10
 800a642:	4621      	mov	r1, r4
 800a644:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a648:	3b30      	subs	r3, #48	; 0x30
 800a64a:	2b09      	cmp	r3, #9
 800a64c:	d94d      	bls.n	800a6ea <_vfiprintf_r+0x1a6>
 800a64e:	b1b0      	cbz	r0, 800a67e <_vfiprintf_r+0x13a>
 800a650:	9207      	str	r2, [sp, #28]
 800a652:	e014      	b.n	800a67e <_vfiprintf_r+0x13a>
 800a654:	eba0 0308 	sub.w	r3, r0, r8
 800a658:	fa09 f303 	lsl.w	r3, r9, r3
 800a65c:	4313      	orrs	r3, r2
 800a65e:	9304      	str	r3, [sp, #16]
 800a660:	46a2      	mov	sl, r4
 800a662:	e7d2      	b.n	800a60a <_vfiprintf_r+0xc6>
 800a664:	9b03      	ldr	r3, [sp, #12]
 800a666:	1d19      	adds	r1, r3, #4
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	9103      	str	r1, [sp, #12]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	bfbb      	ittet	lt
 800a670:	425b      	neglt	r3, r3
 800a672:	f042 0202 	orrlt.w	r2, r2, #2
 800a676:	9307      	strge	r3, [sp, #28]
 800a678:	9307      	strlt	r3, [sp, #28]
 800a67a:	bfb8      	it	lt
 800a67c:	9204      	strlt	r2, [sp, #16]
 800a67e:	7823      	ldrb	r3, [r4, #0]
 800a680:	2b2e      	cmp	r3, #46	; 0x2e
 800a682:	d10c      	bne.n	800a69e <_vfiprintf_r+0x15a>
 800a684:	7863      	ldrb	r3, [r4, #1]
 800a686:	2b2a      	cmp	r3, #42	; 0x2a
 800a688:	d134      	bne.n	800a6f4 <_vfiprintf_r+0x1b0>
 800a68a:	9b03      	ldr	r3, [sp, #12]
 800a68c:	1d1a      	adds	r2, r3, #4
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	9203      	str	r2, [sp, #12]
 800a692:	2b00      	cmp	r3, #0
 800a694:	bfb8      	it	lt
 800a696:	f04f 33ff 	movlt.w	r3, #4294967295
 800a69a:	3402      	adds	r4, #2
 800a69c:	9305      	str	r3, [sp, #20]
 800a69e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a774 <_vfiprintf_r+0x230>
 800a6a2:	7821      	ldrb	r1, [r4, #0]
 800a6a4:	2203      	movs	r2, #3
 800a6a6:	4650      	mov	r0, sl
 800a6a8:	f7f5 fd9a 	bl	80001e0 <memchr>
 800a6ac:	b138      	cbz	r0, 800a6be <_vfiprintf_r+0x17a>
 800a6ae:	9b04      	ldr	r3, [sp, #16]
 800a6b0:	eba0 000a 	sub.w	r0, r0, sl
 800a6b4:	2240      	movs	r2, #64	; 0x40
 800a6b6:	4082      	lsls	r2, r0
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	3401      	adds	r4, #1
 800a6bc:	9304      	str	r3, [sp, #16]
 800a6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c2:	4829      	ldr	r0, [pc, #164]	; (800a768 <_vfiprintf_r+0x224>)
 800a6c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6c8:	2206      	movs	r2, #6
 800a6ca:	f7f5 fd89 	bl	80001e0 <memchr>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d03f      	beq.n	800a752 <_vfiprintf_r+0x20e>
 800a6d2:	4b26      	ldr	r3, [pc, #152]	; (800a76c <_vfiprintf_r+0x228>)
 800a6d4:	bb1b      	cbnz	r3, 800a71e <_vfiprintf_r+0x1da>
 800a6d6:	9b03      	ldr	r3, [sp, #12]
 800a6d8:	3307      	adds	r3, #7
 800a6da:	f023 0307 	bic.w	r3, r3, #7
 800a6de:	3308      	adds	r3, #8
 800a6e0:	9303      	str	r3, [sp, #12]
 800a6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e4:	443b      	add	r3, r7
 800a6e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6e8:	e768      	b.n	800a5bc <_vfiprintf_r+0x78>
 800a6ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6ee:	460c      	mov	r4, r1
 800a6f0:	2001      	movs	r0, #1
 800a6f2:	e7a6      	b.n	800a642 <_vfiprintf_r+0xfe>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	3401      	adds	r4, #1
 800a6f8:	9305      	str	r3, [sp, #20]
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	f04f 0c0a 	mov.w	ip, #10
 800a700:	4620      	mov	r0, r4
 800a702:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a706:	3a30      	subs	r2, #48	; 0x30
 800a708:	2a09      	cmp	r2, #9
 800a70a:	d903      	bls.n	800a714 <_vfiprintf_r+0x1d0>
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d0c6      	beq.n	800a69e <_vfiprintf_r+0x15a>
 800a710:	9105      	str	r1, [sp, #20]
 800a712:	e7c4      	b.n	800a69e <_vfiprintf_r+0x15a>
 800a714:	fb0c 2101 	mla	r1, ip, r1, r2
 800a718:	4604      	mov	r4, r0
 800a71a:	2301      	movs	r3, #1
 800a71c:	e7f0      	b.n	800a700 <_vfiprintf_r+0x1bc>
 800a71e:	ab03      	add	r3, sp, #12
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	462a      	mov	r2, r5
 800a724:	4b12      	ldr	r3, [pc, #72]	; (800a770 <_vfiprintf_r+0x22c>)
 800a726:	a904      	add	r1, sp, #16
 800a728:	4630      	mov	r0, r6
 800a72a:	f3af 8000 	nop.w
 800a72e:	4607      	mov	r7, r0
 800a730:	1c78      	adds	r0, r7, #1
 800a732:	d1d6      	bne.n	800a6e2 <_vfiprintf_r+0x19e>
 800a734:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a736:	07d9      	lsls	r1, r3, #31
 800a738:	d405      	bmi.n	800a746 <_vfiprintf_r+0x202>
 800a73a:	89ab      	ldrh	r3, [r5, #12]
 800a73c:	059a      	lsls	r2, r3, #22
 800a73e:	d402      	bmi.n	800a746 <_vfiprintf_r+0x202>
 800a740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a742:	f7ff f99f 	bl	8009a84 <__retarget_lock_release_recursive>
 800a746:	89ab      	ldrh	r3, [r5, #12]
 800a748:	065b      	lsls	r3, r3, #25
 800a74a:	f53f af1d 	bmi.w	800a588 <_vfiprintf_r+0x44>
 800a74e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a750:	e71c      	b.n	800a58c <_vfiprintf_r+0x48>
 800a752:	ab03      	add	r3, sp, #12
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	462a      	mov	r2, r5
 800a758:	4b05      	ldr	r3, [pc, #20]	; (800a770 <_vfiprintf_r+0x22c>)
 800a75a:	a904      	add	r1, sp, #16
 800a75c:	4630      	mov	r0, r6
 800a75e:	f7ff fc77 	bl	800a050 <_printf_i>
 800a762:	e7e4      	b.n	800a72e <_vfiprintf_r+0x1ea>
 800a764:	08011b6b 	.word	0x08011b6b
 800a768:	08011b75 	.word	0x08011b75
 800a76c:	00000000 	.word	0x00000000
 800a770:	0800a51f 	.word	0x0800a51f
 800a774:	08011b71 	.word	0x08011b71

0800a778 <__swbuf_r>:
 800a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77a:	460e      	mov	r6, r1
 800a77c:	4614      	mov	r4, r2
 800a77e:	4605      	mov	r5, r0
 800a780:	b118      	cbz	r0, 800a78a <__swbuf_r+0x12>
 800a782:	6a03      	ldr	r3, [r0, #32]
 800a784:	b90b      	cbnz	r3, 800a78a <__swbuf_r+0x12>
 800a786:	f7ff f847 	bl	8009818 <__sinit>
 800a78a:	69a3      	ldr	r3, [r4, #24]
 800a78c:	60a3      	str	r3, [r4, #8]
 800a78e:	89a3      	ldrh	r3, [r4, #12]
 800a790:	071a      	lsls	r2, r3, #28
 800a792:	d525      	bpl.n	800a7e0 <__swbuf_r+0x68>
 800a794:	6923      	ldr	r3, [r4, #16]
 800a796:	b31b      	cbz	r3, 800a7e0 <__swbuf_r+0x68>
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	6922      	ldr	r2, [r4, #16]
 800a79c:	1a98      	subs	r0, r3, r2
 800a79e:	6963      	ldr	r3, [r4, #20]
 800a7a0:	b2f6      	uxtb	r6, r6
 800a7a2:	4283      	cmp	r3, r0
 800a7a4:	4637      	mov	r7, r6
 800a7a6:	dc04      	bgt.n	800a7b2 <__swbuf_r+0x3a>
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4628      	mov	r0, r5
 800a7ac:	f7ff fdf8 	bl	800a3a0 <_fflush_r>
 800a7b0:	b9e0      	cbnz	r0, 800a7ec <__swbuf_r+0x74>
 800a7b2:	68a3      	ldr	r3, [r4, #8]
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	60a3      	str	r3, [r4, #8]
 800a7b8:	6823      	ldr	r3, [r4, #0]
 800a7ba:	1c5a      	adds	r2, r3, #1
 800a7bc:	6022      	str	r2, [r4, #0]
 800a7be:	701e      	strb	r6, [r3, #0]
 800a7c0:	6962      	ldr	r2, [r4, #20]
 800a7c2:	1c43      	adds	r3, r0, #1
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d004      	beq.n	800a7d2 <__swbuf_r+0x5a>
 800a7c8:	89a3      	ldrh	r3, [r4, #12]
 800a7ca:	07db      	lsls	r3, r3, #31
 800a7cc:	d506      	bpl.n	800a7dc <__swbuf_r+0x64>
 800a7ce:	2e0a      	cmp	r6, #10
 800a7d0:	d104      	bne.n	800a7dc <__swbuf_r+0x64>
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	f7ff fde3 	bl	800a3a0 <_fflush_r>
 800a7da:	b938      	cbnz	r0, 800a7ec <__swbuf_r+0x74>
 800a7dc:	4638      	mov	r0, r7
 800a7de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f000 f806 	bl	800a7f4 <__swsetup_r>
 800a7e8:	2800      	cmp	r0, #0
 800a7ea:	d0d5      	beq.n	800a798 <__swbuf_r+0x20>
 800a7ec:	f04f 37ff 	mov.w	r7, #4294967295
 800a7f0:	e7f4      	b.n	800a7dc <__swbuf_r+0x64>
	...

0800a7f4 <__swsetup_r>:
 800a7f4:	b538      	push	{r3, r4, r5, lr}
 800a7f6:	4b2a      	ldr	r3, [pc, #168]	; (800a8a0 <__swsetup_r+0xac>)
 800a7f8:	4605      	mov	r5, r0
 800a7fa:	6818      	ldr	r0, [r3, #0]
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	b118      	cbz	r0, 800a808 <__swsetup_r+0x14>
 800a800:	6a03      	ldr	r3, [r0, #32]
 800a802:	b90b      	cbnz	r3, 800a808 <__swsetup_r+0x14>
 800a804:	f7ff f808 	bl	8009818 <__sinit>
 800a808:	89a3      	ldrh	r3, [r4, #12]
 800a80a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a80e:	0718      	lsls	r0, r3, #28
 800a810:	d422      	bmi.n	800a858 <__swsetup_r+0x64>
 800a812:	06d9      	lsls	r1, r3, #27
 800a814:	d407      	bmi.n	800a826 <__swsetup_r+0x32>
 800a816:	2309      	movs	r3, #9
 800a818:	602b      	str	r3, [r5, #0]
 800a81a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a81e:	81a3      	strh	r3, [r4, #12]
 800a820:	f04f 30ff 	mov.w	r0, #4294967295
 800a824:	e034      	b.n	800a890 <__swsetup_r+0x9c>
 800a826:	0758      	lsls	r0, r3, #29
 800a828:	d512      	bpl.n	800a850 <__swsetup_r+0x5c>
 800a82a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a82c:	b141      	cbz	r1, 800a840 <__swsetup_r+0x4c>
 800a82e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a832:	4299      	cmp	r1, r3
 800a834:	d002      	beq.n	800a83c <__swsetup_r+0x48>
 800a836:	4628      	mov	r0, r5
 800a838:	f7ff f944 	bl	8009ac4 <_free_r>
 800a83c:	2300      	movs	r3, #0
 800a83e:	6363      	str	r3, [r4, #52]	; 0x34
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a846:	81a3      	strh	r3, [r4, #12]
 800a848:	2300      	movs	r3, #0
 800a84a:	6063      	str	r3, [r4, #4]
 800a84c:	6923      	ldr	r3, [r4, #16]
 800a84e:	6023      	str	r3, [r4, #0]
 800a850:	89a3      	ldrh	r3, [r4, #12]
 800a852:	f043 0308 	orr.w	r3, r3, #8
 800a856:	81a3      	strh	r3, [r4, #12]
 800a858:	6923      	ldr	r3, [r4, #16]
 800a85a:	b94b      	cbnz	r3, 800a870 <__swsetup_r+0x7c>
 800a85c:	89a3      	ldrh	r3, [r4, #12]
 800a85e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a866:	d003      	beq.n	800a870 <__swsetup_r+0x7c>
 800a868:	4621      	mov	r1, r4
 800a86a:	4628      	mov	r0, r5
 800a86c:	f000 f88c 	bl	800a988 <__smakebuf_r>
 800a870:	89a0      	ldrh	r0, [r4, #12]
 800a872:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a876:	f010 0301 	ands.w	r3, r0, #1
 800a87a:	d00a      	beq.n	800a892 <__swsetup_r+0x9e>
 800a87c:	2300      	movs	r3, #0
 800a87e:	60a3      	str	r3, [r4, #8]
 800a880:	6963      	ldr	r3, [r4, #20]
 800a882:	425b      	negs	r3, r3
 800a884:	61a3      	str	r3, [r4, #24]
 800a886:	6923      	ldr	r3, [r4, #16]
 800a888:	b943      	cbnz	r3, 800a89c <__swsetup_r+0xa8>
 800a88a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a88e:	d1c4      	bne.n	800a81a <__swsetup_r+0x26>
 800a890:	bd38      	pop	{r3, r4, r5, pc}
 800a892:	0781      	lsls	r1, r0, #30
 800a894:	bf58      	it	pl
 800a896:	6963      	ldrpl	r3, [r4, #20]
 800a898:	60a3      	str	r3, [r4, #8]
 800a89a:	e7f4      	b.n	800a886 <__swsetup_r+0x92>
 800a89c:	2000      	movs	r0, #0
 800a89e:	e7f7      	b.n	800a890 <__swsetup_r+0x9c>
 800a8a0:	20000118 	.word	0x20000118

0800a8a4 <_raise_r>:
 800a8a4:	291f      	cmp	r1, #31
 800a8a6:	b538      	push	{r3, r4, r5, lr}
 800a8a8:	4604      	mov	r4, r0
 800a8aa:	460d      	mov	r5, r1
 800a8ac:	d904      	bls.n	800a8b8 <_raise_r+0x14>
 800a8ae:	2316      	movs	r3, #22
 800a8b0:	6003      	str	r3, [r0, #0]
 800a8b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}
 800a8b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a8ba:	b112      	cbz	r2, 800a8c2 <_raise_r+0x1e>
 800a8bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8c0:	b94b      	cbnz	r3, 800a8d6 <_raise_r+0x32>
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 f830 	bl	800a928 <_getpid_r>
 800a8c8:	462a      	mov	r2, r5
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8d2:	f000 b817 	b.w	800a904 <_kill_r>
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d00a      	beq.n	800a8f0 <_raise_r+0x4c>
 800a8da:	1c59      	adds	r1, r3, #1
 800a8dc:	d103      	bne.n	800a8e6 <_raise_r+0x42>
 800a8de:	2316      	movs	r3, #22
 800a8e0:	6003      	str	r3, [r0, #0]
 800a8e2:	2001      	movs	r0, #1
 800a8e4:	e7e7      	b.n	800a8b6 <_raise_r+0x12>
 800a8e6:	2400      	movs	r4, #0
 800a8e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	4798      	blx	r3
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	e7e0      	b.n	800a8b6 <_raise_r+0x12>

0800a8f4 <raise>:
 800a8f4:	4b02      	ldr	r3, [pc, #8]	; (800a900 <raise+0xc>)
 800a8f6:	4601      	mov	r1, r0
 800a8f8:	6818      	ldr	r0, [r3, #0]
 800a8fa:	f7ff bfd3 	b.w	800a8a4 <_raise_r>
 800a8fe:	bf00      	nop
 800a900:	20000118 	.word	0x20000118

0800a904 <_kill_r>:
 800a904:	b538      	push	{r3, r4, r5, lr}
 800a906:	4d07      	ldr	r5, [pc, #28]	; (800a924 <_kill_r+0x20>)
 800a908:	2300      	movs	r3, #0
 800a90a:	4604      	mov	r4, r0
 800a90c:	4608      	mov	r0, r1
 800a90e:	4611      	mov	r1, r2
 800a910:	602b      	str	r3, [r5, #0]
 800a912:	f7f9 fa49 	bl	8003da8 <_kill>
 800a916:	1c43      	adds	r3, r0, #1
 800a918:	d102      	bne.n	800a920 <_kill_r+0x1c>
 800a91a:	682b      	ldr	r3, [r5, #0]
 800a91c:	b103      	cbz	r3, 800a920 <_kill_r+0x1c>
 800a91e:	6023      	str	r3, [r4, #0]
 800a920:	bd38      	pop	{r3, r4, r5, pc}
 800a922:	bf00      	nop
 800a924:	200008b4 	.word	0x200008b4

0800a928 <_getpid_r>:
 800a928:	f7f9 ba36 	b.w	8003d98 <_getpid>

0800a92c <_malloc_usable_size_r>:
 800a92c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a930:	1f18      	subs	r0, r3, #4
 800a932:	2b00      	cmp	r3, #0
 800a934:	bfbc      	itt	lt
 800a936:	580b      	ldrlt	r3, [r1, r0]
 800a938:	18c0      	addlt	r0, r0, r3
 800a93a:	4770      	bx	lr

0800a93c <__swhatbuf_r>:
 800a93c:	b570      	push	{r4, r5, r6, lr}
 800a93e:	460c      	mov	r4, r1
 800a940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a944:	2900      	cmp	r1, #0
 800a946:	b096      	sub	sp, #88	; 0x58
 800a948:	4615      	mov	r5, r2
 800a94a:	461e      	mov	r6, r3
 800a94c:	da0d      	bge.n	800a96a <__swhatbuf_r+0x2e>
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a954:	f04f 0100 	mov.w	r1, #0
 800a958:	bf0c      	ite	eq
 800a95a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a95e:	2340      	movne	r3, #64	; 0x40
 800a960:	2000      	movs	r0, #0
 800a962:	6031      	str	r1, [r6, #0]
 800a964:	602b      	str	r3, [r5, #0]
 800a966:	b016      	add	sp, #88	; 0x58
 800a968:	bd70      	pop	{r4, r5, r6, pc}
 800a96a:	466a      	mov	r2, sp
 800a96c:	f000 f848 	bl	800aa00 <_fstat_r>
 800a970:	2800      	cmp	r0, #0
 800a972:	dbec      	blt.n	800a94e <__swhatbuf_r+0x12>
 800a974:	9901      	ldr	r1, [sp, #4]
 800a976:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a97a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a97e:	4259      	negs	r1, r3
 800a980:	4159      	adcs	r1, r3
 800a982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a986:	e7eb      	b.n	800a960 <__swhatbuf_r+0x24>

0800a988 <__smakebuf_r>:
 800a988:	898b      	ldrh	r3, [r1, #12]
 800a98a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a98c:	079d      	lsls	r5, r3, #30
 800a98e:	4606      	mov	r6, r0
 800a990:	460c      	mov	r4, r1
 800a992:	d507      	bpl.n	800a9a4 <__smakebuf_r+0x1c>
 800a994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	6123      	str	r3, [r4, #16]
 800a99c:	2301      	movs	r3, #1
 800a99e:	6163      	str	r3, [r4, #20]
 800a9a0:	b002      	add	sp, #8
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	ab01      	add	r3, sp, #4
 800a9a6:	466a      	mov	r2, sp
 800a9a8:	f7ff ffc8 	bl	800a93c <__swhatbuf_r>
 800a9ac:	9900      	ldr	r1, [sp, #0]
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	f7ff f8fb 	bl	8009bac <_malloc_r>
 800a9b6:	b948      	cbnz	r0, 800a9cc <__smakebuf_r+0x44>
 800a9b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9bc:	059a      	lsls	r2, r3, #22
 800a9be:	d4ef      	bmi.n	800a9a0 <__smakebuf_r+0x18>
 800a9c0:	f023 0303 	bic.w	r3, r3, #3
 800a9c4:	f043 0302 	orr.w	r3, r3, #2
 800a9c8:	81a3      	strh	r3, [r4, #12]
 800a9ca:	e7e3      	b.n	800a994 <__smakebuf_r+0xc>
 800a9cc:	89a3      	ldrh	r3, [r4, #12]
 800a9ce:	6020      	str	r0, [r4, #0]
 800a9d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9d4:	81a3      	strh	r3, [r4, #12]
 800a9d6:	9b00      	ldr	r3, [sp, #0]
 800a9d8:	6163      	str	r3, [r4, #20]
 800a9da:	9b01      	ldr	r3, [sp, #4]
 800a9dc:	6120      	str	r0, [r4, #16]
 800a9de:	b15b      	cbz	r3, 800a9f8 <__smakebuf_r+0x70>
 800a9e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	f000 f81d 	bl	800aa24 <_isatty_r>
 800a9ea:	b128      	cbz	r0, 800a9f8 <__smakebuf_r+0x70>
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	f023 0303 	bic.w	r3, r3, #3
 800a9f2:	f043 0301 	orr.w	r3, r3, #1
 800a9f6:	81a3      	strh	r3, [r4, #12]
 800a9f8:	89a3      	ldrh	r3, [r4, #12]
 800a9fa:	431d      	orrs	r5, r3
 800a9fc:	81a5      	strh	r5, [r4, #12]
 800a9fe:	e7cf      	b.n	800a9a0 <__smakebuf_r+0x18>

0800aa00 <_fstat_r>:
 800aa00:	b538      	push	{r3, r4, r5, lr}
 800aa02:	4d07      	ldr	r5, [pc, #28]	; (800aa20 <_fstat_r+0x20>)
 800aa04:	2300      	movs	r3, #0
 800aa06:	4604      	mov	r4, r0
 800aa08:	4608      	mov	r0, r1
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	602b      	str	r3, [r5, #0]
 800aa0e:	f7f9 fa2a 	bl	8003e66 <_fstat>
 800aa12:	1c43      	adds	r3, r0, #1
 800aa14:	d102      	bne.n	800aa1c <_fstat_r+0x1c>
 800aa16:	682b      	ldr	r3, [r5, #0]
 800aa18:	b103      	cbz	r3, 800aa1c <_fstat_r+0x1c>
 800aa1a:	6023      	str	r3, [r4, #0]
 800aa1c:	bd38      	pop	{r3, r4, r5, pc}
 800aa1e:	bf00      	nop
 800aa20:	200008b4 	.word	0x200008b4

0800aa24 <_isatty_r>:
 800aa24:	b538      	push	{r3, r4, r5, lr}
 800aa26:	4d06      	ldr	r5, [pc, #24]	; (800aa40 <_isatty_r+0x1c>)
 800aa28:	2300      	movs	r3, #0
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	4608      	mov	r0, r1
 800aa2e:	602b      	str	r3, [r5, #0]
 800aa30:	f7f9 fa29 	bl	8003e86 <_isatty>
 800aa34:	1c43      	adds	r3, r0, #1
 800aa36:	d102      	bne.n	800aa3e <_isatty_r+0x1a>
 800aa38:	682b      	ldr	r3, [r5, #0]
 800aa3a:	b103      	cbz	r3, 800aa3e <_isatty_r+0x1a>
 800aa3c:	6023      	str	r3, [r4, #0]
 800aa3e:	bd38      	pop	{r3, r4, r5, pc}
 800aa40:	200008b4 	.word	0x200008b4

0800aa44 <_init>:
 800aa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa46:	bf00      	nop
 800aa48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa4a:	bc08      	pop	{r3}
 800aa4c:	469e      	mov	lr, r3
 800aa4e:	4770      	bx	lr

0800aa50 <_fini>:
 800aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa52:	bf00      	nop
 800aa54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa56:	bc08      	pop	{r3}
 800aa58:	469e      	mov	lr, r3
 800aa5a:	4770      	bx	lr
