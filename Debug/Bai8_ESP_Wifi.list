
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030c8  08009a3c  08009a3c  00019a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb04  0800cb04  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb04  0800cb04  0001cb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb0c  0800cb0c  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb0c  0800cb0c  0001cb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb10  0800cb10  0001cb10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  0800cb14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020120  2**0
                  CONTENTS
 10 .bss          00000790  20000120  20000120  00020120  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008b0  200008b0  00020120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019982  00000000  00000000  00020193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000044e3  00000000  00000000  00039b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017c0  00000000  00000000  0003dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001279  00000000  00000000  0003f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000272b0  00000000  00000000  00040a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002178f  00000000  00000000  00067ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e1471  00000000  00000000  00089470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006af8  00000000  00000000  0016a8e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001713dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000120 	.word	0x20000120
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a24 	.word	0x08009a24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000124 	.word	0x20000124
 80001cc:	08009a24 	.word	0x08009a24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000572:	463b      	mov	r3, r7
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800057e:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <MX_ADC1_Init+0x108>)
 8000580:	4a3d      	ldr	r2, [pc, #244]	; (8000678 <MX_ADC1_Init+0x10c>)
 8000582:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000584:	4b3b      	ldr	r3, [pc, #236]	; (8000674 <MX_ADC1_Init+0x108>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058a:	4b3a      	ldr	r3, [pc, #232]	; (8000674 <MX_ADC1_Init+0x108>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000590:	4b38      	ldr	r3, [pc, #224]	; (8000674 <MX_ADC1_Init+0x108>)
 8000592:	2201      	movs	r2, #1
 8000594:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000596:	4b37      	ldr	r3, [pc, #220]	; (8000674 <MX_ADC1_Init+0x108>)
 8000598:	2200      	movs	r2, #0
 800059a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800059c:	4b35      	ldr	r3, [pc, #212]	; (8000674 <MX_ADC1_Init+0x108>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a4:	4b33      	ldr	r3, [pc, #204]	; (8000674 <MX_ADC1_Init+0x108>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005aa:	4b32      	ldr	r3, [pc, #200]	; (8000674 <MX_ADC1_Init+0x108>)
 80005ac:	4a33      	ldr	r2, [pc, #204]	; (800067c <MX_ADC1_Init+0x110>)
 80005ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b0:	4b30      	ldr	r3, [pc, #192]	; (8000674 <MX_ADC1_Init+0x108>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <MX_ADC1_Init+0x108>)
 80005b8:	2205      	movs	r2, #5
 80005ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <MX_ADC1_Init+0x108>)
 80005be:	2200      	movs	r2, #0
 80005c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c4:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <MX_ADC1_Init+0x108>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ca:	482a      	ldr	r0, [pc, #168]	; (8000674 <MX_ADC1_Init+0x108>)
 80005cc:	f003 fcdc 	bl	8003f88 <HAL_ADC_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005d6:	f001 fa8b 	bl	8001af0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005da:	2308      	movs	r3, #8
 80005dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005de:	2301      	movs	r3, #1
 80005e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	4822      	ldr	r0, [pc, #136]	; (8000674 <MX_ADC1_Init+0x108>)
 80005ec:	f003 fd10 	bl	8004010 <HAL_ADC_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80005f6:	f001 fa7b 	bl	8001af0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005fa:	2309      	movs	r3, #9
 80005fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005fe:	2302      	movs	r3, #2
 8000600:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	4619      	mov	r1, r3
 8000606:	481b      	ldr	r0, [pc, #108]	; (8000674 <MX_ADC1_Init+0x108>)
 8000608:	f003 fd02 	bl	8004010 <HAL_ADC_ConfigChannel>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000612:	f001 fa6d 	bl	8001af0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000616:	230a      	movs	r3, #10
 8000618:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800061a:	2303      	movs	r3, #3
 800061c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061e:	463b      	mov	r3, r7
 8000620:	4619      	mov	r1, r3
 8000622:	4814      	ldr	r0, [pc, #80]	; (8000674 <MX_ADC1_Init+0x108>)
 8000624:	f003 fcf4 	bl	8004010 <HAL_ADC_ConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800062e:	f001 fa5f 	bl	8001af0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000632:	230b      	movs	r3, #11
 8000634:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000636:	2304      	movs	r3, #4
 8000638:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	480d      	ldr	r0, [pc, #52]	; (8000674 <MX_ADC1_Init+0x108>)
 8000640:	f003 fce6 	bl	8004010 <HAL_ADC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800064a:	f001 fa51 	bl	8001af0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800064e:	230c      	movs	r3, #12
 8000650:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000652:	2305      	movs	r3, #5
 8000654:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	4619      	mov	r1, r3
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <MX_ADC1_Init+0x108>)
 800065c:	f003 fcd8 	bl	8004010 <HAL_ADC_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000666:	f001 fa43 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000013c 	.word	0x2000013c
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <HAL_ADC_MspInit+0x110>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d171      	bne.n	8000786 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006aa:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b0:	6453      	str	r3, [r2, #68]	; 0x44
 80006b2:	4b38      	ldr	r3, [pc, #224]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b31      	ldr	r3, [pc, #196]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a2c      	ldr	r2, [pc, #176]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006f6:	2307      	movs	r3, #7
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fa:	2303      	movs	r3, #3
 80006fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4823      	ldr	r0, [pc, #140]	; (8000798 <HAL_ADC_MspInit+0x118>)
 800070a:	f004 fb2d 	bl	8004d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800070e:	2303      	movs	r3, #3
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <HAL_ADC_MspInit+0x11c>)
 8000722:	f004 fb21 	bl	8004d68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000728:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <HAL_ADC_MspInit+0x124>)
 800072a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000744:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800074c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000754:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800075c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800076c:	f003 ff80 	bl	8004670 <HAL_DMA_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000776:	f001 f9bb 	bl	8001af0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800077e:	639a      	str	r2, [r3, #56]	; 0x38
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40012000 	.word	0x40012000
 8000794:	40023800 	.word	0x40023800
 8000798:	40020800 	.word	0x40020800
 800079c:	40020400 	.word	0x40020400
 80007a0:	20000184 	.word	0x20000184
 80007a4:	40026410 	.word	0x40026410

080007a8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2108      	movs	r1, #8
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <button_init+0x14>)
 80007b2:	f004 fc75 	bl	80050a0 <HAL_GPIO_WritePin>
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40020c00 	.word	0x40020c00

080007c0 <button_Scan>:

void button_Scan(){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2108      	movs	r1, #8
 80007ca:	482f      	ldr	r0, [pc, #188]	; (8000888 <button_Scan+0xc8>)
 80007cc:	f004 fc68 	bl	80050a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2108      	movs	r1, #8
 80007d4:	482c      	ldr	r0, [pc, #176]	; (8000888 <button_Scan+0xc8>)
 80007d6:	f004 fc63 	bl	80050a0 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80007da:	230a      	movs	r3, #10
 80007dc:	2202      	movs	r2, #2
 80007de:	492b      	ldr	r1, [pc, #172]	; (800088c <button_Scan+0xcc>)
 80007e0:	482b      	ldr	r0, [pc, #172]	; (8000890 <button_Scan+0xd0>)
 80007e2:	f005 fc18 	bl	8006016 <HAL_SPI_Receive>
	  int button_index = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80007ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007ee:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	e03f      	b.n	8000876 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	db06      	blt.n	800080a <button_Scan+0x4a>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	dc03      	bgt.n	800080a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3304      	adds	r3, #4
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	e018      	b.n	800083c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b03      	cmp	r3, #3
 800080e:	dd07      	ble.n	8000820 <button_Scan+0x60>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b07      	cmp	r3, #7
 8000814:	dc04      	bgt.n	8000820 <button_Scan+0x60>
			  button_index = 7 - i;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f1c3 0307 	rsb	r3, r3, #7
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	e00d      	b.n	800083c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b07      	cmp	r3, #7
 8000824:	dd06      	ble.n	8000834 <button_Scan+0x74>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0b      	cmp	r3, #11
 800082a:	dc03      	bgt.n	8000834 <button_Scan+0x74>
			  button_index = i + 4;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3304      	adds	r3, #4
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	e003      	b.n	800083c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f1c3 0317 	rsb	r3, r3, #23
 800083a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <button_Scan+0xcc>)
 800083e:	881a      	ldrh	r2, [r3, #0]
 8000840:	897b      	ldrh	r3, [r7, #10]
 8000842:	4013      	ands	r3, r2
 8000844:	b29b      	uxth	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d005      	beq.n	8000856 <button_Scan+0x96>
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <button_Scan+0xd4>)
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2100      	movs	r1, #0
 8000850:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000854:	e009      	b.n	800086a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <button_Scan+0xd4>)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800085e:	3301      	adds	r3, #1
 8000860:	b299      	uxth	r1, r3
 8000862:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <button_Scan+0xd4>)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800086a:	897b      	ldrh	r3, [r7, #10]
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3301      	adds	r3, #1
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b0f      	cmp	r3, #15
 800087a:	ddbc      	ble.n	80007f6 <button_Scan+0x36>
	  }
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40020c00 	.word	0x40020c00
 800088c:	20000204 	.word	0x20000204
 8000890:	200005a0 	.word	0x200005a0
 8000894:	200001e4 	.word	0x200001e4

08000898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_DMA_Init+0x3c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <MX_DMA_Init+0x3c>)
 80008a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_DMA_Init+0x3c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2100      	movs	r1, #0
 80008be:	2038      	movs	r0, #56	; 0x38
 80008c0:	f003 fe9f 	bl	8004602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008c4:	2038      	movs	r0, #56	; 0x38
 80008c6:	f003 feb8 	bl	800463a <HAL_NVIC_EnableIRQ>

}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	; 0x38
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
 80008ee:	615a      	str	r2, [r3, #20]
 80008f0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000904:	4b2f      	ldr	r3, [pc, #188]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000906:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800090a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800090c:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <MX_FSMC_Init+0xec>)
 800090e:	4a2e      	ldr	r2, [pc, #184]	; (80009c8 <MX_FSMC_Init+0xf0>)
 8000910:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000912:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000918:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <MX_FSMC_Init+0xec>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800091e:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000924:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000926:	2210      	movs	r2, #16
 8000928:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800092a:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <MX_FSMC_Init+0xec>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000936:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_FSMC_Init+0xec>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000944:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_FSMC_Init+0xec>)
 800094c:	2200      	movs	r2, #0
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_FSMC_Init+0xec>)
 800095a:	2200      	movs	r2, #0
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000960:	2200      	movs	r2, #0
 8000962:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000966:	2200      	movs	r2, #0
 8000968:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800096a:	230f      	movs	r3, #15
 800096c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800096e:	230f      	movs	r3, #15
 8000970:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000972:	233c      	movs	r3, #60	; 0x3c
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800097a:	2310      	movs	r3, #16
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800097e:	2311      	movs	r3, #17
 8000980:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000982:	2300      	movs	r3, #0
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000986:	2308      	movs	r3, #8
 8000988:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800098a:	230f      	movs	r3, #15
 800098c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800098e:	2309      	movs	r3, #9
 8000990:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000996:	2310      	movs	r3, #16
 8000998:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800099a:	2311      	movs	r3, #17
 800099c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80009a2:	463a      	mov	r2, r7
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4806      	ldr	r0, [pc, #24]	; (80009c4 <MX_FSMC_Init+0xec>)
 80009ac:	f005 ff16 	bl	80067dc <HAL_SRAM_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80009b6:	f001 f89b 	bl	8001af0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80009ba:	bf00      	nop
 80009bc:	3738      	adds	r7, #56	; 0x38
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000208 	.word	0x20000208
 80009c8:	a0000104 	.word	0xa0000104

080009cc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <HAL_FSMC_MspInit+0x88>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d131      	bne.n	8000a4c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_FSMC_MspInit+0x88>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <HAL_FSMC_MspInit+0x8c>)
 80009f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009f6:	4a18      	ldr	r2, [pc, #96]	; (8000a58 <HAL_FSMC_MspInit+0x8c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6393      	str	r3, [r2, #56]	; 0x38
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <HAL_FSMC_MspInit+0x8c>)
 8000a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000a0a:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000a0e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <HAL_FSMC_MspInit+0x90>)
 8000a26:	f004 f99f 	bl	8004d68 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000a2a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000a2e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	4806      	ldr	r0, [pc, #24]	; (8000a60 <HAL_FSMC_MspInit+0x94>)
 8000a46:	f004 f98f 	bl	8004d68 <HAL_GPIO_Init>
 8000a4a:	e000      	b.n	8000a4e <HAL_FSMC_MspInit+0x82>
    return;
 8000a4c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000258 	.word	0x20000258
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40020c00 	.word	0x40020c00

08000a64 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000a6c:	f7ff ffae 	bl	80009cc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
 8000a92:	4b8f      	ldr	r3, [pc, #572]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a8e      	ldr	r2, [pc, #568]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b8c      	ldr	r3, [pc, #560]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	623b      	str	r3, [r7, #32]
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
 8000aae:	4b88      	ldr	r3, [pc, #544]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a87      	ldr	r2, [pc, #540]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b85      	ldr	r3, [pc, #532]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	61fb      	str	r3, [r7, #28]
 8000ac4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	4b81      	ldr	r3, [pc, #516]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a80      	ldr	r2, [pc, #512]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000ad0:	f043 0320 	orr.w	r3, r3, #32
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b7e      	ldr	r3, [pc, #504]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0320 	and.w	r3, r3, #32
 8000ade:	61bb      	str	r3, [r7, #24]
 8000ae0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	4b7a      	ldr	r3, [pc, #488]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a79      	ldr	r2, [pc, #484]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b77      	ldr	r3, [pc, #476]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b73      	ldr	r3, [pc, #460]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a72      	ldr	r2, [pc, #456]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b70      	ldr	r3, [pc, #448]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b6c      	ldr	r3, [pc, #432]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a6b      	ldr	r2, [pc, #428]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b69      	ldr	r3, [pc, #420]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	4b65      	ldr	r3, [pc, #404]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a64      	ldr	r2, [pc, #400]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b62      	ldr	r3, [pc, #392]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b5e      	ldr	r3, [pc, #376]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a5d      	ldr	r2, [pc, #372]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b5b      	ldr	r3, [pc, #364]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2170      	movs	r1, #112	; 0x70
 8000b72:	4858      	ldr	r0, [pc, #352]	; (8000cd4 <MX_GPIO_Init+0x25c>)
 8000b74:	f004 fa94 	bl	80050a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8000b7e:	4856      	ldr	r0, [pc, #344]	; (8000cd8 <MX_GPIO_Init+0x260>)
 8000b80:	f004 fa8e 	bl	80050a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8a:	4854      	ldr	r0, [pc, #336]	; (8000cdc <MX_GPIO_Init+0x264>)
 8000b8c:	f004 fa88 	bl	80050a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000b96:	4852      	ldr	r0, [pc, #328]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000b98:	f004 fa82 	bl	80050a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba2:	4850      	ldr	r0, [pc, #320]	; (8000ce4 <MX_GPIO_Init+0x26c>)
 8000ba4:	f004 fa7c 	bl	80050a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2108      	movs	r1, #8
 8000bac:	484e      	ldr	r0, [pc, #312]	; (8000ce8 <MX_GPIO_Init+0x270>)
 8000bae:	f004 fa77 	bl	80050a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000bb2:	2370      	movs	r3, #112	; 0x70
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4842      	ldr	r0, [pc, #264]	; (8000cd4 <MX_GPIO_Init+0x25c>)
 8000bca:	f004 f8cd 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000bce:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	483c      	ldr	r0, [pc, #240]	; (8000cd8 <MX_GPIO_Init+0x260>)
 8000be8:	f004 f8be 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8000bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4836      	ldr	r0, [pc, #216]	; (8000cdc <MX_GPIO_Init+0x264>)
 8000c02:	f004 f8b1 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	482f      	ldr	r0, [pc, #188]	; (8000cdc <MX_GPIO_Init+0x264>)
 8000c20:	f004 f8a2 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000c24:	23c0      	movs	r3, #192	; 0xc0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	482b      	ldr	r0, [pc, #172]	; (8000ce4 <MX_GPIO_Init+0x26c>)
 8000c38:	f004 f896 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000c3c:	2330      	movs	r3, #48	; 0x30
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4822      	ldr	r0, [pc, #136]	; (8000cd8 <MX_GPIO_Init+0x260>)
 8000c50:	f004 f88a 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000c54:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	481c      	ldr	r0, [pc, #112]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000c6e:	f004 f87b 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8000c72:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	4814      	ldr	r0, [pc, #80]	; (8000cd8 <MX_GPIO_Init+0x260>)
 8000c88:	f004 f86e 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <MX_GPIO_Init+0x26c>)
 8000ca6:	f004 f85f 	bl	8004d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000caa:	2308      	movs	r3, #8
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <MX_GPIO_Init+0x270>)
 8000cc2:	f004 f851 	bl	8004d68 <HAL_GPIO_Init>

}
 8000cc6:	bf00      	nop
 8000cc8:	3738      	adds	r7, #56	; 0x38
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	40021400 	.word	0x40021400
 8000ce0:	40021800 	.word	0x40021800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	40020c00 	.word	0x40020c00

08000cec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000cf2:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <MX_I2C1_Init+0x54>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <MX_I2C1_Init+0x58>)
 8000cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d2a:	f004 f9d3 	bl	80050d4 <HAL_I2C_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d34:	f000 fedc 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000025c 	.word	0x2000025c
 8000d40:	40005400 	.word	0x40005400
 8000d44:	000186a0 	.word	0x000186a0

08000d48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <HAL_I2C_MspInit+0x84>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d12b      	bne.n	8000dc2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d86:	23c0      	movs	r3, #192	; 0xc0
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8a:	2312      	movs	r3, #18
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d96:	2304      	movs	r3, #4
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <HAL_I2C_MspInit+0x8c>)
 8000da2:	f003 ffe1 	bl	8004d68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	; 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020400 	.word	0x40020400

08000dd8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <LCD_WR_REG+0x1c>)
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	8013      	strh	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	600ffffe 	.word	0x600ffffe

08000df8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <LCD_WR_DATA+0x1c>)
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	8053      	strh	r3, [r2, #2]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	600ffffe 	.word	0x600ffffe

08000e18 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <LCD_RD_DATA+0x20>)
 8000e20:	885b      	ldrh	r3, [r3, #2]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	b29b      	uxth	r3, r3
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	600ffffe 	.word	0x600ffffe

08000e3c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4604      	mov	r4, r0
 8000e44:	4608      	mov	r0, r1
 8000e46:	4611      	mov	r1, r2
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	80fb      	strh	r3, [r7, #6]
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80bb      	strh	r3, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	807b      	strh	r3, [r7, #2]
 8000e56:	4613      	mov	r3, r2
 8000e58:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000e5a:	202a      	movs	r0, #42	; 0x2a
 8000e5c:	f7ff ffbc 	bl	8000dd8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	0a1b      	lsrs	r3, r3, #8
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ffc6 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ffc0 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	0a1b      	lsrs	r3, r3, #8
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ffba 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ffb4 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000e90:	202b      	movs	r0, #43	; 0x2b
 8000e92:	f7ff ffa1 	bl	8000dd8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ffab 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000ea2:	88bb      	ldrh	r3, [r7, #4]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ffa5 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000eae:	883b      	ldrh	r3, [r7, #0]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff9f 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000eba:	883b      	ldrh	r3, [r7, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff99 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000ec6:	202c      	movs	r0, #44	; 0x2c
 8000ec8:	f7ff ff86 	bl	8000dd8 <LCD_WR_REG>
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd90      	pop	{r4, r7, pc}

08000ed4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <lcd_Clear+0x60>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <lcd_Clear+0x60>)
 8000ee8:	885b      	ldrh	r3, [r3, #2]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f7ff ffa3 	bl	8000e3c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	81fb      	strh	r3, [r7, #14]
 8000efa:	e011      	b.n	8000f20 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	81bb      	strh	r3, [r7, #12]
 8000f00:	e006      	b.n	8000f10 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff77 	bl	8000df8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000f0a:	89bb      	ldrh	r3, [r7, #12]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	81bb      	strh	r3, [r7, #12]
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <lcd_Clear+0x60>)
 8000f12:	885b      	ldrh	r3, [r3, #2]
 8000f14:	89ba      	ldrh	r2, [r7, #12]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d3f3      	bcc.n	8000f02 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000f1a:	89fb      	ldrh	r3, [r7, #14]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	81fb      	strh	r3, [r7, #14]
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <lcd_Clear+0x60>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	89fa      	ldrh	r2, [r7, #14]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d3e8      	bcc.n	8000efc <lcd_Clear+0x28>
		}
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200002b0 	.word	0x200002b0

08000f38 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4604      	mov	r4, r0
 8000f40:	4608      	mov	r0, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	4623      	mov	r3, r4
 8000f48:	80fb      	strh	r3, [r7, #6]
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80bb      	strh	r3, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	807b      	strh	r3, [r7, #2]
 8000f52:	4613      	mov	r3, r2
 8000f54:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	883b      	ldrh	r3, [r7, #0]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	88b9      	ldrh	r1, [r7, #4]
 8000f64:	88f8      	ldrh	r0, [r7, #6]
 8000f66:	f7ff ff69 	bl	8000e3c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000f6a:	88bb      	ldrh	r3, [r7, #4]
 8000f6c:	81fb      	strh	r3, [r7, #14]
 8000f6e:	e010      	b.n	8000f92 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	81bb      	strh	r3, [r7, #12]
 8000f74:	e006      	b.n	8000f84 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000f76:	8c3b      	ldrh	r3, [r7, #32]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff3d 	bl	8000df8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000f7e:	89bb      	ldrh	r3, [r7, #12]
 8000f80:	3301      	adds	r3, #1
 8000f82:	81bb      	strh	r3, [r7, #12]
 8000f84:	89ba      	ldrh	r2, [r7, #12]
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d3f4      	bcc.n	8000f76 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000f8c:	89fb      	ldrh	r3, [r7, #14]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	81fb      	strh	r3, [r7, #14]
 8000f92:	89fa      	ldrh	r2, [r7, #14]
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d3ea      	bcc.n	8000f70 <lcd_Fill+0x38>
		}
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd90      	pop	{r4, r7, pc}

08000fa4 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	80bb      	strh	r3, [r7, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000fb6:	88bb      	ldrh	r3, [r7, #4]
 8000fb8:	88fa      	ldrh	r2, [r7, #6]
 8000fba:	88b9      	ldrh	r1, [r7, #4]
 8000fbc:	88f8      	ldrh	r0, [r7, #6]
 8000fbe:	f7ff ff3d 	bl	8000e3c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff17 	bl	8000df8 <LCD_WR_DATA>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8000fd2:	b590      	push	{r4, r7, lr}
 8000fd4:	b08d      	sub	sp, #52	; 0x34
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4604      	mov	r4, r0
 8000fda:	4608      	mov	r0, r1
 8000fdc:	4611      	mov	r1, r2
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4623      	mov	r3, r4
 8000fe2:	80fb      	strh	r3, [r7, #6]
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	80bb      	strh	r3, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
 8000fec:	4613      	mov	r3, r2
 8000fee:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8000ff8:	887a      	ldrh	r2, [r7, #2]
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001000:	883a      	ldrh	r2, [r7, #0]
 8001002:	88bb      	ldrh	r3, [r7, #4]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	2b00      	cmp	r3, #0
 8001014:	dd02      	ble.n	800101c <lcd_DrawLine+0x4a>
 8001016:	2301      	movs	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e00b      	b.n	8001034 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <lcd_DrawLine+0x56>
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e005      	b.n	8001034 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	425b      	negs	r3, r3
 8001032:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	2b00      	cmp	r3, #0
 8001038:	dd02      	ble.n	8001040 <lcd_DrawLine+0x6e>
 800103a:	2301      	movs	r3, #1
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	e00b      	b.n	8001058 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <lcd_DrawLine+0x7a>
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	e005      	b.n	8001058 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	425b      	negs	r3, r3
 8001056:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001058:	6a3a      	ldr	r2, [r7, #32]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	429a      	cmp	r2, r3
 800105e:	dd02      	ble.n	8001066 <lcd_DrawLine+0x94>
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	e001      	b.n	800106a <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 800106a:	2300      	movs	r3, #0
 800106c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800106e:	e02b      	b.n	80010c8 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	b29b      	uxth	r3, r3
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	b291      	uxth	r1, r2
 8001078:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff91 	bl	8000fa4 <lcd_DrawPoint>
		xerr+=delta_x;
 8001082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	4413      	add	r3, r2
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 800108a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	4413      	add	r3, r2
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	429a      	cmp	r2, r3
 8001098:	dd07      	ble.n	80010aa <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 800109a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80010aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	dd07      	ble.n	80010c2 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80010b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4413      	add	r3, r2
 80010c0:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80010c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010c4:	3301      	adds	r3, #1
 80010c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80010c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dacf      	bge.n	8001070 <lcd_DrawLine+0x9e>
		}
	}
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3734      	adds	r7, #52	; 0x34
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd90      	pop	{r4, r7, pc}

080010da <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 80010da:	b590      	push	{r4, r7, lr}
 80010dc:	b085      	sub	sp, #20
 80010de:	af02      	add	r7, sp, #8
 80010e0:	4604      	mov	r4, r0
 80010e2:	4608      	mov	r0, r1
 80010e4:	4611      	mov	r1, r2
 80010e6:	461a      	mov	r2, r3
 80010e8:	4623      	mov	r3, r4
 80010ea:	80fb      	strh	r3, [r7, #6]
 80010ec:	4603      	mov	r3, r0
 80010ee:	80bb      	strh	r3, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
 80010f4:	4613      	mov	r3, r2
 80010f6:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 80010f8:	88bc      	ldrh	r4, [r7, #4]
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	88b9      	ldrh	r1, [r7, #4]
 80010fe:	88f8      	ldrh	r0, [r7, #6]
 8001100:	8b3b      	ldrh	r3, [r7, #24]
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	4623      	mov	r3, r4
 8001106:	f7ff ff64 	bl	8000fd2 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 800110a:	883c      	ldrh	r4, [r7, #0]
 800110c:	88fa      	ldrh	r2, [r7, #6]
 800110e:	88b9      	ldrh	r1, [r7, #4]
 8001110:	88f8      	ldrh	r0, [r7, #6]
 8001112:	8b3b      	ldrh	r3, [r7, #24]
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	4623      	mov	r3, r4
 8001118:	f7ff ff5b 	bl	8000fd2 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 800111c:	883c      	ldrh	r4, [r7, #0]
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	8839      	ldrh	r1, [r7, #0]
 8001122:	88f8      	ldrh	r0, [r7, #6]
 8001124:	8b3b      	ldrh	r3, [r7, #24]
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4623      	mov	r3, r4
 800112a:	f7ff ff52 	bl	8000fd2 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 800112e:	883c      	ldrh	r4, [r7, #0]
 8001130:	887a      	ldrh	r2, [r7, #2]
 8001132:	88b9      	ldrh	r1, [r7, #4]
 8001134:	8878      	ldrh	r0, [r7, #2]
 8001136:	8b3b      	ldrh	r3, [r7, #24]
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	4623      	mov	r3, r4
 800113c:	f7ff ff49 	bl	8000fd2 <lcd_DrawLine>
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bd90      	pop	{r4, r7, pc}

08001148 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b087      	sub	sp, #28
 800114c:	af00      	add	r7, sp, #0
 800114e:	4604      	mov	r4, r0
 8001150:	4608      	mov	r0, r1
 8001152:	4611      	mov	r1, r2
 8001154:	461a      	mov	r2, r3
 8001156:	4623      	mov	r3, r4
 8001158:	80fb      	strh	r3, [r7, #6]
 800115a:	4603      	mov	r3, r0
 800115c:	80bb      	strh	r3, [r7, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	70fb      	strb	r3, [r7, #3]
 8001162:	4613      	mov	r3, r2
 8001164:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001166:	2300      	movs	r3, #0
 8001168:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800116e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001172:	085b      	lsrs	r3, r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	08db      	lsrs	r3, r3, #3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	bf14      	ite	ne
 800118a:	2301      	movne	r3, #1
 800118c:	2300      	moveq	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4413      	add	r3, r2
 8001192:	b29a      	uxth	r2, r3
 8001194:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001198:	b29b      	uxth	r3, r3
 800119a:	fb12 f303 	smulbb	r3, r2, r3
 800119e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	3b20      	subs	r3, #32
 80011a4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	4413      	add	r3, r2
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	3b01      	subs	r3, #1
 80011b2:	b29c      	uxth	r4, r3
 80011b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	88bb      	ldrh	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	88b9      	ldrh	r1, [r7, #4]
 80011c6:	88f8      	ldrh	r0, [r7, #6]
 80011c8:	4622      	mov	r2, r4
 80011ca:	f7ff fe37 	bl	8000e3c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	827b      	strh	r3, [r7, #18]
 80011d2:	e07a      	b.n	80012ca <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80011d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011d8:	2b0c      	cmp	r3, #12
 80011da:	d028      	beq.n	800122e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 80011dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011e0:	2b10      	cmp	r3, #16
 80011e2:	d108      	bne.n	80011f6 <lcd_ShowChar+0xae>
 80011e4:	78fa      	ldrb	r2, [r7, #3]
 80011e6:	8a7b      	ldrh	r3, [r7, #18]
 80011e8:	493c      	ldr	r1, [pc, #240]	; (80012dc <lcd_ShowChar+0x194>)
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	440a      	add	r2, r1
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	75fb      	strb	r3, [r7, #23]
 80011f4:	e01b      	b.n	800122e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 80011f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011fa:	2b18      	cmp	r3, #24
 80011fc:	d10b      	bne.n	8001216 <lcd_ShowChar+0xce>
 80011fe:	78fa      	ldrb	r2, [r7, #3]
 8001200:	8a79      	ldrh	r1, [r7, #18]
 8001202:	4837      	ldr	r0, [pc, #220]	; (80012e0 <lcd_ShowChar+0x198>)
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	4403      	add	r3, r0
 800120e:	440b      	add	r3, r1
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	75fb      	strb	r3, [r7, #23]
 8001214:	e00b      	b.n	800122e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001216:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800121a:	2b20      	cmp	r3, #32
 800121c:	d15a      	bne.n	80012d4 <lcd_ShowChar+0x18c>
 800121e:	78fa      	ldrb	r2, [r7, #3]
 8001220:	8a7b      	ldrh	r3, [r7, #18]
 8001222:	4930      	ldr	r1, [pc, #192]	; (80012e4 <lcd_ShowChar+0x19c>)
 8001224:	0192      	lsls	r2, r2, #6
 8001226:	440a      	add	r2, r1
 8001228:	4413      	add	r3, r2
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800122e:	2300      	movs	r3, #0
 8001230:	75bb      	strb	r3, [r7, #22]
 8001232:	e044      	b.n	80012be <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001234:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001238:	2b00      	cmp	r3, #0
 800123a:	d120      	bne.n	800127e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 800123c:	7dfa      	ldrb	r2, [r7, #23]
 800123e:	7dbb      	ldrb	r3, [r7, #22]
 8001240:	fa42 f303 	asr.w	r3, r2, r3
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d004      	beq.n	8001256 <lcd_ShowChar+0x10e>
 800124c:	883b      	ldrh	r3, [r7, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fdd2 	bl	8000df8 <LCD_WR_DATA>
 8001254:	e003      	b.n	800125e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001256:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fdcd 	bl	8000df8 <LCD_WR_DATA>
				m++;
 800125e:	7d7b      	ldrb	r3, [r7, #21]
 8001260:	3301      	adds	r3, #1
 8001262:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001264:	7d7b      	ldrb	r3, [r7, #21]
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	fbb3 f1f2 	udiv	r1, r3, r2
 800126c:	fb01 f202 	mul.w	r2, r1, r2
 8001270:	1a9b      	subs	r3, r3, r2
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d11f      	bne.n	80012b8 <lcd_ShowChar+0x170>
				{
					m=0;
 8001278:	2300      	movs	r3, #0
 800127a:	757b      	strb	r3, [r7, #21]
					break;
 800127c:	e022      	b.n	80012c4 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800127e:	7dfa      	ldrb	r2, [r7, #23]
 8001280:	7dbb      	ldrb	r3, [r7, #22]
 8001282:	fa42 f303 	asr.w	r3, r2, r3
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <lcd_ShowChar+0x152>
 800128e:	883a      	ldrh	r2, [r7, #0]
 8001290:	88b9      	ldrh	r1, [r7, #4]
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe85 	bl	8000fa4 <lcd_DrawPoint>
				x++;
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	3301      	adds	r3, #1
 800129e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80012a0:	88fa      	ldrh	r2, [r7, #6]
 80012a2:	8a3b      	ldrh	r3, [r7, #16]
 80012a4:	1ad2      	subs	r2, r2, r3
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d105      	bne.n	80012b8 <lcd_ShowChar+0x170>
				{
					x=x0;
 80012ac:	8a3b      	ldrh	r3, [r7, #16]
 80012ae:	80fb      	strh	r3, [r7, #6]
					y++;
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	3301      	adds	r3, #1
 80012b4:	80bb      	strh	r3, [r7, #4]
					break;
 80012b6:	e005      	b.n	80012c4 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80012b8:	7dbb      	ldrb	r3, [r7, #22]
 80012ba:	3301      	adds	r3, #1
 80012bc:	75bb      	strb	r3, [r7, #22]
 80012be:	7dbb      	ldrb	r3, [r7, #22]
 80012c0:	2b07      	cmp	r3, #7
 80012c2:	d9b7      	bls.n	8001234 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80012c4:	8a7b      	ldrh	r3, [r7, #18]
 80012c6:	3301      	adds	r3, #1
 80012c8:	827b      	strh	r3, [r7, #18]
 80012ca:	8a7a      	ldrh	r2, [r7, #18]
 80012cc:	89bb      	ldrh	r3, [r7, #12]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d380      	bcc.n	80011d4 <lcd_ShowChar+0x8c>
 80012d2:	e000      	b.n	80012d6 <lcd_ShowChar+0x18e>
		else return;
 80012d4:	bf00      	nop
				}
			}
		}
	}
}
 80012d6:	371c      	adds	r7, #28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd90      	pop	{r4, r7, pc}
 80012dc:	08009a84 	.word	0x08009a84
 80012e0:	0800a074 	.word	0x0800a074
 80012e4:	0800b244 	.word	0x0800b244

080012e8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80012fc:	e004      	b.n	8001308 <mypow+0x20>
 80012fe:	79fa      	ldrb	r2, [r7, #7]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	fb02 f303 	mul.w	r3, r2, r3
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	1e5a      	subs	r2, r3, #1
 800130c:	71ba      	strb	r2, [r7, #6]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f5      	bne.n	80012fe <mypow+0x16>
	return result;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af04      	add	r7, sp, #16
 8001326:	4604      	mov	r4, r0
 8001328:	4608      	mov	r0, r1
 800132a:	4611      	mov	r1, r2
 800132c:	461a      	mov	r2, r3
 800132e:	4623      	mov	r3, r4
 8001330:	80fb      	strh	r3, [r7, #6]
 8001332:	4603      	mov	r3, r0
 8001334:	80bb      	strh	r3, [r7, #4]
 8001336:	460b      	mov	r3, r1
 8001338:	807b      	strh	r3, [r7, #2]
 800133a:	4613      	mov	r3, r2
 800133c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800133e:	2300      	movs	r3, #0
 8001340:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001342:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001346:	085b      	lsrs	r3, r3, #1
 8001348:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	e059      	b.n	8001404 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001350:	887c      	ldrh	r4, [r7, #2]
 8001352:	787a      	ldrb	r2, [r7, #1]
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	3b01      	subs	r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4619      	mov	r1, r3
 8001360:	200a      	movs	r0, #10
 8001362:	f7ff ffc1 	bl	80012e8 <mypow>
 8001366:	4603      	mov	r3, r0
 8001368:	fbb4 f1f3 	udiv	r1, r4, r3
 800136c:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <lcd_ShowIntNum+0xf8>)
 800136e:	fba3 2301 	umull	r2, r3, r3, r1
 8001372:	08da      	lsrs	r2, r3, #3
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	1aca      	subs	r2, r1, r3
 800137e:	4613      	mov	r3, r2
 8001380:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d121      	bne.n	80013cc <lcd_ShowIntNum+0xac>
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	787b      	ldrb	r3, [r7, #1]
 800138c:	3b01      	subs	r3, #1
 800138e:	429a      	cmp	r2, r3
 8001390:	da1c      	bge.n	80013cc <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001392:	7b3b      	ldrb	r3, [r7, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d117      	bne.n	80013c8 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	b29a      	uxth	r2, r3
 800139c:	7b7b      	ldrb	r3, [r7, #13]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	fb12 f303 	smulbb	r3, r2, r3
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	4413      	add	r3, r2
 80013aa:	b298      	uxth	r0, r3
 80013ac:	8c3a      	ldrh	r2, [r7, #32]
 80013ae:	88b9      	ldrh	r1, [r7, #4]
 80013b0:	2300      	movs	r3, #0
 80013b2:	9302      	str	r3, [sp, #8]
 80013b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	4613      	mov	r3, r2
 80013c0:	2220      	movs	r2, #32
 80013c2:	f7ff fec1 	bl	8001148 <lcd_ShowChar>
				continue;
 80013c6:	e01a      	b.n	80013fe <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	7b7b      	ldrb	r3, [r7, #13]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	fb12 f303 	smulbb	r3, r2, r3
 80013d8:	b29a      	uxth	r2, r3
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	4413      	add	r3, r2
 80013de:	b298      	uxth	r0, r3
 80013e0:	7b3b      	ldrb	r3, [r7, #12]
 80013e2:	3330      	adds	r3, #48	; 0x30
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	8c3c      	ldrh	r4, [r7, #32]
 80013e8:	88b9      	ldrh	r1, [r7, #4]
 80013ea:	2300      	movs	r3, #0
 80013ec:	9302      	str	r3, [sp, #8]
 80013ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	4623      	mov	r3, r4
 80013fa:	f7ff fea5 	bl	8001148 <lcd_ShowChar>
	for(t=0;t<len;t++)
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	3301      	adds	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	787b      	ldrb	r3, [r7, #1]
 8001408:	429a      	cmp	r2, r3
 800140a:	d3a1      	bcc.n	8001350 <lcd_ShowIntNum+0x30>
	}
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
 8001416:	bf00      	nop
 8001418:	cccccccd 	.word	0xcccccccd

0800141c <lcd_SetDir>:
}



void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d007      	beq.n	8001446 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <lcd_SetDir+0x44>)
 8001438:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800143c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <lcd_SetDir+0x44>)
 8001440:	22f0      	movs	r2, #240	; 0xf0
 8001442:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001444:	e006      	b.n	8001454 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <lcd_SetDir+0x44>)
 8001448:	22f0      	movs	r2, #240	; 0xf0
 800144a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <lcd_SetDir+0x44>)
 800144e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001452:	805a      	strh	r2, [r3, #2]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	200002b0 	.word	0x200002b0

08001464 <lcd_init>:


void lcd_init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146e:	48aa      	ldr	r0, [pc, #680]	; (8001718 <lcd_init+0x2b4>)
 8001470:	f003 fe16 	bl	80050a0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001474:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001478:	f002 fd62 	bl	8003f40 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	48a5      	ldr	r0, [pc, #660]	; (8001718 <lcd_init+0x2b4>)
 8001484:	f003 fe0c 	bl	80050a0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001488:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800148c:	f002 fd58 	bl	8003f40 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff ffc3 	bl	800141c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001496:	20d3      	movs	r0, #211	; 0xd3
 8001498:	f7ff fc9e 	bl	8000dd8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 800149c:	f7ff fcbc 	bl	8000e18 <LCD_RD_DATA>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b9d      	ldr	r3, [pc, #628]	; (800171c <lcd_init+0x2b8>)
 80014a6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80014a8:	f7ff fcb6 	bl	8000e18 <LCD_RD_DATA>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b9a      	ldr	r3, [pc, #616]	; (800171c <lcd_init+0x2b8>)
 80014b2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80014b4:	f7ff fcb0 	bl	8000e18 <LCD_RD_DATA>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b97      	ldr	r3, [pc, #604]	; (800171c <lcd_init+0x2b8>)
 80014be:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80014c0:	4b96      	ldr	r3, [pc, #600]	; (800171c <lcd_init+0x2b8>)
 80014c2:	889b      	ldrh	r3, [r3, #4]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b94      	ldr	r3, [pc, #592]	; (800171c <lcd_init+0x2b8>)
 80014ca:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80014cc:	f7ff fca4 	bl	8000e18 <LCD_RD_DATA>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b91      	ldr	r3, [pc, #580]	; (800171c <lcd_init+0x2b8>)
 80014d6:	889b      	ldrh	r3, [r3, #4]
 80014d8:	4313      	orrs	r3, r2
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4b8f      	ldr	r3, [pc, #572]	; (800171c <lcd_init+0x2b8>)
 80014de:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80014e0:	20cf      	movs	r0, #207	; 0xcf
 80014e2:	f7ff fc79 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff fc86 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80014ec:	20c1      	movs	r0, #193	; 0xc1
 80014ee:	f7ff fc83 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80014f2:	2030      	movs	r0, #48	; 0x30
 80014f4:	f7ff fc80 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80014f8:	20ed      	movs	r0, #237	; 0xed
 80014fa:	f7ff fc6d 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80014fe:	2064      	movs	r0, #100	; 0x64
 8001500:	f7ff fc7a 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001504:	2003      	movs	r0, #3
 8001506:	f7ff fc77 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800150a:	2012      	movs	r0, #18
 800150c:	f7ff fc74 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001510:	2081      	movs	r0, #129	; 0x81
 8001512:	f7ff fc71 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001516:	20e8      	movs	r0, #232	; 0xe8
 8001518:	f7ff fc5e 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800151c:	2085      	movs	r0, #133	; 0x85
 800151e:	f7ff fc6b 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001522:	2010      	movs	r0, #16
 8001524:	f7ff fc68 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001528:	207a      	movs	r0, #122	; 0x7a
 800152a:	f7ff fc65 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800152e:	20cb      	movs	r0, #203	; 0xcb
 8001530:	f7ff fc52 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001534:	2039      	movs	r0, #57	; 0x39
 8001536:	f7ff fc5f 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800153a:	202c      	movs	r0, #44	; 0x2c
 800153c:	f7ff fc5c 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff fc59 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001546:	2034      	movs	r0, #52	; 0x34
 8001548:	f7ff fc56 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800154c:	2002      	movs	r0, #2
 800154e:	f7ff fc53 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001552:	20f7      	movs	r0, #247	; 0xf7
 8001554:	f7ff fc40 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001558:	2020      	movs	r0, #32
 800155a:	f7ff fc4d 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800155e:	20ea      	movs	r0, #234	; 0xea
 8001560:	f7ff fc3a 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff fc47 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff fc44 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001570:	20c0      	movs	r0, #192	; 0xc0
 8001572:	f7ff fc31 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001576:	201b      	movs	r0, #27
 8001578:	f7ff fc3e 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 800157c:	20c1      	movs	r0, #193	; 0xc1
 800157e:	f7ff fc2b 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff fc38 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001588:	20c5      	movs	r0, #197	; 0xc5
 800158a:	f7ff fc25 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800158e:	2030      	movs	r0, #48	; 0x30
 8001590:	f7ff fc32 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001594:	2030      	movs	r0, #48	; 0x30
 8001596:	f7ff fc2f 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800159a:	20c7      	movs	r0, #199	; 0xc7
 800159c:	f7ff fc1c 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80015a0:	20b7      	movs	r0, #183	; 0xb7
 80015a2:	f7ff fc29 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80015a6:	2036      	movs	r0, #54	; 0x36
 80015a8:	f7ff fc16 	bl	8000dd8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80015ac:	2008      	movs	r0, #8
 80015ae:	f7ff fc23 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80015b2:	203a      	movs	r0, #58	; 0x3a
 80015b4:	f7ff fc10 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80015b8:	2055      	movs	r0, #85	; 0x55
 80015ba:	f7ff fc1d 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80015be:	20b1      	movs	r0, #177	; 0xb1
 80015c0:	f7ff fc0a 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff fc17 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80015ca:	201a      	movs	r0, #26
 80015cc:	f7ff fc14 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80015d0:	20b6      	movs	r0, #182	; 0xb6
 80015d2:	f7ff fc01 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80015d6:	200a      	movs	r0, #10
 80015d8:	f7ff fc0e 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80015dc:	20a2      	movs	r0, #162	; 0xa2
 80015de:	f7ff fc0b 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80015e2:	20f2      	movs	r0, #242	; 0xf2
 80015e4:	f7ff fbf8 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff fc05 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80015ee:	2026      	movs	r0, #38	; 0x26
 80015f0:	f7ff fbf2 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff fbff 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80015fa:	20e0      	movs	r0, #224	; 0xe0
 80015fc:	f7ff fbec 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001600:	200f      	movs	r0, #15
 8001602:	f7ff fbf9 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001606:	202a      	movs	r0, #42	; 0x2a
 8001608:	f7ff fbf6 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800160c:	2028      	movs	r0, #40	; 0x28
 800160e:	f7ff fbf3 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001612:	2008      	movs	r0, #8
 8001614:	f7ff fbf0 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001618:	200e      	movs	r0, #14
 800161a:	f7ff fbed 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800161e:	2008      	movs	r0, #8
 8001620:	f7ff fbea 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001624:	2054      	movs	r0, #84	; 0x54
 8001626:	f7ff fbe7 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800162a:	20a9      	movs	r0, #169	; 0xa9
 800162c:	f7ff fbe4 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001630:	2043      	movs	r0, #67	; 0x43
 8001632:	f7ff fbe1 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001636:	200a      	movs	r0, #10
 8001638:	f7ff fbde 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800163c:	200f      	movs	r0, #15
 800163e:	f7ff fbdb 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001642:	2000      	movs	r0, #0
 8001644:	f7ff fbd8 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff fbd5 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff fbd2 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff fbcf 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800165a:	20e1      	movs	r0, #225	; 0xe1
 800165c:	f7ff fbbc 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff fbc9 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001666:	2015      	movs	r0, #21
 8001668:	f7ff fbc6 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800166c:	2017      	movs	r0, #23
 800166e:	f7ff fbc3 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001672:	2007      	movs	r0, #7
 8001674:	f7ff fbc0 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001678:	2011      	movs	r0, #17
 800167a:	f7ff fbbd 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800167e:	2006      	movs	r0, #6
 8001680:	f7ff fbba 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001684:	202b      	movs	r0, #43	; 0x2b
 8001686:	f7ff fbb7 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800168a:	2056      	movs	r0, #86	; 0x56
 800168c:	f7ff fbb4 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001690:	203c      	movs	r0, #60	; 0x3c
 8001692:	f7ff fbb1 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001696:	2005      	movs	r0, #5
 8001698:	f7ff fbae 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800169c:	2010      	movs	r0, #16
 800169e:	f7ff fbab 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80016a2:	200f      	movs	r0, #15
 80016a4:	f7ff fba8 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80016a8:	203f      	movs	r0, #63	; 0x3f
 80016aa:	f7ff fba5 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80016ae:	203f      	movs	r0, #63	; 0x3f
 80016b0:	f7ff fba2 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80016b4:	200f      	movs	r0, #15
 80016b6:	f7ff fb9f 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80016ba:	202b      	movs	r0, #43	; 0x2b
 80016bc:	f7ff fb8c 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016c0:	2000      	movs	r0, #0
 80016c2:	f7ff fb99 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f7ff fb96 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f7ff fb93 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80016d2:	203f      	movs	r0, #63	; 0x3f
 80016d4:	f7ff fb90 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80016d8:	202a      	movs	r0, #42	; 0x2a
 80016da:	f7ff fb7d 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016de:	2000      	movs	r0, #0
 80016e0:	f7ff fb8a 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff fb87 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff fb84 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80016f0:	20ef      	movs	r0, #239	; 0xef
 80016f2:	f7ff fb81 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80016f6:	2011      	movs	r0, #17
 80016f8:	f7ff fb6e 	bl	8000dd8 <LCD_WR_REG>
	HAL_Delay(120);
 80016fc:	2078      	movs	r0, #120	; 0x78
 80016fe:	f002 fc1f 	bl	8003f40 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001702:	2029      	movs	r0, #41	; 0x29
 8001704:	f7ff fb68 	bl	8000dd8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170e:	4804      	ldr	r0, [pc, #16]	; (8001720 <lcd_init+0x2bc>)
 8001710:	f003 fcc6 	bl	80050a0 <HAL_GPIO_WritePin>
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40020800 	.word	0x40020800
 800171c:	200002b0 	.word	0x200002b0
 8001720:	40020000 	.word	0x40020000

08001724 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b08b      	sub	sp, #44	; 0x2c
 8001728:	af04      	add	r7, sp, #16
 800172a:	60ba      	str	r2, [r7, #8]
 800172c:	461a      	mov	r2, r3
 800172e:	4603      	mov	r3, r0
 8001730:	81fb      	strh	r3, [r7, #14]
 8001732:	460b      	mov	r3, r1
 8001734:	81bb      	strh	r3, [r7, #12]
 8001736:	4613      	mov	r3, r2
 8001738:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001742:	e048      	b.n	80017d6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001744:	7dfb      	ldrb	r3, [r7, #23]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d145      	bne.n	80017d6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800174a:	89fa      	ldrh	r2, [r7, #14]
 800174c:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <lcd_ShowStr+0xc4>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001756:	085b      	lsrs	r3, r3, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	1acb      	subs	r3, r1, r3
 800175c:	429a      	cmp	r2, r3
 800175e:	dc3f      	bgt.n	80017e0 <lcd_ShowStr+0xbc>
 8001760:	89ba      	ldrh	r2, [r7, #12]
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <lcd_ShowStr+0xc4>)
 8001764:	885b      	ldrh	r3, [r3, #2]
 8001766:	4619      	mov	r1, r3
 8001768:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800176c:	1acb      	subs	r3, r1, r3
 800176e:	429a      	cmp	r2, r3
 8001770:	dc36      	bgt.n	80017e0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b80      	cmp	r3, #128	; 0x80
 8001778:	d902      	bls.n	8001780 <lcd_ShowStr+0x5c>
 800177a:	2301      	movs	r3, #1
 800177c:	75fb      	strb	r3, [r7, #23]
 800177e:	e02a      	b.n	80017d6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b0d      	cmp	r3, #13
 8001786:	d10b      	bne.n	80017a0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001788:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800178c:	b29a      	uxth	r2, r3
 800178e:	89bb      	ldrh	r3, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001794:	8abb      	ldrh	r3, [r7, #20]
 8001796:	81fb      	strh	r3, [r7, #14]
					str++;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	3301      	adds	r3, #1
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	e017      	b.n	80017d0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	88fc      	ldrh	r4, [r7, #6]
 80017a6:	89b9      	ldrh	r1, [r7, #12]
 80017a8:	89f8      	ldrh	r0, [r7, #14]
 80017aa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4623      	mov	r3, r4
 80017bc:	f7ff fcc4 	bl	8001148 <lcd_ShowChar>
					x+=sizey/2;
 80017c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	89fb      	ldrh	r3, [r7, #14]
 80017cc:	4413      	add	r3, r2
 80017ce:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3301      	adds	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1b2      	bne.n	8001744 <lcd_ShowStr+0x20>
 80017de:	e000      	b.n	80017e2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80017e0:	bf00      	nop
			}
		}
	}
}
 80017e2:	371c      	adds	r7, #28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	200002b0 	.word	0x200002b0

080017ec <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80017f0:	2201      	movs	r2, #1
 80017f2:	2140      	movs	r1, #64	; 0x40
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <led7_init+0x14>)
 80017f6:	f003 fc53 	bl	80050a0 <HAL_GPIO_WritePin>
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40021800 	.word	0x40021800

08001804 <led7_Scan>:

void led7_Scan(){
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001808:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <led7_Scan+0x104>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <led7_Scan+0x104>)
 8001812:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001814:	4b3d      	ldr	r3, [pc, #244]	; (800190c <led7_Scan+0x108>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a3d      	ldr	r2, [pc, #244]	; (8001910 <led7_Scan+0x10c>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	b21a      	sxth	r2, r3
 8001820:	4b39      	ldr	r3, [pc, #228]	; (8001908 <led7_Scan+0x104>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	b21b      	sxth	r3, r3
 8001826:	4313      	orrs	r3, r2
 8001828:	b21b      	sxth	r3, r3
 800182a:	b29a      	uxth	r2, r3
 800182c:	4b36      	ldr	r3, [pc, #216]	; (8001908 <led7_Scan+0x104>)
 800182e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001830:	4b36      	ldr	r3, [pc, #216]	; (800190c <led7_Scan+0x108>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d847      	bhi.n	80018c8 <led7_Scan+0xc4>
 8001838:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <led7_Scan+0x3c>)
 800183a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183e:	bf00      	nop
 8001840:	08001851 	.word	0x08001851
 8001844:	0800186f 	.word	0x0800186f
 8001848:	0800188d 	.word	0x0800188d
 800184c:	080018ab 	.word	0x080018ab
	case 0:
		spi_buffer |= 0x00b0;
 8001850:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <led7_Scan+0x104>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <led7_Scan+0x104>)
 800185c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <led7_Scan+0x104>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <led7_Scan+0x104>)
 800186a:	801a      	strh	r2, [r3, #0]
		break;
 800186c:	e02d      	b.n	80018ca <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <led7_Scan+0x104>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001876:	b29a      	uxth	r2, r3
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <led7_Scan+0x104>)
 800187a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800187c:	4b22      	ldr	r3, [pc, #136]	; (8001908 <led7_Scan+0x104>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	f023 0320 	bic.w	r3, r3, #32
 8001884:	b29a      	uxth	r2, r3
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <led7_Scan+0x104>)
 8001888:	801a      	strh	r2, [r3, #0]
		break;
 800188a:	e01e      	b.n	80018ca <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <led7_Scan+0x104>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001894:	b29a      	uxth	r2, r3
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <led7_Scan+0x104>)
 8001898:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800189a:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <led7_Scan+0x104>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	f023 0310 	bic.w	r3, r3, #16
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <led7_Scan+0x104>)
 80018a6:	801a      	strh	r2, [r3, #0]
		break;
 80018a8:	e00f      	b.n	80018ca <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <led7_Scan+0x104>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <led7_Scan+0x104>)
 80018b6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <led7_Scan+0x104>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <led7_Scan+0x104>)
 80018c4:	801a      	strh	r2, [r3, #0]
		break;
 80018c6:	e000      	b.n	80018ca <led7_Scan+0xc6>
	default:
		break;
 80018c8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <led7_Scan+0x108>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	425a      	negs	r2, r3
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	f002 0203 	and.w	r2, r2, #3
 80018da:	bf58      	it	pl
 80018dc:	4253      	negpl	r3, r2
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <led7_Scan+0x108>)
 80018e0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2140      	movs	r1, #64	; 0x40
 80018e6:	480b      	ldr	r0, [pc, #44]	; (8001914 <led7_Scan+0x110>)
 80018e8:	f003 fbda 	bl	80050a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80018ec:	2301      	movs	r3, #1
 80018ee:	2202      	movs	r2, #2
 80018f0:	4905      	ldr	r1, [pc, #20]	; (8001908 <led7_Scan+0x104>)
 80018f2:	4809      	ldr	r0, [pc, #36]	; (8001918 <led7_Scan+0x114>)
 80018f4:	f004 fa53 	bl	8005d9e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	2140      	movs	r1, #64	; 0x40
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <led7_Scan+0x110>)
 80018fe:	f003 fbcf 	bl	80050a0 <HAL_GPIO_WritePin>
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000000e 	.word	0x2000000e
 800190c:	200002b8 	.word	0x200002b8
 8001910:	20000000 	.word	0x20000000
 8001914:	40021800 	.word	0x40021800
 8001918:	200005a0 	.word	0x200005a0

0800191c <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	4613      	mov	r3, r2
 8001928:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0e      	blt.n	800194e <led7_SetDigit+0x32>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b09      	cmp	r3, #9
 8001934:	dc0b      	bgt.n	800194e <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <led7_SetDigit+0x40>)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	781a      	ldrb	r2, [r3, #0]
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	b2d9      	uxtb	r1, r3
 8001944:	4a06      	ldr	r2, [pc, #24]	; (8001960 <led7_SetDigit+0x44>)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	4413      	add	r3, r2
 800194a:	460a      	mov	r2, r1
 800194c:	701a      	strb	r2, [r3, #0]
	}
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000004 	.word	0x20000004
 8001960:	20000000 	.word	0x20000000

08001964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001968:	f002 fa78 	bl	8003e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800196c:	f000 f82e 	bl	80019cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001970:	f7ff f882 	bl	8000a78 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001974:	f001 fff8 	bl	8003968 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001978:	f001 fdd6 	bl	8003528 <MX_SPI1_Init>
  MX_FSMC_Init();
 800197c:	f7fe ffac 	bl	80008d8 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001980:	f7ff f9b4 	bl	8000cec <MX_I2C1_Init>
  MX_TIM13_Init();
 8001984:	f002 f83c 	bl	8003a00 <MX_TIM13_Init>
  MX_DMA_Init();
 8001988:	f7fe ff86 	bl	8000898 <MX_DMA_Init>
  MX_ADC1_Init();
 800198c:	f7fe fdee 	bl	800056c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001990:	f001 ff9a 	bl	80038c8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001994:	f002 f982 	bl	8003c9c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001998:	f002 f956 	bl	8003c48 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800199c:	f000 f880 	bl	8001aa0 <system_init>
  lcd_Clear(WHITE);
 80019a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019a4:	f7ff fa96 	bl	8000ed4 <lcd_Clear>
  snake_init();
 80019a8:	f000 f8dc 	bl	8001b64 <snake_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1)
    {
  	  while(!flag_timer2);
 80019ac:	bf00      	nop
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <main+0x64>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0fb      	beq.n	80019ae <main+0x4a>
	  flag_timer2 = 0;
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <main+0x64>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 80019bc:	f7fe ff00 	bl	80007c0 <button_Scan>
//	  test_button();
//	  test_7seg();
	  test_lcd();
 80019c0:	f000 f88e 	bl	8001ae0 <test_lcd>
  	  while(!flag_timer2);
 80019c4:	e7f2      	b.n	80019ac <main+0x48>
 80019c6:	bf00      	nop
 80019c8:	2000059a 	.word	0x2000059a

080019cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b094      	sub	sp, #80	; 0x50
 80019d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	2230      	movs	r2, #48	; 0x30
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f007 f97f 	bl	8008cde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <SystemClock_Config+0xcc>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	4a27      	ldr	r2, [pc, #156]	; (8001a98 <SystemClock_Config+0xcc>)
 80019fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <SystemClock_Config+0xcc>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <SystemClock_Config+0xd0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <SystemClock_Config+0xd0>)
 8001a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <SystemClock_Config+0xd0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a30:	2310      	movs	r3, #16
 8001a32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a34:	2302      	movs	r3, #2
 8001a36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a40:	23a8      	movs	r3, #168	; 0xa8
 8001a42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4c:	f107 0320 	add.w	r3, r7, #32
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 fc83 	bl	800535c <HAL_RCC_OscConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a5c:	f000 f848 	bl	8001af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a60:	230f      	movs	r3, #15
 8001a62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a64:	2302      	movs	r3, #2
 8001a66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001a72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	2105      	movs	r1, #5
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 fee4 	bl	800584c <HAL_RCC_ClockConfig>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a8a:	f000 f831 	bl	8001af0 <Error_Handler>
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3750      	adds	r7, #80	; 0x50
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40007000 	.word	0x40007000

08001aa0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2120      	movs	r1, #32
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <system_init+0x3c>)
 8001aaa:	f003 faf9 	bl	80050a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2140      	movs	r1, #64	; 0x40
 8001ab2:	480a      	ldr	r0, [pc, #40]	; (8001adc <system_init+0x3c>)
 8001ab4:	f003 faf4 	bl	80050a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2110      	movs	r1, #16
 8001abc:	4807      	ldr	r0, [pc, #28]	; (8001adc <system_init+0x3c>)
 8001abe:	f003 faef 	bl	80050a0 <HAL_GPIO_WritePin>
	  timer_init();
 8001ac2:	f001 fcdd 	bl	8003480 <timer_init>
	  led7_init();
 8001ac6:	f7ff fe91 	bl	80017ec <led7_init>
	  button_init();
 8001aca:	f7fe fe6d 	bl	80007a8 <button_init>
	  lcd_init();
 8001ace:	f7ff fcc9 	bl	8001464 <lcd_init>
	  setTimer2(50);
 8001ad2:	2032      	movs	r0, #50	; 0x32
 8001ad4:	f001 fce2 	bl	800349c <setTimer2>
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000

08001ae0 <test_lcd>:
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
			//di chuyển
		}
	}
}
void test_lcd(){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
//	snake_init();
	wall();
 8001ae4:	f001 fcae 	bl	8003444 <wall>
	move();
 8001ae8:	f001 fbbe 	bl	8003268 <move>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <Error_Handler+0x8>

08001afa <random_eat>:
uint8_t flag1 = 0;
uint8_t flag2 = 0;
int16_t x1 = 160, y1 = 160, x2 = 170, y2 = 170;
enum state firstState = goDown;
enum state prevState = goRight;
uint16_t random_eat(uint16_t minN, uint16_t maxN) {
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	460a      	mov	r2, r1
 8001b04:	80fb      	strh	r3, [r7, #6]
 8001b06:	4613      	mov	r3, r2
 8001b08:	80bb      	strh	r3, [r7, #4]
	return minN + rand()%(maxN + 1 - minN);
 8001b0a:	f006 ffa5 	bl	8008a58 <rand>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	1c59      	adds	r1, r3, #1
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	1acb      	subs	r3, r1, r3
 8001b18:	fb92 f1f3 	sdiv	r1, r2, r3
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4413      	add	r3, r2
 8001b28:	b29b      	uxth	r3, r3
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <creatWall>:
        {190, 220, 200, 285},    // Wall 6
        {130, 275, 200, 285},
		{90, 150, 140, 160},
		{115, 150, 125, 200}
    };
void creatWall(int32_t X1, int32_t Y1, int32_t X2, int32_t Y2) {
 8001b32:	b590      	push	{r4, r7, lr}
 8001b34:	b087      	sub	sp, #28
 8001b36:	af02      	add	r7, sp, #8
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	603b      	str	r3, [r7, #0]
    // Replace this with the appropriate function in your graphics library
    lcd_Fill(X1, Y1, X2, Y2, MAGENTA);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	b298      	uxth	r0, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	b299      	uxth	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8001b54:	9400      	str	r4, [sp, #0]
 8001b56:	f7ff f9ef 	bl	8000f38 <lcd_Fill>
}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd90      	pop	{r4, r7, pc}
	...

08001b64 <snake_init>:
void snake_init() {
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af02      	add	r7, sp, #8
	lcd_Fill(x1, y1, x2, y2, BLUE);
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <snake_init+0x88>)
 8001b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b70:	b298      	uxth	r0, r3
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <snake_init+0x8c>)
 8001b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b78:	b299      	uxth	r1, r3
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <snake_init+0x90>)
 8001b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <snake_init+0x94>)
 8001b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	241f      	movs	r4, #31
 8001b8c:	9400      	str	r4, [sp, #0]
 8001b8e:	f7ff f9d3 	bl	8000f38 <lcd_Fill>
	 //lcd_Fill(55, 75, 56, 150, RED);
	for (int8_t i = 0; i < 9; ++i) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	71fb      	strb	r3, [r7, #7]
 8001b96:	e020      	b.n	8001bda <snake_init+0x76>
	       creatWall(obstacles[i].x1, obstacles[i].y1, obstacles[i].x2, obstacles[i].y2);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <snake_init+0x98>)
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	4413      	add	r3, r2
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <snake_init+0x98>)
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	4a11      	ldr	r2, [pc, #68]	; (8001bfc <snake_init+0x98>)
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	4413      	add	r3, r2
 8001bbc:	3308      	adds	r3, #8
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	4c0d      	ldr	r4, [pc, #52]	; (8001bfc <snake_init+0x98>)
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4423      	add	r3, r4
 8001bca:	330c      	adds	r3, #12
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f7ff ffb0 	bl	8001b32 <creatWall>
	for (int8_t i = 0; i < 9; ++i) {
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	71fb      	strb	r3, [r7, #7]
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	ddda      	ble.n	8001b98 <snake_init+0x34>
	    }
}
 8001be2:	bf00      	nop
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	20000016 	.word	0x20000016
 8001bf0:	20000018 	.word	0x20000018
 8001bf4:	2000001a 	.word	0x2000001a
 8001bf8:	2000001c 	.word	0x2000001c
 8001bfc:	20000028 	.word	0x20000028

08001c00 <display>:
void display() {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af04      	add	r7, sp, #16
	lcd_ShowStr(50,30,"Game Over!!!",WHITE,BLACK,24,0);
 8001c06:	2300      	movs	r3, #0
 8001c08:	9302      	str	r3, [sp, #8]
 8001c0a:	2318      	movs	r3, #24
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c16:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <display+0x50>)
 8001c18:	211e      	movs	r1, #30
 8001c1a:	2032      	movs	r0, #50	; 0x32
 8001c1c:	f7ff fd82 	bl	8001724 <lcd_ShowStr>
	HAL_Delay(1000);
 8001c20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c24:	f002 f98c 	bl	8003f40 <HAL_Delay>
	lcd_ShowStr(50,30,"Game Over!!!",BLUE,YELLOW,24,0);
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	2318      	movs	r3, #24
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	231f      	movs	r3, #31
 8001c38:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <display+0x50>)
 8001c3a:	211e      	movs	r1, #30
 8001c3c:	2032      	movs	r0, #50	; 0x32
 8001c3e:	f7ff fd71 	bl	8001724 <lcd_ShowStr>
	HAL_Delay(1000);
 8001c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c46:	f002 f97b 	bl	8003f40 <HAL_Delay>
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	08009a3c 	.word	0x08009a3c

08001c54 <game_over>:
void game_over(){
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af04      	add	r7, sp, #16
//	lcd_ShowStr(50,30,"Game Over!!!",WHITE,BLACK,24,0);
//	lcd_ShowStr(50,30,"Game Over!!!",WHITE,YELLOW,24,0);
	lcd_ShowStr(25,120,"NGU!",WHITE,RED,24,0);
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9302      	str	r3, [sp, #8]
 8001c5e:	2318      	movs	r3, #24
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c6c:	4a2f      	ldr	r2, [pc, #188]	; (8001d2c <game_over+0xd8>)
 8001c6e:	2178      	movs	r1, #120	; 0x78
 8001c70:	2019      	movs	r0, #25
 8001c72:	f7ff fd57 	bl	8001724 <lcd_ShowStr>
	lcd_ShowStr(10,200,"DIEM SO CUA BAN LA: ",BLUE,WHITE,24,0);
 8001c76:	2300      	movs	r3, #0
 8001c78:	9302      	str	r3, [sp, #8]
 8001c7a:	2318      	movs	r3, #24
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	231f      	movs	r3, #31
 8001c86:	4a2a      	ldr	r2, [pc, #168]	; (8001d30 <game_over+0xdc>)
 8001c88:	21c8      	movs	r1, #200	; 0xc8
 8001c8a:	200a      	movs	r0, #10
 8001c8c:	f7ff fd4a 	bl	8001724 <lcd_ShowStr>
	if(count < 10)
 8001c90:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <game_over+0xe0>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	2b09      	cmp	r3, #9
 8001c96:	d80e      	bhi.n	8001cb6 <game_over+0x62>
		lcd_ShowIntNum(210,200,count,1,BLUE,WHITE,24);
 8001c98:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <game_over+0xe0>)
 8001c9a:	881a      	ldrh	r2, [r3, #0]
 8001c9c:	2318      	movs	r3, #24
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	231f      	movs	r3, #31
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2301      	movs	r3, #1
 8001cac:	21c8      	movs	r1, #200	; 0xc8
 8001cae:	20d2      	movs	r0, #210	; 0xd2
 8001cb0:	f7ff fb36 	bl	8001320 <lcd_ShowIntNum>
 8001cb4:	e00d      	b.n	8001cd2 <game_over+0x7e>
	else
		lcd_ShowIntNum(210,200,count,2,BLUE,WHITE,24);
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <game_over+0xe0>)
 8001cb8:	881a      	ldrh	r2, [r3, #0]
 8001cba:	2318      	movs	r3, #24
 8001cbc:	9302      	str	r3, [sp, #8]
 8001cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	231f      	movs	r3, #31
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2302      	movs	r3, #2
 8001cca:	21c8      	movs	r1, #200	; 0xc8
 8001ccc:	20d2      	movs	r0, #210	; 0xd2
 8001cce:	f7ff fb27 	bl	8001320 <lcd_ShowIntNum>
	lcd_Fill(x1, y1, x2, y2, WHITE);
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <game_over+0xe4>)
 8001cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd8:	b298      	uxth	r0, r3
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <game_over+0xe8>)
 8001cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce0:	b299      	uxth	r1, r3
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <game_over+0xec>)
 8001ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <game_over+0xf0>)
 8001cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001cf6:	9400      	str	r4, [sp, #0]
 8001cf8:	f7ff f91e 	bl	8000f38 <lcd_Fill>
	lcd_Fill(x_food, y_food, x_food+5, y_food+5, WHITE);
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <game_over+0xf4>)
 8001cfe:	8818      	ldrh	r0, [r3, #0]
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <game_over+0xf8>)
 8001d02:	8819      	ldrh	r1, [r3, #0]
 8001d04:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <game_over+0xf4>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	3305      	adds	r3, #5
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <game_over+0xf8>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	3305      	adds	r3, #5
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001d18:	9400      	str	r4, [sp, #0]
 8001d1a:	f7ff f90d 	bl	8000f38 <lcd_Fill>
	display();
 8001d1e:	f7ff ff6f 	bl	8001c00 <display>
}
 8001d22:	bf00      	nop
 8001d24:	3704      	adds	r7, #4
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd90      	pop	{r4, r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	08009a4c 	.word	0x08009a4c
 8001d30:	08009a54 	.word	0x08009a54
 8001d34:	20000598 	.word	0x20000598
 8001d38:	20000016 	.word	0x20000016
 8001d3c:	20000018 	.word	0x20000018
 8001d40:	2000001a 	.word	0x2000001a
 8001d44:	2000001c 	.word	0x2000001c
 8001d48:	20000594 	.word	0x20000594
 8001d4c:	20000596 	.word	0x20000596

08001d50 <checkBite>:
void checkBite (int16_t X1 , int16_t Y1, int16_t X2, int16_t Y2,int8_t count) {
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4604      	mov	r4, r0
 8001d58:	4608      	mov	r0, r1
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4623      	mov	r3, r4
 8001d60:	80fb      	strh	r3, [r7, #6]
 8001d62:	4603      	mov	r3, r0
 8001d64:	80bb      	strh	r3, [r7, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	807b      	strh	r3, [r7, #2]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	803b      	strh	r3, [r7, #0]
	for (int8_t i = count; i < currentIndex; i++) {
 8001d6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e0be      	b.n	8001ef4 <checkBite+0x1a4>
		if (X1 >= allPath[i].x1 && X1 <= allPath[i].x2) {
 8001d76:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001d7a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001d7e:	4862      	ldr	r0, [pc, #392]	; (8001f08 <checkBite+0x1b8>)
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4403      	add	r3, r0
 8001d8a:	3308      	adds	r3, #8
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4299      	cmp	r1, r3
 8001d90:	db4f      	blt.n	8001e32 <checkBite+0xe2>
 8001d92:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001d96:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001d9a:	485b      	ldr	r0, [pc, #364]	; (8001f08 <checkBite+0x1b8>)
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4403      	add	r3, r0
 8001da6:	330c      	adds	r3, #12
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4299      	cmp	r1, r3
 8001dac:	dc41      	bgt.n	8001e32 <checkBite+0xe2>
			if (Y1 >= allPath[i].y1 && Y1 <= allPath[i].y2) {
 8001dae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001db2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001db6:	4854      	ldr	r0, [pc, #336]	; (8001f08 <checkBite+0x1b8>)
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4403      	add	r3, r0
 8001dc2:	3310      	adds	r3, #16
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4299      	cmp	r1, r3
 8001dc8:	db10      	blt.n	8001dec <checkBite+0x9c>
 8001dca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001dce:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001dd2:	484d      	ldr	r0, [pc, #308]	; (8001f08 <checkBite+0x1b8>)
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4403      	add	r3, r0
 8001dde:	3314      	adds	r3, #20
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4299      	cmp	r1, r3
 8001de4:	dc02      	bgt.n	8001dec <checkBite+0x9c>
				game_over();
 8001de6:	f7ff ff35 	bl	8001c54 <game_over>
				return;
 8001dea:	e08a      	b.n	8001f02 <checkBite+0x1b2>
			} else if (y2 >= allPath[i].y1 && y2 <= allPath[i].y2) {
 8001dec:	4b47      	ldr	r3, [pc, #284]	; (8001f0c <checkBite+0x1bc>)
 8001dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001df8:	4943      	ldr	r1, [pc, #268]	; (8001f08 <checkBite+0x1b8>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	3310      	adds	r3, #16
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4298      	cmp	r0, r3
 8001e0a:	db6c      	blt.n	8001ee6 <checkBite+0x196>
 8001e0c:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <checkBite+0x1bc>)
 8001e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e18:	493b      	ldr	r1, [pc, #236]	; (8001f08 <checkBite+0x1b8>)
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	440b      	add	r3, r1
 8001e24:	3314      	adds	r3, #20
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4298      	cmp	r0, r3
 8001e2a:	dc5c      	bgt.n	8001ee6 <checkBite+0x196>
				game_over();
 8001e2c:	f7ff ff12 	bl	8001c54 <game_over>
				return;
 8001e30:	e067      	b.n	8001f02 <checkBite+0x1b2>
			}
		} else if (X2 >= allPath[i].x1 && X2 <= allPath[i].x2) {
 8001e32:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001e36:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e3a:	4833      	ldr	r0, [pc, #204]	; (8001f08 <checkBite+0x1b8>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4403      	add	r3, r0
 8001e46:	3308      	adds	r3, #8
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4299      	cmp	r1, r3
 8001e4c:	db4c      	blt.n	8001ee8 <checkBite+0x198>
 8001e4e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001e52:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e56:	482c      	ldr	r0, [pc, #176]	; (8001f08 <checkBite+0x1b8>)
 8001e58:	4613      	mov	r3, r2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4403      	add	r3, r0
 8001e62:	330c      	adds	r3, #12
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4299      	cmp	r1, r3
 8001e68:	dc3e      	bgt.n	8001ee8 <checkBite+0x198>
			if (Y1 >= allPath[i].y1 && Y1 <= allPath[i].y2) {
 8001e6a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e6e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e72:	4825      	ldr	r0, [pc, #148]	; (8001f08 <checkBite+0x1b8>)
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4403      	add	r3, r0
 8001e7e:	3310      	adds	r3, #16
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4299      	cmp	r1, r3
 8001e84:	db10      	blt.n	8001ea8 <checkBite+0x158>
 8001e86:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e8a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e8e:	481e      	ldr	r0, [pc, #120]	; (8001f08 <checkBite+0x1b8>)
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4403      	add	r3, r0
 8001e9a:	3314      	adds	r3, #20
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4299      	cmp	r1, r3
 8001ea0:	dc02      	bgt.n	8001ea8 <checkBite+0x158>
				game_over();
 8001ea2:	f7ff fed7 	bl	8001c54 <game_over>
				return;
 8001ea6:	e02c      	b.n	8001f02 <checkBite+0x1b2>
			} else if (Y2 >= allPath[i].y1 && Y2 <= allPath[i].y2) {
 8001ea8:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001eac:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001eb0:	4815      	ldr	r0, [pc, #84]	; (8001f08 <checkBite+0x1b8>)
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4403      	add	r3, r0
 8001ebc:	3310      	adds	r3, #16
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4299      	cmp	r1, r3
 8001ec2:	db11      	blt.n	8001ee8 <checkBite+0x198>
 8001ec4:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001ec8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001ecc:	480e      	ldr	r0, [pc, #56]	; (8001f08 <checkBite+0x1b8>)
 8001ece:	4613      	mov	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4403      	add	r3, r0
 8001ed8:	3314      	adds	r3, #20
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4299      	cmp	r1, r3
 8001ede:	dc03      	bgt.n	8001ee8 <checkBite+0x198>
				game_over();
 8001ee0:	f7ff feb8 	bl	8001c54 <game_over>
				return;
 8001ee4:	e00d      	b.n	8001f02 <checkBite+0x1b2>
			if (Y1 >= allPath[i].y1 && Y1 <= allPath[i].y2) {
 8001ee6:	bf00      	nop
	for (int8_t i = count; i < currentIndex; i++) {
 8001ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef8:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <checkBite+0x1c0>)
 8001efa:	7812      	ldrb	r2, [r2, #0]
 8001efc:	4293      	cmp	r3, r2
 8001efe:	f6ff af3a 	blt.w	8001d76 <checkBite+0x26>
			}
		}
	}
}
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd90      	pop	{r4, r7, pc}
 8001f08:	200002c0 	.word	0x200002c0
 8001f0c:	2000001c 	.word	0x2000001c
 8001f10:	200002bd 	.word	0x200002bd

08001f14 <snakeSelfBite>:
void snakeSelfBite (int16_t X1 , int16_t Y1, int16_t X2, int16_t Y2,int8_t flag){
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	4608      	mov	r0, r1
 8001f1e:	4611      	mov	r1, r2
 8001f20:	461a      	mov	r2, r3
 8001f22:	4623      	mov	r3, r4
 8001f24:	80fb      	strh	r3, [r7, #6]
 8001f26:	4603      	mov	r3, r0
 8001f28:	80bb      	strh	r3, [r7, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	807b      	strh	r3, [r7, #2]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	803b      	strh	r3, [r7, #0]
	if (flag == 1) checkBite(X1, Y1, X2, Y2, 0);
 8001f32:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d10c      	bne.n	8001f54 <snakeSelfBite+0x40>
 8001f3a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f3e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001f42:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001f46:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001f4a:	2400      	movs	r4, #0
 8001f4c:	9400      	str	r4, [sp, #0]
 8001f4e:	f7ff feff 	bl	8001d50 <checkBite>
	else {
		if (currentIndex >= 4) checkBite(X1, Y1, X2, Y2, 3);
	}

}
 8001f52:	e00f      	b.n	8001f74 <snakeSelfBite+0x60>
		if (currentIndex >= 4) checkBite(X1, Y1, X2, Y2, 3);
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <snakeSelfBite+0x68>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d90b      	bls.n	8001f74 <snakeSelfBite+0x60>
 8001f5c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f60:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001f64:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001f68:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001f6c:	2403      	movs	r4, #3
 8001f6e:	9400      	str	r4, [sp, #0]
 8001f70:	f7ff feee 	bl	8001d50 <checkBite>
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd90      	pop	{r4, r7, pc}
 8001f7c:	200002bd 	.word	0x200002bd

08001f80 <moveWall>:
void moveWall() {
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af02      	add	r7, sp, #8
	if (flag1 == 0) {
 8001f86:	4b7c      	ldr	r3, [pc, #496]	; (8002178 <moveWall+0x1f8>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d14a      	bne.n	8002024 <moveWall+0xa4>
		lcd_Fill(obstacles[7].x2-2, obstacles[7].y1, obstacles[7].x2, obstacles[7].y2, WHITE);
 8001f8e:	4b7b      	ldr	r3, [pc, #492]	; (800217c <moveWall+0x1fc>)
 8001f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b02      	subs	r3, #2
 8001f96:	b298      	uxth	r0, r3
 8001f98:	4b78      	ldr	r3, [pc, #480]	; (800217c <moveWall+0x1fc>)
 8001f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9c:	b299      	uxth	r1, r3
 8001f9e:	4b77      	ldr	r3, [pc, #476]	; (800217c <moveWall+0x1fc>)
 8001fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	4b75      	ldr	r3, [pc, #468]	; (800217c <moveWall+0x1fc>)
 8001fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001fae:	9400      	str	r4, [sp, #0]
 8001fb0:	f7fe ffc2 	bl	8000f38 <lcd_Fill>
		obstacles[7].x1-=2;
 8001fb4:	4b71      	ldr	r3, [pc, #452]	; (800217c <moveWall+0x1fc>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb8:	3b02      	subs	r3, #2
 8001fba:	4a70      	ldr	r2, [pc, #448]	; (800217c <moveWall+0x1fc>)
 8001fbc:	6713      	str	r3, [r2, #112]	; 0x70
		obstacles[7].x2-=2;
 8001fbe:	4b6f      	ldr	r3, [pc, #444]	; (800217c <moveWall+0x1fc>)
 8001fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fc2:	3b02      	subs	r3, #2
 8001fc4:	4a6d      	ldr	r2, [pc, #436]	; (800217c <moveWall+0x1fc>)
 8001fc6:	6793      	str	r3, [r2, #120]	; 0x78
		lcd_Fill(obstacles[7].x1, obstacles[7].y1, obstacles[7].x1+2, obstacles[7].y2, MAGENTA);
 8001fc8:	4b6c      	ldr	r3, [pc, #432]	; (800217c <moveWall+0x1fc>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	b298      	uxth	r0, r3
 8001fce:	4b6b      	ldr	r3, [pc, #428]	; (800217c <moveWall+0x1fc>)
 8001fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd2:	b299      	uxth	r1, r3
 8001fd4:	4b69      	ldr	r3, [pc, #420]	; (800217c <moveWall+0x1fc>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3302      	adds	r3, #2
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	4b67      	ldr	r3, [pc, #412]	; (800217c <moveWall+0x1fc>)
 8001fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8001fe8:	9400      	str	r4, [sp, #0]
 8001fea:	f7fe ffa5 	bl	8000f38 <lcd_Fill>

		snakeSelfBite(obstacles[7].x1,obstacles[7].y1,obstacles[7].x1+10,obstacles[7].y2, 1);
 8001fee:	4b63      	ldr	r3, [pc, #396]	; (800217c <moveWall+0x1fc>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	b218      	sxth	r0, r3
 8001ff4:	4b61      	ldr	r3, [pc, #388]	; (800217c <moveWall+0x1fc>)
 8001ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff8:	b219      	sxth	r1, r3
 8001ffa:	4b60      	ldr	r3, [pc, #384]	; (800217c <moveWall+0x1fc>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	330a      	adds	r3, #10
 8002002:	b29b      	uxth	r3, r3
 8002004:	b21a      	sxth	r2, r3
 8002006:	4b5d      	ldr	r3, [pc, #372]	; (800217c <moveWall+0x1fc>)
 8002008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800200a:	b21b      	sxth	r3, r3
 800200c:	2401      	movs	r4, #1
 800200e:	9400      	str	r4, [sp, #0]
 8002010:	f7ff ff80 	bl	8001f14 <snakeSelfBite>
		if (obstacles[7].x1 <= 10) flag1 = 1;
 8002014:	4b59      	ldr	r3, [pc, #356]	; (800217c <moveWall+0x1fc>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	2b0a      	cmp	r3, #10
 800201a:	dc4d      	bgt.n	80020b8 <moveWall+0x138>
 800201c:	4b56      	ldr	r3, [pc, #344]	; (8002178 <moveWall+0x1f8>)
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	e049      	b.n	80020b8 <moveWall+0x138>
	} else {
		lcd_Fill(obstacles[7].x1, obstacles[7].y1, obstacles[7].x1+2, obstacles[7].y2, WHITE);
 8002024:	4b55      	ldr	r3, [pc, #340]	; (800217c <moveWall+0x1fc>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	b298      	uxth	r0, r3
 800202a:	4b54      	ldr	r3, [pc, #336]	; (800217c <moveWall+0x1fc>)
 800202c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800202e:	b299      	uxth	r1, r3
 8002030:	4b52      	ldr	r3, [pc, #328]	; (800217c <moveWall+0x1fc>)
 8002032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002034:	b29b      	uxth	r3, r3
 8002036:	3302      	adds	r3, #2
 8002038:	b29a      	uxth	r2, r3
 800203a:	4b50      	ldr	r3, [pc, #320]	; (800217c <moveWall+0x1fc>)
 800203c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800203e:	b29b      	uxth	r3, r3
 8002040:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002044:	9400      	str	r4, [sp, #0]
 8002046:	f7fe ff77 	bl	8000f38 <lcd_Fill>
		obstacles[7].x1+=2;
 800204a:	4b4c      	ldr	r3, [pc, #304]	; (800217c <moveWall+0x1fc>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	3302      	adds	r3, #2
 8002050:	4a4a      	ldr	r2, [pc, #296]	; (800217c <moveWall+0x1fc>)
 8002052:	6713      	str	r3, [r2, #112]	; 0x70
		obstacles[7].x2+=2;
 8002054:	4b49      	ldr	r3, [pc, #292]	; (800217c <moveWall+0x1fc>)
 8002056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002058:	3302      	adds	r3, #2
 800205a:	4a48      	ldr	r2, [pc, #288]	; (800217c <moveWall+0x1fc>)
 800205c:	6793      	str	r3, [r2, #120]	; 0x78
		lcd_Fill(obstacles[7].x2-2, obstacles[7].y1, obstacles[7].x2, obstacles[7].y2, MAGENTA);
 800205e:	4b47      	ldr	r3, [pc, #284]	; (800217c <moveWall+0x1fc>)
 8002060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b02      	subs	r3, #2
 8002066:	b298      	uxth	r0, r3
 8002068:	4b44      	ldr	r3, [pc, #272]	; (800217c <moveWall+0x1fc>)
 800206a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206c:	b299      	uxth	r1, r3
 800206e:	4b43      	ldr	r3, [pc, #268]	; (800217c <moveWall+0x1fc>)
 8002070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002072:	b29a      	uxth	r2, r3
 8002074:	4b41      	ldr	r3, [pc, #260]	; (800217c <moveWall+0x1fc>)
 8002076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002078:	b29b      	uxth	r3, r3
 800207a:	f64f 041f 	movw	r4, #63519	; 0xf81f
 800207e:	9400      	str	r4, [sp, #0]
 8002080:	f7fe ff5a 	bl	8000f38 <lcd_Fill>
		snakeSelfBite(obstacles[7].x2-10,obstacles[7].y1,obstacles[7].x2,obstacles[7].y2, 1);
 8002084:	4b3d      	ldr	r3, [pc, #244]	; (800217c <moveWall+0x1fc>)
 8002086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002088:	b29b      	uxth	r3, r3
 800208a:	3b0a      	subs	r3, #10
 800208c:	b29b      	uxth	r3, r3
 800208e:	b218      	sxth	r0, r3
 8002090:	4b3a      	ldr	r3, [pc, #232]	; (800217c <moveWall+0x1fc>)
 8002092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002094:	b219      	sxth	r1, r3
 8002096:	4b39      	ldr	r3, [pc, #228]	; (800217c <moveWall+0x1fc>)
 8002098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800209a:	b21a      	sxth	r2, r3
 800209c:	4b37      	ldr	r3, [pc, #220]	; (800217c <moveWall+0x1fc>)
 800209e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020a0:	b21b      	sxth	r3, r3
 80020a2:	2401      	movs	r4, #1
 80020a4:	9400      	str	r4, [sp, #0]
 80020a6:	f7ff ff35 	bl	8001f14 <snakeSelfBite>
		if (obstacles[7].x2 >= 230) flag1 = 0;
 80020aa:	4b34      	ldr	r3, [pc, #208]	; (800217c <moveWall+0x1fc>)
 80020ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020ae:	2be5      	cmp	r3, #229	; 0xe5
 80020b0:	dd02      	ble.n	80020b8 <moveWall+0x138>
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <moveWall+0x1f8>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
	}

	if (flag2 == 0) {
 80020b8:	4b31      	ldr	r3, [pc, #196]	; (8002180 <moveWall+0x200>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d163      	bne.n	8002188 <moveWall+0x208>
		lcd_Fill(obstacles[8].x1, obstacles[8].y2-2, obstacles[8].x2, obstacles[8].y2, WHITE);
 80020c0:	4b2e      	ldr	r3, [pc, #184]	; (800217c <moveWall+0x1fc>)
 80020c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020c6:	b298      	uxth	r0, r3
 80020c8:	4b2c      	ldr	r3, [pc, #176]	; (800217c <moveWall+0x1fc>)
 80020ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b02      	subs	r3, #2
 80020d2:	b299      	uxth	r1, r3
 80020d4:	4b29      	ldr	r3, [pc, #164]	; (800217c <moveWall+0x1fc>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	b29a      	uxth	r2, r3
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <moveWall+0x1fc>)
 80020de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80020e8:	9400      	str	r4, [sp, #0]
 80020ea:	f7fe ff25 	bl	8000f38 <lcd_Fill>
		obstacles[8].y1-=2;
 80020ee:	4b23      	ldr	r3, [pc, #140]	; (800217c <moveWall+0x1fc>)
 80020f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020f4:	3b02      	subs	r3, #2
 80020f6:	4a21      	ldr	r2, [pc, #132]	; (800217c <moveWall+0x1fc>)
 80020f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		obstacles[8].y2-=2;
 80020fc:	4b1f      	ldr	r3, [pc, #124]	; (800217c <moveWall+0x1fc>)
 80020fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002102:	3b02      	subs	r3, #2
 8002104:	4a1d      	ldr	r2, [pc, #116]	; (800217c <moveWall+0x1fc>)
 8002106:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		lcd_Fill(obstacles[8].x1, obstacles[8].y1, obstacles[8].x2, obstacles[8].y1+2, MAGENTA);
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <moveWall+0x1fc>)
 800210c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002110:	b298      	uxth	r0, r3
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <moveWall+0x1fc>)
 8002114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002118:	b299      	uxth	r1, r3
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <moveWall+0x1fc>)
 800211c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002120:	b29a      	uxth	r2, r3
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <moveWall+0x1fc>)
 8002124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002128:	b29b      	uxth	r3, r3
 800212a:	3302      	adds	r3, #2
 800212c:	b29b      	uxth	r3, r3
 800212e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8002132:	9400      	str	r4, [sp, #0]
 8002134:	f7fe ff00 	bl	8000f38 <lcd_Fill>
		snakeSelfBite(obstacles[7].x1,obstacles[7].y1,obstacles[7].x2,obstacles[7].y1+10, 1);
 8002138:	4b10      	ldr	r3, [pc, #64]	; (800217c <moveWall+0x1fc>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	b218      	sxth	r0, r3
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <moveWall+0x1fc>)
 8002140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002142:	b219      	sxth	r1, r3
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <moveWall+0x1fc>)
 8002146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002148:	b21a      	sxth	r2, r3
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <moveWall+0x1fc>)
 800214c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214e:	b29b      	uxth	r3, r3
 8002150:	330a      	adds	r3, #10
 8002152:	b29b      	uxth	r3, r3
 8002154:	b21b      	sxth	r3, r3
 8002156:	2401      	movs	r4, #1
 8002158:	9400      	str	r4, [sp, #0]
 800215a:	f7ff fedb 	bl	8001f14 <snakeSelfBite>
		if (obstacles[8].y1 <= y_min) flag2 = 1;
 800215e:	4b07      	ldr	r3, [pc, #28]	; (800217c <moveWall+0x1fc>)
 8002160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002164:	4a07      	ldr	r2, [pc, #28]	; (8002184 <moveWall+0x204>)
 8002166:	f9b2 2000 	ldrsh.w	r2, [r2]
 800216a:	4293      	cmp	r3, r2
 800216c:	dc64      	bgt.n	8002238 <moveWall+0x2b8>
 800216e:	4b04      	ldr	r3, [pc, #16]	; (8002180 <moveWall+0x200>)
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
		lcd_Fill(obstacles[8].x1, obstacles[8].y2-2, obstacles[8].x2, obstacles[8].y2, MAGENTA);
		snakeSelfBite(obstacles[7].x1,obstacles[7].y2-10,obstacles[7].x2,obstacles[7].y2, 1);
		if (obstacles[8].y2 >= 310) flag2 = 0;
	}

}
 8002174:	e060      	b.n	8002238 <moveWall+0x2b8>
 8002176:	bf00      	nop
 8002178:	20000591 	.word	0x20000591
 800217c:	20000028 	.word	0x20000028
 8002180:	20000592 	.word	0x20000592
 8002184:	20000014 	.word	0x20000014
		lcd_Fill(obstacles[8].x1, obstacles[8].y1, obstacles[8].x2, obstacles[8].y1+2, WHITE);
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <moveWall+0x2c0>)
 800218a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800218e:	b298      	uxth	r0, r3
 8002190:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <moveWall+0x2c0>)
 8002192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002196:	b299      	uxth	r1, r3
 8002198:	4b29      	ldr	r3, [pc, #164]	; (8002240 <moveWall+0x2c0>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	b29a      	uxth	r2, r3
 80021a0:	4b27      	ldr	r3, [pc, #156]	; (8002240 <moveWall+0x2c0>)
 80021a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3302      	adds	r3, #2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80021b0:	9400      	str	r4, [sp, #0]
 80021b2:	f7fe fec1 	bl	8000f38 <lcd_Fill>
		obstacles[8].y1+=2;
 80021b6:	4b22      	ldr	r3, [pc, #136]	; (8002240 <moveWall+0x2c0>)
 80021b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021bc:	3302      	adds	r3, #2
 80021be:	4a20      	ldr	r2, [pc, #128]	; (8002240 <moveWall+0x2c0>)
 80021c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		obstacles[8].y2+=2;
 80021c4:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <moveWall+0x2c0>)
 80021c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021ca:	3302      	adds	r3, #2
 80021cc:	4a1c      	ldr	r2, [pc, #112]	; (8002240 <moveWall+0x2c0>)
 80021ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		lcd_Fill(obstacles[8].x1, obstacles[8].y2-2, obstacles[8].x2, obstacles[8].y2, MAGENTA);
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <moveWall+0x2c0>)
 80021d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021d8:	b298      	uxth	r0, r3
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <moveWall+0x2c0>)
 80021dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b02      	subs	r3, #2
 80021e4:	b299      	uxth	r1, r3
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <moveWall+0x2c0>)
 80021e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <moveWall+0x2c0>)
 80021f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80021fa:	9400      	str	r4, [sp, #0]
 80021fc:	f7fe fe9c 	bl	8000f38 <lcd_Fill>
		snakeSelfBite(obstacles[7].x1,obstacles[7].y2-10,obstacles[7].x2,obstacles[7].y2, 1);
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <moveWall+0x2c0>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	b218      	sxth	r0, r3
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <moveWall+0x2c0>)
 8002208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b0a      	subs	r3, #10
 800220e:	b29b      	uxth	r3, r3
 8002210:	b219      	sxth	r1, r3
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <moveWall+0x2c0>)
 8002214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002216:	b21a      	sxth	r2, r3
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <moveWall+0x2c0>)
 800221a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800221c:	b21b      	sxth	r3, r3
 800221e:	2401      	movs	r4, #1
 8002220:	9400      	str	r4, [sp, #0]
 8002222:	f7ff fe77 	bl	8001f14 <snakeSelfBite>
		if (obstacles[8].y2 >= 310) flag2 = 0;
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <moveWall+0x2c0>)
 8002228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800222c:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8002230:	db02      	blt.n	8002238 <moveWall+0x2b8>
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <moveWall+0x2c4>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
}
 8002238:	bf00      	nop
 800223a:	3704      	adds	r7, #4
 800223c:	46bd      	mov	sp, r7
 800223e:	bd90      	pop	{r4, r7, pc}
 8002240:	20000028 	.word	0x20000028
 8002244:	20000592 	.word	0x20000592

08002248 <checkCollision>:

void checkCollision () {
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
	for (int8_t i = 0; i < 9; ++i) {
 800224e:	2300      	movs	r3, #0
 8002250:	71fb      	strb	r3, [r7, #7]
 8002252:	e0aa      	b.n	80023aa <checkCollision+0x162>
		if (x1 >= obstacles[i].x1 && x1 <= obstacles[i].x2) {
 8002254:	4b59      	ldr	r3, [pc, #356]	; (80023bc <checkCollision+0x174>)
 8002256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800225a:	4619      	mov	r1, r3
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	4a57      	ldr	r2, [pc, #348]	; (80023c0 <checkCollision+0x178>)
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	4413      	add	r3, r2
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4299      	cmp	r1, r3
 800226a:	db46      	blt.n	80022fa <checkCollision+0xb2>
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <checkCollision+0x174>)
 800226e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002272:	4619      	mov	r1, r3
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	4a51      	ldr	r2, [pc, #324]	; (80023c0 <checkCollision+0x178>)
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	4413      	add	r3, r2
 800227e:	3308      	adds	r3, #8
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4299      	cmp	r1, r3
 8002284:	dc39      	bgt.n	80022fa <checkCollision+0xb2>
			if (y1 >= obstacles[i].y1 && y1 <= obstacles[i].y2) {
 8002286:	4b4f      	ldr	r3, [pc, #316]	; (80023c4 <checkCollision+0x17c>)
 8002288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800228c:	4619      	mov	r1, r3
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	4a4b      	ldr	r2, [pc, #300]	; (80023c0 <checkCollision+0x178>)
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	4413      	add	r3, r2
 8002298:	3304      	adds	r3, #4
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4299      	cmp	r1, r3
 800229e:	db0f      	blt.n	80022c0 <checkCollision+0x78>
 80022a0:	4b48      	ldr	r3, [pc, #288]	; (80023c4 <checkCollision+0x17c>)
 80022a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022a6:	4619      	mov	r1, r3
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	4a44      	ldr	r2, [pc, #272]	; (80023c0 <checkCollision+0x178>)
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	4413      	add	r3, r2
 80022b2:	330c      	adds	r3, #12
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4299      	cmp	r1, r3
 80022b8:	dc02      	bgt.n	80022c0 <checkCollision+0x78>
				game_over();
 80022ba:	f7ff fccb 	bl	8001c54 <game_over>
				return;
 80022be:	e079      	b.n	80023b4 <checkCollision+0x16c>
			} else if (y2 >= obstacles[i].y1 && y2 <= obstacles[i].y2) {
 80022c0:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <checkCollision+0x180>)
 80022c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c6:	4619      	mov	r1, r3
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	4a3c      	ldr	r2, [pc, #240]	; (80023c0 <checkCollision+0x178>)
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	4413      	add	r3, r2
 80022d2:	3304      	adds	r3, #4
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4299      	cmp	r1, r3
 80022d8:	db62      	blt.n	80023a0 <checkCollision+0x158>
 80022da:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <checkCollision+0x180>)
 80022dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	4a36      	ldr	r2, [pc, #216]	; (80023c0 <checkCollision+0x178>)
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	4413      	add	r3, r2
 80022ec:	330c      	adds	r3, #12
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4299      	cmp	r1, r3
 80022f2:	dc55      	bgt.n	80023a0 <checkCollision+0x158>
				game_over();
 80022f4:	f7ff fcae 	bl	8001c54 <game_over>
				return;
 80022f8:	e05c      	b.n	80023b4 <checkCollision+0x16c>
			}
		} else if (x2 >= obstacles[i].x1 && x2 <= obstacles[i].x2) {
 80022fa:	4b34      	ldr	r3, [pc, #208]	; (80023cc <checkCollision+0x184>)
 80022fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002300:	4619      	mov	r1, r3
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	4a2e      	ldr	r2, [pc, #184]	; (80023c0 <checkCollision+0x178>)
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	4413      	add	r3, r2
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4299      	cmp	r1, r3
 8002310:	db47      	blt.n	80023a2 <checkCollision+0x15a>
 8002312:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <checkCollision+0x184>)
 8002314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002318:	4619      	mov	r1, r3
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	4a28      	ldr	r2, [pc, #160]	; (80023c0 <checkCollision+0x178>)
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	4413      	add	r3, r2
 8002324:	3308      	adds	r3, #8
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4299      	cmp	r1, r3
 800232a:	dc3a      	bgt.n	80023a2 <checkCollision+0x15a>
			if (y1 >= obstacles[i].y1 && y1 <= obstacles[i].y2) {
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <checkCollision+0x17c>)
 800232e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002332:	4619      	mov	r1, r3
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	4a21      	ldr	r2, [pc, #132]	; (80023c0 <checkCollision+0x178>)
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	4413      	add	r3, r2
 800233e:	3304      	adds	r3, #4
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4299      	cmp	r1, r3
 8002344:	db0f      	blt.n	8002366 <checkCollision+0x11e>
 8002346:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <checkCollision+0x17c>)
 8002348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234c:	4619      	mov	r1, r3
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	4a1b      	ldr	r2, [pc, #108]	; (80023c0 <checkCollision+0x178>)
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	4413      	add	r3, r2
 8002358:	330c      	adds	r3, #12
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4299      	cmp	r1, r3
 800235e:	dc02      	bgt.n	8002366 <checkCollision+0x11e>
				game_over();
 8002360:	f7ff fc78 	bl	8001c54 <game_over>
				return;
 8002364:	e026      	b.n	80023b4 <checkCollision+0x16c>
			} else if (y2 >= obstacles[i].y1 && y2 <= obstacles[i].y2) {
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <checkCollision+0x180>)
 8002368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800236c:	4619      	mov	r1, r3
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	4a13      	ldr	r2, [pc, #76]	; (80023c0 <checkCollision+0x178>)
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	4413      	add	r3, r2
 8002378:	3304      	adds	r3, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4299      	cmp	r1, r3
 800237e:	db10      	blt.n	80023a2 <checkCollision+0x15a>
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <checkCollision+0x180>)
 8002382:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002386:	4619      	mov	r1, r3
 8002388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238c:	4a0c      	ldr	r2, [pc, #48]	; (80023c0 <checkCollision+0x178>)
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	4413      	add	r3, r2
 8002392:	330c      	adds	r3, #12
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4299      	cmp	r1, r3
 8002398:	dc03      	bgt.n	80023a2 <checkCollision+0x15a>
				game_over();
 800239a:	f7ff fc5b 	bl	8001c54 <game_over>
				return;
 800239e:	e009      	b.n	80023b4 <checkCollision+0x16c>
			if (y1 >= obstacles[i].y1 && y1 <= obstacles[i].y2) {
 80023a0:	bf00      	nop
	for (int8_t i = 0; i < 9; ++i) {
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	3301      	adds	r3, #1
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	71fb      	strb	r3, [r7, #7]
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	f77f af50 	ble.w	8002254 <checkCollision+0xc>
			}
		}
	}
}
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000016 	.word	0x20000016
 80023c0:	20000028 	.word	0x20000028
 80023c4:	20000018 	.word	0x20000018
 80023c8:	2000001c 	.word	0x2000001c
 80023cc:	2000001a 	.word	0x2000001a

080023d0 <delete_path>:
void delete_path() {
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af02      	add	r7, sp, #8
    // Assuming lcd_Fill is a function to clear the specified area on the LCD with white color
    	if (allPath[0].isTail == 0) {
 80023d6:	4b81      	ldr	r3, [pc, #516]	; (80025dc <delete_path+0x20c>)
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 808d 	bne.w	80024fa <delete_path+0x12a>
    		//if (allPath[0].currentState == goRight) lcd_Fill(x1,0, x2, y2, RED);
    		if (allPath[0].length >= snakeTailLen) {
 80023e0:	4b7e      	ldr	r3, [pc, #504]	; (80025dc <delete_path+0x20c>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a7e      	ldr	r2, [pc, #504]	; (80025e0 <delete_path+0x210>)
 80023e6:	8812      	ldrh	r2, [r2, #0]
 80023e8:	4293      	cmp	r3, r2
 80023ea:	f2c0 815a 	blt.w	80026a2 <delete_path+0x2d2>
    			if (allPath[0].currentState == goUp) {
 80023ee:	4b7b      	ldr	r3, [pc, #492]	; (80025dc <delete_path+0x20c>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11c      	bne.n	8002430 <delete_path+0x60>
					lcd_Fill(allPath[0].x1, allPath[0].y2-speed, allPath[0].x2, allPath[0].y2, WHITE);
 80023f6:	4b79      	ldr	r3, [pc, #484]	; (80025dc <delete_path+0x20c>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	b298      	uxth	r0, r3
 80023fc:	4b77      	ldr	r3, [pc, #476]	; (80025dc <delete_path+0x20c>)
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	b29a      	uxth	r2, r3
 8002402:	4b78      	ldr	r3, [pc, #480]	; (80025e4 <delete_path+0x214>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	b299      	uxth	r1, r3
 800240a:	4b74      	ldr	r3, [pc, #464]	; (80025dc <delete_path+0x20c>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	b29a      	uxth	r2, r3
 8002410:	4b72      	ldr	r3, [pc, #456]	; (80025dc <delete_path+0x20c>)
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	b29b      	uxth	r3, r3
 8002416:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800241a:	9400      	str	r4, [sp, #0]
 800241c:	f7fe fd8c 	bl	8000f38 <lcd_Fill>
					allPath[0].y2 -= speed;
 8002420:	4b6e      	ldr	r3, [pc, #440]	; (80025dc <delete_path+0x20c>)
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	4a6f      	ldr	r2, [pc, #444]	; (80025e4 <delete_path+0x214>)
 8002426:	8812      	ldrh	r2, [r2, #0]
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	4a6c      	ldr	r2, [pc, #432]	; (80025dc <delete_path+0x20c>)
 800242c:	6153      	str	r3, [r2, #20]



    	}

}
 800242e:	e138      	b.n	80026a2 <delete_path+0x2d2>
				} else if (allPath[0].currentState == goDown) {
 8002430:	4b6a      	ldr	r3, [pc, #424]	; (80025dc <delete_path+0x20c>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d11d      	bne.n	8002474 <delete_path+0xa4>
					lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x2, allPath[0].y1 + speed, WHITE);
 8002438:	4b68      	ldr	r3, [pc, #416]	; (80025dc <delete_path+0x20c>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	b298      	uxth	r0, r3
 800243e:	4b67      	ldr	r3, [pc, #412]	; (80025dc <delete_path+0x20c>)
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	b299      	uxth	r1, r3
 8002444:	4b65      	ldr	r3, [pc, #404]	; (80025dc <delete_path+0x20c>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	b29c      	uxth	r4, r3
 800244a:	4b64      	ldr	r3, [pc, #400]	; (80025dc <delete_path+0x20c>)
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	b29a      	uxth	r2, r3
 8002450:	4b64      	ldr	r3, [pc, #400]	; (80025e4 <delete_path+0x214>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	4413      	add	r3, r2
 8002456:	b29b      	uxth	r3, r3
 8002458:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800245c:	9200      	str	r2, [sp, #0]
 800245e:	4622      	mov	r2, r4
 8002460:	f7fe fd6a 	bl	8000f38 <lcd_Fill>
					allPath[0].y1 += speed;
 8002464:	4b5d      	ldr	r3, [pc, #372]	; (80025dc <delete_path+0x20c>)
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	4a5e      	ldr	r2, [pc, #376]	; (80025e4 <delete_path+0x214>)
 800246a:	8812      	ldrh	r2, [r2, #0]
 800246c:	4413      	add	r3, r2
 800246e:	4a5b      	ldr	r2, [pc, #364]	; (80025dc <delete_path+0x20c>)
 8002470:	6113      	str	r3, [r2, #16]
}
 8002472:	e116      	b.n	80026a2 <delete_path+0x2d2>
				} else if (allPath[0].currentState == goLeft) {
 8002474:	4b59      	ldr	r3, [pc, #356]	; (80025dc <delete_path+0x20c>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d11c      	bne.n	80024b6 <delete_path+0xe6>
					lcd_Fill(allPath[0].x2-speed, allPath[0].y1, allPath[0].x2, allPath[0].y2, WHITE);
 800247c:	4b57      	ldr	r3, [pc, #348]	; (80025dc <delete_path+0x20c>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	b29a      	uxth	r2, r3
 8002482:	4b58      	ldr	r3, [pc, #352]	; (80025e4 <delete_path+0x214>)
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	b298      	uxth	r0, r3
 800248a:	4b54      	ldr	r3, [pc, #336]	; (80025dc <delete_path+0x20c>)
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	b299      	uxth	r1, r3
 8002490:	4b52      	ldr	r3, [pc, #328]	; (80025dc <delete_path+0x20c>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	b29a      	uxth	r2, r3
 8002496:	4b51      	ldr	r3, [pc, #324]	; (80025dc <delete_path+0x20c>)
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	b29b      	uxth	r3, r3
 800249c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80024a0:	9400      	str	r4, [sp, #0]
 80024a2:	f7fe fd49 	bl	8000f38 <lcd_Fill>
					allPath[0].x2 -= speed;
 80024a6:	4b4d      	ldr	r3, [pc, #308]	; (80025dc <delete_path+0x20c>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	4a4e      	ldr	r2, [pc, #312]	; (80025e4 <delete_path+0x214>)
 80024ac:	8812      	ldrh	r2, [r2, #0]
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	4a4a      	ldr	r2, [pc, #296]	; (80025dc <delete_path+0x20c>)
 80024b2:	60d3      	str	r3, [r2, #12]
}
 80024b4:	e0f5      	b.n	80026a2 <delete_path+0x2d2>
				} else if (allPath[0].currentState == goRight) {
 80024b6:	4b49      	ldr	r3, [pc, #292]	; (80025dc <delete_path+0x20c>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	f040 80f1 	bne.w	80026a2 <delete_path+0x2d2>
					lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x1+speed, allPath[0].y2, WHITE);
 80024c0:	4b46      	ldr	r3, [pc, #280]	; (80025dc <delete_path+0x20c>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	b298      	uxth	r0, r3
 80024c6:	4b45      	ldr	r3, [pc, #276]	; (80025dc <delete_path+0x20c>)
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	b299      	uxth	r1, r3
 80024cc:	4b43      	ldr	r3, [pc, #268]	; (80025dc <delete_path+0x20c>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	4b44      	ldr	r3, [pc, #272]	; (80025e4 <delete_path+0x214>)
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	4413      	add	r3, r2
 80024d8:	b29a      	uxth	r2, r3
 80024da:	4b40      	ldr	r3, [pc, #256]	; (80025dc <delete_path+0x20c>)
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80024e4:	9400      	str	r4, [sp, #0]
 80024e6:	f7fe fd27 	bl	8000f38 <lcd_Fill>
					allPath[0].x1 += speed;
 80024ea:	4b3c      	ldr	r3, [pc, #240]	; (80025dc <delete_path+0x20c>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4a3d      	ldr	r2, [pc, #244]	; (80025e4 <delete_path+0x214>)
 80024f0:	8812      	ldrh	r2, [r2, #0]
 80024f2:	4413      	add	r3, r2
 80024f4:	4a39      	ldr	r2, [pc, #228]	; (80025dc <delete_path+0x20c>)
 80024f6:	6093      	str	r3, [r2, #8]
}
 80024f8:	e0d3      	b.n	80026a2 <delete_path+0x2d2>
    	} else if (allPath[0].isTail == 1) {
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <delete_path+0x20c>)
 80024fc:	785b      	ldrb	r3, [r3, #1]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	f040 80cf 	bne.w	80026a2 <delete_path+0x2d2>
    		allPath[0].length -= speed;
 8002504:	4b35      	ldr	r3, [pc, #212]	; (80025dc <delete_path+0x20c>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a36      	ldr	r2, [pc, #216]	; (80025e4 <delete_path+0x214>)
 800250a:	8812      	ldrh	r2, [r2, #0]
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	4a33      	ldr	r2, [pc, #204]	; (80025dc <delete_path+0x20c>)
 8002510:	6053      	str	r3, [r2, #4]
    		if (allPath[0].currentState == goUp) {
 8002512:	4b32      	ldr	r3, [pc, #200]	; (80025dc <delete_path+0x20c>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d11c      	bne.n	8002554 <delete_path+0x184>
				lcd_Fill(allPath[0].x1, allPath[0].y2-speed, allPath[0].x2, allPath[0].y2, WHITE);
 800251a:	4b30      	ldr	r3, [pc, #192]	; (80025dc <delete_path+0x20c>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	b298      	uxth	r0, r3
 8002520:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <delete_path+0x20c>)
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	b29a      	uxth	r2, r3
 8002526:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <delete_path+0x214>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	b299      	uxth	r1, r3
 800252e:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <delete_path+0x20c>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	b29a      	uxth	r2, r3
 8002534:	4b29      	ldr	r3, [pc, #164]	; (80025dc <delete_path+0x20c>)
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	b29b      	uxth	r3, r3
 800253a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800253e:	9400      	str	r4, [sp, #0]
 8002540:	f7fe fcfa 	bl	8000f38 <lcd_Fill>
				allPath[0].y2 -= speed;
 8002544:	4b25      	ldr	r3, [pc, #148]	; (80025dc <delete_path+0x20c>)
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	4a26      	ldr	r2, [pc, #152]	; (80025e4 <delete_path+0x214>)
 800254a:	8812      	ldrh	r2, [r2, #0]
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	4a23      	ldr	r2, [pc, #140]	; (80025dc <delete_path+0x20c>)
 8002550:	6153      	str	r3, [r2, #20]
 8002552:	e069      	b.n	8002628 <delete_path+0x258>
			} else if (allPath[0].currentState == goDown) {
 8002554:	4b21      	ldr	r3, [pc, #132]	; (80025dc <delete_path+0x20c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d11d      	bne.n	8002598 <delete_path+0x1c8>
				lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x2, allPath[0].y1 + speed, WHITE);
 800255c:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <delete_path+0x20c>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	b298      	uxth	r0, r3
 8002562:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <delete_path+0x20c>)
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	b299      	uxth	r1, r3
 8002568:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <delete_path+0x20c>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	b29c      	uxth	r4, r3
 800256e:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <delete_path+0x20c>)
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	b29a      	uxth	r2, r3
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <delete_path+0x214>)
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	4413      	add	r3, r2
 800257a:	b29b      	uxth	r3, r3
 800257c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002580:	9200      	str	r2, [sp, #0]
 8002582:	4622      	mov	r2, r4
 8002584:	f7fe fcd8 	bl	8000f38 <lcd_Fill>
				allPath[0].y1 += speed;
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <delete_path+0x20c>)
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	4a15      	ldr	r2, [pc, #84]	; (80025e4 <delete_path+0x214>)
 800258e:	8812      	ldrh	r2, [r2, #0]
 8002590:	4413      	add	r3, r2
 8002592:	4a12      	ldr	r2, [pc, #72]	; (80025dc <delete_path+0x20c>)
 8002594:	6113      	str	r3, [r2, #16]
 8002596:	e047      	b.n	8002628 <delete_path+0x258>
			} else if (allPath[0].currentState == goLeft) {
 8002598:	4b10      	ldr	r3, [pc, #64]	; (80025dc <delete_path+0x20c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d123      	bne.n	80025e8 <delete_path+0x218>
				lcd_Fill(allPath[0].x2-speed, allPath[0].y1, allPath[0].x2, allPath[0].y2, WHITE);
 80025a0:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <delete_path+0x20c>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <delete_path+0x214>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	b298      	uxth	r0, r3
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <delete_path+0x20c>)
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	b299      	uxth	r1, r3
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <delete_path+0x20c>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <delete_path+0x20c>)
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80025c4:	9400      	str	r4, [sp, #0]
 80025c6:	f7fe fcb7 	bl	8000f38 <lcd_Fill>
				allPath[0].x2 -= speed;
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <delete_path+0x20c>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <delete_path+0x214>)
 80025d0:	8812      	ldrh	r2, [r2, #0]
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	4a01      	ldr	r2, [pc, #4]	; (80025dc <delete_path+0x20c>)
 80025d6:	60d3      	str	r3, [r2, #12]
 80025d8:	e026      	b.n	8002628 <delete_path+0x258>
 80025da:	bf00      	nop
 80025dc:	200002c0 	.word	0x200002c0
 80025e0:	20000022 	.word	0x20000022
 80025e4:	20000024 	.word	0x20000024
			} else if (allPath[0].currentState == goRight) {
 80025e8:	4b30      	ldr	r3, [pc, #192]	; (80026ac <delete_path+0x2dc>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d11b      	bne.n	8002628 <delete_path+0x258>
				lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x1+speed, allPath[0].y2, WHITE);
 80025f0:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <delete_path+0x2dc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	b298      	uxth	r0, r3
 80025f6:	4b2d      	ldr	r3, [pc, #180]	; (80026ac <delete_path+0x2dc>)
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	b299      	uxth	r1, r3
 80025fc:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <delete_path+0x2dc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	b29a      	uxth	r2, r3
 8002602:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <delete_path+0x2e0>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	b29a      	uxth	r2, r3
 800260a:	4b28      	ldr	r3, [pc, #160]	; (80026ac <delete_path+0x2dc>)
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	b29b      	uxth	r3, r3
 8002610:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002614:	9400      	str	r4, [sp, #0]
 8002616:	f7fe fc8f 	bl	8000f38 <lcd_Fill>
				allPath[0].x1 += speed;
 800261a:	4b24      	ldr	r3, [pc, #144]	; (80026ac <delete_path+0x2dc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	4a24      	ldr	r2, [pc, #144]	; (80026b0 <delete_path+0x2e0>)
 8002620:	8812      	ldrh	r2, [r2, #0]
 8002622:	4413      	add	r3, r2
 8002624:	4a21      	ldr	r2, [pc, #132]	; (80026ac <delete_path+0x2dc>)
 8002626:	6093      	str	r3, [r2, #8]
    		if (flag == 0) {
 8002628:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <delete_path+0x2e4>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d138      	bne.n	80026a2 <delete_path+0x2d2>
				if (allPath[0].length == 0 || allPath[0].length < 0) {
 8002630:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <delete_path+0x2dc>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <delete_path+0x270>
 8002638:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <delete_path+0x2dc>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	da30      	bge.n	80026a2 <delete_path+0x2d2>
						flag = 1;
 8002640:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <delete_path+0x2e4>)
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
						delete_path();
 8002646:	f7ff fec3 	bl	80023d0 <delete_path>
						flag = 0;
 800264a:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <delete_path+0x2e4>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
					for (uint8_t i = 0; i < currentIndex - 1; i++) {
 8002650:	2300      	movs	r3, #0
 8002652:	71fb      	strb	r3, [r7, #7]
 8002654:	e019      	b.n	800268a <delete_path+0x2ba>
						allPath[i] = allPath[i + 1];
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	79f9      	ldrb	r1, [r7, #7]
 800265c:	4813      	ldr	r0, [pc, #76]	; (80026ac <delete_path+0x2dc>)
 800265e:	460b      	mov	r3, r1
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	440b      	add	r3, r1
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4418      	add	r0, r3
 8002668:	4910      	ldr	r1, [pc, #64]	; (80026ac <delete_path+0x2dc>)
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	440b      	add	r3, r1
 8002674:	4604      	mov	r4, r0
 8002676:	461d      	mov	r5, r3
 8002678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800267a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800267c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002680:	e884 0003 	stmia.w	r4, {r0, r1}
					for (uint8_t i = 0; i < currentIndex - 1; i++) {
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	3301      	adds	r3, #1
 8002688:	71fb      	strb	r3, [r7, #7]
 800268a:	79fa      	ldrb	r2, [r7, #7]
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <delete_path+0x2e8>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	3b01      	subs	r3, #1
 8002692:	429a      	cmp	r2, r3
 8002694:	dbdf      	blt.n	8002656 <delete_path+0x286>
					currentIndex--;
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <delete_path+0x2e8>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	3b01      	subs	r3, #1
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <delete_path+0x2e8>)
 80026a0:	701a      	strb	r2, [r3, #0]
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	200002c0 	.word	0x200002c0
 80026b0:	20000024 	.word	0x20000024
 80026b4:	20000590 	.word	0x20000590
 80026b8:	200002bd 	.word	0x200002bd

080026bc <right>:
void right() {
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b083      	sub	sp, #12
 80026c0:	af02      	add	r7, sp, #8

	if (prevState == goRight) {
 80026c2:	4b7f      	ldr	r3, [pc, #508]	; (80028c0 <right+0x204>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d138      	bne.n	800273c <right+0x80>
				if (allPath[currentIndex-1].length <= snakeTailLen) {
 80026ca:	4b7e      	ldr	r3, [pc, #504]	; (80028c4 <right+0x208>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	1e5a      	subs	r2, r3, #1
 80026d0:	497d      	ldr	r1, [pc, #500]	; (80028c8 <right+0x20c>)
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	3304      	adds	r3, #4
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a7a      	ldr	r2, [pc, #488]	; (80028cc <right+0x210>)
 80026e2:	8812      	ldrh	r2, [r2, #0]
 80026e4:	4293      	cmp	r3, r2
 80026e6:	dc19      	bgt.n	800271c <right+0x60>
					allPath[currentIndex-1].length +=speed;
 80026e8:	4b76      	ldr	r3, [pc, #472]	; (80028c4 <right+0x208>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	1e5a      	subs	r2, r3, #1
 80026ee:	4976      	ldr	r1, [pc, #472]	; (80028c8 <right+0x20c>)
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	3304      	adds	r3, #4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a74      	ldr	r2, [pc, #464]	; (80028d0 <right+0x214>)
 8002700:	8812      	ldrh	r2, [r2, #0]
 8002702:	4611      	mov	r1, r2
 8002704:	4a6f      	ldr	r2, [pc, #444]	; (80028c4 <right+0x208>)
 8002706:	7812      	ldrb	r2, [r2, #0]
 8002708:	3a01      	subs	r2, #1
 800270a:	4419      	add	r1, r3
 800270c:	486e      	ldr	r0, [pc, #440]	; (80028c8 <right+0x20c>)
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4403      	add	r3, r0
 8002718:	3304      	adds	r3, #4
 800271a:	6019      	str	r1, [r3, #0]
				}
				allPath[currentIndex-1].x2 = x2;
 800271c:	4b6d      	ldr	r3, [pc, #436]	; (80028d4 <right+0x218>)
 800271e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002722:	4b68      	ldr	r3, [pc, #416]	; (80028c4 <right+0x208>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	1e5a      	subs	r2, r3, #1
 8002728:	4608      	mov	r0, r1
 800272a:	4967      	ldr	r1, [pc, #412]	; (80028c8 <right+0x20c>)
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	330c      	adds	r3, #12
 8002738:	6018      	str	r0, [r3, #0]
 800273a:	e08d      	b.n	8002858 <right+0x19c>
			} else {
				if (currentIndex == 0) allPath[0].isTail = 0;
 800273c:	4b61      	ldr	r3, [pc, #388]	; (80028c4 <right+0x208>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d103      	bne.n	800274c <right+0x90>
 8002744:	4b60      	ldr	r3, [pc, #384]	; (80028c8 <right+0x20c>)
 8002746:	2200      	movs	r2, #0
 8002748:	705a      	strb	r2, [r3, #1]
 800274a:	e00b      	b.n	8002764 <right+0xa8>
				else allPath[currentIndex-1].isTail = 1;
 800274c:	4b5d      	ldr	r3, [pc, #372]	; (80028c4 <right+0x208>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	1e5a      	subs	r2, r3, #1
 8002752:	495d      	ldr	r1, [pc, #372]	; (80028c8 <right+0x20c>)
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	440b      	add	r3, r1
 800275e:	3301      	adds	r3, #1
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
				allPath[currentIndex].isTail = 0;
 8002764:	4b57      	ldr	r3, [pc, #348]	; (80028c4 <right+0x208>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	4a57      	ldr	r2, [pc, #348]	; (80028c8 <right+0x20c>)
 800276c:	460b      	mov	r3, r1
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	440b      	add	r3, r1
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	3301      	adds	r3, #1
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
				if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <right+0x210>)
 800277e:	881a      	ldrh	r2, [r3, #0]
 8002780:	4b55      	ldr	r3, [pc, #340]	; (80028d8 <right+0x21c>)
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d10e      	bne.n	80027a6 <right+0xea>
 8002788:	4b50      	ldr	r3, [pc, #320]	; (80028cc <right+0x210>)
 800278a:	881a      	ldrh	r2, [r3, #0]
 800278c:	4b4d      	ldr	r3, [pc, #308]	; (80028c4 <right+0x208>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	4a4c      	ldr	r2, [pc, #304]	; (80028c8 <right+0x20c>)
 8002796:	460b      	mov	r3, r1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	440b      	add	r3, r1
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	3304      	adds	r3, #4
 80027a2:	6018      	str	r0, [r3, #0]
 80027a4:	e00b      	b.n	80027be <right+0x102>
				else allPath[currentIndex].length = 0;
 80027a6:	4b47      	ldr	r3, [pc, #284]	; (80028c4 <right+0x208>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	4619      	mov	r1, r3
 80027ac:	4a46      	ldr	r2, [pc, #280]	; (80028c8 <right+0x20c>)
 80027ae:	460b      	mov	r3, r1
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	440b      	add	r3, r1
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	3304      	adds	r3, #4
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
				allPath[currentIndex].currentState = goRight;
 80027be:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <right+0x208>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	4619      	mov	r1, r3
 80027c4:	4a40      	ldr	r2, [pc, #256]	; (80028c8 <right+0x20c>)
 80027c6:	460b      	mov	r3, r1
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	440b      	add	r3, r1
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	2203      	movs	r2, #3
 80027d2:	701a      	strb	r2, [r3, #0]
				allPath[currentIndex].x1 = x1;
 80027d4:	4b41      	ldr	r3, [pc, #260]	; (80028dc <right+0x220>)
 80027d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027da:	4b3a      	ldr	r3, [pc, #232]	; (80028c4 <right+0x208>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	4a39      	ldr	r2, [pc, #228]	; (80028c8 <right+0x20c>)
 80027e4:	460b      	mov	r3, r1
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	440b      	add	r3, r1
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4413      	add	r3, r2
 80027ee:	3308      	adds	r3, #8
 80027f0:	6018      	str	r0, [r3, #0]
				allPath[currentIndex].x2 = x2;
 80027f2:	4b38      	ldr	r3, [pc, #224]	; (80028d4 <right+0x218>)
 80027f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027f8:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <right+0x208>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	4619      	mov	r1, r3
 80027fe:	4610      	mov	r0, r2
 8002800:	4a31      	ldr	r2, [pc, #196]	; (80028c8 <right+0x20c>)
 8002802:	460b      	mov	r3, r1
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	440b      	add	r3, r1
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	330c      	adds	r3, #12
 800280e:	6018      	str	r0, [r3, #0]
				allPath[currentIndex].y1 = y1;
 8002810:	4b33      	ldr	r3, [pc, #204]	; (80028e0 <right+0x224>)
 8002812:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002816:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <right+0x208>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	4a2a      	ldr	r2, [pc, #168]	; (80028c8 <right+0x20c>)
 8002820:	460b      	mov	r3, r1
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	440b      	add	r3, r1
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	3310      	adds	r3, #16
 800282c:	6018      	str	r0, [r3, #0]
				allPath[currentIndex].y2 = y2;
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <right+0x228>)
 8002830:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002834:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <right+0x208>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	4610      	mov	r0, r2
 800283c:	4a22      	ldr	r2, [pc, #136]	; (80028c8 <right+0x20c>)
 800283e:	460b      	mov	r3, r1
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	440b      	add	r3, r1
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	3314      	adds	r3, #20
 800284a:	6018      	str	r0, [r3, #0]

				currentIndex++;
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <right+0x208>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	3301      	adds	r3, #1
 8002852:	b2da      	uxtb	r2, r3
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <right+0x208>)
 8002856:	701a      	strb	r2, [r3, #0]
			}
			prevState = goRight;
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <right+0x204>)
 800285a:	2203      	movs	r2, #3
 800285c:	701a      	strb	r2, [r3, #0]
			//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;
			x1 += speed;
 800285e:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <right+0x220>)
 8002860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002864:	b29a      	uxth	r2, r3
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <right+0x214>)
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	b29b      	uxth	r3, r3
 800286e:	b21a      	sxth	r2, r3
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <right+0x220>)
 8002872:	801a      	strh	r2, [r3, #0]
			x2 += speed;
 8002874:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <right+0x218>)
 8002876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800287a:	b29a      	uxth	r2, r3
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <right+0x214>)
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	4413      	add	r3, r2
 8002882:	b29b      	uxth	r3, r3
 8002884:	b21a      	sxth	r2, r3
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <right+0x218>)
 8002888:	801a      	strh	r2, [r3, #0]


			lcd_Fill(x1, y1, x2, y2, BLUE);
 800288a:	4b14      	ldr	r3, [pc, #80]	; (80028dc <right+0x220>)
 800288c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002890:	b298      	uxth	r0, r3
 8002892:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <right+0x224>)
 8002894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002898:	b299      	uxth	r1, r3
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <right+0x218>)
 800289c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <right+0x228>)
 80028a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	241f      	movs	r4, #31
 80028ac:	9400      	str	r4, [sp, #0]
 80028ae:	f7fe fb43 	bl	8000f38 <lcd_Fill>
			delete_path();
 80028b2:	f7ff fd8d 	bl	80023d0 <delete_path>
}
 80028b6:	bf00      	nop
 80028b8:	3704      	adds	r7, #4
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd90      	pop	{r4, r7, pc}
 80028be:	bf00      	nop
 80028c0:	2000001f 	.word	0x2000001f
 80028c4:	200002bd 	.word	0x200002bd
 80028c8:	200002c0 	.word	0x200002c0
 80028cc:	20000022 	.word	0x20000022
 80028d0:	20000024 	.word	0x20000024
 80028d4:	2000001a 	.word	0x2000001a
 80028d8:	20000020 	.word	0x20000020
 80028dc:	20000016 	.word	0x20000016
 80028e0:	20000018 	.word	0x20000018
 80028e4:	2000001c 	.word	0x2000001c

080028e8 <left>:
void left() {
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af02      	add	r7, sp, #8
	if (prevState == goLeft) {
 80028ee:	4b7f      	ldr	r3, [pc, #508]	; (8002aec <left+0x204>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d138      	bne.n	8002968 <left+0x80>
		if (allPath[currentIndex-1].length <= snakeTailLen) {
 80028f6:	4b7e      	ldr	r3, [pc, #504]	; (8002af0 <left+0x208>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	1e5a      	subs	r2, r3, #1
 80028fc:	497d      	ldr	r1, [pc, #500]	; (8002af4 <left+0x20c>)
 80028fe:	4613      	mov	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4413      	add	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	440b      	add	r3, r1
 8002908:	3304      	adds	r3, #4
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a7a      	ldr	r2, [pc, #488]	; (8002af8 <left+0x210>)
 800290e:	8812      	ldrh	r2, [r2, #0]
 8002910:	4293      	cmp	r3, r2
 8002912:	dc19      	bgt.n	8002948 <left+0x60>

							allPath[currentIndex-1].length +=speed;
 8002914:	4b76      	ldr	r3, [pc, #472]	; (8002af0 <left+0x208>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	1e5a      	subs	r2, r3, #1
 800291a:	4976      	ldr	r1, [pc, #472]	; (8002af4 <left+0x20c>)
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	440b      	add	r3, r1
 8002926:	3304      	adds	r3, #4
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a74      	ldr	r2, [pc, #464]	; (8002afc <left+0x214>)
 800292c:	8812      	ldrh	r2, [r2, #0]
 800292e:	4611      	mov	r1, r2
 8002930:	4a6f      	ldr	r2, [pc, #444]	; (8002af0 <left+0x208>)
 8002932:	7812      	ldrb	r2, [r2, #0]
 8002934:	3a01      	subs	r2, #1
 8002936:	4419      	add	r1, r3
 8002938:	486e      	ldr	r0, [pc, #440]	; (8002af4 <left+0x20c>)
 800293a:	4613      	mov	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4403      	add	r3, r0
 8002944:	3304      	adds	r3, #4
 8002946:	6019      	str	r1, [r3, #0]
						}

			allPath[currentIndex-1].x1 = x1;
 8002948:	4b6d      	ldr	r3, [pc, #436]	; (8002b00 <left+0x218>)
 800294a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800294e:	4b68      	ldr	r3, [pc, #416]	; (8002af0 <left+0x208>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	1e5a      	subs	r2, r3, #1
 8002954:	4608      	mov	r0, r1
 8002956:	4967      	ldr	r1, [pc, #412]	; (8002af4 <left+0x20c>)
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	3308      	adds	r3, #8
 8002964:	6018      	str	r0, [r3, #0]
 8002966:	e08d      	b.n	8002a84 <left+0x19c>

		} else {
			if (currentIndex == 0) allPath[0].isTail = 0;
 8002968:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <left+0x208>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <left+0x90>
 8002970:	4b60      	ldr	r3, [pc, #384]	; (8002af4 <left+0x20c>)
 8002972:	2200      	movs	r2, #0
 8002974:	705a      	strb	r2, [r3, #1]
 8002976:	e00b      	b.n	8002990 <left+0xa8>
			else allPath[currentIndex-1].isTail = 1;
 8002978:	4b5d      	ldr	r3, [pc, #372]	; (8002af0 <left+0x208>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	1e5a      	subs	r2, r3, #1
 800297e:	495d      	ldr	r1, [pc, #372]	; (8002af4 <left+0x20c>)
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	3301      	adds	r3, #1
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
			allPath[currentIndex].isTail = 0;
 8002990:	4b57      	ldr	r3, [pc, #348]	; (8002af0 <left+0x208>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	4619      	mov	r1, r3
 8002996:	4a57      	ldr	r2, [pc, #348]	; (8002af4 <left+0x20c>)
 8002998:	460b      	mov	r3, r1
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	440b      	add	r3, r1
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	3301      	adds	r3, #1
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
			if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 80029a8:	4b53      	ldr	r3, [pc, #332]	; (8002af8 <left+0x210>)
 80029aa:	881a      	ldrh	r2, [r3, #0]
 80029ac:	4b55      	ldr	r3, [pc, #340]	; (8002b04 <left+0x21c>)
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d10e      	bne.n	80029d2 <left+0xea>
 80029b4:	4b50      	ldr	r3, [pc, #320]	; (8002af8 <left+0x210>)
 80029b6:	881a      	ldrh	r2, [r3, #0]
 80029b8:	4b4d      	ldr	r3, [pc, #308]	; (8002af0 <left+0x208>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	4610      	mov	r0, r2
 80029c0:	4a4c      	ldr	r2, [pc, #304]	; (8002af4 <left+0x20c>)
 80029c2:	460b      	mov	r3, r1
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	440b      	add	r3, r1
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	3304      	adds	r3, #4
 80029ce:	6018      	str	r0, [r3, #0]
 80029d0:	e00b      	b.n	80029ea <left+0x102>
			else allPath[currentIndex].length = 0;
 80029d2:	4b47      	ldr	r3, [pc, #284]	; (8002af0 <left+0x208>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	4619      	mov	r1, r3
 80029d8:	4a46      	ldr	r2, [pc, #280]	; (8002af4 <left+0x20c>)
 80029da:	460b      	mov	r3, r1
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	440b      	add	r3, r1
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	3304      	adds	r3, #4
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
			allPath[currentIndex].currentState = goLeft;
 80029ea:	4b41      	ldr	r3, [pc, #260]	; (8002af0 <left+0x208>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	4619      	mov	r1, r3
 80029f0:	4a40      	ldr	r2, [pc, #256]	; (8002af4 <left+0x20c>)
 80029f2:	460b      	mov	r3, r1
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	440b      	add	r3, r1
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	2202      	movs	r2, #2
 80029fe:	701a      	strb	r2, [r3, #0]
			allPath[currentIndex].x1 = x1;
 8002a00:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <left+0x218>)
 8002a02:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a06:	4b3a      	ldr	r3, [pc, #232]	; (8002af0 <left+0x208>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4a39      	ldr	r2, [pc, #228]	; (8002af4 <left+0x20c>)
 8002a10:	460b      	mov	r3, r1
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	440b      	add	r3, r1
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3308      	adds	r3, #8
 8002a1c:	6018      	str	r0, [r3, #0]
			allPath[currentIndex].x2 = x2;
 8002a1e:	4b3a      	ldr	r3, [pc, #232]	; (8002b08 <left+0x220>)
 8002a20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a24:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <left+0x208>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	4a31      	ldr	r2, [pc, #196]	; (8002af4 <left+0x20c>)
 8002a2e:	460b      	mov	r3, r1
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	440b      	add	r3, r1
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4413      	add	r3, r2
 8002a38:	330c      	adds	r3, #12
 8002a3a:	6018      	str	r0, [r3, #0]
			allPath[currentIndex].y1 = y1;
 8002a3c:	4b33      	ldr	r3, [pc, #204]	; (8002b0c <left+0x224>)
 8002a3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a42:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <left+0x208>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	4619      	mov	r1, r3
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4a2a      	ldr	r2, [pc, #168]	; (8002af4 <left+0x20c>)
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	440b      	add	r3, r1
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	3310      	adds	r3, #16
 8002a58:	6018      	str	r0, [r3, #0]
			allPath[currentIndex].y2 = y2;
 8002a5a:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <left+0x228>)
 8002a5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a60:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <left+0x208>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	4619      	mov	r1, r3
 8002a66:	4610      	mov	r0, r2
 8002a68:	4a22      	ldr	r2, [pc, #136]	; (8002af4 <left+0x20c>)
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	440b      	add	r3, r1
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	3314      	adds	r3, #20
 8002a76:	6018      	str	r0, [r3, #0]
			currentIndex++;
 8002a78:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <left+0x208>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <left+0x208>)
 8002a82:	701a      	strb	r2, [r3, #0]
		}
		prevState = goLeft;
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <left+0x204>)
 8002a86:	2202      	movs	r2, #2
 8002a88:	701a      	strb	r2, [r3, #0]
		//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;
		x1 -= speed;
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <left+0x218>)
 8002a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <left+0x214>)
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	b21a      	sxth	r2, r3
 8002a9c:	4b18      	ldr	r3, [pc, #96]	; (8002b00 <left+0x218>)
 8002a9e:	801a      	strh	r2, [r3, #0]
		x2 -= speed;
 8002aa0:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <left+0x220>)
 8002aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <left+0x214>)
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	b21a      	sxth	r2, r3
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <left+0x220>)
 8002ab4:	801a      	strh	r2, [r3, #0]


		lcd_Fill(x1, y1, x2, y2, BLUE);
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <left+0x218>)
 8002ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002abc:	b298      	uxth	r0, r3
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <left+0x224>)
 8002ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ac4:	b299      	uxth	r1, r3
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <left+0x220>)
 8002ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <left+0x228>)
 8002ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	241f      	movs	r4, #31
 8002ad8:	9400      	str	r4, [sp, #0]
 8002ada:	f7fe fa2d 	bl	8000f38 <lcd_Fill>
		delete_path();
 8002ade:	f7ff fc77 	bl	80023d0 <delete_path>

}
 8002ae2:	bf00      	nop
 8002ae4:	3704      	adds	r7, #4
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd90      	pop	{r4, r7, pc}
 8002aea:	bf00      	nop
 8002aec:	2000001f 	.word	0x2000001f
 8002af0:	200002bd 	.word	0x200002bd
 8002af4:	200002c0 	.word	0x200002c0
 8002af8:	20000022 	.word	0x20000022
 8002afc:	20000024 	.word	0x20000024
 8002b00:	20000016 	.word	0x20000016
 8002b04:	20000020 	.word	0x20000020
 8002b08:	2000001a 	.word	0x2000001a
 8002b0c:	20000018 	.word	0x20000018
 8002b10:	2000001c 	.word	0x2000001c

08002b14 <up>:


void up() {
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af02      	add	r7, sp, #8

	if (prevState == goUp) {
 8002b1a:	4b85      	ldr	r3, [pc, #532]	; (8002d30 <up+0x21c>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d144      	bne.n	8002bac <up+0x98>
		if (allPath[currentIndex-1].length <= snakeTailLen) {
 8002b22:	4b84      	ldr	r3, [pc, #528]	; (8002d34 <up+0x220>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	1e5a      	subs	r2, r3, #1
 8002b28:	4983      	ldr	r1, [pc, #524]	; (8002d38 <up+0x224>)
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	440b      	add	r3, r1
 8002b34:	3304      	adds	r3, #4
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a80      	ldr	r2, [pc, #512]	; (8002d3c <up+0x228>)
 8002b3a:	8812      	ldrh	r2, [r2, #0]
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	dc19      	bgt.n	8002b74 <up+0x60>

					allPath[currentIndex-1].length += speed;
 8002b40:	4b7c      	ldr	r3, [pc, #496]	; (8002d34 <up+0x220>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	1e5a      	subs	r2, r3, #1
 8002b46:	497c      	ldr	r1, [pc, #496]	; (8002d38 <up+0x224>)
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	440b      	add	r3, r1
 8002b52:	3304      	adds	r3, #4
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a7a      	ldr	r2, [pc, #488]	; (8002d40 <up+0x22c>)
 8002b58:	8812      	ldrh	r2, [r2, #0]
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4a75      	ldr	r2, [pc, #468]	; (8002d34 <up+0x220>)
 8002b5e:	7812      	ldrb	r2, [r2, #0]
 8002b60:	3a01      	subs	r2, #1
 8002b62:	4419      	add	r1, r3
 8002b64:	4874      	ldr	r0, [pc, #464]	; (8002d38 <up+0x224>)
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4403      	add	r3, r0
 8002b70:	3304      	adds	r3, #4
 8002b72:	6019      	str	r1, [r3, #0]
				}

		allPath[currentIndex-1].y1 -= y1 ;
 8002b74:	4b6f      	ldr	r3, [pc, #444]	; (8002d34 <up+0x220>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	1e5a      	subs	r2, r3, #1
 8002b7a:	496f      	ldr	r1, [pc, #444]	; (8002d38 <up+0x224>)
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	3310      	adds	r3, #16
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a6e      	ldr	r2, [pc, #440]	; (8002d44 <up+0x230>)
 8002b8c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002b90:	4611      	mov	r1, r2
 8002b92:	4a68      	ldr	r2, [pc, #416]	; (8002d34 <up+0x220>)
 8002b94:	7812      	ldrb	r2, [r2, #0]
 8002b96:	3a01      	subs	r2, #1
 8002b98:	1a59      	subs	r1, r3, r1
 8002b9a:	4867      	ldr	r0, [pc, #412]	; (8002d38 <up+0x224>)
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4403      	add	r3, r0
 8002ba6:	3310      	adds	r3, #16
 8002ba8:	6019      	str	r1, [r3, #0]
 8002baa:	e08d      	b.n	8002cc8 <up+0x1b4>


	} else {
		if (currentIndex == 0) allPath[0].isTail = 0;
 8002bac:	4b61      	ldr	r3, [pc, #388]	; (8002d34 <up+0x220>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d103      	bne.n	8002bbc <up+0xa8>
 8002bb4:	4b60      	ldr	r3, [pc, #384]	; (8002d38 <up+0x224>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	705a      	strb	r2, [r3, #1]
 8002bba:	e00b      	b.n	8002bd4 <up+0xc0>
		else allPath[currentIndex-1].isTail = 1;
 8002bbc:	4b5d      	ldr	r3, [pc, #372]	; (8002d34 <up+0x220>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	1e5a      	subs	r2, r3, #1
 8002bc2:	495d      	ldr	r1, [pc, #372]	; (8002d38 <up+0x224>)
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	440b      	add	r3, r1
 8002bce:	3301      	adds	r3, #1
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].isTail = 0;
 8002bd4:	4b57      	ldr	r3, [pc, #348]	; (8002d34 <up+0x220>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4a57      	ldr	r2, [pc, #348]	; (8002d38 <up+0x224>)
 8002bdc:	460b      	mov	r3, r1
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	440b      	add	r3, r1
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	3301      	adds	r3, #1
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
		if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 8002bec:	4b53      	ldr	r3, [pc, #332]	; (8002d3c <up+0x228>)
 8002bee:	881a      	ldrh	r2, [r3, #0]
 8002bf0:	4b55      	ldr	r3, [pc, #340]	; (8002d48 <up+0x234>)
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d10e      	bne.n	8002c16 <up+0x102>
 8002bf8:	4b50      	ldr	r3, [pc, #320]	; (8002d3c <up+0x228>)
 8002bfa:	881a      	ldrh	r2, [r3, #0]
 8002bfc:	4b4d      	ldr	r3, [pc, #308]	; (8002d34 <up+0x220>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	4619      	mov	r1, r3
 8002c02:	4610      	mov	r0, r2
 8002c04:	4a4c      	ldr	r2, [pc, #304]	; (8002d38 <up+0x224>)
 8002c06:	460b      	mov	r3, r1
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	440b      	add	r3, r1
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3304      	adds	r3, #4
 8002c12:	6018      	str	r0, [r3, #0]
 8002c14:	e00b      	b.n	8002c2e <up+0x11a>
		else allPath[currentIndex].length = 0;
 8002c16:	4b47      	ldr	r3, [pc, #284]	; (8002d34 <up+0x220>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4a46      	ldr	r2, [pc, #280]	; (8002d38 <up+0x224>)
 8002c1e:	460b      	mov	r3, r1
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	440b      	add	r3, r1
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
		allPath[currentIndex].currentState = goUp;
 8002c2e:	4b41      	ldr	r3, [pc, #260]	; (8002d34 <up+0x220>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	4619      	mov	r1, r3
 8002c34:	4a40      	ldr	r2, [pc, #256]	; (8002d38 <up+0x224>)
 8002c36:	460b      	mov	r3, r1
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	440b      	add	r3, r1
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4413      	add	r3, r2
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].x1 = x1;
 8002c44:	4b41      	ldr	r3, [pc, #260]	; (8002d4c <up+0x238>)
 8002c46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c4a:	4b3a      	ldr	r3, [pc, #232]	; (8002d34 <up+0x220>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4610      	mov	r0, r2
 8002c52:	4a39      	ldr	r2, [pc, #228]	; (8002d38 <up+0x224>)
 8002c54:	460b      	mov	r3, r1
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	440b      	add	r3, r1
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3308      	adds	r3, #8
 8002c60:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].x2 = x2;
 8002c62:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <up+0x23c>)
 8002c64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c68:	4b32      	ldr	r3, [pc, #200]	; (8002d34 <up+0x220>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	4a31      	ldr	r2, [pc, #196]	; (8002d38 <up+0x224>)
 8002c72:	460b      	mov	r3, r1
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	440b      	add	r3, r1
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	330c      	adds	r3, #12
 8002c7e:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y1 = y1;
 8002c80:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <up+0x230>)
 8002c82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c86:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <up+0x220>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4a2a      	ldr	r2, [pc, #168]	; (8002d38 <up+0x224>)
 8002c90:	460b      	mov	r3, r1
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	440b      	add	r3, r1
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3310      	adds	r3, #16
 8002c9c:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y2 = y2;
 8002c9e:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <up+0x240>)
 8002ca0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002ca4:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <up+0x220>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <up+0x224>)
 8002cae:	460b      	mov	r3, r1
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	440b      	add	r3, r1
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3314      	adds	r3, #20
 8002cba:	6018      	str	r0, [r3, #0]
		currentIndex++;
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <up+0x220>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <up+0x220>)
 8002cc6:	701a      	strb	r2, [r3, #0]
	}
	prevState = goUp;
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <up+0x21c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
	//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;

	y1 -= speed;
 8002cce:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <up+0x230>)
 8002cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <up+0x22c>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	b21a      	sxth	r2, r3
 8002ce0:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <up+0x230>)
 8002ce2:	801a      	strh	r2, [r3, #0]
	y2 -= speed;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <up+0x240>)
 8002ce6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <up+0x22c>)
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	b21a      	sxth	r2, r3
 8002cf6:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <up+0x240>)
 8002cf8:	801a      	strh	r2, [r3, #0]


	lcd_Fill(x1, y1, x2, y2, BLUE);
 8002cfa:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <up+0x238>)
 8002cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d00:	b298      	uxth	r0, r3
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <up+0x230>)
 8002d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d08:	b299      	uxth	r1, r3
 8002d0a:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <up+0x23c>)
 8002d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <up+0x240>)
 8002d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	241f      	movs	r4, #31
 8002d1c:	9400      	str	r4, [sp, #0]
 8002d1e:	f7fe f90b 	bl	8000f38 <lcd_Fill>
	delete_path();
 8002d22:	f7ff fb55 	bl	80023d0 <delete_path>
}
 8002d26:	bf00      	nop
 8002d28:	3704      	adds	r7, #4
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd90      	pop	{r4, r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	2000001f 	.word	0x2000001f
 8002d34:	200002bd 	.word	0x200002bd
 8002d38:	200002c0 	.word	0x200002c0
 8002d3c:	20000022 	.word	0x20000022
 8002d40:	20000024 	.word	0x20000024
 8002d44:	20000018 	.word	0x20000018
 8002d48:	20000020 	.word	0x20000020
 8002d4c:	20000016 	.word	0x20000016
 8002d50:	2000001a 	.word	0x2000001a
 8002d54:	2000001c 	.word	0x2000001c

08002d58 <down>:


void down() {
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af02      	add	r7, sp, #8

	if (prevState == goDown) {
 8002d5e:	4b7f      	ldr	r3, [pc, #508]	; (8002f5c <down+0x204>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d138      	bne.n	8002dd8 <down+0x80>
		if (allPath[currentIndex-1].length <= snakeTailLen) {
 8002d66:	4b7e      	ldr	r3, [pc, #504]	; (8002f60 <down+0x208>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	1e5a      	subs	r2, r3, #1
 8002d6c:	497d      	ldr	r1, [pc, #500]	; (8002f64 <down+0x20c>)
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	3304      	adds	r3, #4
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a7a      	ldr	r2, [pc, #488]	; (8002f68 <down+0x210>)
 8002d7e:	8812      	ldrh	r2, [r2, #0]
 8002d80:	4293      	cmp	r3, r2
 8002d82:	dc19      	bgt.n	8002db8 <down+0x60>

			allPath[currentIndex-1].length += speed;
 8002d84:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <down+0x208>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	1e5a      	subs	r2, r3, #1
 8002d8a:	4976      	ldr	r1, [pc, #472]	; (8002f64 <down+0x20c>)
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	440b      	add	r3, r1
 8002d96:	3304      	adds	r3, #4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a74      	ldr	r2, [pc, #464]	; (8002f6c <down+0x214>)
 8002d9c:	8812      	ldrh	r2, [r2, #0]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4a6f      	ldr	r2, [pc, #444]	; (8002f60 <down+0x208>)
 8002da2:	7812      	ldrb	r2, [r2, #0]
 8002da4:	3a01      	subs	r2, #1
 8002da6:	4419      	add	r1, r3
 8002da8:	486e      	ldr	r0, [pc, #440]	; (8002f64 <down+0x20c>)
 8002daa:	4613      	mov	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4403      	add	r3, r0
 8002db4:	3304      	adds	r3, #4
 8002db6:	6019      	str	r1, [r3, #0]
		}

		allPath[currentIndex-1].y2 = y2;
 8002db8:	4b6d      	ldr	r3, [pc, #436]	; (8002f70 <down+0x218>)
 8002dba:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002dbe:	4b68      	ldr	r3, [pc, #416]	; (8002f60 <down+0x208>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	1e5a      	subs	r2, r3, #1
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	4967      	ldr	r1, [pc, #412]	; (8002f64 <down+0x20c>)
 8002dc8:	4613      	mov	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3314      	adds	r3, #20
 8002dd4:	6018      	str	r0, [r3, #0]
 8002dd6:	e08d      	b.n	8002ef4 <down+0x19c>
	} else {
		if (currentIndex == 0) allPath[0].isTail = 0;
 8002dd8:	4b61      	ldr	r3, [pc, #388]	; (8002f60 <down+0x208>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d103      	bne.n	8002de8 <down+0x90>
 8002de0:	4b60      	ldr	r3, [pc, #384]	; (8002f64 <down+0x20c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	705a      	strb	r2, [r3, #1]
 8002de6:	e00b      	b.n	8002e00 <down+0xa8>
		else allPath[currentIndex-1].isTail = 1;
 8002de8:	4b5d      	ldr	r3, [pc, #372]	; (8002f60 <down+0x208>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	1e5a      	subs	r2, r3, #1
 8002dee:	495d      	ldr	r1, [pc, #372]	; (8002f64 <down+0x20c>)
 8002df0:	4613      	mov	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].isTail = 0;
 8002e00:	4b57      	ldr	r3, [pc, #348]	; (8002f60 <down+0x208>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	4619      	mov	r1, r3
 8002e06:	4a57      	ldr	r2, [pc, #348]	; (8002f64 <down+0x20c>)
 8002e08:	460b      	mov	r3, r1
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	440b      	add	r3, r1
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	3301      	adds	r3, #1
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
		if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 8002e18:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <down+0x210>)
 8002e1a:	881a      	ldrh	r2, [r3, #0]
 8002e1c:	4b55      	ldr	r3, [pc, #340]	; (8002f74 <down+0x21c>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d10e      	bne.n	8002e42 <down+0xea>
 8002e24:	4b50      	ldr	r3, [pc, #320]	; (8002f68 <down+0x210>)
 8002e26:	881a      	ldrh	r2, [r3, #0]
 8002e28:	4b4d      	ldr	r3, [pc, #308]	; (8002f60 <down+0x208>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4a4c      	ldr	r2, [pc, #304]	; (8002f64 <down+0x20c>)
 8002e32:	460b      	mov	r3, r1
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	440b      	add	r3, r1
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	6018      	str	r0, [r3, #0]
 8002e40:	e00b      	b.n	8002e5a <down+0x102>
		else allPath[currentIndex].length = 0;
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <down+0x208>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	4619      	mov	r1, r3
 8002e48:	4a46      	ldr	r2, [pc, #280]	; (8002f64 <down+0x20c>)
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	440b      	add	r3, r1
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	3304      	adds	r3, #4
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]
		allPath[currentIndex].currentState = goDown;
 8002e5a:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <down+0x208>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4a40      	ldr	r2, [pc, #256]	; (8002f64 <down+0x20c>)
 8002e62:	460b      	mov	r3, r1
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	440b      	add	r3, r1
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].x1 = x1;
 8002e70:	4b41      	ldr	r3, [pc, #260]	; (8002f78 <down+0x220>)
 8002e72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e76:	4b3a      	ldr	r3, [pc, #232]	; (8002f60 <down+0x208>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4a39      	ldr	r2, [pc, #228]	; (8002f64 <down+0x20c>)
 8002e80:	460b      	mov	r3, r1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	440b      	add	r3, r1
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3308      	adds	r3, #8
 8002e8c:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].x2 = x2;
 8002e8e:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <down+0x224>)
 8002e90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e94:	4b32      	ldr	r3, [pc, #200]	; (8002f60 <down+0x208>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4a31      	ldr	r2, [pc, #196]	; (8002f64 <down+0x20c>)
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	440b      	add	r3, r1
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y1 = y1;
 8002eac:	4b34      	ldr	r3, [pc, #208]	; (8002f80 <down+0x228>)
 8002eae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002eb2:	4b2b      	ldr	r3, [pc, #172]	; (8002f60 <down+0x208>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4a2a      	ldr	r2, [pc, #168]	; (8002f64 <down+0x20c>)
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	440b      	add	r3, r1
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3310      	adds	r3, #16
 8002ec8:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y2 = y2;
 8002eca:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <down+0x218>)
 8002ecc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002ed0:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <down+0x208>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4610      	mov	r0, r2
 8002ed8:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <down+0x20c>)
 8002eda:	460b      	mov	r3, r1
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	440b      	add	r3, r1
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3314      	adds	r3, #20
 8002ee6:	6018      	str	r0, [r3, #0]
		currentIndex++;
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <down+0x208>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	3301      	adds	r3, #1
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	4b1b      	ldr	r3, [pc, #108]	; (8002f60 <down+0x208>)
 8002ef2:	701a      	strb	r2, [r3, #0]
	}
	prevState = goDown;
 8002ef4:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <down+0x204>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
	//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;
		y1 += speed;
 8002efa:	4b21      	ldr	r3, [pc, #132]	; (8002f80 <down+0x228>)
 8002efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <down+0x214>)
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	b21a      	sxth	r2, r3
 8002f0c:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <down+0x228>)
 8002f0e:	801a      	strh	r2, [r3, #0]
		y2 += speed;
 8002f10:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <down+0x218>)
 8002f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <down+0x214>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	b21a      	sxth	r2, r3
 8002f22:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <down+0x218>)
 8002f24:	801a      	strh	r2, [r3, #0]

		lcd_Fill(x1, y1, x2, y2, BLUE);
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <down+0x220>)
 8002f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f2c:	b298      	uxth	r0, r3
 8002f2e:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <down+0x228>)
 8002f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f34:	b299      	uxth	r1, r3
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <down+0x224>)
 8002f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <down+0x218>)
 8002f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	241f      	movs	r4, #31
 8002f48:	9400      	str	r4, [sp, #0]
 8002f4a:	f7fd fff5 	bl	8000f38 <lcd_Fill>
		delete_path();
 8002f4e:	f7ff fa3f 	bl	80023d0 <delete_path>
}
 8002f52:	bf00      	nop
 8002f54:	3704      	adds	r7, #4
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd90      	pop	{r4, r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2000001f 	.word	0x2000001f
 8002f60:	200002bd 	.word	0x200002bd
 8002f64:	200002c0 	.word	0x200002c0
 8002f68:	20000022 	.word	0x20000022
 8002f6c:	20000024 	.word	0x20000024
 8002f70:	2000001c 	.word	0x2000001c
 8002f74:	20000020 	.word	0x20000020
 8002f78:	20000016 	.word	0x20000016
 8002f7c:	2000001a 	.word	0x2000001a
 8002f80:	20000018 	.word	0x20000018

08002f84 <eat_food_success>:

void eat_food_success() {
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af02      	add	r7, sp, #8
	CREATE_FOOD = 1; //QUAY LAI HÀM TẠO FRUIT
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <eat_food_success+0x50>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	801a      	strh	r2, [r3, #0]
	count++; //tăng số điểm
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <eat_food_success+0x54>)
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <eat_food_success+0x54>)
 8002f9a:	801a      	strh	r2, [r3, #0]
	snakeTailLen += 10;
 8002f9c:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <eat_food_success+0x58>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	330a      	adds	r3, #10
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <eat_food_success+0x58>)
 8002fa6:	801a      	strh	r2, [r3, #0]

	lcd_Fill(x_food, y_food, x_food+5, y_food+5, WHITE);
 8002fa8:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <eat_food_success+0x5c>)
 8002faa:	8818      	ldrh	r0, [r3, #0]
 8002fac:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <eat_food_success+0x60>)
 8002fae:	8819      	ldrh	r1, [r3, #0]
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <eat_food_success+0x5c>)
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	3305      	adds	r3, #5
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <eat_food_success+0x60>)
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	3305      	adds	r3, #5
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002fc4:	9400      	str	r4, [sp, #0]
 8002fc6:	f7fd ffb7 	bl	8000f38 <lcd_Fill>
}
 8002fca:	bf00      	nop
 8002fcc:	3704      	adds	r7, #4
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd90      	pop	{r4, r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000026 	.word	0x20000026
 8002fd8:	20000598 	.word	0x20000598
 8002fdc:	20000022 	.word	0x20000022
 8002fe0:	20000594 	.word	0x20000594
 8002fe4:	20000596 	.word	0x20000596

08002fe8 <food>:

void food() {
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af02      	add	r7, sp, #8
	if(CREATE_FOOD == 1) { // Tạo mồi nhậu lần đầu tiên
 8002fee:	4b95      	ldr	r3, [pc, #596]	; (8003244 <food+0x25c>)
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d130      	bne.n	8003058 <food+0x70>
		x_food = random_eat(0,x_max-5);
 8002ff6:	4b94      	ldr	r3, [pc, #592]	; (8003248 <food+0x260>)
 8002ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b05      	subs	r3, #5
 8003000:	b29b      	uxth	r3, r3
 8003002:	4619      	mov	r1, r3
 8003004:	2000      	movs	r0, #0
 8003006:	f7fe fd78 	bl	8001afa <random_eat>
 800300a:	4603      	mov	r3, r0
 800300c:	461a      	mov	r2, r3
 800300e:	4b8f      	ldr	r3, [pc, #572]	; (800324c <food+0x264>)
 8003010:	801a      	strh	r2, [r3, #0]
		y_food = random_eat(0,y_max-5);
 8003012:	4b8f      	ldr	r3, [pc, #572]	; (8003250 <food+0x268>)
 8003014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003018:	b29b      	uxth	r3, r3
 800301a:	3b05      	subs	r3, #5
 800301c:	b29b      	uxth	r3, r3
 800301e:	4619      	mov	r1, r3
 8003020:	2000      	movs	r0, #0
 8003022:	f7fe fd6a 	bl	8001afa <random_eat>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	4b8a      	ldr	r3, [pc, #552]	; (8003254 <food+0x26c>)
 800302c:	801a      	strh	r2, [r3, #0]
		lcd_Fill(x_food, y_food, x_food+5, y_food+5, RED);
 800302e:	4b87      	ldr	r3, [pc, #540]	; (800324c <food+0x264>)
 8003030:	8818      	ldrh	r0, [r3, #0]
 8003032:	4b88      	ldr	r3, [pc, #544]	; (8003254 <food+0x26c>)
 8003034:	8819      	ldrh	r1, [r3, #0]
 8003036:	4b85      	ldr	r3, [pc, #532]	; (800324c <food+0x264>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	3305      	adds	r3, #5
 800303c:	b29a      	uxth	r2, r3
 800303e:	4b85      	ldr	r3, [pc, #532]	; (8003254 <food+0x26c>)
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	3305      	adds	r3, #5
 8003044:	b29b      	uxth	r3, r3
 8003046:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800304a:	9400      	str	r4, [sp, #0]
 800304c:	f7fd ff74 	bl	8000f38 <lcd_Fill>
		CREATE_FOOD = 0; // tránh tạo liên tục mồi nhậu
 8003050:	4b7c      	ldr	r3, [pc, #496]	; (8003244 <food+0x25c>)
 8003052:	2200      	movs	r2, #0
 8003054:	801a      	strh	r2, [r3, #0]
			)
			) {
			eat_food_success();
		}
	}
}
 8003056:	e0f1      	b.n	800323c <food+0x254>
		if((x2 == x_food) && (
 8003058:	4b7f      	ldr	r3, [pc, #508]	; (8003258 <food+0x270>)
 800305a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800305e:	461a      	mov	r2, r3
 8003060:	4b7a      	ldr	r3, [pc, #488]	; (800324c <food+0x264>)
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d133      	bne.n	80030d0 <food+0xe8>
				(y1 >= y_food && y1 <= y_food+5)
 8003068:	4b7c      	ldr	r3, [pc, #496]	; (800325c <food+0x274>)
 800306a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800306e:	461a      	mov	r2, r3
 8003070:	4b78      	ldr	r3, [pc, #480]	; (8003254 <food+0x26c>)
 8003072:	881b      	ldrh	r3, [r3, #0]
		if((x2 == x_food) && (
 8003074:	429a      	cmp	r2, r3
 8003076:	db08      	blt.n	800308a <food+0xa2>
				(y1 >= y_food && y1 <= y_food+5)
 8003078:	4b78      	ldr	r3, [pc, #480]	; (800325c <food+0x274>)
 800307a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800307e:	461a      	mov	r2, r3
 8003080:	4b74      	ldr	r3, [pc, #464]	; (8003254 <food+0x26c>)
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	3305      	adds	r3, #5
 8003086:	429a      	cmp	r2, r3
 8003088:	dd20      	ble.n	80030cc <food+0xe4>
			||	(y2 >= y_food && y2 <= y_food+5)
 800308a:	4b75      	ldr	r3, [pc, #468]	; (8003260 <food+0x278>)
 800308c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003090:	461a      	mov	r2, r3
 8003092:	4b70      	ldr	r3, [pc, #448]	; (8003254 <food+0x26c>)
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	db08      	blt.n	80030ac <food+0xc4>
 800309a:	4b71      	ldr	r3, [pc, #452]	; (8003260 <food+0x278>)
 800309c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b6c      	ldr	r3, [pc, #432]	; (8003254 <food+0x26c>)
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	3305      	adds	r3, #5
 80030a8:	429a      	cmp	r2, r3
 80030aa:	dd0f      	ble.n	80030cc <food+0xe4>
			||  (y1 <= y_food && y2 >= y_food+5)
 80030ac:	4b6b      	ldr	r3, [pc, #428]	; (800325c <food+0x274>)
 80030ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b67      	ldr	r3, [pc, #412]	; (8003254 <food+0x26c>)
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	dc09      	bgt.n	80030d0 <food+0xe8>
 80030bc:	4b65      	ldr	r3, [pc, #404]	; (8003254 <food+0x26c>)
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	3304      	adds	r3, #4
 80030c2:	4a67      	ldr	r2, [pc, #412]	; (8003260 <food+0x278>)
 80030c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80030c8:	4293      	cmp	r3, r2
 80030ca:	da01      	bge.n	80030d0 <food+0xe8>
			eat_food_success();
 80030cc:	f7ff ff5a 	bl	8002f84 <eat_food_success>
		if((x1 == x_food+5) && (
 80030d0:	4b64      	ldr	r3, [pc, #400]	; (8003264 <food+0x27c>)
 80030d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b5c      	ldr	r3, [pc, #368]	; (800324c <food+0x264>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	3305      	adds	r3, #5
 80030de:	429a      	cmp	r2, r3
 80030e0:	d133      	bne.n	800314a <food+0x162>
				(y1 >= y_food && y1 <= y_food+5)
 80030e2:	4b5e      	ldr	r3, [pc, #376]	; (800325c <food+0x274>)
 80030e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030e8:	461a      	mov	r2, r3
 80030ea:	4b5a      	ldr	r3, [pc, #360]	; (8003254 <food+0x26c>)
 80030ec:	881b      	ldrh	r3, [r3, #0]
		if((x1 == x_food+5) && (
 80030ee:	429a      	cmp	r2, r3
 80030f0:	db08      	blt.n	8003104 <food+0x11c>
				(y1 >= y_food && y1 <= y_food+5)
 80030f2:	4b5a      	ldr	r3, [pc, #360]	; (800325c <food+0x274>)
 80030f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4b56      	ldr	r3, [pc, #344]	; (8003254 <food+0x26c>)
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	3305      	adds	r3, #5
 8003100:	429a      	cmp	r2, r3
 8003102:	dd20      	ble.n	8003146 <food+0x15e>
			||	(y2 >= y_food && y2 <= y_food+5)
 8003104:	4b56      	ldr	r3, [pc, #344]	; (8003260 <food+0x278>)
 8003106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800310a:	461a      	mov	r2, r3
 800310c:	4b51      	ldr	r3, [pc, #324]	; (8003254 <food+0x26c>)
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	db08      	blt.n	8003126 <food+0x13e>
 8003114:	4b52      	ldr	r3, [pc, #328]	; (8003260 <food+0x278>)
 8003116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800311a:	461a      	mov	r2, r3
 800311c:	4b4d      	ldr	r3, [pc, #308]	; (8003254 <food+0x26c>)
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	3305      	adds	r3, #5
 8003122:	429a      	cmp	r2, r3
 8003124:	dd0f      	ble.n	8003146 <food+0x15e>
			||  (y1 <= y_food && y2 >= y_food+5)
 8003126:	4b4d      	ldr	r3, [pc, #308]	; (800325c <food+0x274>)
 8003128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800312c:	461a      	mov	r2, r3
 800312e:	4b49      	ldr	r3, [pc, #292]	; (8003254 <food+0x26c>)
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	dc09      	bgt.n	800314a <food+0x162>
 8003136:	4b47      	ldr	r3, [pc, #284]	; (8003254 <food+0x26c>)
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	3304      	adds	r3, #4
 800313c:	4a48      	ldr	r2, [pc, #288]	; (8003260 <food+0x278>)
 800313e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003142:	4293      	cmp	r3, r2
 8003144:	da01      	bge.n	800314a <food+0x162>
			eat_food_success();
 8003146:	f7ff ff1d 	bl	8002f84 <eat_food_success>
		if((y2 == y_food) && (
 800314a:	4b45      	ldr	r3, [pc, #276]	; (8003260 <food+0x278>)
 800314c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003150:	461a      	mov	r2, r3
 8003152:	4b40      	ldr	r3, [pc, #256]	; (8003254 <food+0x26c>)
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d133      	bne.n	80031c2 <food+0x1da>
				(x1 >= x_food && x1 <= x_food+5)
 800315a:	4b42      	ldr	r3, [pc, #264]	; (8003264 <food+0x27c>)
 800315c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003160:	461a      	mov	r2, r3
 8003162:	4b3a      	ldr	r3, [pc, #232]	; (800324c <food+0x264>)
 8003164:	881b      	ldrh	r3, [r3, #0]
		if((y2 == y_food) && (
 8003166:	429a      	cmp	r2, r3
 8003168:	db08      	blt.n	800317c <food+0x194>
				(x1 >= x_food && x1 <= x_food+5)
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <food+0x27c>)
 800316c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003170:	461a      	mov	r2, r3
 8003172:	4b36      	ldr	r3, [pc, #216]	; (800324c <food+0x264>)
 8003174:	881b      	ldrh	r3, [r3, #0]
 8003176:	3305      	adds	r3, #5
 8003178:	429a      	cmp	r2, r3
 800317a:	dd20      	ble.n	80031be <food+0x1d6>
			||	(x2 >= x_food && x2 <= x_food+5)
 800317c:	4b36      	ldr	r3, [pc, #216]	; (8003258 <food+0x270>)
 800317e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003182:	461a      	mov	r2, r3
 8003184:	4b31      	ldr	r3, [pc, #196]	; (800324c <food+0x264>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	db08      	blt.n	800319e <food+0x1b6>
 800318c:	4b32      	ldr	r3, [pc, #200]	; (8003258 <food+0x270>)
 800318e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003192:	461a      	mov	r2, r3
 8003194:	4b2d      	ldr	r3, [pc, #180]	; (800324c <food+0x264>)
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	3305      	adds	r3, #5
 800319a:	429a      	cmp	r2, r3
 800319c:	dd0f      	ble.n	80031be <food+0x1d6>
			||  (x1 <= x_food && x2 >= x_food+5)
 800319e:	4b31      	ldr	r3, [pc, #196]	; (8003264 <food+0x27c>)
 80031a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b29      	ldr	r3, [pc, #164]	; (800324c <food+0x264>)
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	dc09      	bgt.n	80031c2 <food+0x1da>
 80031ae:	4b27      	ldr	r3, [pc, #156]	; (800324c <food+0x264>)
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	3304      	adds	r3, #4
 80031b4:	4a28      	ldr	r2, [pc, #160]	; (8003258 <food+0x270>)
 80031b6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80031ba:	4293      	cmp	r3, r2
 80031bc:	da01      	bge.n	80031c2 <food+0x1da>
			eat_food_success();
 80031be:	f7ff fee1 	bl	8002f84 <eat_food_success>
		if((y1 == y_food+5) && (
 80031c2:	4b26      	ldr	r3, [pc, #152]	; (800325c <food+0x274>)
 80031c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b22      	ldr	r3, [pc, #136]	; (8003254 <food+0x26c>)
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	3305      	adds	r3, #5
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d133      	bne.n	800323c <food+0x254>
				(x1 >= x_food && x1 <= x_food+5)
 80031d4:	4b23      	ldr	r3, [pc, #140]	; (8003264 <food+0x27c>)
 80031d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031da:	461a      	mov	r2, r3
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <food+0x264>)
 80031de:	881b      	ldrh	r3, [r3, #0]
		if((y1 == y_food+5) && (
 80031e0:	429a      	cmp	r2, r3
 80031e2:	db08      	blt.n	80031f6 <food+0x20e>
				(x1 >= x_food && x1 <= x_food+5)
 80031e4:	4b1f      	ldr	r3, [pc, #124]	; (8003264 <food+0x27c>)
 80031e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b17      	ldr	r3, [pc, #92]	; (800324c <food+0x264>)
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	3305      	adds	r3, #5
 80031f2:	429a      	cmp	r2, r3
 80031f4:	dd20      	ble.n	8003238 <food+0x250>
			||	(x2 >= x_food && x2 <= x_food+5)
 80031f6:	4b18      	ldr	r3, [pc, #96]	; (8003258 <food+0x270>)
 80031f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031fc:	461a      	mov	r2, r3
 80031fe:	4b13      	ldr	r3, [pc, #76]	; (800324c <food+0x264>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	db08      	blt.n	8003218 <food+0x230>
 8003206:	4b14      	ldr	r3, [pc, #80]	; (8003258 <food+0x270>)
 8003208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800320c:	461a      	mov	r2, r3
 800320e:	4b0f      	ldr	r3, [pc, #60]	; (800324c <food+0x264>)
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	3305      	adds	r3, #5
 8003214:	429a      	cmp	r2, r3
 8003216:	dd0f      	ble.n	8003238 <food+0x250>
			||  (x1 <= x_food && x2 >= x_food+5)
 8003218:	4b12      	ldr	r3, [pc, #72]	; (8003264 <food+0x27c>)
 800321a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800321e:	461a      	mov	r2, r3
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <food+0x264>)
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	dc09      	bgt.n	800323c <food+0x254>
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <food+0x264>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	3304      	adds	r3, #4
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <food+0x270>)
 8003230:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003234:	4293      	cmp	r3, r2
 8003236:	da01      	bge.n	800323c <food+0x254>
			eat_food_success();
 8003238:	f7ff fea4 	bl	8002f84 <eat_food_success>
}
 800323c:	bf00      	nop
 800323e:	3704      	adds	r7, #4
 8003240:	46bd      	mov	sp, r7
 8003242:	bd90      	pop	{r4, r7, pc}
 8003244:	20000026 	.word	0x20000026
 8003248:	20000010 	.word	0x20000010
 800324c:	20000594 	.word	0x20000594
 8003250:	20000012 	.word	0x20000012
 8003254:	20000596 	.word	0x20000596
 8003258:	2000001a 	.word	0x2000001a
 800325c:	20000018 	.word	0x20000018
 8003260:	2000001c 	.word	0x2000001c
 8003264:	20000016 	.word	0x20000016

08003268 <move>:


void move() {
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b083      	sub	sp, #12
 800326c:	af02      	add	r7, sp, #8
	if(x1 <= 5 || x1 >= x_max || x2 <= 5 || x2 >= x_max
 800326e:	4b69      	ldr	r3, [pc, #420]	; (8003414 <move+0x1ac>)
 8003270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003274:	2b05      	cmp	r3, #5
 8003276:	dd34      	ble.n	80032e2 <move+0x7a>
 8003278:	4b66      	ldr	r3, [pc, #408]	; (8003414 <move+0x1ac>)
 800327a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800327e:	4b66      	ldr	r3, [pc, #408]	; (8003418 <move+0x1b0>)
 8003280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003284:	429a      	cmp	r2, r3
 8003286:	da2c      	bge.n	80032e2 <move+0x7a>
 8003288:	4b64      	ldr	r3, [pc, #400]	; (800341c <move+0x1b4>)
 800328a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800328e:	2b05      	cmp	r3, #5
 8003290:	dd27      	ble.n	80032e2 <move+0x7a>
 8003292:	4b62      	ldr	r3, [pc, #392]	; (800341c <move+0x1b4>)
 8003294:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003298:	4b5f      	ldr	r3, [pc, #380]	; (8003418 <move+0x1b0>)
 800329a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800329e:	429a      	cmp	r2, r3
 80032a0:	da1f      	bge.n	80032e2 <move+0x7a>
	|| y1 <= y_min || y1 >= y_max || y2 <= y_min || y2 >= y_max) { //đụng tường
 80032a2:	4b5f      	ldr	r3, [pc, #380]	; (8003420 <move+0x1b8>)
 80032a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80032a8:	4b5e      	ldr	r3, [pc, #376]	; (8003424 <move+0x1bc>)
 80032aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	dd17      	ble.n	80032e2 <move+0x7a>
 80032b2:	4b5b      	ldr	r3, [pc, #364]	; (8003420 <move+0x1b8>)
 80032b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80032b8:	4b5b      	ldr	r3, [pc, #364]	; (8003428 <move+0x1c0>)
 80032ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032be:	429a      	cmp	r2, r3
 80032c0:	da0f      	bge.n	80032e2 <move+0x7a>
 80032c2:	4b5a      	ldr	r3, [pc, #360]	; (800342c <move+0x1c4>)
 80032c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80032c8:	4b56      	ldr	r3, [pc, #344]	; (8003424 <move+0x1bc>)
 80032ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	dd07      	ble.n	80032e2 <move+0x7a>
 80032d2:	4b56      	ldr	r3, [pc, #344]	; (800342c <move+0x1c4>)
 80032d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80032d8:	4b53      	ldr	r3, [pc, #332]	; (8003428 <move+0x1c0>)
 80032da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032de:	429a      	cmp	r2, r3
 80032e0:	db02      	blt.n	80032e8 <move+0x80>
			game_over();
 80032e2:	f7fe fcb7 	bl	8001c54 <game_over>
			return;
 80032e6:	e092      	b.n	800340e <move+0x1a6>
	}
	led7_SetDigit(0, 0, 0);
 80032e8:	2200      	movs	r2, #0
 80032ea:	2100      	movs	r1, #0
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7fe fb15 	bl	800191c <led7_SetDigit>
	led7_SetDigit(0, 1, 0);
 80032f2:	2200      	movs	r2, #0
 80032f4:	2101      	movs	r1, #1
 80032f6:	2000      	movs	r0, #0
 80032f8:	f7fe fb10 	bl	800191c <led7_SetDigit>
	led7_SetDigit(count/10, 2, 0);
 80032fc:	4b4c      	ldr	r3, [pc, #304]	; (8003430 <move+0x1c8>)
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	4a4c      	ldr	r2, [pc, #304]	; (8003434 <move+0x1cc>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	08db      	lsrs	r3, r3, #3
 8003308:	b29b      	uxth	r3, r3
 800330a:	2200      	movs	r2, #0
 800330c:	2102      	movs	r1, #2
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe fb04 	bl	800191c <led7_SetDigit>
	led7_SetDigit(count%10, 3, 0); //hiển thị điểm số
 8003314:	4b46      	ldr	r3, [pc, #280]	; (8003430 <move+0x1c8>)
 8003316:	881a      	ldrh	r2, [r3, #0]
 8003318:	4b46      	ldr	r3, [pc, #280]	; (8003434 <move+0x1cc>)
 800331a:	fba3 1302 	umull	r1, r3, r3, r2
 800331e:	08d9      	lsrs	r1, r3, #3
 8003320:	460b      	mov	r3, r1
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	b29b      	uxth	r3, r3
 800332c:	2200      	movs	r2, #0
 800332e:	2103      	movs	r1, #3
 8003330:	4618      	mov	r0, r3
 8003332:	f7fe faf3 	bl	800191c <led7_SetDigit>
//	count++;

	food();
 8003336:	f7ff fe57 	bl	8002fe8 <food>
	snakeSelfBite (x1,y1,x2,y2, 0);
 800333a:	4b36      	ldr	r3, [pc, #216]	; (8003414 <move+0x1ac>)
 800333c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003340:	4b37      	ldr	r3, [pc, #220]	; (8003420 <move+0x1b8>)
 8003342:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003346:	4b35      	ldr	r3, [pc, #212]	; (800341c <move+0x1b4>)
 8003348:	f9b3 2000 	ldrsh.w	r2, [r3]
 800334c:	4b37      	ldr	r3, [pc, #220]	; (800342c <move+0x1c4>)
 800334e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003352:	2400      	movs	r4, #0
 8003354:	9400      	str	r4, [sp, #0]
 8003356:	f7fe fddd 	bl	8001f14 <snakeSelfBite>
	moveWall(); // mode 3
 800335a:	f7fe fe11 	bl	8001f80 <moveWall>
	checkCollision(); //mode 2 va 3
 800335e:	f7fe ff73 	bl	8002248 <checkCollision>
	//snake move with button
	if (button_count[6] == 1) {
 8003362:	4b35      	ldr	r3, [pc, #212]	; (8003438 <move+0x1d0>)
 8003364:	899b      	ldrh	r3, [r3, #12]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d10b      	bne.n	8003382 <move+0x11a>
		if (firstState != goDown) {
 800336a:	4b34      	ldr	r3, [pc, #208]	; (800343c <move+0x1d4>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d036      	beq.n	80033e0 <move+0x178>
			prevState = firstState;
 8003372:	4b32      	ldr	r3, [pc, #200]	; (800343c <move+0x1d4>)
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	4b32      	ldr	r3, [pc, #200]	; (8003440 <move+0x1d8>)
 8003378:	701a      	strb	r2, [r3, #0]
			firstState = goUp;
 800337a:	4b30      	ldr	r3, [pc, #192]	; (800343c <move+0x1d4>)
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
 8003380:	e02e      	b.n	80033e0 <move+0x178>
		}

	}
	else if (button_count[14] == 1) {
 8003382:	4b2d      	ldr	r3, [pc, #180]	; (8003438 <move+0x1d0>)
 8003384:	8b9b      	ldrh	r3, [r3, #28]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d10b      	bne.n	80033a2 <move+0x13a>
		if (firstState != goUp) {
 800338a:	4b2c      	ldr	r3, [pc, #176]	; (800343c <move+0x1d4>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d026      	beq.n	80033e0 <move+0x178>
			prevState = firstState;
 8003392:	4b2a      	ldr	r3, [pc, #168]	; (800343c <move+0x1d4>)
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	4b2a      	ldr	r3, [pc, #168]	; (8003440 <move+0x1d8>)
 8003398:	701a      	strb	r2, [r3, #0]
			firstState = goDown;
 800339a:	4b28      	ldr	r3, [pc, #160]	; (800343c <move+0x1d4>)
 800339c:	2201      	movs	r2, #1
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e01e      	b.n	80033e0 <move+0x178>
		}

	}
	else if (button_count[11] == 1) {
 80033a2:	4b25      	ldr	r3, [pc, #148]	; (8003438 <move+0x1d0>)
 80033a4:	8adb      	ldrh	r3, [r3, #22]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d10b      	bne.n	80033c2 <move+0x15a>
		if (firstState != goLeft) {
 80033aa:	4b24      	ldr	r3, [pc, #144]	; (800343c <move+0x1d4>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d016      	beq.n	80033e0 <move+0x178>
			prevState = firstState;
 80033b2:	4b22      	ldr	r3, [pc, #136]	; (800343c <move+0x1d4>)
 80033b4:	781a      	ldrb	r2, [r3, #0]
 80033b6:	4b22      	ldr	r3, [pc, #136]	; (8003440 <move+0x1d8>)
 80033b8:	701a      	strb	r2, [r3, #0]
			firstState = goRight;
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <move+0x1d4>)
 80033bc:	2203      	movs	r2, #3
 80033be:	701a      	strb	r2, [r3, #0]
 80033c0:	e00e      	b.n	80033e0 <move+0x178>
		}

	}
	else if (button_count[9] == 1) {
 80033c2:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <move+0x1d0>)
 80033c4:	8a5b      	ldrh	r3, [r3, #18]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d10a      	bne.n	80033e0 <move+0x178>
		if (firstState != goRight) {
 80033ca:	4b1c      	ldr	r3, [pc, #112]	; (800343c <move+0x1d4>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d006      	beq.n	80033e0 <move+0x178>
			prevState = firstState;
 80033d2:	4b1a      	ldr	r3, [pc, #104]	; (800343c <move+0x1d4>)
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <move+0x1d8>)
 80033d8:	701a      	strb	r2, [r3, #0]
			firstState = goLeft;
 80033da:	4b18      	ldr	r3, [pc, #96]	; (800343c <move+0x1d4>)
 80033dc:	2202      	movs	r2, #2
 80033de:	701a      	strb	r2, [r3, #0]
		}

	}
	switch (firstState) {
 80033e0:	4b16      	ldr	r3, [pc, #88]	; (800343c <move+0x1d4>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d00c      	beq.n	8003402 <move+0x19a>
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	dc0d      	bgt.n	8003408 <move+0x1a0>
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <move+0x18e>
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d003      	beq.n	80033fc <move+0x194>
 80033f4:	e008      	b.n	8003408 <move+0x1a0>
		case goUp:
			up();
 80033f6:	f7ff fb8d 	bl	8002b14 <up>
			break;
 80033fa:	e008      	b.n	800340e <move+0x1a6>
		case goDown:
			down();
 80033fc:	f7ff fcac 	bl	8002d58 <down>
			break;
 8003400:	e005      	b.n	800340e <move+0x1a6>
		case goRight:
			right();
 8003402:	f7ff f95b 	bl	80026bc <right>
			break;
 8003406:	e002      	b.n	800340e <move+0x1a6>
		default:
			left();
 8003408:	f7ff fa6e 	bl	80028e8 <left>
			break;
 800340c:	bf00      	nop
	}

}
 800340e:	3704      	adds	r7, #4
 8003410:	46bd      	mov	sp, r7
 8003412:	bd90      	pop	{r4, r7, pc}
 8003414:	20000016 	.word	0x20000016
 8003418:	20000010 	.word	0x20000010
 800341c:	2000001a 	.word	0x2000001a
 8003420:	20000018 	.word	0x20000018
 8003424:	20000014 	.word	0x20000014
 8003428:	20000012 	.word	0x20000012
 800342c:	2000001c 	.word	0x2000001c
 8003430:	20000598 	.word	0x20000598
 8003434:	cccccccd 	.word	0xcccccccd
 8003438:	200001e4 	.word	0x200001e4
 800343c:	2000001e 	.word	0x2000001e
 8003440:	2000001f 	.word	0x2000001f

08003444 <wall>:

void wall() {
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(5, y_min, x_max, y_max, RED); //TẠO TƯỜNG
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <wall+0x30>)
 800344c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003450:	b299      	uxth	r1, r3
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <wall+0x34>)
 8003454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003458:	b29a      	uxth	r2, r3
 800345a:	4b08      	ldr	r3, [pc, #32]	; (800347c <wall+0x38>)
 800345c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003460:	b29b      	uxth	r3, r3
 8003462:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8003466:	9000      	str	r0, [sp, #0]
 8003468:	2005      	movs	r0, #5
 800346a:	f7fd fe36 	bl	80010da <lcd_DrawRectangle>
}
 800346e:	bf00      	nop
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000014 	.word	0x20000014
 8003478:	20000010 	.word	0x20000010
 800347c:	20000012 	.word	0x20000012

08003480 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003484:	4803      	ldr	r0, [pc, #12]	; (8003494 <timer_init+0x14>)
 8003486:	f003 faa5 	bl	80069d4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 800348a:	4803      	ldr	r0, [pc, #12]	; (8003498 <timer_init+0x18>)
 800348c:	f003 fa3a 	bl	8006904 <HAL_TIM_Base_Start>
}
 8003490:	bf00      	nop
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000644 	.word	0x20000644
 8003498:	200005fc 	.word	0x200005fc

0800349c <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80034a6:	4a08      	ldr	r2, [pc, #32]	; (80034c8 <setTimer2+0x2c>)
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <setTimer2+0x2c>)
 80034ae:	881a      	ldrh	r2, [r3, #0]
 80034b0:	4b06      	ldr	r3, [pc, #24]	; (80034cc <setTimer2+0x30>)
 80034b2:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <setTimer2+0x34>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	801a      	strh	r2, [r3, #0]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	2000059e 	.word	0x2000059e
 80034cc:	2000059c 	.word	0x2000059c
 80034d0:	2000059a 	.word	0x2000059a

080034d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e4:	d116      	bne.n	8003514 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 80034e6:	4b0d      	ldr	r3, [pc, #52]	; (800351c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d010      	beq.n	8003510 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80034ee:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	4b09      	ldr	r3, [pc, #36]	; (800351c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80034f8:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80034fa:	4b08      	ldr	r3, [pc, #32]	; (800351c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003504:	2201      	movs	r2, #1
 8003506:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800350a:	881a      	ldrh	r2, [r3, #0]
 800350c:	4b03      	ldr	r3, [pc, #12]	; (800351c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800350e:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8003510:	f7fe f978 	bl	8001804 <led7_Scan>
	}
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	2000059c 	.word	0x2000059c
 8003520:	2000059a 	.word	0x2000059a
 8003524:	2000059e 	.word	0x2000059e

08003528 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800352c:	4b17      	ldr	r3, [pc, #92]	; (800358c <MX_SPI1_Init+0x64>)
 800352e:	4a18      	ldr	r2, [pc, #96]	; (8003590 <MX_SPI1_Init+0x68>)
 8003530:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003532:	4b16      	ldr	r3, [pc, #88]	; (800358c <MX_SPI1_Init+0x64>)
 8003534:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003538:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800353a:	4b14      	ldr	r3, [pc, #80]	; (800358c <MX_SPI1_Init+0x64>)
 800353c:	2200      	movs	r2, #0
 800353e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <MX_SPI1_Init+0x64>)
 8003542:	2200      	movs	r2, #0
 8003544:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <MX_SPI1_Init+0x64>)
 8003548:	2200      	movs	r2, #0
 800354a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <MX_SPI1_Init+0x64>)
 800354e:	2200      	movs	r2, #0
 8003550:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003552:	4b0e      	ldr	r3, [pc, #56]	; (800358c <MX_SPI1_Init+0x64>)
 8003554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003558:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800355a:	4b0c      	ldr	r3, [pc, #48]	; (800358c <MX_SPI1_Init+0x64>)
 800355c:	2200      	movs	r2, #0
 800355e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003560:	4b0a      	ldr	r3, [pc, #40]	; (800358c <MX_SPI1_Init+0x64>)
 8003562:	2200      	movs	r2, #0
 8003564:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <MX_SPI1_Init+0x64>)
 8003568:	2200      	movs	r2, #0
 800356a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800356c:	4b07      	ldr	r3, [pc, #28]	; (800358c <MX_SPI1_Init+0x64>)
 800356e:	2200      	movs	r2, #0
 8003570:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003572:	4b06      	ldr	r3, [pc, #24]	; (800358c <MX_SPI1_Init+0x64>)
 8003574:	220a      	movs	r2, #10
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003578:	4804      	ldr	r0, [pc, #16]	; (800358c <MX_SPI1_Init+0x64>)
 800357a:	f002 fb87 	bl	8005c8c <HAL_SPI_Init>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003584:	f7fe fab4 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003588:	bf00      	nop
 800358a:	bd80      	pop	{r7, pc}
 800358c:	200005a0 	.word	0x200005a0
 8003590:	40013000 	.word	0x40013000

08003594 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359c:	f107 0314 	add.w	r3, r7, #20
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a19      	ldr	r2, [pc, #100]	; (8003618 <HAL_SPI_MspInit+0x84>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d12b      	bne.n	800360e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	4b18      	ldr	r3, [pc, #96]	; (800361c <HAL_SPI_MspInit+0x88>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	4a17      	ldr	r2, [pc, #92]	; (800361c <HAL_SPI_MspInit+0x88>)
 80035c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035c4:	6453      	str	r3, [r2, #68]	; 0x44
 80035c6:	4b15      	ldr	r3, [pc, #84]	; (800361c <HAL_SPI_MspInit+0x88>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	4b11      	ldr	r3, [pc, #68]	; (800361c <HAL_SPI_MspInit+0x88>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	4a10      	ldr	r2, [pc, #64]	; (800361c <HAL_SPI_MspInit+0x88>)
 80035dc:	f043 0302 	orr.w	r3, r3, #2
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HAL_SPI_MspInit+0x88>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80035ee:	2338      	movs	r3, #56	; 0x38
 80035f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f2:	2302      	movs	r3, #2
 80035f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fa:	2303      	movs	r3, #3
 80035fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035fe:	2305      	movs	r3, #5
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003602:	f107 0314 	add.w	r3, r7, #20
 8003606:	4619      	mov	r1, r3
 8003608:	4805      	ldr	r0, [pc, #20]	; (8003620 <HAL_SPI_MspInit+0x8c>)
 800360a:	f001 fbad 	bl	8004d68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800360e:	bf00      	nop
 8003610:	3728      	adds	r7, #40	; 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40013000 	.word	0x40013000
 800361c:	40023800 	.word	0x40023800
 8003620:	40020400 	.word	0x40020400

08003624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	607b      	str	r3, [r7, #4]
 800362e:	4b10      	ldr	r3, [pc, #64]	; (8003670 <HAL_MspInit+0x4c>)
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	4a0f      	ldr	r2, [pc, #60]	; (8003670 <HAL_MspInit+0x4c>)
 8003634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003638:	6453      	str	r3, [r2, #68]	; 0x44
 800363a:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <HAL_MspInit+0x4c>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003642:	607b      	str	r3, [r7, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	603b      	str	r3, [r7, #0]
 800364a:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_MspInit+0x4c>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	4a08      	ldr	r2, [pc, #32]	; (8003670 <HAL_MspInit+0x4c>)
 8003650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003654:	6413      	str	r3, [r2, #64]	; 0x40
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_MspInit+0x4c>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800

08003674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003678:	e7fe      	b.n	8003678 <NMI_Handler+0x4>

0800367a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800367a:	b480      	push	{r7}
 800367c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800367e:	e7fe      	b.n	800367e <HardFault_Handler+0x4>

08003680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003684:	e7fe      	b.n	8003684 <MemManage_Handler+0x4>

08003686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003686:	b480      	push	{r7}
 8003688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800368a:	e7fe      	b.n	800368a <BusFault_Handler+0x4>

0800368c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003690:	e7fe      	b.n	8003690 <UsageFault_Handler+0x4>

08003692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036a4:	bf00      	nop
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036ae:	b480      	push	{r7}
 80036b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036c0:	f000 fc1e 	bl	8003f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036c4:	bf00      	nop
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80036cc:	4802      	ldr	r0, [pc, #8]	; (80036d8 <TIM2_IRQHandler+0x10>)
 80036ce:	f003 fa4a 	bl	8006b66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000644 	.word	0x20000644

080036dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036e0:	4802      	ldr	r0, [pc, #8]	; (80036ec <USART1_IRQHandler+0x10>)
 80036e2:	f004 f985 	bl	80079f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	200006d8 	.word	0x200006d8

080036f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036f4:	4802      	ldr	r0, [pc, #8]	; (8003700 <USART2_IRQHandler+0x10>)
 80036f6:	f004 f97b 	bl	80079f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	2000071c 	.word	0x2000071c

08003704 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003708:	4802      	ldr	r0, [pc, #8]	; (8003714 <DMA2_Stream0_IRQHandler+0x10>)
 800370a:	f001 f8f1 	bl	80048f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	20000184 	.word	0x20000184

08003718 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
	return 1;
 800371c:	2301      	movs	r3, #1
}
 800371e:	4618      	mov	r0, r3
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <_kill>:

int _kill(int pid, int sig)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003732:	f005 fb23 	bl	8008d7c <__errno>
 8003736:	4603      	mov	r3, r0
 8003738:	2216      	movs	r2, #22
 800373a:	601a      	str	r2, [r3, #0]
	return -1;
 800373c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <_exit>:

void _exit (int status)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003750:	f04f 31ff 	mov.w	r1, #4294967295
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ffe7 	bl	8003728 <_kill>
	while (1) {}		/* Make sure we hang here */
 800375a:	e7fe      	b.n	800375a <_exit+0x12>

0800375c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	e00a      	b.n	8003784 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800376e:	f3af 8000 	nop.w
 8003772:	4601      	mov	r1, r0
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	60ba      	str	r2, [r7, #8]
 800377a:	b2ca      	uxtb	r2, r1
 800377c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	3301      	adds	r3, #1
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	429a      	cmp	r2, r3
 800378a:	dbf0      	blt.n	800376e <_read+0x12>
	}

return len;
 800378c:	687b      	ldr	r3, [r7, #4]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b086      	sub	sp, #24
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	e009      	b.n	80037bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	60ba      	str	r2, [r7, #8]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	3301      	adds	r3, #1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	dbf1      	blt.n	80037a8 <_write+0x12>
	}
	return len;
 80037c4:	687b      	ldr	r3, [r7, #4]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <_close>:

int _close(int file)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
	return -1;
 80037d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037f6:	605a      	str	r2, [r3, #4]
	return 0;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <_isatty>:

int _isatty(int file)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
	return 1;
 800380e:	2301      	movs	r3, #1
}
 8003810:	4618      	mov	r0, r3
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
	return 0;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
	...

08003838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003840:	4a14      	ldr	r2, [pc, #80]	; (8003894 <_sbrk+0x5c>)
 8003842:	4b15      	ldr	r3, [pc, #84]	; (8003898 <_sbrk+0x60>)
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800384c:	4b13      	ldr	r3, [pc, #76]	; (800389c <_sbrk+0x64>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <_sbrk+0x64>)
 8003856:	4a12      	ldr	r2, [pc, #72]	; (80038a0 <_sbrk+0x68>)
 8003858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800385a:	4b10      	ldr	r3, [pc, #64]	; (800389c <_sbrk+0x64>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	429a      	cmp	r2, r3
 8003866:	d207      	bcs.n	8003878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003868:	f005 fa88 	bl	8008d7c <__errno>
 800386c:	4603      	mov	r3, r0
 800386e:	220c      	movs	r2, #12
 8003870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003872:	f04f 33ff 	mov.w	r3, #4294967295
 8003876:	e009      	b.n	800388c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <_sbrk+0x64>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <_sbrk+0x64>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	4a05      	ldr	r2, [pc, #20]	; (800389c <_sbrk+0x64>)
 8003888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800388a:	68fb      	ldr	r3, [r7, #12]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20020000 	.word	0x20020000
 8003898:	00000400 	.word	0x00000400
 800389c:	200005f8 	.word	0x200005f8
 80038a0:	200008b0 	.word	0x200008b0

080038a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038a8:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <SystemInit+0x20>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	4a05      	ldr	r2, [pc, #20]	; (80038c4 <SystemInit+0x20>)
 80038b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038b8:	bf00      	nop
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038ce:	f107 0308 	add.w	r3, r7, #8
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	605a      	str	r2, [r3, #4]
 80038d8:	609a      	str	r2, [r3, #8]
 80038da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038dc:	463b      	mov	r3, r7
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038e4:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <MX_TIM1_Init+0x98>)
 80038e6:	4a1f      	ldr	r2, [pc, #124]	; (8003964 <MX_TIM1_Init+0x9c>)
 80038e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80038ea:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <MX_TIM1_Init+0x98>)
 80038ec:	2253      	movs	r2, #83	; 0x53
 80038ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <MX_TIM1_Init+0x98>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80038f6:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <MX_TIM1_Init+0x98>)
 80038f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038fe:	4b18      	ldr	r3, [pc, #96]	; (8003960 <MX_TIM1_Init+0x98>)
 8003900:	2200      	movs	r2, #0
 8003902:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003904:	4b16      	ldr	r3, [pc, #88]	; (8003960 <MX_TIM1_Init+0x98>)
 8003906:	2200      	movs	r2, #0
 8003908:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800390a:	4b15      	ldr	r3, [pc, #84]	; (8003960 <MX_TIM1_Init+0x98>)
 800390c:	2200      	movs	r2, #0
 800390e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003910:	4813      	ldr	r0, [pc, #76]	; (8003960 <MX_TIM1_Init+0x98>)
 8003912:	f002 ffa7 	bl	8006864 <HAL_TIM_Base_Init>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800391c:	f7fe f8e8 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003924:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003926:	f107 0308 	add.w	r3, r7, #8
 800392a:	4619      	mov	r1, r3
 800392c:	480c      	ldr	r0, [pc, #48]	; (8003960 <MX_TIM1_Init+0x98>)
 800392e:	f003 fae5 	bl	8006efc <HAL_TIM_ConfigClockSource>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003938:	f7fe f8da 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800393c:	2300      	movs	r3, #0
 800393e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003940:	2300      	movs	r3, #0
 8003942:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003944:	463b      	mov	r3, r7
 8003946:	4619      	mov	r1, r3
 8003948:	4805      	ldr	r0, [pc, #20]	; (8003960 <MX_TIM1_Init+0x98>)
 800394a:	f003 feb1 	bl	80076b0 <HAL_TIMEx_MasterConfigSynchronization>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003954:	f7fe f8cc 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003958:	bf00      	nop
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	200005fc 	.word	0x200005fc
 8003964:	40010000 	.word	0x40010000

08003968 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800396e:	f107 0308 	add.w	r3, r7, #8
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	605a      	str	r2, [r3, #4]
 8003978:	609a      	str	r2, [r3, #8]
 800397a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800397c:	463b      	mov	r3, r7
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003984:	4b1d      	ldr	r3, [pc, #116]	; (80039fc <MX_TIM2_Init+0x94>)
 8003986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800398a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800398c:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <MX_TIM2_Init+0x94>)
 800398e:	f240 3247 	movw	r2, #839	; 0x347
 8003992:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003994:	4b19      	ldr	r3, [pc, #100]	; (80039fc <MX_TIM2_Init+0x94>)
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800399a:	4b18      	ldr	r3, [pc, #96]	; (80039fc <MX_TIM2_Init+0x94>)
 800399c:	2263      	movs	r2, #99	; 0x63
 800399e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a0:	4b16      	ldr	r3, [pc, #88]	; (80039fc <MX_TIM2_Init+0x94>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <MX_TIM2_Init+0x94>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80039ac:	4813      	ldr	r0, [pc, #76]	; (80039fc <MX_TIM2_Init+0x94>)
 80039ae:	f002 ff59 	bl	8006864 <HAL_TIM_Base_Init>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80039b8:	f7fe f89a 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039c2:	f107 0308 	add.w	r3, r7, #8
 80039c6:	4619      	mov	r1, r3
 80039c8:	480c      	ldr	r0, [pc, #48]	; (80039fc <MX_TIM2_Init+0x94>)
 80039ca:	f003 fa97 	bl	8006efc <HAL_TIM_ConfigClockSource>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80039d4:	f7fe f88c 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039d8:	2300      	movs	r3, #0
 80039da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039dc:	2300      	movs	r3, #0
 80039de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039e0:	463b      	mov	r3, r7
 80039e2:	4619      	mov	r1, r3
 80039e4:	4805      	ldr	r0, [pc, #20]	; (80039fc <MX_TIM2_Init+0x94>)
 80039e6:	f003 fe63 	bl	80076b0 <HAL_TIMEx_MasterConfigSynchronization>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80039f0:	f7fe f87e 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80039f4:	bf00      	nop
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000644 	.word	0x20000644

08003a00 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a06:	1d3b      	adds	r3, r7, #4
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	611a      	str	r2, [r3, #16]
 8003a14:	615a      	str	r2, [r3, #20]
 8003a16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003a18:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <MX_TIM13_Init+0x94>)
 8003a1a:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <MX_TIM13_Init+0x98>)
 8003a1c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8003a1e:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <MX_TIM13_Init+0x94>)
 8003a20:	f240 3247 	movw	r2, #839	; 0x347
 8003a24:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a26:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <MX_TIM13_Init+0x94>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <MX_TIM13_Init+0x94>)
 8003a2e:	2263      	movs	r2, #99	; 0x63
 8003a30:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a32:	4b18      	ldr	r3, [pc, #96]	; (8003a94 <MX_TIM13_Init+0x94>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a38:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <MX_TIM13_Init+0x94>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003a3e:	4815      	ldr	r0, [pc, #84]	; (8003a94 <MX_TIM13_Init+0x94>)
 8003a40:	f002 ff10 	bl	8006864 <HAL_TIM_Base_Init>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8003a4a:	f7fe f851 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003a4e:	4811      	ldr	r0, [pc, #68]	; (8003a94 <MX_TIM13_Init+0x94>)
 8003a50:	f003 f830 	bl	8006ab4 <HAL_TIM_PWM_Init>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8003a5a:	f7fe f849 	bl	8001af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a5e:	2360      	movs	r3, #96	; 0x60
 8003a60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	2200      	movs	r2, #0
 8003a72:	4619      	mov	r1, r3
 8003a74:	4807      	ldr	r0, [pc, #28]	; (8003a94 <MX_TIM13_Init+0x94>)
 8003a76:	f003 f97f 	bl	8006d78 <HAL_TIM_PWM_ConfigChannel>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003a80:	f7fe f836 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003a84:	4803      	ldr	r0, [pc, #12]	; (8003a94 <MX_TIM13_Init+0x94>)
 8003a86:	f000 f85b 	bl	8003b40 <HAL_TIM_MspPostInit>

}
 8003a8a:	bf00      	nop
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	2000068c 	.word	0x2000068c
 8003a98:	40001c00 	.word	0x40001c00

08003a9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a22      	ldr	r2, [pc, #136]	; (8003b34 <HAL_TIM_Base_MspInit+0x98>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d10e      	bne.n	8003acc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <HAL_TIM_Base_MspInit+0x9c>)
 8003ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab6:	4a20      	ldr	r2, [pc, #128]	; (8003b38 <HAL_TIM_Base_MspInit+0x9c>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	6453      	str	r3, [r2, #68]	; 0x44
 8003abe:	4b1e      	ldr	r3, [pc, #120]	; (8003b38 <HAL_TIM_Base_MspInit+0x9c>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003aca:	e02e      	b.n	8003b2a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad4:	d116      	bne.n	8003b04 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <HAL_TIM_Base_MspInit+0x9c>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	4a16      	ldr	r2, [pc, #88]	; (8003b38 <HAL_TIM_Base_MspInit+0x9c>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae6:	4b14      	ldr	r3, [pc, #80]	; (8003b38 <HAL_TIM_Base_MspInit+0x9c>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003af2:	2200      	movs	r2, #0
 8003af4:	2100      	movs	r1, #0
 8003af6:	201c      	movs	r0, #28
 8003af8:	f000 fd83 	bl	8004602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003afc:	201c      	movs	r0, #28
 8003afe:	f000 fd9c 	bl	800463a <HAL_NVIC_EnableIRQ>
}
 8003b02:	e012      	b.n	8003b2a <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a0c      	ldr	r2, [pc, #48]	; (8003b3c <HAL_TIM_Base_MspInit+0xa0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d10d      	bne.n	8003b2a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_TIM_Base_MspInit+0x9c>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	4a08      	ldr	r2, [pc, #32]	; (8003b38 <HAL_TIM_Base_MspInit+0x9c>)
 8003b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_TIM_Base_MspInit+0x9c>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
}
 8003b2a:	bf00      	nop
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40010000 	.word	0x40010000
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	40001c00 	.word	0x40001c00

08003b40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b48:	f107 030c 	add.w	r3, r7, #12
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <HAL_TIM_MspPostInit+0x68>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d11e      	bne.n	8003ba0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	4b11      	ldr	r3, [pc, #68]	; (8003bac <HAL_TIM_MspPostInit+0x6c>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	4a10      	ldr	r2, [pc, #64]	; (8003bac <HAL_TIM_MspPostInit+0x6c>)
 8003b6c:	f043 0320 	orr.w	r3, r3, #32
 8003b70:	6313      	str	r3, [r2, #48]	; 0x30
 8003b72:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <HAL_TIM_MspPostInit+0x6c>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b84:	2302      	movs	r3, #2
 8003b86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003b90:	2309      	movs	r3, #9
 8003b92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b94:	f107 030c 	add.w	r3, r7, #12
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4805      	ldr	r0, [pc, #20]	; (8003bb0 <HAL_TIM_MspPostInit+0x70>)
 8003b9c:	f001 f8e4 	bl	8004d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003ba0:	bf00      	nop
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40001c00 	.word	0x40001c00
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40021400 	.word	0x40021400

08003bb4 <HAL_UART_RxCpltCallback>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart2, bytes, size, 10);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <HAL_UART_RxCpltCallback+0x74>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d10a      	bne.n	8003bdc <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8003bc6:	230a      	movs	r3, #10
 8003bc8:	2201      	movs	r2, #1
 8003bca:	4918      	ldr	r1, [pc, #96]	; (8003c2c <HAL_UART_RxCpltCallback+0x78>)
 8003bcc:	4818      	ldr	r0, [pc, #96]	; (8003c30 <HAL_UART_RxCpltCallback+0x7c>)
 8003bce:	f003 fe4c 	bl	800786a <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	4915      	ldr	r1, [pc, #84]	; (8003c2c <HAL_UART_RxCpltCallback+0x78>)
 8003bd6:	4816      	ldr	r0, [pc, #88]	; (8003c30 <HAL_UART_RxCpltCallback+0x7c>)
 8003bd8:	f003 fed9 	bl	800798e <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a14      	ldr	r2, [pc, #80]	; (8003c34 <HAL_UART_RxCpltCallback+0x80>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d11b      	bne.n	8003c1e <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <HAL_UART_RxCpltCallback+0x84>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b4f      	cmp	r3, #79	; 0x4f
 8003bec:	d103      	bne.n	8003bf6 <HAL_UART_RxCpltCallback+0x42>
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <HAL_UART_RxCpltCallback+0x88>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	e00e      	b.n	8003c14 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8003bf6:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <HAL_UART_RxCpltCallback+0x84>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b61      	cmp	r3, #97	; 0x61
 8003bfc:	d103      	bne.n	8003c06 <HAL_UART_RxCpltCallback+0x52>
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <HAL_UART_RxCpltCallback+0x8c>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	e006      	b.n	8003c14 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <HAL_UART_RxCpltCallback+0x84>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b41      	cmp	r3, #65	; 0x41
 8003c0c:	d102      	bne.n	8003c14 <HAL_UART_RxCpltCallback+0x60>
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <HAL_UART_RxCpltCallback+0x8c>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8003c14:	2201      	movs	r2, #1
 8003c16:	4908      	ldr	r1, [pc, #32]	; (8003c38 <HAL_UART_RxCpltCallback+0x84>)
 8003c18:	480a      	ldr	r0, [pc, #40]	; (8003c44 <HAL_UART_RxCpltCallback+0x90>)
 8003c1a:	f003 feb8 	bl	800798e <HAL_UART_Receive_IT>
	}
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40011000 	.word	0x40011000
 8003c2c:	200006d4 	.word	0x200006d4
 8003c30:	200006d8 	.word	0x200006d8
 8003c34:	40004400 	.word	0x40004400
 8003c38:	200006d5 	.word	0x200006d5
 8003c3c:	200006d6 	.word	0x200006d6
 8003c40:	200002bc 	.word	0x200002bc
 8003c44:	2000071c 	.word	0x2000071c

08003c48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c4c:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <MX_USART1_UART_Init+0x4c>)
 8003c4e:	4a12      	ldr	r2, [pc, #72]	; (8003c98 <MX_USART1_UART_Init+0x50>)
 8003c50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c52:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <MX_USART1_UART_Init+0x4c>)
 8003c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c5a:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <MX_USART1_UART_Init+0x4c>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <MX_USART1_UART_Init+0x4c>)
 8003c62:	2200      	movs	r2, #0
 8003c64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c66:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <MX_USART1_UART_Init+0x4c>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c6c:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <MX_USART1_UART_Init+0x4c>)
 8003c6e:	220c      	movs	r2, #12
 8003c70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c72:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <MX_USART1_UART_Init+0x4c>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c78:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <MX_USART1_UART_Init+0x4c>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c7e:	4805      	ldr	r0, [pc, #20]	; (8003c94 <MX_USART1_UART_Init+0x4c>)
 8003c80:	f003 fda6 	bl	80077d0 <HAL_UART_Init>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c8a:	f7fd ff31 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	200006d8 	.word	0x200006d8
 8003c98:	40011000 	.word	0x40011000

08003c9c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ca0:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <MX_USART2_UART_Init+0x4c>)
 8003ca2:	4a12      	ldr	r2, [pc, #72]	; (8003cec <MX_USART2_UART_Init+0x50>)
 8003ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <MX_USART2_UART_Init+0x4c>)
 8003ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cae:	4b0e      	ldr	r3, [pc, #56]	; (8003ce8 <MX_USART2_UART_Init+0x4c>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <MX_USART2_UART_Init+0x4c>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003cba:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <MX_USART2_UART_Init+0x4c>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003cc0:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <MX_USART2_UART_Init+0x4c>)
 8003cc2:	220c      	movs	r2, #12
 8003cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cc6:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <MX_USART2_UART_Init+0x4c>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ccc:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <MX_USART2_UART_Init+0x4c>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003cd2:	4805      	ldr	r0, [pc, #20]	; (8003ce8 <MX_USART2_UART_Init+0x4c>)
 8003cd4:	f003 fd7c 	bl	80077d0 <HAL_UART_Init>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003cde:	f7fd ff07 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	2000071c 	.word	0x2000071c
 8003cec:	40004400 	.word	0x40004400

08003cf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08c      	sub	sp, #48	; 0x30
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf8:	f107 031c 	add.w	r3, r7, #28
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a3a      	ldr	r2, [pc, #232]	; (8003df8 <HAL_UART_MspInit+0x108>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d135      	bne.n	8003d7e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	4b39      	ldr	r3, [pc, #228]	; (8003dfc <HAL_UART_MspInit+0x10c>)
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	4a38      	ldr	r2, [pc, #224]	; (8003dfc <HAL_UART_MspInit+0x10c>)
 8003d1c:	f043 0310 	orr.w	r3, r3, #16
 8003d20:	6453      	str	r3, [r2, #68]	; 0x44
 8003d22:	4b36      	ldr	r3, [pc, #216]	; (8003dfc <HAL_UART_MspInit+0x10c>)
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	4b32      	ldr	r3, [pc, #200]	; (8003dfc <HAL_UART_MspInit+0x10c>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	4a31      	ldr	r2, [pc, #196]	; (8003dfc <HAL_UART_MspInit+0x10c>)
 8003d38:	f043 0301 	orr.w	r3, r3, #1
 8003d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3e:	4b2f      	ldr	r3, [pc, #188]	; (8003dfc <HAL_UART_MspInit+0x10c>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d50:	2302      	movs	r3, #2
 8003d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d5c:	2307      	movs	r3, #7
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d60:	f107 031c 	add.w	r3, r7, #28
 8003d64:	4619      	mov	r1, r3
 8003d66:	4826      	ldr	r0, [pc, #152]	; (8003e00 <HAL_UART_MspInit+0x110>)
 8003d68:	f000 fffe 	bl	8004d68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2100      	movs	r1, #0
 8003d70:	2025      	movs	r0, #37	; 0x25
 8003d72:	f000 fc46 	bl	8004602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d76:	2025      	movs	r0, #37	; 0x25
 8003d78:	f000 fc5f 	bl	800463a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003d7c:	e038      	b.n	8003df0 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a20      	ldr	r2, [pc, #128]	; (8003e04 <HAL_UART_MspInit+0x114>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d133      	bne.n	8003df0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <HAL_UART_MspInit+0x10c>)
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	4a1a      	ldr	r2, [pc, #104]	; (8003dfc <HAL_UART_MspInit+0x10c>)
 8003d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d96:	6413      	str	r3, [r2, #64]	; 0x40
 8003d98:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <HAL_UART_MspInit+0x10c>)
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <HAL_UART_MspInit+0x10c>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	4a13      	ldr	r2, [pc, #76]	; (8003dfc <HAL_UART_MspInit+0x10c>)
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	6313      	str	r3, [r2, #48]	; 0x30
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <HAL_UART_MspInit+0x10c>)
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003dc0:	230c      	movs	r3, #12
 8003dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003dd0:	2307      	movs	r3, #7
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd4:	f107 031c 	add.w	r3, r7, #28
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4809      	ldr	r0, [pc, #36]	; (8003e00 <HAL_UART_MspInit+0x110>)
 8003ddc:	f000 ffc4 	bl	8004d68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003de0:	2200      	movs	r2, #0
 8003de2:	2100      	movs	r1, #0
 8003de4:	2026      	movs	r0, #38	; 0x26
 8003de6:	f000 fc0c 	bl	8004602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003dea:	2026      	movs	r0, #38	; 0x26
 8003dec:	f000 fc25 	bl	800463a <HAL_NVIC_EnableIRQ>
}
 8003df0:	bf00      	nop
 8003df2:	3730      	adds	r7, #48	; 0x30
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40011000 	.word	0x40011000
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	40020000 	.word	0x40020000
 8003e04:	40004400 	.word	0x40004400

08003e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e0c:	480d      	ldr	r0, [pc, #52]	; (8003e44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e0e:	490e      	ldr	r1, [pc, #56]	; (8003e48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e10:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e14:	e002      	b.n	8003e1c <LoopCopyDataInit>

08003e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e1a:	3304      	adds	r3, #4

08003e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e20:	d3f9      	bcc.n	8003e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e22:	4a0b      	ldr	r2, [pc, #44]	; (8003e50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e24:	4c0b      	ldr	r4, [pc, #44]	; (8003e54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e28:	e001      	b.n	8003e2e <LoopFillZerobss>

08003e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e2c:	3204      	adds	r2, #4

08003e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e30:	d3fb      	bcc.n	8003e2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e32:	f7ff fd37 	bl	80038a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e36:	f004 ffa7 	bl	8008d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e3a:	f7fd fd93 	bl	8001964 <main>
  bx  lr    
 8003e3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e48:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8003e4c:	0800cb14 	.word	0x0800cb14
  ldr r2, =_sbss
 8003e50:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8003e54:	200008b0 	.word	0x200008b0

08003e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e58:	e7fe      	b.n	8003e58 <ADC_IRQHandler>
	...

08003e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e60:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <HAL_Init+0x40>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a0d      	ldr	r2, [pc, #52]	; (8003e9c <HAL_Init+0x40>)
 8003e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_Init+0x40>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <HAL_Init+0x40>)
 8003e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e78:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <HAL_Init+0x40>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a07      	ldr	r2, [pc, #28]	; (8003e9c <HAL_Init+0x40>)
 8003e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e84:	2003      	movs	r0, #3
 8003e86:	f000 fbb1 	bl	80045ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e8a:	200f      	movs	r0, #15
 8003e8c:	f000 f808 	bl	8003ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e90:	f7ff fbc8 	bl	8003624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40023c00 	.word	0x40023c00

08003ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ea8:	4b12      	ldr	r3, [pc, #72]	; (8003ef4 <HAL_InitTick+0x54>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <HAL_InitTick+0x58>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 fbc9 	bl	8004656 <HAL_SYSTICK_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e00e      	b.n	8003eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b0f      	cmp	r3, #15
 8003ed2:	d80a      	bhi.n	8003eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8003edc:	f000 fb91 	bl	8004602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ee0:	4a06      	ldr	r2, [pc, #24]	; (8003efc <HAL_InitTick+0x5c>)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e000      	b.n	8003eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	200000b8 	.word	0x200000b8
 8003ef8:	200000c0 	.word	0x200000c0
 8003efc:	200000bc 	.word	0x200000bc

08003f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_IncTick+0x20>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_IncTick+0x24>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4413      	add	r3, r2
 8003f10:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <HAL_IncTick+0x24>)
 8003f12:	6013      	str	r3, [r2, #0]
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	200000c0 	.word	0x200000c0
 8003f24:	20000760 	.word	0x20000760

08003f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f2c:	4b03      	ldr	r3, [pc, #12]	; (8003f3c <HAL_GetTick+0x14>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20000760 	.word	0x20000760

08003f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f48:	f7ff ffee 	bl	8003f28 <HAL_GetTick>
 8003f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f58:	d005      	beq.n	8003f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <HAL_Delay+0x44>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f66:	bf00      	nop
 8003f68:	f7ff ffde 	bl	8003f28 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d8f7      	bhi.n	8003f68 <HAL_Delay+0x28>
  {
  }
}
 8003f78:	bf00      	nop
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200000c0 	.word	0x200000c0

08003f88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e033      	b.n	8004006 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fc fb6a 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d118      	bne.n	8003ff8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fce:	f023 0302 	bic.w	r3, r3, #2
 8003fd2:	f043 0202 	orr.w	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f93a 	bl	8004254 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f023 0303 	bic.w	r3, r3, #3
 8003fee:	f043 0201 	orr.w	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ff6:	e001      	b.n	8003ffc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_ADC_ConfigChannel+0x1c>
 8004028:	2302      	movs	r3, #2
 800402a:	e105      	b.n	8004238 <HAL_ADC_ConfigChannel+0x228>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b09      	cmp	r3, #9
 800403a:	d925      	bls.n	8004088 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68d9      	ldr	r1, [r3, #12]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	4613      	mov	r3, r2
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	4413      	add	r3, r2
 8004050:	3b1e      	subs	r3, #30
 8004052:	2207      	movs	r2, #7
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43da      	mvns	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	400a      	ands	r2, r1
 8004060:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68d9      	ldr	r1, [r3, #12]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	4618      	mov	r0, r3
 8004074:	4603      	mov	r3, r0
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4403      	add	r3, r0
 800407a:	3b1e      	subs	r3, #30
 800407c:	409a      	lsls	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	60da      	str	r2, [r3, #12]
 8004086:	e022      	b.n	80040ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6919      	ldr	r1, [r3, #16]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	2207      	movs	r2, #7
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43da      	mvns	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	400a      	ands	r2, r1
 80040aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6919      	ldr	r1, [r3, #16]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	4618      	mov	r0, r3
 80040be:	4603      	mov	r3, r0
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4403      	add	r3, r0
 80040c4:	409a      	lsls	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b06      	cmp	r3, #6
 80040d4:	d824      	bhi.n	8004120 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	3b05      	subs	r3, #5
 80040e8:	221f      	movs	r2, #31
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43da      	mvns	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	400a      	ands	r2, r1
 80040f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	4618      	mov	r0, r3
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	3b05      	subs	r3, #5
 8004112:	fa00 f203 	lsl.w	r2, r0, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	635a      	str	r2, [r3, #52]	; 0x34
 800411e:	e04c      	b.n	80041ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b0c      	cmp	r3, #12
 8004126:	d824      	bhi.n	8004172 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	3b23      	subs	r3, #35	; 0x23
 800413a:	221f      	movs	r2, #31
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	43da      	mvns	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	400a      	ands	r2, r1
 8004148:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	4618      	mov	r0, r3
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	3b23      	subs	r3, #35	; 0x23
 8004164:	fa00 f203 	lsl.w	r2, r0, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
 8004170:	e023      	b.n	80041ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	3b41      	subs	r3, #65	; 0x41
 8004184:	221f      	movs	r2, #31
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43da      	mvns	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	400a      	ands	r2, r1
 8004192:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	4618      	mov	r0, r3
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	3b41      	subs	r3, #65	; 0x41
 80041ae:	fa00 f203 	lsl.w	r2, r0, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041ba:	4b22      	ldr	r3, [pc, #136]	; (8004244 <HAL_ADC_ConfigChannel+0x234>)
 80041bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a21      	ldr	r2, [pc, #132]	; (8004248 <HAL_ADC_ConfigChannel+0x238>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d109      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x1cc>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b12      	cmp	r3, #18
 80041ce:	d105      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a19      	ldr	r2, [pc, #100]	; (8004248 <HAL_ADC_ConfigChannel+0x238>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d123      	bne.n	800422e <HAL_ADC_ConfigChannel+0x21e>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b10      	cmp	r3, #16
 80041ec:	d003      	beq.n	80041f6 <HAL_ADC_ConfigChannel+0x1e6>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b11      	cmp	r3, #17
 80041f4:	d11b      	bne.n	800422e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b10      	cmp	r3, #16
 8004208:	d111      	bne.n	800422e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <HAL_ADC_ConfigChannel+0x23c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a10      	ldr	r2, [pc, #64]	; (8004250 <HAL_ADC_ConfigChannel+0x240>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	0c9a      	lsrs	r2, r3, #18
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004220:	e002      	b.n	8004228 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	3b01      	subs	r3, #1
 8004226:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f9      	bne.n	8004222 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	40012300 	.word	0x40012300
 8004248:	40012000 	.word	0x40012000
 800424c:	200000b8 	.word	0x200000b8
 8004250:	431bde83 	.word	0x431bde83

08004254 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800425c:	4b79      	ldr	r3, [pc, #484]	; (8004444 <ADC_Init+0x1f0>)
 800425e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004288:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6859      	ldr	r1, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	021a      	lsls	r2, r3, #8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6859      	ldr	r1, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6899      	ldr	r1, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	4a58      	ldr	r2, [pc, #352]	; (8004448 <ADC_Init+0x1f4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d022      	beq.n	8004332 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6899      	ldr	r1, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800431c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6899      	ldr	r1, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	e00f      	b.n	8004352 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004340:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004350:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0202 	bic.w	r2, r2, #2
 8004360:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6899      	ldr	r1, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	7e1b      	ldrb	r3, [r3, #24]
 800436c:	005a      	lsls	r2, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01b      	beq.n	80043b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800438e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800439e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6859      	ldr	r1, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	3b01      	subs	r3, #1
 80043ac:	035a      	lsls	r2, r3, #13
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	e007      	b.n	80043c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80043d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	051a      	lsls	r2, r3, #20
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6899      	ldr	r1, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800440a:	025a      	lsls	r2, r3, #9
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004422:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6899      	ldr	r1, [r3, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	029a      	lsls	r2, r3, #10
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	609a      	str	r2, [r3, #8]
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	40012300 	.word	0x40012300
 8004448:	0f000001 	.word	0x0f000001

0800444c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800445c:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <__NVIC_SetPriorityGrouping+0x44>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004468:	4013      	ands	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800447e:	4a04      	ldr	r2, [pc, #16]	; (8004490 <__NVIC_SetPriorityGrouping+0x44>)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	60d3      	str	r3, [r2, #12]
}
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	e000ed00 	.word	0xe000ed00

08004494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004498:	4b04      	ldr	r3, [pc, #16]	; (80044ac <__NVIC_GetPriorityGrouping+0x18>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	0a1b      	lsrs	r3, r3, #8
 800449e:	f003 0307 	and.w	r3, r3, #7
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	e000ed00 	.word	0xe000ed00

080044b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	db0b      	blt.n	80044da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	f003 021f 	and.w	r2, r3, #31
 80044c8:	4907      	ldr	r1, [pc, #28]	; (80044e8 <__NVIC_EnableIRQ+0x38>)
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	2001      	movs	r0, #1
 80044d2:	fa00 f202 	lsl.w	r2, r0, r2
 80044d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	e000e100 	.word	0xe000e100

080044ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	6039      	str	r1, [r7, #0]
 80044f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	db0a      	blt.n	8004516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	b2da      	uxtb	r2, r3
 8004504:	490c      	ldr	r1, [pc, #48]	; (8004538 <__NVIC_SetPriority+0x4c>)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	0112      	lsls	r2, r2, #4
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	440b      	add	r3, r1
 8004510:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004514:	e00a      	b.n	800452c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	4908      	ldr	r1, [pc, #32]	; (800453c <__NVIC_SetPriority+0x50>)
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	3b04      	subs	r3, #4
 8004524:	0112      	lsls	r2, r2, #4
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	440b      	add	r3, r1
 800452a:	761a      	strb	r2, [r3, #24]
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000e100 	.word	0xe000e100
 800453c:	e000ed00 	.word	0xe000ed00

08004540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004540:	b480      	push	{r7}
 8004542:	b089      	sub	sp, #36	; 0x24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f1c3 0307 	rsb	r3, r3, #7
 800455a:	2b04      	cmp	r3, #4
 800455c:	bf28      	it	cs
 800455e:	2304      	movcs	r3, #4
 8004560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	3304      	adds	r3, #4
 8004566:	2b06      	cmp	r3, #6
 8004568:	d902      	bls.n	8004570 <NVIC_EncodePriority+0x30>
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	3b03      	subs	r3, #3
 800456e:	e000      	b.n	8004572 <NVIC_EncodePriority+0x32>
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004574:	f04f 32ff 	mov.w	r2, #4294967295
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43da      	mvns	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	401a      	ands	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004588:	f04f 31ff 	mov.w	r1, #4294967295
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	fa01 f303 	lsl.w	r3, r1, r3
 8004592:	43d9      	mvns	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004598:	4313      	orrs	r3, r2
         );
}
 800459a:	4618      	mov	r0, r3
 800459c:	3724      	adds	r7, #36	; 0x24
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045b8:	d301      	bcc.n	80045be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045ba:	2301      	movs	r3, #1
 80045bc:	e00f      	b.n	80045de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045be:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <SysTick_Config+0x40>)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3b01      	subs	r3, #1
 80045c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045c6:	210f      	movs	r1, #15
 80045c8:	f04f 30ff 	mov.w	r0, #4294967295
 80045cc:	f7ff ff8e 	bl	80044ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <SysTick_Config+0x40>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045d6:	4b04      	ldr	r3, [pc, #16]	; (80045e8 <SysTick_Config+0x40>)
 80045d8:	2207      	movs	r2, #7
 80045da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	e000e010 	.word	0xe000e010

080045ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff ff29 	bl	800444c <__NVIC_SetPriorityGrouping>
}
 80045fa:	bf00      	nop
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af00      	add	r7, sp, #0
 8004608:	4603      	mov	r3, r0
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004614:	f7ff ff3e 	bl	8004494 <__NVIC_GetPriorityGrouping>
 8004618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	6978      	ldr	r0, [r7, #20]
 8004620:	f7ff ff8e 	bl	8004540 <NVIC_EncodePriority>
 8004624:	4602      	mov	r2, r0
 8004626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800462a:	4611      	mov	r1, r2
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff ff5d 	bl	80044ec <__NVIC_SetPriority>
}
 8004632:	bf00      	nop
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	4603      	mov	r3, r0
 8004642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff ff31 	bl	80044b0 <__NVIC_EnableIRQ>
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff ffa2 	bl	80045a8 <SysTick_Config>
 8004664:	4603      	mov	r3, r0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800467c:	f7ff fc54 	bl	8003f28 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e099      	b.n	80047c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0201 	bic.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046ac:	e00f      	b.n	80046ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046ae:	f7ff fc3b 	bl	8003f28 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b05      	cmp	r3, #5
 80046ba:	d908      	bls.n	80046ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2220      	movs	r2, #32
 80046c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2203      	movs	r2, #3
 80046c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e078      	b.n	80047c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e8      	bne.n	80046ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4b38      	ldr	r3, [pc, #224]	; (80047c8 <HAL_DMA_Init+0x158>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004706:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004712:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	2b04      	cmp	r3, #4
 8004726:	d107      	bne.n	8004738 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	4313      	orrs	r3, r2
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f023 0307 	bic.w	r3, r3, #7
 800474e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	2b04      	cmp	r3, #4
 8004760:	d117      	bne.n	8004792 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00e      	beq.n	8004792 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fa7b 	bl	8004c70 <DMA_CheckFifoParam>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2240      	movs	r2, #64	; 0x40
 8004784:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800478e:	2301      	movs	r3, #1
 8004790:	e016      	b.n	80047c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fa32 	bl	8004c04 <DMA_CalcBaseAndBitshift>
 80047a0:	4603      	mov	r3, r0
 80047a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a8:	223f      	movs	r2, #63	; 0x3f
 80047aa:	409a      	lsls	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	f010803f 	.word	0xf010803f

080047cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047da:	f7ff fba5 	bl	8003f28 <HAL_GetTick>
 80047de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d008      	beq.n	80047fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2280      	movs	r2, #128	; 0x80
 80047f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e052      	b.n	80048a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0216 	bic.w	r2, r2, #22
 800480c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695a      	ldr	r2, [r3, #20]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800481c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <HAL_DMA_Abort+0x62>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0208 	bic.w	r2, r2, #8
 800483c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800484e:	e013      	b.n	8004878 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004850:	f7ff fb6a 	bl	8003f28 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b05      	cmp	r3, #5
 800485c:	d90c      	bls.n	8004878 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2203      	movs	r2, #3
 8004868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e015      	b.n	80048a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1e4      	bne.n	8004850 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488a:	223f      	movs	r2, #63	; 0x3f
 800488c:	409a      	lsls	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d004      	beq.n	80048ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2280      	movs	r2, #128	; 0x80
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e00c      	b.n	80048e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2205      	movs	r2, #5
 80048ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0201 	bic.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048fc:	4b8e      	ldr	r3, [pc, #568]	; (8004b38 <HAL_DMA_IRQHandler+0x248>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a8e      	ldr	r2, [pc, #568]	; (8004b3c <HAL_DMA_IRQHandler+0x24c>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	0a9b      	lsrs	r3, r3, #10
 8004908:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491a:	2208      	movs	r2, #8
 800491c:	409a      	lsls	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4013      	ands	r3, r2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d01a      	beq.n	800495c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d013      	beq.n	800495c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0204 	bic.w	r2, r2, #4
 8004942:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004948:	2208      	movs	r2, #8
 800494a:	409a      	lsls	r2, r3
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004954:	f043 0201 	orr.w	r2, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004960:	2201      	movs	r2, #1
 8004962:	409a      	lsls	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4013      	ands	r3, r2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d012      	beq.n	8004992 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00b      	beq.n	8004992 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497e:	2201      	movs	r2, #1
 8004980:	409a      	lsls	r2, r3
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498a:	f043 0202 	orr.w	r2, r3, #2
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004996:	2204      	movs	r2, #4
 8004998:	409a      	lsls	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4013      	ands	r3, r2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d012      	beq.n	80049c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00b      	beq.n	80049c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b4:	2204      	movs	r2, #4
 80049b6:	409a      	lsls	r2, r3
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c0:	f043 0204 	orr.w	r2, r3, #4
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049cc:	2210      	movs	r2, #16
 80049ce:	409a      	lsls	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d043      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d03c      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ea:	2210      	movs	r2, #16
 80049ec:	409a      	lsls	r2, r3
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d018      	beq.n	8004a32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d108      	bne.n	8004a20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d024      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	4798      	blx	r3
 8004a1e:	e01f      	b.n	8004a60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01b      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	4798      	blx	r3
 8004a30:	e016      	b.n	8004a60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d107      	bne.n	8004a50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0208 	bic.w	r2, r2, #8
 8004a4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	2220      	movs	r2, #32
 8004a66:	409a      	lsls	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 808f 	beq.w	8004b90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8087 	beq.w	8004b90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a86:	2220      	movs	r2, #32
 8004a88:	409a      	lsls	r2, r3
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b05      	cmp	r3, #5
 8004a98:	d136      	bne.n	8004b08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0216 	bic.w	r2, r2, #22
 8004aa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695a      	ldr	r2, [r3, #20]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ab8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d103      	bne.n	8004aca <HAL_DMA_IRQHandler+0x1da>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d007      	beq.n	8004ada <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0208 	bic.w	r2, r2, #8
 8004ad8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ade:	223f      	movs	r2, #63	; 0x3f
 8004ae0:	409a      	lsls	r2, r3
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d07e      	beq.n	8004bfc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	4798      	blx	r3
        }
        return;
 8004b06:	e079      	b.n	8004bfc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d01d      	beq.n	8004b52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10d      	bne.n	8004b40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d031      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	4798      	blx	r3
 8004b34:	e02c      	b.n	8004b90 <HAL_DMA_IRQHandler+0x2a0>
 8004b36:	bf00      	nop
 8004b38:	200000b8 	.word	0x200000b8
 8004b3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d023      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	4798      	blx	r3
 8004b50:	e01e      	b.n	8004b90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10f      	bne.n	8004b80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0210 	bic.w	r2, r2, #16
 8004b6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d032      	beq.n	8004bfe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d022      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2205      	movs	r2, #5
 8004ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0201 	bic.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d307      	bcc.n	8004bd8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f2      	bne.n	8004bbc <HAL_DMA_IRQHandler+0x2cc>
 8004bd6:	e000      	b.n	8004bda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004bd8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	4798      	blx	r3
 8004bfa:	e000      	b.n	8004bfe <HAL_DMA_IRQHandler+0x30e>
        return;
 8004bfc:	bf00      	nop
    }
  }
}
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	3b10      	subs	r3, #16
 8004c14:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <DMA_CalcBaseAndBitshift+0x64>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c1e:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <DMA_CalcBaseAndBitshift+0x68>)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b03      	cmp	r3, #3
 8004c30:	d909      	bls.n	8004c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c3a:	f023 0303 	bic.w	r3, r3, #3
 8004c3e:	1d1a      	adds	r2, r3, #4
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	659a      	str	r2, [r3, #88]	; 0x58
 8004c44:	e007      	b.n	8004c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c4e:	f023 0303 	bic.w	r3, r3, #3
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	aaaaaaab 	.word	0xaaaaaaab
 8004c6c:	0800ca1c 	.word	0x0800ca1c

08004c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d11f      	bne.n	8004cca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d856      	bhi.n	8004d3e <DMA_CheckFifoParam+0xce>
 8004c90:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <DMA_CheckFifoParam+0x28>)
 8004c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c96:	bf00      	nop
 8004c98:	08004ca9 	.word	0x08004ca9
 8004c9c:	08004cbb 	.word	0x08004cbb
 8004ca0:	08004ca9 	.word	0x08004ca9
 8004ca4:	08004d3f 	.word	0x08004d3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d046      	beq.n	8004d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cb8:	e043      	b.n	8004d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cc2:	d140      	bne.n	8004d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc8:	e03d      	b.n	8004d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd2:	d121      	bne.n	8004d18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d837      	bhi.n	8004d4a <DMA_CheckFifoParam+0xda>
 8004cda:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <DMA_CheckFifoParam+0x70>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004cf7 	.word	0x08004cf7
 8004ce8:	08004cf1 	.word	0x08004cf1
 8004cec:	08004d09 	.word	0x08004d09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf4:	e030      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d025      	beq.n	8004d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d06:	e022      	b.n	8004d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d10:	d11f      	bne.n	8004d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d16:	e01c      	b.n	8004d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d903      	bls.n	8004d26 <DMA_CheckFifoParam+0xb6>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d003      	beq.n	8004d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d24:	e018      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
      break;
 8004d2a:	e015      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00e      	beq.n	8004d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d3c:	e00b      	b.n	8004d56 <DMA_CheckFifoParam+0xe6>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e00a      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;
 8004d42:	bf00      	nop
 8004d44:	e008      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;
 8004d46:	bf00      	nop
 8004d48:	e006      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e004      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;
 8004d4e:	bf00      	nop
 8004d50:	e002      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <DMA_CheckFifoParam+0xe8>
      break;
 8004d56:	bf00      	nop
    }
  } 
  
  return status; 
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop

08004d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b089      	sub	sp, #36	; 0x24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	e16b      	b.n	800505c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d84:	2201      	movs	r2, #1
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4013      	ands	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	f040 815a 	bne.w	8005056 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d005      	beq.n	8004dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d130      	bne.n	8004e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	2203      	movs	r2, #3
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43db      	mvns	r3, r3
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004df0:	2201      	movs	r2, #1
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	091b      	lsrs	r3, r3, #4
 8004e06:	f003 0201 	and.w	r2, r3, #1
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d017      	beq.n	8004e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	2203      	movs	r2, #3
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d123      	bne.n	8004eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	08da      	lsrs	r2, r3, #3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3208      	adds	r2, #8
 8004e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	220f      	movs	r2, #15
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	43db      	mvns	r3, r3
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4013      	ands	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	08da      	lsrs	r2, r3, #3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3208      	adds	r2, #8
 8004ea6:	69b9      	ldr	r1, [r7, #24]
 8004ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 0203 	and.w	r2, r3, #3
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80b4 	beq.w	8005056 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	4b60      	ldr	r3, [pc, #384]	; (8005074 <HAL_GPIO_Init+0x30c>)
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	4a5f      	ldr	r2, [pc, #380]	; (8005074 <HAL_GPIO_Init+0x30c>)
 8004ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004efc:	6453      	str	r3, [r2, #68]	; 0x44
 8004efe:	4b5d      	ldr	r3, [pc, #372]	; (8005074 <HAL_GPIO_Init+0x30c>)
 8004f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f0a:	4a5b      	ldr	r2, [pc, #364]	; (8005078 <HAL_GPIO_Init+0x310>)
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	089b      	lsrs	r3, r3, #2
 8004f10:	3302      	adds	r3, #2
 8004f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	220f      	movs	r2, #15
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	43db      	mvns	r3, r3
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a52      	ldr	r2, [pc, #328]	; (800507c <HAL_GPIO_Init+0x314>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d02b      	beq.n	8004f8e <HAL_GPIO_Init+0x226>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a51      	ldr	r2, [pc, #324]	; (8005080 <HAL_GPIO_Init+0x318>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d025      	beq.n	8004f8a <HAL_GPIO_Init+0x222>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a50      	ldr	r2, [pc, #320]	; (8005084 <HAL_GPIO_Init+0x31c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d01f      	beq.n	8004f86 <HAL_GPIO_Init+0x21e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a4f      	ldr	r2, [pc, #316]	; (8005088 <HAL_GPIO_Init+0x320>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d019      	beq.n	8004f82 <HAL_GPIO_Init+0x21a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a4e      	ldr	r2, [pc, #312]	; (800508c <HAL_GPIO_Init+0x324>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d013      	beq.n	8004f7e <HAL_GPIO_Init+0x216>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a4d      	ldr	r2, [pc, #308]	; (8005090 <HAL_GPIO_Init+0x328>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00d      	beq.n	8004f7a <HAL_GPIO_Init+0x212>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a4c      	ldr	r2, [pc, #304]	; (8005094 <HAL_GPIO_Init+0x32c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d007      	beq.n	8004f76 <HAL_GPIO_Init+0x20e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a4b      	ldr	r2, [pc, #300]	; (8005098 <HAL_GPIO_Init+0x330>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d101      	bne.n	8004f72 <HAL_GPIO_Init+0x20a>
 8004f6e:	2307      	movs	r3, #7
 8004f70:	e00e      	b.n	8004f90 <HAL_GPIO_Init+0x228>
 8004f72:	2308      	movs	r3, #8
 8004f74:	e00c      	b.n	8004f90 <HAL_GPIO_Init+0x228>
 8004f76:	2306      	movs	r3, #6
 8004f78:	e00a      	b.n	8004f90 <HAL_GPIO_Init+0x228>
 8004f7a:	2305      	movs	r3, #5
 8004f7c:	e008      	b.n	8004f90 <HAL_GPIO_Init+0x228>
 8004f7e:	2304      	movs	r3, #4
 8004f80:	e006      	b.n	8004f90 <HAL_GPIO_Init+0x228>
 8004f82:	2303      	movs	r3, #3
 8004f84:	e004      	b.n	8004f90 <HAL_GPIO_Init+0x228>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e002      	b.n	8004f90 <HAL_GPIO_Init+0x228>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <HAL_GPIO_Init+0x228>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	f002 0203 	and.w	r2, r2, #3
 8004f96:	0092      	lsls	r2, r2, #2
 8004f98:	4093      	lsls	r3, r2
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fa0:	4935      	ldr	r1, [pc, #212]	; (8005078 <HAL_GPIO_Init+0x310>)
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	089b      	lsrs	r3, r3, #2
 8004fa6:	3302      	adds	r3, #2
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fae:	4b3b      	ldr	r3, [pc, #236]	; (800509c <HAL_GPIO_Init+0x334>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	43db      	mvns	r3, r3
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fd2:	4a32      	ldr	r2, [pc, #200]	; (800509c <HAL_GPIO_Init+0x334>)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004fd8:	4b30      	ldr	r3, [pc, #192]	; (800509c <HAL_GPIO_Init+0x334>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ffc:	4a27      	ldr	r2, [pc, #156]	; (800509c <HAL_GPIO_Init+0x334>)
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005002:	4b26      	ldr	r3, [pc, #152]	; (800509c <HAL_GPIO_Init+0x334>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	43db      	mvns	r3, r3
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	4013      	ands	r3, r2
 8005010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005026:	4a1d      	ldr	r2, [pc, #116]	; (800509c <HAL_GPIO_Init+0x334>)
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800502c:	4b1b      	ldr	r3, [pc, #108]	; (800509c <HAL_GPIO_Init+0x334>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	43db      	mvns	r3, r3
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	4013      	ands	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005050:	4a12      	ldr	r2, [pc, #72]	; (800509c <HAL_GPIO_Init+0x334>)
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3301      	adds	r3, #1
 800505a:	61fb      	str	r3, [r7, #28]
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	2b0f      	cmp	r3, #15
 8005060:	f67f ae90 	bls.w	8004d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	3724      	adds	r7, #36	; 0x24
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40023800 	.word	0x40023800
 8005078:	40013800 	.word	0x40013800
 800507c:	40020000 	.word	0x40020000
 8005080:	40020400 	.word	0x40020400
 8005084:	40020800 	.word	0x40020800
 8005088:	40020c00 	.word	0x40020c00
 800508c:	40021000 	.word	0x40021000
 8005090:	40021400 	.word	0x40021400
 8005094:	40021800 	.word	0x40021800
 8005098:	40021c00 	.word	0x40021c00
 800509c:	40013c00 	.word	0x40013c00

080050a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	807b      	strh	r3, [r7, #2]
 80050ac:	4613      	mov	r3, r2
 80050ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050b0:	787b      	ldrb	r3, [r7, #1]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050b6:	887a      	ldrh	r2, [r7, #2]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050bc:	e003      	b.n	80050c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050be:	887b      	ldrh	r3, [r7, #2]
 80050c0:	041a      	lsls	r2, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	619a      	str	r2, [r3, #24]
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e12b      	b.n	800533e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fb fe24 	bl	8000d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2224      	movs	r2, #36	; 0x24
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0201 	bic.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005126:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005136:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005138:	f000 fd80 	bl	8005c3c <HAL_RCC_GetPCLK1Freq>
 800513c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	4a81      	ldr	r2, [pc, #516]	; (8005348 <HAL_I2C_Init+0x274>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d807      	bhi.n	8005158 <HAL_I2C_Init+0x84>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4a80      	ldr	r2, [pc, #512]	; (800534c <HAL_I2C_Init+0x278>)
 800514c:	4293      	cmp	r3, r2
 800514e:	bf94      	ite	ls
 8005150:	2301      	movls	r3, #1
 8005152:	2300      	movhi	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	e006      	b.n	8005166 <HAL_I2C_Init+0x92>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4a7d      	ldr	r2, [pc, #500]	; (8005350 <HAL_I2C_Init+0x27c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	bf94      	ite	ls
 8005160:	2301      	movls	r3, #1
 8005162:	2300      	movhi	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e0e7      	b.n	800533e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4a78      	ldr	r2, [pc, #480]	; (8005354 <HAL_I2C_Init+0x280>)
 8005172:	fba2 2303 	umull	r2, r3, r2, r3
 8005176:	0c9b      	lsrs	r3, r3, #18
 8005178:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	4a6a      	ldr	r2, [pc, #424]	; (8005348 <HAL_I2C_Init+0x274>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d802      	bhi.n	80051a8 <HAL_I2C_Init+0xd4>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	3301      	adds	r3, #1
 80051a6:	e009      	b.n	80051bc <HAL_I2C_Init+0xe8>
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051ae:	fb02 f303 	mul.w	r3, r2, r3
 80051b2:	4a69      	ldr	r2, [pc, #420]	; (8005358 <HAL_I2C_Init+0x284>)
 80051b4:	fba2 2303 	umull	r2, r3, r2, r3
 80051b8:	099b      	lsrs	r3, r3, #6
 80051ba:	3301      	adds	r3, #1
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	430b      	orrs	r3, r1
 80051c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	495c      	ldr	r1, [pc, #368]	; (8005348 <HAL_I2C_Init+0x274>)
 80051d8:	428b      	cmp	r3, r1
 80051da:	d819      	bhi.n	8005210 <HAL_I2C_Init+0x13c>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	1e59      	subs	r1, r3, #1
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80051ea:	1c59      	adds	r1, r3, #1
 80051ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051f0:	400b      	ands	r3, r1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <HAL_I2C_Init+0x138>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1e59      	subs	r1, r3, #1
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	fbb1 f3f3 	udiv	r3, r1, r3
 8005204:	3301      	adds	r3, #1
 8005206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800520a:	e051      	b.n	80052b0 <HAL_I2C_Init+0x1dc>
 800520c:	2304      	movs	r3, #4
 800520e:	e04f      	b.n	80052b0 <HAL_I2C_Init+0x1dc>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d111      	bne.n	800523c <HAL_I2C_Init+0x168>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	1e58      	subs	r0, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6859      	ldr	r1, [r3, #4]
 8005220:	460b      	mov	r3, r1
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	440b      	add	r3, r1
 8005226:	fbb0 f3f3 	udiv	r3, r0, r3
 800522a:	3301      	adds	r3, #1
 800522c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005230:	2b00      	cmp	r3, #0
 8005232:	bf0c      	ite	eq
 8005234:	2301      	moveq	r3, #1
 8005236:	2300      	movne	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	e012      	b.n	8005262 <HAL_I2C_Init+0x18e>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	1e58      	subs	r0, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6859      	ldr	r1, [r3, #4]
 8005244:	460b      	mov	r3, r1
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	0099      	lsls	r1, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005252:	3301      	adds	r3, #1
 8005254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005258:	2b00      	cmp	r3, #0
 800525a:	bf0c      	ite	eq
 800525c:	2301      	moveq	r3, #1
 800525e:	2300      	movne	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_I2C_Init+0x196>
 8005266:	2301      	movs	r3, #1
 8005268:	e022      	b.n	80052b0 <HAL_I2C_Init+0x1dc>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10e      	bne.n	8005290 <HAL_I2C_Init+0x1bc>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1e58      	subs	r0, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6859      	ldr	r1, [r3, #4]
 800527a:	460b      	mov	r3, r1
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	440b      	add	r3, r1
 8005280:	fbb0 f3f3 	udiv	r3, r0, r3
 8005284:	3301      	adds	r3, #1
 8005286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800528a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800528e:	e00f      	b.n	80052b0 <HAL_I2C_Init+0x1dc>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	1e58      	subs	r0, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6859      	ldr	r1, [r3, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	0099      	lsls	r1, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052a6:	3301      	adds	r3, #1
 80052a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	6809      	ldr	r1, [r1, #0]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69da      	ldr	r2, [r3, #28]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6911      	ldr	r1, [r2, #16]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68d2      	ldr	r2, [r2, #12]
 80052ea:	4311      	orrs	r1, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	430b      	orrs	r3, r1
 80052f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	000186a0 	.word	0x000186a0
 800534c:	001e847f 	.word	0x001e847f
 8005350:	003d08ff 	.word	0x003d08ff
 8005354:	431bde83 	.word	0x431bde83
 8005358:	10624dd3 	.word	0x10624dd3

0800535c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e267      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d075      	beq.n	8005466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800537a:	4b88      	ldr	r3, [pc, #544]	; (800559c <HAL_RCC_OscConfig+0x240>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 030c 	and.w	r3, r3, #12
 8005382:	2b04      	cmp	r3, #4
 8005384:	d00c      	beq.n	80053a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005386:	4b85      	ldr	r3, [pc, #532]	; (800559c <HAL_RCC_OscConfig+0x240>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800538e:	2b08      	cmp	r3, #8
 8005390:	d112      	bne.n	80053b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005392:	4b82      	ldr	r3, [pc, #520]	; (800559c <HAL_RCC_OscConfig+0x240>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800539e:	d10b      	bne.n	80053b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a0:	4b7e      	ldr	r3, [pc, #504]	; (800559c <HAL_RCC_OscConfig+0x240>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d05b      	beq.n	8005464 <HAL_RCC_OscConfig+0x108>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d157      	bne.n	8005464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e242      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c0:	d106      	bne.n	80053d0 <HAL_RCC_OscConfig+0x74>
 80053c2:	4b76      	ldr	r3, [pc, #472]	; (800559c <HAL_RCC_OscConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a75      	ldr	r2, [pc, #468]	; (800559c <HAL_RCC_OscConfig+0x240>)
 80053c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	e01d      	b.n	800540c <HAL_RCC_OscConfig+0xb0>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053d8:	d10c      	bne.n	80053f4 <HAL_RCC_OscConfig+0x98>
 80053da:	4b70      	ldr	r3, [pc, #448]	; (800559c <HAL_RCC_OscConfig+0x240>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a6f      	ldr	r2, [pc, #444]	; (800559c <HAL_RCC_OscConfig+0x240>)
 80053e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	4b6d      	ldr	r3, [pc, #436]	; (800559c <HAL_RCC_OscConfig+0x240>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a6c      	ldr	r2, [pc, #432]	; (800559c <HAL_RCC_OscConfig+0x240>)
 80053ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	e00b      	b.n	800540c <HAL_RCC_OscConfig+0xb0>
 80053f4:	4b69      	ldr	r3, [pc, #420]	; (800559c <HAL_RCC_OscConfig+0x240>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a68      	ldr	r2, [pc, #416]	; (800559c <HAL_RCC_OscConfig+0x240>)
 80053fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fe:	6013      	str	r3, [r2, #0]
 8005400:	4b66      	ldr	r3, [pc, #408]	; (800559c <HAL_RCC_OscConfig+0x240>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a65      	ldr	r2, [pc, #404]	; (800559c <HAL_RCC_OscConfig+0x240>)
 8005406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800540a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d013      	beq.n	800543c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005414:	f7fe fd88 	bl	8003f28 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800541c:	f7fe fd84 	bl	8003f28 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b64      	cmp	r3, #100	; 0x64
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e207      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800542e:	4b5b      	ldr	r3, [pc, #364]	; (800559c <HAL_RCC_OscConfig+0x240>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f0      	beq.n	800541c <HAL_RCC_OscConfig+0xc0>
 800543a:	e014      	b.n	8005466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543c:	f7fe fd74 	bl	8003f28 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005444:	f7fe fd70 	bl	8003f28 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b64      	cmp	r3, #100	; 0x64
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e1f3      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005456:	4b51      	ldr	r3, [pc, #324]	; (800559c <HAL_RCC_OscConfig+0x240>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f0      	bne.n	8005444 <HAL_RCC_OscConfig+0xe8>
 8005462:	e000      	b.n	8005466 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d063      	beq.n	800553a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005472:	4b4a      	ldr	r3, [pc, #296]	; (800559c <HAL_RCC_OscConfig+0x240>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 030c 	and.w	r3, r3, #12
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00b      	beq.n	8005496 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800547e:	4b47      	ldr	r3, [pc, #284]	; (800559c <HAL_RCC_OscConfig+0x240>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005486:	2b08      	cmp	r3, #8
 8005488:	d11c      	bne.n	80054c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800548a:	4b44      	ldr	r3, [pc, #272]	; (800559c <HAL_RCC_OscConfig+0x240>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d116      	bne.n	80054c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005496:	4b41      	ldr	r3, [pc, #260]	; (800559c <HAL_RCC_OscConfig+0x240>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <HAL_RCC_OscConfig+0x152>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d001      	beq.n	80054ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e1c7      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ae:	4b3b      	ldr	r3, [pc, #236]	; (800559c <HAL_RCC_OscConfig+0x240>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4937      	ldr	r1, [pc, #220]	; (800559c <HAL_RCC_OscConfig+0x240>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054c2:	e03a      	b.n	800553a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d020      	beq.n	800550e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054cc:	4b34      	ldr	r3, [pc, #208]	; (80055a0 <HAL_RCC_OscConfig+0x244>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d2:	f7fe fd29 	bl	8003f28 <HAL_GetTick>
 80054d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d8:	e008      	b.n	80054ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054da:	f7fe fd25 	bl	8003f28 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e1a8      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ec:	4b2b      	ldr	r3, [pc, #172]	; (800559c <HAL_RCC_OscConfig+0x240>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0f0      	beq.n	80054da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f8:	4b28      	ldr	r3, [pc, #160]	; (800559c <HAL_RCC_OscConfig+0x240>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	4925      	ldr	r1, [pc, #148]	; (800559c <HAL_RCC_OscConfig+0x240>)
 8005508:	4313      	orrs	r3, r2
 800550a:	600b      	str	r3, [r1, #0]
 800550c:	e015      	b.n	800553a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800550e:	4b24      	ldr	r3, [pc, #144]	; (80055a0 <HAL_RCC_OscConfig+0x244>)
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005514:	f7fe fd08 	bl	8003f28 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800551c:	f7fe fd04 	bl	8003f28 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e187      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800552e:	4b1b      	ldr	r3, [pc, #108]	; (800559c <HAL_RCC_OscConfig+0x240>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d036      	beq.n	80055b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d016      	beq.n	800557c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800554e:	4b15      	ldr	r3, [pc, #84]	; (80055a4 <HAL_RCC_OscConfig+0x248>)
 8005550:	2201      	movs	r2, #1
 8005552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005554:	f7fe fce8 	bl	8003f28 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800555c:	f7fe fce4 	bl	8003f28 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e167      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800556e:	4b0b      	ldr	r3, [pc, #44]	; (800559c <HAL_RCC_OscConfig+0x240>)
 8005570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0f0      	beq.n	800555c <HAL_RCC_OscConfig+0x200>
 800557a:	e01b      	b.n	80055b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800557c:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <HAL_RCC_OscConfig+0x248>)
 800557e:	2200      	movs	r2, #0
 8005580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005582:	f7fe fcd1 	bl	8003f28 <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005588:	e00e      	b.n	80055a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800558a:	f7fe fccd 	bl	8003f28 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d907      	bls.n	80055a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e150      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
 800559c:	40023800 	.word	0x40023800
 80055a0:	42470000 	.word	0x42470000
 80055a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a8:	4b88      	ldr	r3, [pc, #544]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 80055aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1ea      	bne.n	800558a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 8097 	beq.w	80056f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055c2:	2300      	movs	r3, #0
 80055c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055c6:	4b81      	ldr	r3, [pc, #516]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10f      	bne.n	80055f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d2:	2300      	movs	r3, #0
 80055d4:	60bb      	str	r3, [r7, #8]
 80055d6:	4b7d      	ldr	r3, [pc, #500]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	4a7c      	ldr	r2, [pc, #496]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 80055dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e0:	6413      	str	r3, [r2, #64]	; 0x40
 80055e2:	4b7a      	ldr	r3, [pc, #488]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ea:	60bb      	str	r3, [r7, #8]
 80055ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ee:	2301      	movs	r3, #1
 80055f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f2:	4b77      	ldr	r3, [pc, #476]	; (80057d0 <HAL_RCC_OscConfig+0x474>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d118      	bne.n	8005630 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055fe:	4b74      	ldr	r3, [pc, #464]	; (80057d0 <HAL_RCC_OscConfig+0x474>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a73      	ldr	r2, [pc, #460]	; (80057d0 <HAL_RCC_OscConfig+0x474>)
 8005604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800560a:	f7fe fc8d 	bl	8003f28 <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005612:	f7fe fc89 	bl	8003f28 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e10c      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005624:	4b6a      	ldr	r3, [pc, #424]	; (80057d0 <HAL_RCC_OscConfig+0x474>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0f0      	beq.n	8005612 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d106      	bne.n	8005646 <HAL_RCC_OscConfig+0x2ea>
 8005638:	4b64      	ldr	r3, [pc, #400]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 800563a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563c:	4a63      	ldr	r2, [pc, #396]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 800563e:	f043 0301 	orr.w	r3, r3, #1
 8005642:	6713      	str	r3, [r2, #112]	; 0x70
 8005644:	e01c      	b.n	8005680 <HAL_RCC_OscConfig+0x324>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b05      	cmp	r3, #5
 800564c:	d10c      	bne.n	8005668 <HAL_RCC_OscConfig+0x30c>
 800564e:	4b5f      	ldr	r3, [pc, #380]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 8005650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005652:	4a5e      	ldr	r2, [pc, #376]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 8005654:	f043 0304 	orr.w	r3, r3, #4
 8005658:	6713      	str	r3, [r2, #112]	; 0x70
 800565a:	4b5c      	ldr	r3, [pc, #368]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 800565c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565e:	4a5b      	ldr	r2, [pc, #364]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 8005660:	f043 0301 	orr.w	r3, r3, #1
 8005664:	6713      	str	r3, [r2, #112]	; 0x70
 8005666:	e00b      	b.n	8005680 <HAL_RCC_OscConfig+0x324>
 8005668:	4b58      	ldr	r3, [pc, #352]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 800566a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566c:	4a57      	ldr	r2, [pc, #348]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 800566e:	f023 0301 	bic.w	r3, r3, #1
 8005672:	6713      	str	r3, [r2, #112]	; 0x70
 8005674:	4b55      	ldr	r3, [pc, #340]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005678:	4a54      	ldr	r2, [pc, #336]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 800567a:	f023 0304 	bic.w	r3, r3, #4
 800567e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d015      	beq.n	80056b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005688:	f7fe fc4e 	bl	8003f28 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800568e:	e00a      	b.n	80056a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005690:	f7fe fc4a 	bl	8003f28 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	f241 3288 	movw	r2, #5000	; 0x1388
 800569e:	4293      	cmp	r3, r2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e0cb      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a6:	4b49      	ldr	r3, [pc, #292]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0ee      	beq.n	8005690 <HAL_RCC_OscConfig+0x334>
 80056b2:	e014      	b.n	80056de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b4:	f7fe fc38 	bl	8003f28 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ba:	e00a      	b.n	80056d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056bc:	f7fe fc34 	bl	8003f28 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e0b5      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d2:	4b3e      	ldr	r3, [pc, #248]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1ee      	bne.n	80056bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056de:	7dfb      	ldrb	r3, [r7, #23]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d105      	bne.n	80056f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056e4:	4b39      	ldr	r3, [pc, #228]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	4a38      	ldr	r2, [pc, #224]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 80056ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 80a1 	beq.w	800583c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056fa:	4b34      	ldr	r3, [pc, #208]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 030c 	and.w	r3, r3, #12
 8005702:	2b08      	cmp	r3, #8
 8005704:	d05c      	beq.n	80057c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d141      	bne.n	8005792 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800570e:	4b31      	ldr	r3, [pc, #196]	; (80057d4 <HAL_RCC_OscConfig+0x478>)
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005714:	f7fe fc08 	bl	8003f28 <HAL_GetTick>
 8005718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571a:	e008      	b.n	800572e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800571c:	f7fe fc04 	bl	8003f28 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	2b02      	cmp	r3, #2
 8005728:	d901      	bls.n	800572e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e087      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572e:	4b27      	ldr	r3, [pc, #156]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1f0      	bne.n	800571c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69da      	ldr	r2, [r3, #28]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	019b      	lsls	r3, r3, #6
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	3b01      	subs	r3, #1
 8005754:	041b      	lsls	r3, r3, #16
 8005756:	431a      	orrs	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	061b      	lsls	r3, r3, #24
 800575e:	491b      	ldr	r1, [pc, #108]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 8005760:	4313      	orrs	r3, r2
 8005762:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005764:	4b1b      	ldr	r3, [pc, #108]	; (80057d4 <HAL_RCC_OscConfig+0x478>)
 8005766:	2201      	movs	r2, #1
 8005768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576a:	f7fe fbdd 	bl	8003f28 <HAL_GetTick>
 800576e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005772:	f7fe fbd9 	bl	8003f28 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e05c      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005784:	4b11      	ldr	r3, [pc, #68]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0f0      	beq.n	8005772 <HAL_RCC_OscConfig+0x416>
 8005790:	e054      	b.n	800583c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <HAL_RCC_OscConfig+0x478>)
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005798:	f7fe fbc6 	bl	8003f28 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a0:	f7fe fbc2 	bl	8003f28 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e045      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b2:	4b06      	ldr	r3, [pc, #24]	; (80057cc <HAL_RCC_OscConfig+0x470>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f0      	bne.n	80057a0 <HAL_RCC_OscConfig+0x444>
 80057be:	e03d      	b.n	800583c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d107      	bne.n	80057d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e038      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
 80057cc:	40023800 	.word	0x40023800
 80057d0:	40007000 	.word	0x40007000
 80057d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057d8:	4b1b      	ldr	r3, [pc, #108]	; (8005848 <HAL_RCC_OscConfig+0x4ec>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d028      	beq.n	8005838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d121      	bne.n	8005838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057fe:	429a      	cmp	r2, r3
 8005800:	d11a      	bne.n	8005838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005808:	4013      	ands	r3, r2
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800580e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005810:	4293      	cmp	r3, r2
 8005812:	d111      	bne.n	8005838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	085b      	lsrs	r3, r3, #1
 8005820:	3b01      	subs	r3, #1
 8005822:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005824:	429a      	cmp	r2, r3
 8005826:	d107      	bne.n	8005838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005834:	429a      	cmp	r2, r3
 8005836:	d001      	beq.n	800583c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	40023800 	.word	0x40023800

0800584c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e0cc      	b.n	80059fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005860:	4b68      	ldr	r3, [pc, #416]	; (8005a04 <HAL_RCC_ClockConfig+0x1b8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	429a      	cmp	r2, r3
 800586c:	d90c      	bls.n	8005888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800586e:	4b65      	ldr	r3, [pc, #404]	; (8005a04 <HAL_RCC_ClockConfig+0x1b8>)
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005876:	4b63      	ldr	r3, [pc, #396]	; (8005a04 <HAL_RCC_ClockConfig+0x1b8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	429a      	cmp	r2, r3
 8005882:	d001      	beq.n	8005888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e0b8      	b.n	80059fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d020      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058a0:	4b59      	ldr	r3, [pc, #356]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	4a58      	ldr	r2, [pc, #352]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80058a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058b8:	4b53      	ldr	r3, [pc, #332]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	4a52      	ldr	r2, [pc, #328]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058c4:	4b50      	ldr	r3, [pc, #320]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	494d      	ldr	r1, [pc, #308]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d044      	beq.n	800596c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d107      	bne.n	80058fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ea:	4b47      	ldr	r3, [pc, #284]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d119      	bne.n	800592a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e07f      	b.n	80059fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d003      	beq.n	800590a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005906:	2b03      	cmp	r3, #3
 8005908:	d107      	bne.n	800591a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800590a:	4b3f      	ldr	r3, [pc, #252]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d109      	bne.n	800592a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e06f      	b.n	80059fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800591a:	4b3b      	ldr	r3, [pc, #236]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0302 	and.w	r3, r3, #2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e067      	b.n	80059fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800592a:	4b37      	ldr	r3, [pc, #220]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f023 0203 	bic.w	r2, r3, #3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	4934      	ldr	r1, [pc, #208]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 8005938:	4313      	orrs	r3, r2
 800593a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800593c:	f7fe faf4 	bl	8003f28 <HAL_GetTick>
 8005940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005942:	e00a      	b.n	800595a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005944:	f7fe faf0 	bl	8003f28 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005952:	4293      	cmp	r3, r2
 8005954:	d901      	bls.n	800595a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e04f      	b.n	80059fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800595a:	4b2b      	ldr	r3, [pc, #172]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 020c 	and.w	r2, r3, #12
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	429a      	cmp	r2, r3
 800596a:	d1eb      	bne.n	8005944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800596c:	4b25      	ldr	r3, [pc, #148]	; (8005a04 <HAL_RCC_ClockConfig+0x1b8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0307 	and.w	r3, r3, #7
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d20c      	bcs.n	8005994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800597a:	4b22      	ldr	r3, [pc, #136]	; (8005a04 <HAL_RCC_ClockConfig+0x1b8>)
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005982:	4b20      	ldr	r3, [pc, #128]	; (8005a04 <HAL_RCC_ClockConfig+0x1b8>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d001      	beq.n	8005994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e032      	b.n	80059fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d008      	beq.n	80059b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059a0:	4b19      	ldr	r3, [pc, #100]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	4916      	ldr	r1, [pc, #88]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059be:	4b12      	ldr	r3, [pc, #72]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	490e      	ldr	r1, [pc, #56]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059d2:	f000 f821 	bl	8005a18 <HAL_RCC_GetSysClockFreq>
 80059d6:	4602      	mov	r2, r0
 80059d8:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	091b      	lsrs	r3, r3, #4
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	490a      	ldr	r1, [pc, #40]	; (8005a0c <HAL_RCC_ClockConfig+0x1c0>)
 80059e4:	5ccb      	ldrb	r3, [r1, r3]
 80059e6:	fa22 f303 	lsr.w	r3, r2, r3
 80059ea:	4a09      	ldr	r2, [pc, #36]	; (8005a10 <HAL_RCC_ClockConfig+0x1c4>)
 80059ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059ee:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <HAL_RCC_ClockConfig+0x1c8>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe fa54 	bl	8003ea0 <HAL_InitTick>

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40023c00 	.word	0x40023c00
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	0800ca04 	.word	0x0800ca04
 8005a10:	200000b8 	.word	0x200000b8
 8005a14:	200000bc 	.word	0x200000bc

08005a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a1c:	b094      	sub	sp, #80	; 0x50
 8005a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	647b      	str	r3, [r7, #68]	; 0x44
 8005a24:	2300      	movs	r3, #0
 8005a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a28:	2300      	movs	r3, #0
 8005a2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a30:	4b79      	ldr	r3, [pc, #484]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 030c 	and.w	r3, r3, #12
 8005a38:	2b08      	cmp	r3, #8
 8005a3a:	d00d      	beq.n	8005a58 <HAL_RCC_GetSysClockFreq+0x40>
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	f200 80e1 	bhi.w	8005c04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_RCC_GetSysClockFreq+0x34>
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d003      	beq.n	8005a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a4a:	e0db      	b.n	8005c04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a4c:	4b73      	ldr	r3, [pc, #460]	; (8005c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a50:	e0db      	b.n	8005c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a52:	4b73      	ldr	r3, [pc, #460]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a56:	e0d8      	b.n	8005c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a58:	4b6f      	ldr	r3, [pc, #444]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a62:	4b6d      	ldr	r3, [pc, #436]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d063      	beq.n	8005b36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a6e:	4b6a      	ldr	r3, [pc, #424]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	099b      	lsrs	r3, r3, #6
 8005a74:	2200      	movs	r2, #0
 8005a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a80:	633b      	str	r3, [r7, #48]	; 0x30
 8005a82:	2300      	movs	r3, #0
 8005a84:	637b      	str	r3, [r7, #52]	; 0x34
 8005a86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	f04f 0000 	mov.w	r0, #0
 8005a92:	f04f 0100 	mov.w	r1, #0
 8005a96:	0159      	lsls	r1, r3, #5
 8005a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a9c:	0150      	lsls	r0, r2, #5
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	1a51      	subs	r1, r2, r1
 8005aa6:	6139      	str	r1, [r7, #16]
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005abc:	4659      	mov	r1, fp
 8005abe:	018b      	lsls	r3, r1, #6
 8005ac0:	4651      	mov	r1, sl
 8005ac2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ac6:	4651      	mov	r1, sl
 8005ac8:	018a      	lsls	r2, r1, #6
 8005aca:	4651      	mov	r1, sl
 8005acc:	ebb2 0801 	subs.w	r8, r2, r1
 8005ad0:	4659      	mov	r1, fp
 8005ad2:	eb63 0901 	sbc.w	r9, r3, r1
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aea:	4690      	mov	r8, r2
 8005aec:	4699      	mov	r9, r3
 8005aee:	4623      	mov	r3, r4
 8005af0:	eb18 0303 	adds.w	r3, r8, r3
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	462b      	mov	r3, r5
 8005af8:	eb49 0303 	adc.w	r3, r9, r3
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	024b      	lsls	r3, r1, #9
 8005b0e:	4621      	mov	r1, r4
 8005b10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b14:	4621      	mov	r1, r4
 8005b16:	024a      	lsls	r2, r1, #9
 8005b18:	4610      	mov	r0, r2
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b1e:	2200      	movs	r2, #0
 8005b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b28:	f7fa fba2 	bl	8000270 <__aeabi_uldivmod>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4613      	mov	r3, r2
 8005b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b34:	e058      	b.n	8005be8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b36:	4b38      	ldr	r3, [pc, #224]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	099b      	lsrs	r3, r3, #6
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	4618      	mov	r0, r3
 8005b40:	4611      	mov	r1, r2
 8005b42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b46:	623b      	str	r3, [r7, #32]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b50:	4642      	mov	r2, r8
 8005b52:	464b      	mov	r3, r9
 8005b54:	f04f 0000 	mov.w	r0, #0
 8005b58:	f04f 0100 	mov.w	r1, #0
 8005b5c:	0159      	lsls	r1, r3, #5
 8005b5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b62:	0150      	lsls	r0, r2, #5
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4641      	mov	r1, r8
 8005b6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b6e:	4649      	mov	r1, r9
 8005b70:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b88:	ebb2 040a 	subs.w	r4, r2, sl
 8005b8c:	eb63 050b 	sbc.w	r5, r3, fp
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	00eb      	lsls	r3, r5, #3
 8005b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b9e:	00e2      	lsls	r2, r4, #3
 8005ba0:	4614      	mov	r4, r2
 8005ba2:	461d      	mov	r5, r3
 8005ba4:	4643      	mov	r3, r8
 8005ba6:	18e3      	adds	r3, r4, r3
 8005ba8:	603b      	str	r3, [r7, #0]
 8005baa:	464b      	mov	r3, r9
 8005bac:	eb45 0303 	adc.w	r3, r5, r3
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	028b      	lsls	r3, r1, #10
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bc8:	4621      	mov	r1, r4
 8005bca:	028a      	lsls	r2, r1, #10
 8005bcc:	4610      	mov	r0, r2
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	61bb      	str	r3, [r7, #24]
 8005bd6:	61fa      	str	r2, [r7, #28]
 8005bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bdc:	f7fa fb48 	bl	8000270 <__aeabi_uldivmod>
 8005be0:	4602      	mov	r2, r0
 8005be2:	460b      	mov	r3, r1
 8005be4:	4613      	mov	r3, r2
 8005be6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005be8:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	0c1b      	lsrs	r3, r3, #16
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005bf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c02:	e002      	b.n	8005c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c04:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3750      	adds	r7, #80	; 0x50
 8005c10:	46bd      	mov	sp, r7
 8005c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c16:	bf00      	nop
 8005c18:	40023800 	.word	0x40023800
 8005c1c:	00f42400 	.word	0x00f42400
 8005c20:	007a1200 	.word	0x007a1200

08005c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c28:	4b03      	ldr	r3, [pc, #12]	; (8005c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	200000b8 	.word	0x200000b8

08005c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c40:	f7ff fff0 	bl	8005c24 <HAL_RCC_GetHCLKFreq>
 8005c44:	4602      	mov	r2, r0
 8005c46:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	0a9b      	lsrs	r3, r3, #10
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	4903      	ldr	r1, [pc, #12]	; (8005c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c52:	5ccb      	ldrb	r3, [r1, r3]
 8005c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	0800ca14 	.word	0x0800ca14

08005c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c68:	f7ff ffdc 	bl	8005c24 <HAL_RCC_GetHCLKFreq>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	0b5b      	lsrs	r3, r3, #13
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	4903      	ldr	r1, [pc, #12]	; (8005c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c7a:	5ccb      	ldrb	r3, [r1, r3]
 8005c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40023800 	.word	0x40023800
 8005c88:	0800ca14 	.word	0x0800ca14

08005c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e07b      	b.n	8005d96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d108      	bne.n	8005cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cae:	d009      	beq.n	8005cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	61da      	str	r2, [r3, #28]
 8005cb6:	e005      	b.n	8005cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fd fc58 	bl	8003594 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d48:	ea42 0103 	orr.w	r1, r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	f003 0104 	and.w	r1, r3, #4
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	f003 0210 	and.w	r2, r3, #16
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b088      	sub	sp, #32
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	603b      	str	r3, [r7, #0]
 8005daa:	4613      	mov	r3, r2
 8005dac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_SPI_Transmit+0x22>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e126      	b.n	800600e <HAL_SPI_Transmit+0x270>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dc8:	f7fe f8ae 	bl	8003f28 <HAL_GetTick>
 8005dcc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d002      	beq.n	8005de4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dde:	2302      	movs	r3, #2
 8005de0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005de2:	e10b      	b.n	8005ffc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <HAL_SPI_Transmit+0x52>
 8005dea:	88fb      	ldrh	r3, [r7, #6]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005df4:	e102      	b.n	8005ffc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2203      	movs	r2, #3
 8005dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	88fa      	ldrh	r2, [r7, #6]
 8005e0e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	88fa      	ldrh	r2, [r7, #6]
 8005e14:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3c:	d10f      	bne.n	8005e5e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	d007      	beq.n	8005e7c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e84:	d14b      	bne.n	8005f1e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <HAL_SPI_Transmit+0xf6>
 8005e8e:	8afb      	ldrh	r3, [r7, #22]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d13e      	bne.n	8005f12 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e98:	881a      	ldrh	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea4:	1c9a      	adds	r2, r3, #2
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005eb8:	e02b      	b.n	8005f12 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d112      	bne.n	8005eee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	881a      	ldrh	r2, [r3, #0]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed8:	1c9a      	adds	r2, r3, #2
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	86da      	strh	r2, [r3, #54]	; 0x36
 8005eec:	e011      	b.n	8005f12 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eee:	f7fe f81b 	bl	8003f28 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d803      	bhi.n	8005f06 <HAL_SPI_Transmit+0x168>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f04:	d102      	bne.n	8005f0c <HAL_SPI_Transmit+0x16e>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f10:	e074      	b.n	8005ffc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1ce      	bne.n	8005eba <HAL_SPI_Transmit+0x11c>
 8005f1c:	e04c      	b.n	8005fb8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <HAL_SPI_Transmit+0x18e>
 8005f26:	8afb      	ldrh	r3, [r7, #22]
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d140      	bne.n	8005fae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	330c      	adds	r3, #12
 8005f36:	7812      	ldrb	r2, [r2, #0]
 8005f38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	1c5a      	adds	r2, r3, #1
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f52:	e02c      	b.n	8005fae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d113      	bne.n	8005f8a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	7812      	ldrb	r2, [r2, #0]
 8005f6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f88:	e011      	b.n	8005fae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f8a:	f7fd ffcd 	bl	8003f28 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d803      	bhi.n	8005fa2 <HAL_SPI_Transmit+0x204>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d102      	bne.n	8005fa8 <HAL_SPI_Transmit+0x20a>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fac:	e026      	b.n	8005ffc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1cd      	bne.n	8005f54 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 fbcb 	bl	8006758 <SPI_EndRxTxTransaction>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	613b      	str	r3, [r7, #16]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	613b      	str	r3, [r7, #16]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	77fb      	strb	r3, [r7, #31]
 8005ff8:	e000      	b.n	8005ffc <HAL_SPI_Transmit+0x25e>
  }

error:
 8005ffa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800600c:	7ffb      	ldrb	r3, [r7, #31]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3720      	adds	r7, #32
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b088      	sub	sp, #32
 800601a:	af02      	add	r7, sp, #8
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	603b      	str	r3, [r7, #0]
 8006022:	4613      	mov	r3, r2
 8006024:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006032:	d112      	bne.n	800605a <HAL_SPI_Receive+0x44>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10e      	bne.n	800605a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2204      	movs	r2, #4
 8006040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006044:	88fa      	ldrh	r2, [r7, #6]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	4613      	mov	r3, r2
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 f8f1 	bl	8006238 <HAL_SPI_TransmitReceive>
 8006056:	4603      	mov	r3, r0
 8006058:	e0ea      	b.n	8006230 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006060:	2b01      	cmp	r3, #1
 8006062:	d101      	bne.n	8006068 <HAL_SPI_Receive+0x52>
 8006064:	2302      	movs	r3, #2
 8006066:	e0e3      	b.n	8006230 <HAL_SPI_Receive+0x21a>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006070:	f7fd ff5a 	bl	8003f28 <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b01      	cmp	r3, #1
 8006080:	d002      	beq.n	8006088 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006082:	2302      	movs	r3, #2
 8006084:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006086:	e0ca      	b.n	800621e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <HAL_SPI_Receive+0x7e>
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d102      	bne.n	800609a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006098:	e0c1      	b.n	800621e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2204      	movs	r2, #4
 800609e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	68ba      	ldr	r2, [r7, #8]
 80060ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	88fa      	ldrh	r2, [r7, #6]
 80060b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	88fa      	ldrh	r2, [r7, #6]
 80060b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e0:	d10f      	bne.n	8006102 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006100:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610c:	2b40      	cmp	r3, #64	; 0x40
 800610e:	d007      	beq.n	8006120 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800611e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d162      	bne.n	80061ee <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006128:	e02e      	b.n	8006188 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b01      	cmp	r3, #1
 8006136:	d115      	bne.n	8006164 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f103 020c 	add.w	r2, r3, #12
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	7812      	ldrb	r2, [r2, #0]
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006162:	e011      	b.n	8006188 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006164:	f7fd fee0 	bl	8003f28 <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d803      	bhi.n	800617c <HAL_SPI_Receive+0x166>
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617a:	d102      	bne.n	8006182 <HAL_SPI_Receive+0x16c>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d102      	bne.n	8006188 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006186:	e04a      	b.n	800621e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1cb      	bne.n	800612a <HAL_SPI_Receive+0x114>
 8006192:	e031      	b.n	80061f8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d113      	bne.n	80061ca <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ac:	b292      	uxth	r2, r2
 80061ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	1c9a      	adds	r2, r3, #2
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061c8:	e011      	b.n	80061ee <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061ca:	f7fd fead 	bl	8003f28 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d803      	bhi.n	80061e2 <HAL_SPI_Receive+0x1cc>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e0:	d102      	bne.n	80061e8 <HAL_SPI_Receive+0x1d2>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d102      	bne.n	80061ee <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061ec:	e017      	b.n	800621e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1cd      	bne.n	8006194 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 fa45 	bl	800668c <SPI_EndRxTransaction>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d002      	beq.n	800620e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	75fb      	strb	r3, [r7, #23]
 800621a:	e000      	b.n	800621e <HAL_SPI_Receive+0x208>
  }

error :
 800621c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800622e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08c      	sub	sp, #48	; 0x30
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006246:	2301      	movs	r3, #1
 8006248:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_SPI_TransmitReceive+0x26>
 800625a:	2302      	movs	r3, #2
 800625c:	e18a      	b.n	8006574 <HAL_SPI_TransmitReceive+0x33c>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006266:	f7fd fe5f 	bl	8003f28 <HAL_GetTick>
 800626a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800627c:	887b      	ldrh	r3, [r7, #2]
 800627e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006284:	2b01      	cmp	r3, #1
 8006286:	d00f      	beq.n	80062a8 <HAL_SPI_TransmitReceive+0x70>
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800628e:	d107      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d103      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x68>
 8006298:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800629c:	2b04      	cmp	r3, #4
 800629e:	d003      	beq.n	80062a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062a0:	2302      	movs	r3, #2
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062a6:	e15b      	b.n	8006560 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <HAL_SPI_TransmitReceive+0x82>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <HAL_SPI_TransmitReceive+0x82>
 80062b4:	887b      	ldrh	r3, [r7, #2]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d103      	bne.n	80062c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062c0:	e14e      	b.n	8006560 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d003      	beq.n	80062d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2205      	movs	r2, #5
 80062d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	887a      	ldrh	r2, [r7, #2]
 80062e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	887a      	ldrh	r2, [r7, #2]
 80062ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	887a      	ldrh	r2, [r7, #2]
 80062f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	887a      	ldrh	r2, [r7, #2]
 80062fe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	d007      	beq.n	800632a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006328:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006332:	d178      	bne.n	8006426 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <HAL_SPI_TransmitReceive+0x10a>
 800633c:	8b7b      	ldrh	r3, [r7, #26]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d166      	bne.n	8006410 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006346:	881a      	ldrh	r2, [r3, #0]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	1c9a      	adds	r2, r3, #2
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006366:	e053      	b.n	8006410 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b02      	cmp	r3, #2
 8006374:	d11b      	bne.n	80063ae <HAL_SPI_TransmitReceive+0x176>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d016      	beq.n	80063ae <HAL_SPI_TransmitReceive+0x176>
 8006380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006382:	2b01      	cmp	r3, #1
 8006384:	d113      	bne.n	80063ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	881a      	ldrh	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	1c9a      	adds	r2, r3, #2
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d119      	bne.n	80063f0 <HAL_SPI_TransmitReceive+0x1b8>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d014      	beq.n	80063f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	b292      	uxth	r2, r2
 80063d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	1c9a      	adds	r2, r3, #2
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	3b01      	subs	r3, #1
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063ec:	2301      	movs	r3, #1
 80063ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063f0:	f7fd fd9a 	bl	8003f28 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d807      	bhi.n	8006410 <HAL_SPI_TransmitReceive+0x1d8>
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006406:	d003      	beq.n	8006410 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800640e:	e0a7      	b.n	8006560 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1a6      	bne.n	8006368 <HAL_SPI_TransmitReceive+0x130>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800641e:	b29b      	uxth	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1a1      	bne.n	8006368 <HAL_SPI_TransmitReceive+0x130>
 8006424:	e07c      	b.n	8006520 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <HAL_SPI_TransmitReceive+0x1fc>
 800642e:	8b7b      	ldrh	r3, [r7, #26]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d16b      	bne.n	800650c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	7812      	ldrb	r2, [r2, #0]
 8006440:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800645a:	e057      	b.n	800650c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b02      	cmp	r3, #2
 8006468:	d11c      	bne.n	80064a4 <HAL_SPI_TransmitReceive+0x26c>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800646e:	b29b      	uxth	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d017      	beq.n	80064a4 <HAL_SPI_TransmitReceive+0x26c>
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	2b01      	cmp	r3, #1
 8006478:	d114      	bne.n	80064a4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	330c      	adds	r3, #12
 8006484:	7812      	ldrb	r2, [r2, #0]
 8006486:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006496:	b29b      	uxth	r3, r3
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d119      	bne.n	80064e6 <HAL_SPI_TransmitReceive+0x2ae>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d014      	beq.n	80064e6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ce:	1c5a      	adds	r2, r3, #1
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	b29a      	uxth	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064e2:	2301      	movs	r3, #1
 80064e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064e6:	f7fd fd1f 	bl	8003f28 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d803      	bhi.n	80064fe <HAL_SPI_TransmitReceive+0x2c6>
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d102      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x2cc>
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	2b00      	cmp	r3, #0
 8006502:	d103      	bne.n	800650c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800650a:	e029      	b.n	8006560 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1a2      	bne.n	800645c <HAL_SPI_TransmitReceive+0x224>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800651a:	b29b      	uxth	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d19d      	bne.n	800645c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006522:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 f917 	bl	8006758 <SPI_EndRxTxTransaction>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d006      	beq.n	800653e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2220      	movs	r2, #32
 800653a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800653c:	e010      	b.n	8006560 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10b      	bne.n	800655e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	e000      	b.n	8006560 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800655e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006570:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006574:	4618      	mov	r0, r3
 8006576:	3730      	adds	r7, #48	; 0x30
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	603b      	str	r3, [r7, #0]
 8006588:	4613      	mov	r3, r2
 800658a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800658c:	f7fd fccc 	bl	8003f28 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	4413      	add	r3, r2
 800659a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800659c:	f7fd fcc4 	bl	8003f28 <HAL_GetTick>
 80065a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065a2:	4b39      	ldr	r3, [pc, #228]	; (8006688 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	015b      	lsls	r3, r3, #5
 80065a8:	0d1b      	lsrs	r3, r3, #20
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	fb02 f303 	mul.w	r3, r2, r3
 80065b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065b2:	e054      	b.n	800665e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ba:	d050      	beq.n	800665e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065bc:	f7fd fcb4 	bl	8003f28 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d902      	bls.n	80065d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d13d      	bne.n	800664e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ea:	d111      	bne.n	8006610 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f4:	d004      	beq.n	8006600 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065fe:	d107      	bne.n	8006610 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800660e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006618:	d10f      	bne.n	800663a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006638:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e017      	b.n	800667e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	3b01      	subs	r3, #1
 800665c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	4013      	ands	r3, r2
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	429a      	cmp	r2, r3
 800666c:	bf0c      	ite	eq
 800666e:	2301      	moveq	r3, #1
 8006670:	2300      	movne	r3, #0
 8006672:	b2db      	uxtb	r3, r3
 8006674:	461a      	mov	r2, r3
 8006676:	79fb      	ldrb	r3, [r7, #7]
 8006678:	429a      	cmp	r2, r3
 800667a:	d19b      	bne.n	80065b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3720      	adds	r7, #32
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	200000b8 	.word	0x200000b8

0800668c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af02      	add	r7, sp, #8
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066a0:	d111      	bne.n	80066c6 <SPI_EndRxTransaction+0x3a>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066aa:	d004      	beq.n	80066b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b4:	d107      	bne.n	80066c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ce:	d12a      	bne.n	8006726 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d8:	d012      	beq.n	8006700 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2200      	movs	r2, #0
 80066e2:	2180      	movs	r1, #128	; 0x80
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff ff49 	bl	800657c <SPI_WaitFlagStateUntilTimeout>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d02d      	beq.n	800674c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f4:	f043 0220 	orr.w	r2, r3, #32
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e026      	b.n	800674e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2200      	movs	r2, #0
 8006708:	2101      	movs	r1, #1
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff ff36 	bl	800657c <SPI_WaitFlagStateUntilTimeout>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d01a      	beq.n	800674c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671a:	f043 0220 	orr.w	r2, r3, #32
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e013      	b.n	800674e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2200      	movs	r2, #0
 800672e:	2101      	movs	r1, #1
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff ff23 	bl	800657c <SPI_WaitFlagStateUntilTimeout>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d007      	beq.n	800674c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006740:	f043 0220 	orr.w	r2, r3, #32
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e000      	b.n	800674e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006764:	4b1b      	ldr	r3, [pc, #108]	; (80067d4 <SPI_EndRxTxTransaction+0x7c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1b      	ldr	r2, [pc, #108]	; (80067d8 <SPI_EndRxTxTransaction+0x80>)
 800676a:	fba2 2303 	umull	r2, r3, r2, r3
 800676e:	0d5b      	lsrs	r3, r3, #21
 8006770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006774:	fb02 f303 	mul.w	r3, r2, r3
 8006778:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006782:	d112      	bne.n	80067aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2200      	movs	r2, #0
 800678c:	2180      	movs	r1, #128	; 0x80
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7ff fef4 	bl	800657c <SPI_WaitFlagStateUntilTimeout>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d016      	beq.n	80067c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679e:	f043 0220 	orr.w	r2, r3, #32
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e00f      	b.n	80067ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c0:	2b80      	cmp	r3, #128	; 0x80
 80067c2:	d0f2      	beq.n	80067aa <SPI_EndRxTxTransaction+0x52>
 80067c4:	e000      	b.n	80067c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80067c6:	bf00      	nop
  }

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	200000b8 	.word	0x200000b8
 80067d8:	165e9f81 	.word	0x165e9f81

080067dc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e034      	b.n	800685c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d106      	bne.n	800680c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f7fa f92c 	bl	8000a64 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3308      	adds	r3, #8
 8006814:	4619      	mov	r1, r3
 8006816:	4610      	mov	r0, r2
 8006818:	f002 f84e 	bl	80088b8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6818      	ldr	r0, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	461a      	mov	r2, r3
 8006826:	68b9      	ldr	r1, [r7, #8]
 8006828:	f002 f898 	bl	800895c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6858      	ldr	r0, [r3, #4]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006838:	6879      	ldr	r1, [r7, #4]
 800683a:	f002 f8cd 	bl	80089d8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	6892      	ldr	r2, [r2, #8]
 8006846:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	6892      	ldr	r2, [r2, #8]
 8006852:	f041 0101 	orr.w	r1, r1, #1
 8006856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e041      	b.n	80068fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7fd f906 	bl	8003a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3304      	adds	r3, #4
 80068a0:	4619      	mov	r1, r3
 80068a2:	4610      	mov	r0, r2
 80068a4:	f000 fc1a 	bl	80070dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b01      	cmp	r3, #1
 8006916:	d001      	beq.n	800691c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e046      	b.n	80069aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a23      	ldr	r2, [pc, #140]	; (80069b8 <HAL_TIM_Base_Start+0xb4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d022      	beq.n	8006974 <HAL_TIM_Base_Start+0x70>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006936:	d01d      	beq.n	8006974 <HAL_TIM_Base_Start+0x70>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a1f      	ldr	r2, [pc, #124]	; (80069bc <HAL_TIM_Base_Start+0xb8>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d018      	beq.n	8006974 <HAL_TIM_Base_Start+0x70>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1e      	ldr	r2, [pc, #120]	; (80069c0 <HAL_TIM_Base_Start+0xbc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d013      	beq.n	8006974 <HAL_TIM_Base_Start+0x70>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1c      	ldr	r2, [pc, #112]	; (80069c4 <HAL_TIM_Base_Start+0xc0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00e      	beq.n	8006974 <HAL_TIM_Base_Start+0x70>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1b      	ldr	r2, [pc, #108]	; (80069c8 <HAL_TIM_Base_Start+0xc4>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d009      	beq.n	8006974 <HAL_TIM_Base_Start+0x70>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a19      	ldr	r2, [pc, #100]	; (80069cc <HAL_TIM_Base_Start+0xc8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d004      	beq.n	8006974 <HAL_TIM_Base_Start+0x70>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a18      	ldr	r2, [pc, #96]	; (80069d0 <HAL_TIM_Base_Start+0xcc>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d111      	bne.n	8006998 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b06      	cmp	r3, #6
 8006984:	d010      	beq.n	80069a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0201 	orr.w	r2, r2, #1
 8006994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006996:	e007      	b.n	80069a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0201 	orr.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40010000 	.word	0x40010000
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00
 80069c8:	40010400 	.word	0x40010400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40001800 	.word	0x40001800

080069d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d001      	beq.n	80069ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e04e      	b.n	8006a8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0201 	orr.w	r2, r2, #1
 8006a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a23      	ldr	r2, [pc, #140]	; (8006a98 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d022      	beq.n	8006a54 <HAL_TIM_Base_Start_IT+0x80>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a16:	d01d      	beq.n	8006a54 <HAL_TIM_Base_Start_IT+0x80>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1f      	ldr	r2, [pc, #124]	; (8006a9c <HAL_TIM_Base_Start_IT+0xc8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d018      	beq.n	8006a54 <HAL_TIM_Base_Start_IT+0x80>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a1e      	ldr	r2, [pc, #120]	; (8006aa0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d013      	beq.n	8006a54 <HAL_TIM_Base_Start_IT+0x80>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a1c      	ldr	r2, [pc, #112]	; (8006aa4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00e      	beq.n	8006a54 <HAL_TIM_Base_Start_IT+0x80>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a1b      	ldr	r2, [pc, #108]	; (8006aa8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d009      	beq.n	8006a54 <HAL_TIM_Base_Start_IT+0x80>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a19      	ldr	r2, [pc, #100]	; (8006aac <HAL_TIM_Base_Start_IT+0xd8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d004      	beq.n	8006a54 <HAL_TIM_Base_Start_IT+0x80>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a18      	ldr	r2, [pc, #96]	; (8006ab0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d111      	bne.n	8006a78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 0307 	and.w	r3, r3, #7
 8006a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2b06      	cmp	r3, #6
 8006a64:	d010      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0201 	orr.w	r2, r2, #1
 8006a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a76:	e007      	b.n	8006a88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f042 0201 	orr.w	r2, r2, #1
 8006a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	40010000 	.word	0x40010000
 8006a9c:	40000400 	.word	0x40000400
 8006aa0:	40000800 	.word	0x40000800
 8006aa4:	40000c00 	.word	0x40000c00
 8006aa8:	40010400 	.word	0x40010400
 8006aac:	40014000 	.word	0x40014000
 8006ab0:	40001800 	.word	0x40001800

08006ab4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e041      	b.n	8006b4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d106      	bne.n	8006ae0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f839 	bl	8006b52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	3304      	adds	r3, #4
 8006af0:	4619      	mov	r1, r3
 8006af2:	4610      	mov	r0, r2
 8006af4:	f000 faf2 	bl	80070dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b083      	sub	sp, #12
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d122      	bne.n	8006bc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d11b      	bne.n	8006bc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f06f 0202 	mvn.w	r2, #2
 8006b92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	f003 0303 	and.w	r3, r3, #3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d003      	beq.n	8006bb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fa78 	bl	800709e <HAL_TIM_IC_CaptureCallback>
 8006bae:	e005      	b.n	8006bbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fa6a 	bl	800708a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fa7b 	bl	80070b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	f003 0304 	and.w	r3, r3, #4
 8006bcc:	2b04      	cmp	r3, #4
 8006bce:	d122      	bne.n	8006c16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f003 0304 	and.w	r3, r3, #4
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	d11b      	bne.n	8006c16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f06f 0204 	mvn.w	r2, #4
 8006be6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fa4e 	bl	800709e <HAL_TIM_IC_CaptureCallback>
 8006c02:	e005      	b.n	8006c10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fa40 	bl	800708a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fa51 	bl	80070b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d122      	bne.n	8006c6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d11b      	bne.n	8006c6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f06f 0208 	mvn.w	r2, #8
 8006c3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2204      	movs	r2, #4
 8006c40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	f003 0303 	and.w	r3, r3, #3
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fa24 	bl	800709e <HAL_TIM_IC_CaptureCallback>
 8006c56:	e005      	b.n	8006c64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fa16 	bl	800708a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa27 	bl	80070b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	f003 0310 	and.w	r3, r3, #16
 8006c74:	2b10      	cmp	r3, #16
 8006c76:	d122      	bne.n	8006cbe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f003 0310 	and.w	r3, r3, #16
 8006c82:	2b10      	cmp	r3, #16
 8006c84:	d11b      	bne.n	8006cbe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f06f 0210 	mvn.w	r2, #16
 8006c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2208      	movs	r2, #8
 8006c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 f9fa 	bl	800709e <HAL_TIM_IC_CaptureCallback>
 8006caa:	e005      	b.n	8006cb8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f9ec 	bl	800708a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f9fd 	bl	80070b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d10e      	bne.n	8006cea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d107      	bne.n	8006cea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f06f 0201 	mvn.w	r2, #1
 8006ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7fc fbf5 	bl	80034d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf4:	2b80      	cmp	r3, #128	; 0x80
 8006cf6:	d10e      	bne.n	8006d16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d02:	2b80      	cmp	r3, #128	; 0x80
 8006d04:	d107      	bne.n	8006d16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fd53 	bl	80077bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d20:	2b40      	cmp	r3, #64	; 0x40
 8006d22:	d10e      	bne.n	8006d42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d2e:	2b40      	cmp	r3, #64	; 0x40
 8006d30:	d107      	bne.n	8006d42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f9c2 	bl	80070c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	f003 0320 	and.w	r3, r3, #32
 8006d4c:	2b20      	cmp	r3, #32
 8006d4e:	d10e      	bne.n	8006d6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	d107      	bne.n	8006d6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f06f 0220 	mvn.w	r2, #32
 8006d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fd1d 	bl	80077a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d101      	bne.n	8006d96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d92:	2302      	movs	r3, #2
 8006d94:	e0ae      	b.n	8006ef4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b0c      	cmp	r3, #12
 8006da2:	f200 809f 	bhi.w	8006ee4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006da6:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dac:	08006de1 	.word	0x08006de1
 8006db0:	08006ee5 	.word	0x08006ee5
 8006db4:	08006ee5 	.word	0x08006ee5
 8006db8:	08006ee5 	.word	0x08006ee5
 8006dbc:	08006e21 	.word	0x08006e21
 8006dc0:	08006ee5 	.word	0x08006ee5
 8006dc4:	08006ee5 	.word	0x08006ee5
 8006dc8:	08006ee5 	.word	0x08006ee5
 8006dcc:	08006e63 	.word	0x08006e63
 8006dd0:	08006ee5 	.word	0x08006ee5
 8006dd4:	08006ee5 	.word	0x08006ee5
 8006dd8:	08006ee5 	.word	0x08006ee5
 8006ddc:	08006ea3 	.word	0x08006ea3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68b9      	ldr	r1, [r7, #8]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fa18 	bl	800721c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699a      	ldr	r2, [r3, #24]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0208 	orr.w	r2, r2, #8
 8006dfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f022 0204 	bic.w	r2, r2, #4
 8006e0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6999      	ldr	r1, [r3, #24]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	691a      	ldr	r2, [r3, #16]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	619a      	str	r2, [r3, #24]
      break;
 8006e1e:	e064      	b.n	8006eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68b9      	ldr	r1, [r7, #8]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 fa68 	bl	80072fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	699a      	ldr	r2, [r3, #24]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699a      	ldr	r2, [r3, #24]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6999      	ldr	r1, [r3, #24]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	021a      	lsls	r2, r3, #8
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	619a      	str	r2, [r3, #24]
      break;
 8006e60:	e043      	b.n	8006eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68b9      	ldr	r1, [r7, #8]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 fabd 	bl	80073e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69da      	ldr	r2, [r3, #28]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f042 0208 	orr.w	r2, r2, #8
 8006e7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69da      	ldr	r2, [r3, #28]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f022 0204 	bic.w	r2, r2, #4
 8006e8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69d9      	ldr	r1, [r3, #28]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	61da      	str	r2, [r3, #28]
      break;
 8006ea0:	e023      	b.n	8006eea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68b9      	ldr	r1, [r7, #8]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fb11 	bl	80074d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69da      	ldr	r2, [r3, #28]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ebc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ecc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69d9      	ldr	r1, [r3, #28]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	021a      	lsls	r2, r3, #8
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	61da      	str	r2, [r3, #28]
      break;
 8006ee2:	e002      	b.n	8006eea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f06:	2300      	movs	r3, #0
 8006f08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <HAL_TIM_ConfigClockSource+0x1c>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e0b4      	b.n	8007082 <HAL_TIM_ConfigClockSource+0x186>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f50:	d03e      	beq.n	8006fd0 <HAL_TIM_ConfigClockSource+0xd4>
 8006f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f56:	f200 8087 	bhi.w	8007068 <HAL_TIM_ConfigClockSource+0x16c>
 8006f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f5e:	f000 8086 	beq.w	800706e <HAL_TIM_ConfigClockSource+0x172>
 8006f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f66:	d87f      	bhi.n	8007068 <HAL_TIM_ConfigClockSource+0x16c>
 8006f68:	2b70      	cmp	r3, #112	; 0x70
 8006f6a:	d01a      	beq.n	8006fa2 <HAL_TIM_ConfigClockSource+0xa6>
 8006f6c:	2b70      	cmp	r3, #112	; 0x70
 8006f6e:	d87b      	bhi.n	8007068 <HAL_TIM_ConfigClockSource+0x16c>
 8006f70:	2b60      	cmp	r3, #96	; 0x60
 8006f72:	d050      	beq.n	8007016 <HAL_TIM_ConfigClockSource+0x11a>
 8006f74:	2b60      	cmp	r3, #96	; 0x60
 8006f76:	d877      	bhi.n	8007068 <HAL_TIM_ConfigClockSource+0x16c>
 8006f78:	2b50      	cmp	r3, #80	; 0x50
 8006f7a:	d03c      	beq.n	8006ff6 <HAL_TIM_ConfigClockSource+0xfa>
 8006f7c:	2b50      	cmp	r3, #80	; 0x50
 8006f7e:	d873      	bhi.n	8007068 <HAL_TIM_ConfigClockSource+0x16c>
 8006f80:	2b40      	cmp	r3, #64	; 0x40
 8006f82:	d058      	beq.n	8007036 <HAL_TIM_ConfigClockSource+0x13a>
 8006f84:	2b40      	cmp	r3, #64	; 0x40
 8006f86:	d86f      	bhi.n	8007068 <HAL_TIM_ConfigClockSource+0x16c>
 8006f88:	2b30      	cmp	r3, #48	; 0x30
 8006f8a:	d064      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x15a>
 8006f8c:	2b30      	cmp	r3, #48	; 0x30
 8006f8e:	d86b      	bhi.n	8007068 <HAL_TIM_ConfigClockSource+0x16c>
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	d060      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x15a>
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	d867      	bhi.n	8007068 <HAL_TIM_ConfigClockSource+0x16c>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d05c      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x15a>
 8006f9c:	2b10      	cmp	r3, #16
 8006f9e:	d05a      	beq.n	8007056 <HAL_TIM_ConfigClockSource+0x15a>
 8006fa0:	e062      	b.n	8007068 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	6899      	ldr	r1, [r3, #8]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f000 fb5d 	bl	8007670 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	609a      	str	r2, [r3, #8]
      break;
 8006fce:	e04f      	b.n	8007070 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	6899      	ldr	r1, [r3, #8]
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f000 fb46 	bl	8007670 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ff2:	609a      	str	r2, [r3, #8]
      break;
 8006ff4:	e03c      	b.n	8007070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	6859      	ldr	r1, [r3, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	461a      	mov	r2, r3
 8007004:	f000 faba 	bl	800757c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2150      	movs	r1, #80	; 0x50
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fb13 	bl	800763a <TIM_ITRx_SetConfig>
      break;
 8007014:	e02c      	b.n	8007070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6818      	ldr	r0, [r3, #0]
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	6859      	ldr	r1, [r3, #4]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	461a      	mov	r2, r3
 8007024:	f000 fad9 	bl	80075da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2160      	movs	r1, #96	; 0x60
 800702e:	4618      	mov	r0, r3
 8007030:	f000 fb03 	bl	800763a <TIM_ITRx_SetConfig>
      break;
 8007034:	e01c      	b.n	8007070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	6859      	ldr	r1, [r3, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	461a      	mov	r2, r3
 8007044:	f000 fa9a 	bl	800757c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2140      	movs	r1, #64	; 0x40
 800704e:	4618      	mov	r0, r3
 8007050:	f000 faf3 	bl	800763a <TIM_ITRx_SetConfig>
      break;
 8007054:	e00c      	b.n	8007070 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4619      	mov	r1, r3
 8007060:	4610      	mov	r0, r2
 8007062:	f000 faea 	bl	800763a <TIM_ITRx_SetConfig>
      break;
 8007066:	e003      	b.n	8007070 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	73fb      	strb	r3, [r7, #15]
      break;
 800706c:	e000      	b.n	8007070 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800706e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007080:	7bfb      	ldrb	r3, [r7, #15]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007092:	bf00      	nop
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
	...

080070dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a40      	ldr	r2, [pc, #256]	; (80071f0 <TIM_Base_SetConfig+0x114>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d013      	beq.n	800711c <TIM_Base_SetConfig+0x40>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070fa:	d00f      	beq.n	800711c <TIM_Base_SetConfig+0x40>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a3d      	ldr	r2, [pc, #244]	; (80071f4 <TIM_Base_SetConfig+0x118>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d00b      	beq.n	800711c <TIM_Base_SetConfig+0x40>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a3c      	ldr	r2, [pc, #240]	; (80071f8 <TIM_Base_SetConfig+0x11c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d007      	beq.n	800711c <TIM_Base_SetConfig+0x40>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a3b      	ldr	r2, [pc, #236]	; (80071fc <TIM_Base_SetConfig+0x120>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d003      	beq.n	800711c <TIM_Base_SetConfig+0x40>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a3a      	ldr	r2, [pc, #232]	; (8007200 <TIM_Base_SetConfig+0x124>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d108      	bne.n	800712e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a2f      	ldr	r2, [pc, #188]	; (80071f0 <TIM_Base_SetConfig+0x114>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d02b      	beq.n	800718e <TIM_Base_SetConfig+0xb2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800713c:	d027      	beq.n	800718e <TIM_Base_SetConfig+0xb2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a2c      	ldr	r2, [pc, #176]	; (80071f4 <TIM_Base_SetConfig+0x118>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d023      	beq.n	800718e <TIM_Base_SetConfig+0xb2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a2b      	ldr	r2, [pc, #172]	; (80071f8 <TIM_Base_SetConfig+0x11c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d01f      	beq.n	800718e <TIM_Base_SetConfig+0xb2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a2a      	ldr	r2, [pc, #168]	; (80071fc <TIM_Base_SetConfig+0x120>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d01b      	beq.n	800718e <TIM_Base_SetConfig+0xb2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a29      	ldr	r2, [pc, #164]	; (8007200 <TIM_Base_SetConfig+0x124>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d017      	beq.n	800718e <TIM_Base_SetConfig+0xb2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a28      	ldr	r2, [pc, #160]	; (8007204 <TIM_Base_SetConfig+0x128>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d013      	beq.n	800718e <TIM_Base_SetConfig+0xb2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a27      	ldr	r2, [pc, #156]	; (8007208 <TIM_Base_SetConfig+0x12c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00f      	beq.n	800718e <TIM_Base_SetConfig+0xb2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a26      	ldr	r2, [pc, #152]	; (800720c <TIM_Base_SetConfig+0x130>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00b      	beq.n	800718e <TIM_Base_SetConfig+0xb2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a25      	ldr	r2, [pc, #148]	; (8007210 <TIM_Base_SetConfig+0x134>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d007      	beq.n	800718e <TIM_Base_SetConfig+0xb2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a24      	ldr	r2, [pc, #144]	; (8007214 <TIM_Base_SetConfig+0x138>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d003      	beq.n	800718e <TIM_Base_SetConfig+0xb2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a23      	ldr	r2, [pc, #140]	; (8007218 <TIM_Base_SetConfig+0x13c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d108      	bne.n	80071a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4313      	orrs	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a0a      	ldr	r2, [pc, #40]	; (80071f0 <TIM_Base_SetConfig+0x114>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d003      	beq.n	80071d4 <TIM_Base_SetConfig+0xf8>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a0c      	ldr	r2, [pc, #48]	; (8007200 <TIM_Base_SetConfig+0x124>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d103      	bne.n	80071dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	691a      	ldr	r2, [r3, #16]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	615a      	str	r2, [r3, #20]
}
 80071e2:	bf00      	nop
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40010000 	.word	0x40010000
 80071f4:	40000400 	.word	0x40000400
 80071f8:	40000800 	.word	0x40000800
 80071fc:	40000c00 	.word	0x40000c00
 8007200:	40010400 	.word	0x40010400
 8007204:	40014000 	.word	0x40014000
 8007208:	40014400 	.word	0x40014400
 800720c:	40014800 	.word	0x40014800
 8007210:	40001800 	.word	0x40001800
 8007214:	40001c00 	.word	0x40001c00
 8007218:	40002000 	.word	0x40002000

0800721c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	f023 0201 	bic.w	r2, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 0303 	bic.w	r3, r3, #3
 8007252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f023 0302 	bic.w	r3, r3, #2
 8007264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	4313      	orrs	r3, r2
 800726e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a20      	ldr	r2, [pc, #128]	; (80072f4 <TIM_OC1_SetConfig+0xd8>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d003      	beq.n	8007280 <TIM_OC1_SetConfig+0x64>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a1f      	ldr	r2, [pc, #124]	; (80072f8 <TIM_OC1_SetConfig+0xdc>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d10c      	bne.n	800729a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f023 0308 	bic.w	r3, r3, #8
 8007286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	4313      	orrs	r3, r2
 8007290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f023 0304 	bic.w	r3, r3, #4
 8007298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a15      	ldr	r2, [pc, #84]	; (80072f4 <TIM_OC1_SetConfig+0xd8>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d003      	beq.n	80072aa <TIM_OC1_SetConfig+0x8e>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a14      	ldr	r2, [pc, #80]	; (80072f8 <TIM_OC1_SetConfig+0xdc>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d111      	bne.n	80072ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	621a      	str	r2, [r3, #32]
}
 80072e8:	bf00      	nop
 80072ea:	371c      	adds	r7, #28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	40010000 	.word	0x40010000
 80072f8:	40010400 	.word	0x40010400

080072fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	f023 0210 	bic.w	r2, r3, #16
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800732a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f023 0320 	bic.w	r3, r3, #32
 8007346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a22      	ldr	r2, [pc, #136]	; (80073e0 <TIM_OC2_SetConfig+0xe4>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d003      	beq.n	8007364 <TIM_OC2_SetConfig+0x68>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a21      	ldr	r2, [pc, #132]	; (80073e4 <TIM_OC2_SetConfig+0xe8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d10d      	bne.n	8007380 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800736a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	011b      	lsls	r3, r3, #4
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800737e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a17      	ldr	r2, [pc, #92]	; (80073e0 <TIM_OC2_SetConfig+0xe4>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d003      	beq.n	8007390 <TIM_OC2_SetConfig+0x94>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a16      	ldr	r2, [pc, #88]	; (80073e4 <TIM_OC2_SetConfig+0xe8>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d113      	bne.n	80073b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800739e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	621a      	str	r2, [r3, #32]
}
 80073d2:	bf00      	nop
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	40010000 	.word	0x40010000
 80073e4:	40010400 	.word	0x40010400

080073e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f023 0303 	bic.w	r3, r3, #3
 800741e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	4313      	orrs	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	021b      	lsls	r3, r3, #8
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	4313      	orrs	r3, r2
 800743c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a21      	ldr	r2, [pc, #132]	; (80074c8 <TIM_OC3_SetConfig+0xe0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d003      	beq.n	800744e <TIM_OC3_SetConfig+0x66>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a20      	ldr	r2, [pc, #128]	; (80074cc <TIM_OC3_SetConfig+0xe4>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d10d      	bne.n	800746a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	021b      	lsls	r3, r3, #8
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	4313      	orrs	r3, r2
 8007460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a16      	ldr	r2, [pc, #88]	; (80074c8 <TIM_OC3_SetConfig+0xe0>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d003      	beq.n	800747a <TIM_OC3_SetConfig+0x92>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a15      	ldr	r2, [pc, #84]	; (80074cc <TIM_OC3_SetConfig+0xe4>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d113      	bne.n	80074a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	4313      	orrs	r3, r2
 8007494:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	011b      	lsls	r3, r3, #4
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4313      	orrs	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	621a      	str	r2, [r3, #32]
}
 80074bc:	bf00      	nop
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	40010000 	.word	0x40010000
 80074cc:	40010400 	.word	0x40010400

080074d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4313      	orrs	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800751a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	031b      	lsls	r3, r3, #12
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	4313      	orrs	r3, r2
 8007526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a12      	ldr	r2, [pc, #72]	; (8007574 <TIM_OC4_SetConfig+0xa4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d003      	beq.n	8007538 <TIM_OC4_SetConfig+0x68>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a11      	ldr	r2, [pc, #68]	; (8007578 <TIM_OC4_SetConfig+0xa8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d109      	bne.n	800754c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800753e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	695b      	ldr	r3, [r3, #20]
 8007544:	019b      	lsls	r3, r3, #6
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	4313      	orrs	r3, r2
 800754a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	621a      	str	r2, [r3, #32]
}
 8007566:	bf00      	nop
 8007568:	371c      	adds	r7, #28
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	40010000 	.word	0x40010000
 8007578:	40010400 	.word	0x40010400

0800757c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	f023 0201 	bic.w	r2, r3, #1
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f023 030a 	bic.w	r3, r3, #10
 80075b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	4313      	orrs	r3, r2
 80075c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	621a      	str	r2, [r3, #32]
}
 80075ce:	bf00      	nop
 80075d0:	371c      	adds	r7, #28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075da:	b480      	push	{r7}
 80075dc:	b087      	sub	sp, #28
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	f023 0210 	bic.w	r2, r3, #16
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	031b      	lsls	r3, r3, #12
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	4313      	orrs	r3, r2
 800760e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007616:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	011b      	lsls	r3, r3, #4
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	4313      	orrs	r3, r2
 8007620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	621a      	str	r2, [r3, #32]
}
 800762e:	bf00      	nop
 8007630:	371c      	adds	r7, #28
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800763a:	b480      	push	{r7}
 800763c:	b085      	sub	sp, #20
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	f043 0307 	orr.w	r3, r3, #7
 800765c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	609a      	str	r2, [r3, #8]
}
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
 800767c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800768a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	021a      	lsls	r2, r3, #8
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	431a      	orrs	r2, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4313      	orrs	r3, r2
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	4313      	orrs	r3, r2
 800769c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	609a      	str	r2, [r3, #8]
}
 80076a4:	bf00      	nop
 80076a6:	371c      	adds	r7, #28
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d101      	bne.n	80076c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076c4:	2302      	movs	r3, #2
 80076c6:	e05a      	b.n	800777e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a21      	ldr	r2, [pc, #132]	; (800778c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d022      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007714:	d01d      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a1d      	ldr	r2, [pc, #116]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d018      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a1b      	ldr	r2, [pc, #108]	; (8007794 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d013      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a1a      	ldr	r2, [pc, #104]	; (8007798 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d00e      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a18      	ldr	r2, [pc, #96]	; (800779c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d009      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a17      	ldr	r2, [pc, #92]	; (80077a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d004      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a15      	ldr	r2, [pc, #84]	; (80077a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d10c      	bne.n	800776c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	4313      	orrs	r3, r2
 8007762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40010000 	.word	0x40010000
 8007790:	40000400 	.word	0x40000400
 8007794:	40000800 	.word	0x40000800
 8007798:	40000c00 	.word	0x40000c00
 800779c:	40010400 	.word	0x40010400
 80077a0:	40014000 	.word	0x40014000
 80077a4:	40001800 	.word	0x40001800

080077a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e03f      	b.n	8007862 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d106      	bne.n	80077fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7fc fa7a 	bl	8003cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2224      	movs	r2, #36	; 0x24
 8007800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68da      	ldr	r2, [r3, #12]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fddb 	bl	80083d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	691a      	ldr	r2, [r3, #16]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	695a      	ldr	r2, [r3, #20]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68da      	ldr	r2, [r3, #12]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2220      	movs	r2, #32
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2220      	movs	r2, #32
 800785c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b08a      	sub	sp, #40	; 0x28
 800786e:	af02      	add	r7, sp, #8
 8007870:	60f8      	str	r0, [r7, #12]
 8007872:	60b9      	str	r1, [r7, #8]
 8007874:	603b      	str	r3, [r7, #0]
 8007876:	4613      	mov	r3, r2
 8007878:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b20      	cmp	r3, #32
 8007888:	d17c      	bne.n	8007984 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <HAL_UART_Transmit+0x2c>
 8007890:	88fb      	ldrh	r3, [r7, #6]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e075      	b.n	8007986 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_UART_Transmit+0x3e>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e06e      	b.n	8007986 <HAL_UART_Transmit+0x11c>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2221      	movs	r2, #33	; 0x21
 80078ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078be:	f7fc fb33 	bl	8003f28 <HAL_GetTick>
 80078c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	88fa      	ldrh	r2, [r7, #6]
 80078c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	88fa      	ldrh	r2, [r7, #6]
 80078ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d8:	d108      	bne.n	80078ec <HAL_UART_Transmit+0x82>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d104      	bne.n	80078ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	61bb      	str	r3, [r7, #24]
 80078ea:	e003      	b.n	80078f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80078fc:	e02a      	b.n	8007954 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2200      	movs	r2, #0
 8007906:	2180      	movs	r1, #128	; 0x80
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 fb1f 	bl	8007f4c <UART_WaitOnFlagUntilTimeout>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e036      	b.n	8007986 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10b      	bne.n	8007936 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800792c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	3302      	adds	r3, #2
 8007932:	61bb      	str	r3, [r7, #24]
 8007934:	e007      	b.n	8007946 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	781a      	ldrb	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	3301      	adds	r3, #1
 8007944:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800794a:	b29b      	uxth	r3, r3
 800794c:	3b01      	subs	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007958:	b29b      	uxth	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1cf      	bne.n	80078fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	9300      	str	r3, [sp, #0]
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2200      	movs	r2, #0
 8007966:	2140      	movs	r1, #64	; 0x40
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 faef 	bl	8007f4c <UART_WaitOnFlagUntilTimeout>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e006      	b.n	8007986 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	e000      	b.n	8007986 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007984:	2302      	movs	r3, #2
  }
}
 8007986:	4618      	mov	r0, r3
 8007988:	3720      	adds	r7, #32
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	4613      	mov	r3, r2
 800799a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b20      	cmp	r3, #32
 80079a6:	d11d      	bne.n	80079e4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <HAL_UART_Receive_IT+0x26>
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e016      	b.n	80079e6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d101      	bne.n	80079c6 <HAL_UART_Receive_IT+0x38>
 80079c2:	2302      	movs	r3, #2
 80079c4:	e00f      	b.n	80079e6 <HAL_UART_Receive_IT+0x58>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80079d4:	88fb      	ldrh	r3, [r7, #6]
 80079d6:	461a      	mov	r2, r3
 80079d8:	68b9      	ldr	r1, [r7, #8]
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f000 fb24 	bl	8008028 <UART_Start_Receive_IT>
 80079e0:	4603      	mov	r3, r0
 80079e2:	e000      	b.n	80079e6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80079e4:	2302      	movs	r3, #2
  }
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b0ba      	sub	sp, #232	; 0xe8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a26:	f003 030f 	and.w	r3, r3, #15
 8007a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10f      	bne.n	8007a56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d009      	beq.n	8007a56 <HAL_UART_IRQHandler+0x66>
 8007a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a46:	f003 0320 	and.w	r3, r3, #32
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fc03 	bl	800825a <UART_Receive_IT>
      return;
 8007a54:	e256      	b.n	8007f04 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 80de 	beq.w	8007c1c <HAL_UART_IRQHandler+0x22c>
 8007a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d106      	bne.n	8007a7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 80d1 	beq.w	8007c1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00b      	beq.n	8007a9e <HAL_UART_IRQHandler+0xae>
 8007a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d005      	beq.n	8007a9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a96:	f043 0201 	orr.w	r2, r3, #1
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa2:	f003 0304 	and.w	r3, r3, #4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00b      	beq.n	8007ac2 <HAL_UART_IRQHandler+0xd2>
 8007aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d005      	beq.n	8007ac2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	f043 0202 	orr.w	r2, r3, #2
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00b      	beq.n	8007ae6 <HAL_UART_IRQHandler+0xf6>
 8007ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d005      	beq.n	8007ae6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	f043 0204 	orr.w	r2, r3, #4
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aea:	f003 0308 	and.w	r3, r3, #8
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d011      	beq.n	8007b16 <HAL_UART_IRQHandler+0x126>
 8007af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007af6:	f003 0320 	and.w	r3, r3, #32
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d105      	bne.n	8007b0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d005      	beq.n	8007b16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	f043 0208 	orr.w	r2, r3, #8
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 81ed 	beq.w	8007efa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b24:	f003 0320 	and.w	r3, r3, #32
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d008      	beq.n	8007b3e <HAL_UART_IRQHandler+0x14e>
 8007b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b30:	f003 0320 	and.w	r3, r3, #32
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fb8e 	bl	800825a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b48:	2b40      	cmp	r3, #64	; 0x40
 8007b4a:	bf0c      	ite	eq
 8007b4c:	2301      	moveq	r3, #1
 8007b4e:	2300      	movne	r3, #0
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	f003 0308 	and.w	r3, r3, #8
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d103      	bne.n	8007b6a <HAL_UART_IRQHandler+0x17a>
 8007b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d04f      	beq.n	8007c0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fa96 	bl	800809c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7a:	2b40      	cmp	r3, #64	; 0x40
 8007b7c:	d141      	bne.n	8007c02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3314      	adds	r3, #20
 8007b84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3314      	adds	r3, #20
 8007ba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007baa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1d9      	bne.n	8007b7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d013      	beq.n	8007bfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	4a7d      	ldr	r2, [pc, #500]	; (8007dcc <HAL_UART_IRQHandler+0x3dc>)
 8007bd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fc fe64 	bl	80048ac <HAL_DMA_Abort_IT>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d016      	beq.n	8007c18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf8:	e00e      	b.n	8007c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f990 	bl	8007f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c00:	e00a      	b.n	8007c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f98c 	bl	8007f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c08:	e006      	b.n	8007c18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f988 	bl	8007f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c16:	e170      	b.n	8007efa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c18:	bf00      	nop
    return;
 8007c1a:	e16e      	b.n	8007efa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	f040 814a 	bne.w	8007eba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 8143 	beq.w	8007eba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c38:	f003 0310 	and.w	r3, r3, #16
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 813c 	beq.w	8007eba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c42:	2300      	movs	r3, #0
 8007c44:	60bb      	str	r3, [r7, #8]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	60bb      	str	r3, [r7, #8]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	60bb      	str	r3, [r7, #8]
 8007c56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c62:	2b40      	cmp	r3, #64	; 0x40
 8007c64:	f040 80b4 	bne.w	8007dd0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 8140 	beq.w	8007efe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c86:	429a      	cmp	r2, r3
 8007c88:	f080 8139 	bcs.w	8007efe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c9e:	f000 8088 	beq.w	8007db2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	330c      	adds	r3, #12
 8007ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	330c      	adds	r3, #12
 8007cca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007cce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ce6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1d9      	bne.n	8007ca2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3314      	adds	r3, #20
 8007cf4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cf8:	e853 3f00 	ldrex	r3, [r3]
 8007cfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d00:	f023 0301 	bic.w	r3, r3, #1
 8007d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3314      	adds	r3, #20
 8007d0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e1      	bne.n	8007cee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3314      	adds	r3, #20
 8007d30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3314      	adds	r3, #20
 8007d4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1e3      	bne.n	8007d2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2220      	movs	r2, #32
 8007d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	330c      	adds	r3, #12
 8007d76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d82:	f023 0310 	bic.w	r3, r3, #16
 8007d86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	330c      	adds	r3, #12
 8007d90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d94:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d9c:	e841 2300 	strex	r3, r2, [r1]
 8007da0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1e3      	bne.n	8007d70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fc fd0d 	bl	80047cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f8b6 	bl	8007f34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dc8:	e099      	b.n	8007efe <HAL_UART_IRQHandler+0x50e>
 8007dca:	bf00      	nop
 8007dcc:	08008163 	.word	0x08008163
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 808b 	beq.w	8007f02 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007dec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 8086 	beq.w	8007f02 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	330c      	adds	r3, #12
 8007dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	330c      	adds	r3, #12
 8007e16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e1a:	647a      	str	r2, [r7, #68]	; 0x44
 8007e1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e22:	e841 2300 	strex	r3, r2, [r1]
 8007e26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1e3      	bne.n	8007df6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3314      	adds	r3, #20
 8007e34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e3e:	6a3b      	ldr	r3, [r7, #32]
 8007e40:	f023 0301 	bic.w	r3, r3, #1
 8007e44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3314      	adds	r3, #20
 8007e4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e52:	633a      	str	r2, [r7, #48]	; 0x30
 8007e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5a:	e841 2300 	strex	r3, r2, [r1]
 8007e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1e3      	bne.n	8007e2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	330c      	adds	r3, #12
 8007e7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	e853 3f00 	ldrex	r3, [r3]
 8007e82:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 0310 	bic.w	r3, r3, #16
 8007e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	330c      	adds	r3, #12
 8007e94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e98:	61fa      	str	r2, [r7, #28]
 8007e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9c:	69b9      	ldr	r1, [r7, #24]
 8007e9e:	69fa      	ldr	r2, [r7, #28]
 8007ea0:	e841 2300 	strex	r3, r2, [r1]
 8007ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1e3      	bne.n	8007e74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007eac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f83e 	bl	8007f34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007eb8:	e023      	b.n	8007f02 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d009      	beq.n	8007eda <HAL_UART_IRQHandler+0x4ea>
 8007ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f959 	bl	800818a <UART_Transmit_IT>
    return;
 8007ed8:	e014      	b.n	8007f04 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00e      	beq.n	8007f04 <HAL_UART_IRQHandler+0x514>
 8007ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d008      	beq.n	8007f04 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f999 	bl	800822a <UART_EndTransmit_IT>
    return;
 8007ef8:	e004      	b.n	8007f04 <HAL_UART_IRQHandler+0x514>
    return;
 8007efa:	bf00      	nop
 8007efc:	e002      	b.n	8007f04 <HAL_UART_IRQHandler+0x514>
      return;
 8007efe:	bf00      	nop
 8007f00:	e000      	b.n	8007f04 <HAL_UART_IRQHandler+0x514>
      return;
 8007f02:	bf00      	nop
  }
}
 8007f04:	37e8      	adds	r7, #232	; 0xe8
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop

08007f0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b090      	sub	sp, #64	; 0x40
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	603b      	str	r3, [r7, #0]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f5c:	e050      	b.n	8008000 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f64:	d04c      	beq.n	8008000 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d007      	beq.n	8007f7c <UART_WaitOnFlagUntilTimeout+0x30>
 8007f6c:	f7fb ffdc 	bl	8003f28 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d241      	bcs.n	8008000 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	330c      	adds	r3, #12
 8007f82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f86:	e853 3f00 	ldrex	r3, [r3]
 8007f8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	330c      	adds	r3, #12
 8007f9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f9c:	637a      	str	r2, [r7, #52]	; 0x34
 8007f9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fa4:	e841 2300 	strex	r3, r2, [r1]
 8007fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1e5      	bne.n	8007f7c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3314      	adds	r3, #20
 8007fb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f023 0301 	bic.w	r3, r3, #1
 8007fc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	3314      	adds	r3, #20
 8007fce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fd0:	623a      	str	r2, [r7, #32]
 8007fd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	69f9      	ldr	r1, [r7, #28]
 8007fd6:	6a3a      	ldr	r2, [r7, #32]
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e5      	bne.n	8007fb0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e00f      	b.n	8008020 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	4013      	ands	r3, r2
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	429a      	cmp	r2, r3
 800800e:	bf0c      	ite	eq
 8008010:	2301      	moveq	r3, #1
 8008012:	2300      	movne	r3, #0
 8008014:	b2db      	uxtb	r3, r3
 8008016:	461a      	mov	r2, r3
 8008018:	79fb      	ldrb	r3, [r7, #7]
 800801a:	429a      	cmp	r2, r3
 800801c:	d09f      	beq.n	8007f5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3740      	adds	r7, #64	; 0x40
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	88fa      	ldrh	r2, [r7, #6]
 8008040:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	88fa      	ldrh	r2, [r7, #6]
 8008046:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2222      	movs	r2, #34	; 0x22
 8008052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68da      	ldr	r2, [r3, #12]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800806c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695a      	ldr	r2, [r3, #20]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f042 0201 	orr.w	r2, r2, #1
 800807c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68da      	ldr	r2, [r3, #12]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f042 0220 	orr.w	r2, r2, #32
 800808c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800809c:	b480      	push	{r7}
 800809e:	b095      	sub	sp, #84	; 0x54
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	330c      	adds	r3, #12
 80080aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ae:	e853 3f00 	ldrex	r3, [r3]
 80080b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	330c      	adds	r3, #12
 80080c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080c4:	643a      	str	r2, [r7, #64]	; 0x40
 80080c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080cc:	e841 2300 	strex	r3, r2, [r1]
 80080d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e5      	bne.n	80080a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3314      	adds	r3, #20
 80080de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	e853 3f00 	ldrex	r3, [r3]
 80080e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	f023 0301 	bic.w	r3, r3, #1
 80080ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3314      	adds	r3, #20
 80080f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008100:	e841 2300 	strex	r3, r2, [r1]
 8008104:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1e5      	bne.n	80080d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008110:	2b01      	cmp	r3, #1
 8008112:	d119      	bne.n	8008148 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	330c      	adds	r3, #12
 800811a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	e853 3f00 	ldrex	r3, [r3]
 8008122:	60bb      	str	r3, [r7, #8]
   return(result);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f023 0310 	bic.w	r3, r3, #16
 800812a:	647b      	str	r3, [r7, #68]	; 0x44
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	330c      	adds	r3, #12
 8008132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008134:	61ba      	str	r2, [r7, #24]
 8008136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008138:	6979      	ldr	r1, [r7, #20]
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	e841 2300 	strex	r3, r2, [r1]
 8008140:	613b      	str	r3, [r7, #16]
   return(result);
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e5      	bne.n	8008114 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2220      	movs	r2, #32
 800814c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008156:	bf00      	nop
 8008158:	3754      	adds	r7, #84	; 0x54
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7ff fecf 	bl	8007f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008182:	bf00      	nop
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800818a:	b480      	push	{r7}
 800818c:	b085      	sub	sp, #20
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b21      	cmp	r3, #33	; 0x21
 800819c:	d13e      	bne.n	800821c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a6:	d114      	bne.n	80081d2 <UART_Transmit_IT+0x48>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d110      	bne.n	80081d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	461a      	mov	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	1c9a      	adds	r2, r3, #2
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	621a      	str	r2, [r3, #32]
 80081d0:	e008      	b.n	80081e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	1c59      	adds	r1, r3, #1
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	6211      	str	r1, [r2, #32]
 80081dc:	781a      	ldrb	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	4619      	mov	r1, r3
 80081f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10f      	bne.n	8008218 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008206:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68da      	ldr	r2, [r3, #12]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008216:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	e000      	b.n	800821e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800821c:	2302      	movs	r3, #2
  }
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008240:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2220      	movs	r2, #32
 8008246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff fe5e 	bl	8007f0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b08c      	sub	sp, #48	; 0x30
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b22      	cmp	r3, #34	; 0x22
 800826c:	f040 80ab 	bne.w	80083c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008278:	d117      	bne.n	80082aa <UART_Receive_IT+0x50>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d113      	bne.n	80082aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	b29b      	uxth	r3, r3
 8008294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008298:	b29a      	uxth	r2, r3
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a2:	1c9a      	adds	r2, r3, #2
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	629a      	str	r2, [r3, #40]	; 0x28
 80082a8:	e026      	b.n	80082f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082bc:	d007      	beq.n	80082ce <UART_Receive_IT+0x74>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10a      	bne.n	80082dc <UART_Receive_IT+0x82>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	b2da      	uxtb	r2, r3
 80082d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d8:	701a      	strb	r2, [r3, #0]
 80082da:	e008      	b.n	80082ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	3b01      	subs	r3, #1
 8008300:	b29b      	uxth	r3, r3
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	4619      	mov	r1, r3
 8008306:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008308:	2b00      	cmp	r3, #0
 800830a:	d15a      	bne.n	80083c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f022 0220 	bic.w	r2, r2, #32
 800831a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68da      	ldr	r2, [r3, #12]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800832a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	695a      	ldr	r2, [r3, #20]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f022 0201 	bic.w	r2, r2, #1
 800833a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008348:	2b01      	cmp	r3, #1
 800834a:	d135      	bne.n	80083b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	330c      	adds	r3, #12
 8008358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	613b      	str	r3, [r7, #16]
   return(result);
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f023 0310 	bic.w	r3, r3, #16
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	330c      	adds	r3, #12
 8008370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008372:	623a      	str	r2, [r7, #32]
 8008374:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	69f9      	ldr	r1, [r7, #28]
 8008378:	6a3a      	ldr	r2, [r7, #32]
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e5      	bne.n	8008352 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0310 	and.w	r3, r3, #16
 8008390:	2b10      	cmp	r3, #16
 8008392:	d10a      	bne.n	80083aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008394:	2300      	movs	r3, #0
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7ff fdbf 	bl	8007f34 <HAL_UARTEx_RxEventCallback>
 80083b6:	e002      	b.n	80083be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7fb fbfb 	bl	8003bb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	e002      	b.n	80083c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80083c2:	2300      	movs	r3, #0
 80083c4:	e000      	b.n	80083c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80083c6:	2302      	movs	r3, #2
  }
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3730      	adds	r7, #48	; 0x30
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083d4:	b0c0      	sub	sp, #256	; 0x100
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80083e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ec:	68d9      	ldr	r1, [r3, #12]
 80083ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	ea40 0301 	orr.w	r3, r0, r1
 80083f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80083fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	431a      	orrs	r2, r3
 8008408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800840c:	695b      	ldr	r3, [r3, #20]
 800840e:	431a      	orrs	r2, r3
 8008410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	4313      	orrs	r3, r2
 8008418:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800841c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008428:	f021 010c 	bic.w	r1, r1, #12
 800842c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008436:	430b      	orrs	r3, r1
 8008438:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800843a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	695b      	ldr	r3, [r3, #20]
 8008442:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800844a:	6999      	ldr	r1, [r3, #24]
 800844c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	ea40 0301 	orr.w	r3, r0, r1
 8008456:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	4b8f      	ldr	r3, [pc, #572]	; (800869c <UART_SetConfig+0x2cc>)
 8008460:	429a      	cmp	r2, r3
 8008462:	d005      	beq.n	8008470 <UART_SetConfig+0xa0>
 8008464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	4b8d      	ldr	r3, [pc, #564]	; (80086a0 <UART_SetConfig+0x2d0>)
 800846c:	429a      	cmp	r2, r3
 800846e:	d104      	bne.n	800847a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008470:	f7fd fbf8 	bl	8005c64 <HAL_RCC_GetPCLK2Freq>
 8008474:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008478:	e003      	b.n	8008482 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800847a:	f7fd fbdf 	bl	8005c3c <HAL_RCC_GetPCLK1Freq>
 800847e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800848c:	f040 810c 	bne.w	80086a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008494:	2200      	movs	r2, #0
 8008496:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800849a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800849e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80084a2:	4622      	mov	r2, r4
 80084a4:	462b      	mov	r3, r5
 80084a6:	1891      	adds	r1, r2, r2
 80084a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80084aa:	415b      	adcs	r3, r3
 80084ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80084b2:	4621      	mov	r1, r4
 80084b4:	eb12 0801 	adds.w	r8, r2, r1
 80084b8:	4629      	mov	r1, r5
 80084ba:	eb43 0901 	adc.w	r9, r3, r1
 80084be:	f04f 0200 	mov.w	r2, #0
 80084c2:	f04f 0300 	mov.w	r3, #0
 80084c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084d2:	4690      	mov	r8, r2
 80084d4:	4699      	mov	r9, r3
 80084d6:	4623      	mov	r3, r4
 80084d8:	eb18 0303 	adds.w	r3, r8, r3
 80084dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084e0:	462b      	mov	r3, r5
 80084e2:	eb49 0303 	adc.w	r3, r9, r3
 80084e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80084f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80084fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80084fe:	460b      	mov	r3, r1
 8008500:	18db      	adds	r3, r3, r3
 8008502:	653b      	str	r3, [r7, #80]	; 0x50
 8008504:	4613      	mov	r3, r2
 8008506:	eb42 0303 	adc.w	r3, r2, r3
 800850a:	657b      	str	r3, [r7, #84]	; 0x54
 800850c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008510:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008514:	f7f7 feac 	bl	8000270 <__aeabi_uldivmod>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	4b61      	ldr	r3, [pc, #388]	; (80086a4 <UART_SetConfig+0x2d4>)
 800851e:	fba3 2302 	umull	r2, r3, r3, r2
 8008522:	095b      	lsrs	r3, r3, #5
 8008524:	011c      	lsls	r4, r3, #4
 8008526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800852a:	2200      	movs	r2, #0
 800852c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008530:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008534:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008538:	4642      	mov	r2, r8
 800853a:	464b      	mov	r3, r9
 800853c:	1891      	adds	r1, r2, r2
 800853e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008540:	415b      	adcs	r3, r3
 8008542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008544:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008548:	4641      	mov	r1, r8
 800854a:	eb12 0a01 	adds.w	sl, r2, r1
 800854e:	4649      	mov	r1, r9
 8008550:	eb43 0b01 	adc.w	fp, r3, r1
 8008554:	f04f 0200 	mov.w	r2, #0
 8008558:	f04f 0300 	mov.w	r3, #0
 800855c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008560:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008564:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008568:	4692      	mov	sl, r2
 800856a:	469b      	mov	fp, r3
 800856c:	4643      	mov	r3, r8
 800856e:	eb1a 0303 	adds.w	r3, sl, r3
 8008572:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008576:	464b      	mov	r3, r9
 8008578:	eb4b 0303 	adc.w	r3, fp, r3
 800857c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800858c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008590:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008594:	460b      	mov	r3, r1
 8008596:	18db      	adds	r3, r3, r3
 8008598:	643b      	str	r3, [r7, #64]	; 0x40
 800859a:	4613      	mov	r3, r2
 800859c:	eb42 0303 	adc.w	r3, r2, r3
 80085a0:	647b      	str	r3, [r7, #68]	; 0x44
 80085a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80085a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80085aa:	f7f7 fe61 	bl	8000270 <__aeabi_uldivmod>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	4611      	mov	r1, r2
 80085b4:	4b3b      	ldr	r3, [pc, #236]	; (80086a4 <UART_SetConfig+0x2d4>)
 80085b6:	fba3 2301 	umull	r2, r3, r3, r1
 80085ba:	095b      	lsrs	r3, r3, #5
 80085bc:	2264      	movs	r2, #100	; 0x64
 80085be:	fb02 f303 	mul.w	r3, r2, r3
 80085c2:	1acb      	subs	r3, r1, r3
 80085c4:	00db      	lsls	r3, r3, #3
 80085c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80085ca:	4b36      	ldr	r3, [pc, #216]	; (80086a4 <UART_SetConfig+0x2d4>)
 80085cc:	fba3 2302 	umull	r2, r3, r3, r2
 80085d0:	095b      	lsrs	r3, r3, #5
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085d8:	441c      	add	r4, r3
 80085da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085de:	2200      	movs	r2, #0
 80085e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80085e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80085ec:	4642      	mov	r2, r8
 80085ee:	464b      	mov	r3, r9
 80085f0:	1891      	adds	r1, r2, r2
 80085f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80085f4:	415b      	adcs	r3, r3
 80085f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80085fc:	4641      	mov	r1, r8
 80085fe:	1851      	adds	r1, r2, r1
 8008600:	6339      	str	r1, [r7, #48]	; 0x30
 8008602:	4649      	mov	r1, r9
 8008604:	414b      	adcs	r3, r1
 8008606:	637b      	str	r3, [r7, #52]	; 0x34
 8008608:	f04f 0200 	mov.w	r2, #0
 800860c:	f04f 0300 	mov.w	r3, #0
 8008610:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008614:	4659      	mov	r1, fp
 8008616:	00cb      	lsls	r3, r1, #3
 8008618:	4651      	mov	r1, sl
 800861a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800861e:	4651      	mov	r1, sl
 8008620:	00ca      	lsls	r2, r1, #3
 8008622:	4610      	mov	r0, r2
 8008624:	4619      	mov	r1, r3
 8008626:	4603      	mov	r3, r0
 8008628:	4642      	mov	r2, r8
 800862a:	189b      	adds	r3, r3, r2
 800862c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008630:	464b      	mov	r3, r9
 8008632:	460a      	mov	r2, r1
 8008634:	eb42 0303 	adc.w	r3, r2, r3
 8008638:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800863c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008648:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800864c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008650:	460b      	mov	r3, r1
 8008652:	18db      	adds	r3, r3, r3
 8008654:	62bb      	str	r3, [r7, #40]	; 0x28
 8008656:	4613      	mov	r3, r2
 8008658:	eb42 0303 	adc.w	r3, r2, r3
 800865c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800865e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008662:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008666:	f7f7 fe03 	bl	8000270 <__aeabi_uldivmod>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <UART_SetConfig+0x2d4>)
 8008670:	fba3 1302 	umull	r1, r3, r3, r2
 8008674:	095b      	lsrs	r3, r3, #5
 8008676:	2164      	movs	r1, #100	; 0x64
 8008678:	fb01 f303 	mul.w	r3, r1, r3
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	00db      	lsls	r3, r3, #3
 8008680:	3332      	adds	r3, #50	; 0x32
 8008682:	4a08      	ldr	r2, [pc, #32]	; (80086a4 <UART_SetConfig+0x2d4>)
 8008684:	fba2 2303 	umull	r2, r3, r2, r3
 8008688:	095b      	lsrs	r3, r3, #5
 800868a:	f003 0207 	and.w	r2, r3, #7
 800868e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4422      	add	r2, r4
 8008696:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008698:	e106      	b.n	80088a8 <UART_SetConfig+0x4d8>
 800869a:	bf00      	nop
 800869c:	40011000 	.word	0x40011000
 80086a0:	40011400 	.word	0x40011400
 80086a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086ac:	2200      	movs	r2, #0
 80086ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80086b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80086b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80086ba:	4642      	mov	r2, r8
 80086bc:	464b      	mov	r3, r9
 80086be:	1891      	adds	r1, r2, r2
 80086c0:	6239      	str	r1, [r7, #32]
 80086c2:	415b      	adcs	r3, r3
 80086c4:	627b      	str	r3, [r7, #36]	; 0x24
 80086c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086ca:	4641      	mov	r1, r8
 80086cc:	1854      	adds	r4, r2, r1
 80086ce:	4649      	mov	r1, r9
 80086d0:	eb43 0501 	adc.w	r5, r3, r1
 80086d4:	f04f 0200 	mov.w	r2, #0
 80086d8:	f04f 0300 	mov.w	r3, #0
 80086dc:	00eb      	lsls	r3, r5, #3
 80086de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80086e2:	00e2      	lsls	r2, r4, #3
 80086e4:	4614      	mov	r4, r2
 80086e6:	461d      	mov	r5, r3
 80086e8:	4643      	mov	r3, r8
 80086ea:	18e3      	adds	r3, r4, r3
 80086ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086f0:	464b      	mov	r3, r9
 80086f2:	eb45 0303 	adc.w	r3, r5, r3
 80086f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80086fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008706:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800870a:	f04f 0200 	mov.w	r2, #0
 800870e:	f04f 0300 	mov.w	r3, #0
 8008712:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008716:	4629      	mov	r1, r5
 8008718:	008b      	lsls	r3, r1, #2
 800871a:	4621      	mov	r1, r4
 800871c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008720:	4621      	mov	r1, r4
 8008722:	008a      	lsls	r2, r1, #2
 8008724:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008728:	f7f7 fda2 	bl	8000270 <__aeabi_uldivmod>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4b60      	ldr	r3, [pc, #384]	; (80088b4 <UART_SetConfig+0x4e4>)
 8008732:	fba3 2302 	umull	r2, r3, r3, r2
 8008736:	095b      	lsrs	r3, r3, #5
 8008738:	011c      	lsls	r4, r3, #4
 800873a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800873e:	2200      	movs	r2, #0
 8008740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008744:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008748:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800874c:	4642      	mov	r2, r8
 800874e:	464b      	mov	r3, r9
 8008750:	1891      	adds	r1, r2, r2
 8008752:	61b9      	str	r1, [r7, #24]
 8008754:	415b      	adcs	r3, r3
 8008756:	61fb      	str	r3, [r7, #28]
 8008758:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800875c:	4641      	mov	r1, r8
 800875e:	1851      	adds	r1, r2, r1
 8008760:	6139      	str	r1, [r7, #16]
 8008762:	4649      	mov	r1, r9
 8008764:	414b      	adcs	r3, r1
 8008766:	617b      	str	r3, [r7, #20]
 8008768:	f04f 0200 	mov.w	r2, #0
 800876c:	f04f 0300 	mov.w	r3, #0
 8008770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008774:	4659      	mov	r1, fp
 8008776:	00cb      	lsls	r3, r1, #3
 8008778:	4651      	mov	r1, sl
 800877a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800877e:	4651      	mov	r1, sl
 8008780:	00ca      	lsls	r2, r1, #3
 8008782:	4610      	mov	r0, r2
 8008784:	4619      	mov	r1, r3
 8008786:	4603      	mov	r3, r0
 8008788:	4642      	mov	r2, r8
 800878a:	189b      	adds	r3, r3, r2
 800878c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008790:	464b      	mov	r3, r9
 8008792:	460a      	mov	r2, r1
 8008794:	eb42 0303 	adc.w	r3, r2, r3
 8008798:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800879c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80087a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80087a8:	f04f 0200 	mov.w	r2, #0
 80087ac:	f04f 0300 	mov.w	r3, #0
 80087b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80087b4:	4649      	mov	r1, r9
 80087b6:	008b      	lsls	r3, r1, #2
 80087b8:	4641      	mov	r1, r8
 80087ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087be:	4641      	mov	r1, r8
 80087c0:	008a      	lsls	r2, r1, #2
 80087c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80087c6:	f7f7 fd53 	bl	8000270 <__aeabi_uldivmod>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	4611      	mov	r1, r2
 80087d0:	4b38      	ldr	r3, [pc, #224]	; (80088b4 <UART_SetConfig+0x4e4>)
 80087d2:	fba3 2301 	umull	r2, r3, r3, r1
 80087d6:	095b      	lsrs	r3, r3, #5
 80087d8:	2264      	movs	r2, #100	; 0x64
 80087da:	fb02 f303 	mul.w	r3, r2, r3
 80087de:	1acb      	subs	r3, r1, r3
 80087e0:	011b      	lsls	r3, r3, #4
 80087e2:	3332      	adds	r3, #50	; 0x32
 80087e4:	4a33      	ldr	r2, [pc, #204]	; (80088b4 <UART_SetConfig+0x4e4>)
 80087e6:	fba2 2303 	umull	r2, r3, r2, r3
 80087ea:	095b      	lsrs	r3, r3, #5
 80087ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087f0:	441c      	add	r4, r3
 80087f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087f6:	2200      	movs	r2, #0
 80087f8:	673b      	str	r3, [r7, #112]	; 0x70
 80087fa:	677a      	str	r2, [r7, #116]	; 0x74
 80087fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008800:	4642      	mov	r2, r8
 8008802:	464b      	mov	r3, r9
 8008804:	1891      	adds	r1, r2, r2
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	415b      	adcs	r3, r3
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008810:	4641      	mov	r1, r8
 8008812:	1851      	adds	r1, r2, r1
 8008814:	6039      	str	r1, [r7, #0]
 8008816:	4649      	mov	r1, r9
 8008818:	414b      	adcs	r3, r1
 800881a:	607b      	str	r3, [r7, #4]
 800881c:	f04f 0200 	mov.w	r2, #0
 8008820:	f04f 0300 	mov.w	r3, #0
 8008824:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008828:	4659      	mov	r1, fp
 800882a:	00cb      	lsls	r3, r1, #3
 800882c:	4651      	mov	r1, sl
 800882e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008832:	4651      	mov	r1, sl
 8008834:	00ca      	lsls	r2, r1, #3
 8008836:	4610      	mov	r0, r2
 8008838:	4619      	mov	r1, r3
 800883a:	4603      	mov	r3, r0
 800883c:	4642      	mov	r2, r8
 800883e:	189b      	adds	r3, r3, r2
 8008840:	66bb      	str	r3, [r7, #104]	; 0x68
 8008842:	464b      	mov	r3, r9
 8008844:	460a      	mov	r2, r1
 8008846:	eb42 0303 	adc.w	r3, r2, r3
 800884a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800884c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	663b      	str	r3, [r7, #96]	; 0x60
 8008856:	667a      	str	r2, [r7, #100]	; 0x64
 8008858:	f04f 0200 	mov.w	r2, #0
 800885c:	f04f 0300 	mov.w	r3, #0
 8008860:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008864:	4649      	mov	r1, r9
 8008866:	008b      	lsls	r3, r1, #2
 8008868:	4641      	mov	r1, r8
 800886a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800886e:	4641      	mov	r1, r8
 8008870:	008a      	lsls	r2, r1, #2
 8008872:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008876:	f7f7 fcfb 	bl	8000270 <__aeabi_uldivmod>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	4b0d      	ldr	r3, [pc, #52]	; (80088b4 <UART_SetConfig+0x4e4>)
 8008880:	fba3 1302 	umull	r1, r3, r3, r2
 8008884:	095b      	lsrs	r3, r3, #5
 8008886:	2164      	movs	r1, #100	; 0x64
 8008888:	fb01 f303 	mul.w	r3, r1, r3
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	3332      	adds	r3, #50	; 0x32
 8008892:	4a08      	ldr	r2, [pc, #32]	; (80088b4 <UART_SetConfig+0x4e4>)
 8008894:	fba2 2303 	umull	r2, r3, r2, r3
 8008898:	095b      	lsrs	r3, r3, #5
 800889a:	f003 020f 	and.w	r2, r3, #15
 800889e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4422      	add	r2, r4
 80088a6:	609a      	str	r2, [r3, #8]
}
 80088a8:	bf00      	nop
 80088aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80088ae:	46bd      	mov	sp, r7
 80088b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088b4:	51eb851f 	.word	0x51eb851f

080088b8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	4b20      	ldr	r3, [pc, #128]	; (8008958 <FSMC_NORSRAM_Init+0xa0>)
 80088d6:	4013      	ands	r3, r2
 80088d8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80088e2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80088e8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80088ee:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80088f4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80088fa:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8008900:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008906:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800890c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008912:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008918:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800891e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8008924:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	4313      	orrs	r3, r2
 800892a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	2b08      	cmp	r3, #8
 8008932:	d103      	bne.n	800893c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800893a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	68f9      	ldr	r1, [r7, #12]
 8008944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3714      	adds	r7, #20
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	fff00080 	.word	0xfff00080

0800895c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008968:	2300      	movs	r3, #0
 800896a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008976:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800897e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800898a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008992:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800899a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	3b01      	subs	r3, #1
 80089a2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80089a4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	3b02      	subs	r3, #2
 80089ac:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80089ae:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80089b4:	4313      	orrs	r3, r2
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	1c5a      	adds	r2, r3, #1
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6979      	ldr	r1, [r7, #20]
 80089c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	371c      	adds	r7, #28
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
	...

080089d8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
 80089e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089f0:	d122      	bne.n	8008a38 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089fa:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	4b15      	ldr	r3, [pc, #84]	; (8008a54 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008a00:	4013      	ands	r3, r2
 8008a02:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008a0e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008a16:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008a1e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008a24:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	6979      	ldr	r1, [r7, #20]
 8008a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008a36:	e005      	b.n	8008a44 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	371c      	adds	r7, #28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	cff00000 	.word	0xcff00000

08008a58 <rand>:
 8008a58:	4b16      	ldr	r3, [pc, #88]	; (8008ab4 <rand+0x5c>)
 8008a5a:	b510      	push	{r4, lr}
 8008a5c:	681c      	ldr	r4, [r3, #0]
 8008a5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008a60:	b9b3      	cbnz	r3, 8008a90 <rand+0x38>
 8008a62:	2018      	movs	r0, #24
 8008a64:	f000 fa22 	bl	8008eac <malloc>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	6320      	str	r0, [r4, #48]	; 0x30
 8008a6c:	b920      	cbnz	r0, 8008a78 <rand+0x20>
 8008a6e:	4b12      	ldr	r3, [pc, #72]	; (8008ab8 <rand+0x60>)
 8008a70:	4812      	ldr	r0, [pc, #72]	; (8008abc <rand+0x64>)
 8008a72:	2152      	movs	r1, #82	; 0x52
 8008a74:	f000 f9b0 	bl	8008dd8 <__assert_func>
 8008a78:	4911      	ldr	r1, [pc, #68]	; (8008ac0 <rand+0x68>)
 8008a7a:	4b12      	ldr	r3, [pc, #72]	; (8008ac4 <rand+0x6c>)
 8008a7c:	e9c0 1300 	strd	r1, r3, [r0]
 8008a80:	4b11      	ldr	r3, [pc, #68]	; (8008ac8 <rand+0x70>)
 8008a82:	6083      	str	r3, [r0, #8]
 8008a84:	230b      	movs	r3, #11
 8008a86:	8183      	strh	r3, [r0, #12]
 8008a88:	2100      	movs	r1, #0
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008a90:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008a92:	480e      	ldr	r0, [pc, #56]	; (8008acc <rand+0x74>)
 8008a94:	690b      	ldr	r3, [r1, #16]
 8008a96:	694c      	ldr	r4, [r1, #20]
 8008a98:	4a0d      	ldr	r2, [pc, #52]	; (8008ad0 <rand+0x78>)
 8008a9a:	4358      	muls	r0, r3
 8008a9c:	fb02 0004 	mla	r0, r2, r4, r0
 8008aa0:	fba3 3202 	umull	r3, r2, r3, r2
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	eb40 0002 	adc.w	r0, r0, r2
 8008aaa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008aae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008ab2:	bd10      	pop	{r4, pc}
 8008ab4:	2000011c 	.word	0x2000011c
 8008ab8:	0800ca24 	.word	0x0800ca24
 8008abc:	0800ca3b 	.word	0x0800ca3b
 8008ac0:	abcd330e 	.word	0xabcd330e
 8008ac4:	e66d1234 	.word	0xe66d1234
 8008ac8:	0005deec 	.word	0x0005deec
 8008acc:	5851f42d 	.word	0x5851f42d
 8008ad0:	4c957f2d 	.word	0x4c957f2d

08008ad4 <std>:
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	b510      	push	{r4, lr}
 8008ad8:	4604      	mov	r4, r0
 8008ada:	e9c0 3300 	strd	r3, r3, [r0]
 8008ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ae2:	6083      	str	r3, [r0, #8]
 8008ae4:	8181      	strh	r1, [r0, #12]
 8008ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8008ae8:	81c2      	strh	r2, [r0, #14]
 8008aea:	6183      	str	r3, [r0, #24]
 8008aec:	4619      	mov	r1, r3
 8008aee:	2208      	movs	r2, #8
 8008af0:	305c      	adds	r0, #92	; 0x5c
 8008af2:	f000 f8f4 	bl	8008cde <memset>
 8008af6:	4b0d      	ldr	r3, [pc, #52]	; (8008b2c <std+0x58>)
 8008af8:	6263      	str	r3, [r4, #36]	; 0x24
 8008afa:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <std+0x5c>)
 8008afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008afe:	4b0d      	ldr	r3, [pc, #52]	; (8008b34 <std+0x60>)
 8008b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b02:	4b0d      	ldr	r3, [pc, #52]	; (8008b38 <std+0x64>)
 8008b04:	6323      	str	r3, [r4, #48]	; 0x30
 8008b06:	4b0d      	ldr	r3, [pc, #52]	; (8008b3c <std+0x68>)
 8008b08:	6224      	str	r4, [r4, #32]
 8008b0a:	429c      	cmp	r4, r3
 8008b0c:	d006      	beq.n	8008b1c <std+0x48>
 8008b0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008b12:	4294      	cmp	r4, r2
 8008b14:	d002      	beq.n	8008b1c <std+0x48>
 8008b16:	33d0      	adds	r3, #208	; 0xd0
 8008b18:	429c      	cmp	r4, r3
 8008b1a:	d105      	bne.n	8008b28 <std+0x54>
 8008b1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b24:	f000 b954 	b.w	8008dd0 <__retarget_lock_init_recursive>
 8008b28:	bd10      	pop	{r4, pc}
 8008b2a:	bf00      	nop
 8008b2c:	08008c59 	.word	0x08008c59
 8008b30:	08008c7b 	.word	0x08008c7b
 8008b34:	08008cb3 	.word	0x08008cb3
 8008b38:	08008cd7 	.word	0x08008cd7
 8008b3c:	20000764 	.word	0x20000764

08008b40 <stdio_exit_handler>:
 8008b40:	4a02      	ldr	r2, [pc, #8]	; (8008b4c <stdio_exit_handler+0xc>)
 8008b42:	4903      	ldr	r1, [pc, #12]	; (8008b50 <stdio_exit_handler+0x10>)
 8008b44:	4803      	ldr	r0, [pc, #12]	; (8008b54 <stdio_exit_handler+0x14>)
 8008b46:	f000 b869 	b.w	8008c1c <_fwalk_sglue>
 8008b4a:	bf00      	nop
 8008b4c:	200000c4 	.word	0x200000c4
 8008b50:	08009441 	.word	0x08009441
 8008b54:	200000d0 	.word	0x200000d0

08008b58 <cleanup_stdio>:
 8008b58:	6841      	ldr	r1, [r0, #4]
 8008b5a:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <cleanup_stdio+0x34>)
 8008b5c:	4299      	cmp	r1, r3
 8008b5e:	b510      	push	{r4, lr}
 8008b60:	4604      	mov	r4, r0
 8008b62:	d001      	beq.n	8008b68 <cleanup_stdio+0x10>
 8008b64:	f000 fc6c 	bl	8009440 <_fflush_r>
 8008b68:	68a1      	ldr	r1, [r4, #8]
 8008b6a:	4b09      	ldr	r3, [pc, #36]	; (8008b90 <cleanup_stdio+0x38>)
 8008b6c:	4299      	cmp	r1, r3
 8008b6e:	d002      	beq.n	8008b76 <cleanup_stdio+0x1e>
 8008b70:	4620      	mov	r0, r4
 8008b72:	f000 fc65 	bl	8009440 <_fflush_r>
 8008b76:	68e1      	ldr	r1, [r4, #12]
 8008b78:	4b06      	ldr	r3, [pc, #24]	; (8008b94 <cleanup_stdio+0x3c>)
 8008b7a:	4299      	cmp	r1, r3
 8008b7c:	d004      	beq.n	8008b88 <cleanup_stdio+0x30>
 8008b7e:	4620      	mov	r0, r4
 8008b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b84:	f000 bc5c 	b.w	8009440 <_fflush_r>
 8008b88:	bd10      	pop	{r4, pc}
 8008b8a:	bf00      	nop
 8008b8c:	20000764 	.word	0x20000764
 8008b90:	200007cc 	.word	0x200007cc
 8008b94:	20000834 	.word	0x20000834

08008b98 <global_stdio_init.part.0>:
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	4b0b      	ldr	r3, [pc, #44]	; (8008bc8 <global_stdio_init.part.0+0x30>)
 8008b9c:	4c0b      	ldr	r4, [pc, #44]	; (8008bcc <global_stdio_init.part.0+0x34>)
 8008b9e:	4a0c      	ldr	r2, [pc, #48]	; (8008bd0 <global_stdio_init.part.0+0x38>)
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2104      	movs	r1, #4
 8008ba8:	f7ff ff94 	bl	8008ad4 <std>
 8008bac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	2109      	movs	r1, #9
 8008bb4:	f7ff ff8e 	bl	8008ad4 <std>
 8008bb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bc2:	2112      	movs	r1, #18
 8008bc4:	f7ff bf86 	b.w	8008ad4 <std>
 8008bc8:	2000089c 	.word	0x2000089c
 8008bcc:	20000764 	.word	0x20000764
 8008bd0:	08008b41 	.word	0x08008b41

08008bd4 <__sfp_lock_acquire>:
 8008bd4:	4801      	ldr	r0, [pc, #4]	; (8008bdc <__sfp_lock_acquire+0x8>)
 8008bd6:	f000 b8fc 	b.w	8008dd2 <__retarget_lock_acquire_recursive>
 8008bda:	bf00      	nop
 8008bdc:	200008a5 	.word	0x200008a5

08008be0 <__sfp_lock_release>:
 8008be0:	4801      	ldr	r0, [pc, #4]	; (8008be8 <__sfp_lock_release+0x8>)
 8008be2:	f000 b8f7 	b.w	8008dd4 <__retarget_lock_release_recursive>
 8008be6:	bf00      	nop
 8008be8:	200008a5 	.word	0x200008a5

08008bec <__sinit>:
 8008bec:	b510      	push	{r4, lr}
 8008bee:	4604      	mov	r4, r0
 8008bf0:	f7ff fff0 	bl	8008bd4 <__sfp_lock_acquire>
 8008bf4:	6a23      	ldr	r3, [r4, #32]
 8008bf6:	b11b      	cbz	r3, 8008c00 <__sinit+0x14>
 8008bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bfc:	f7ff bff0 	b.w	8008be0 <__sfp_lock_release>
 8008c00:	4b04      	ldr	r3, [pc, #16]	; (8008c14 <__sinit+0x28>)
 8008c02:	6223      	str	r3, [r4, #32]
 8008c04:	4b04      	ldr	r3, [pc, #16]	; (8008c18 <__sinit+0x2c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1f5      	bne.n	8008bf8 <__sinit+0xc>
 8008c0c:	f7ff ffc4 	bl	8008b98 <global_stdio_init.part.0>
 8008c10:	e7f2      	b.n	8008bf8 <__sinit+0xc>
 8008c12:	bf00      	nop
 8008c14:	08008b59 	.word	0x08008b59
 8008c18:	2000089c 	.word	0x2000089c

08008c1c <_fwalk_sglue>:
 8008c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c20:	4607      	mov	r7, r0
 8008c22:	4688      	mov	r8, r1
 8008c24:	4614      	mov	r4, r2
 8008c26:	2600      	movs	r6, #0
 8008c28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c2c:	f1b9 0901 	subs.w	r9, r9, #1
 8008c30:	d505      	bpl.n	8008c3e <_fwalk_sglue+0x22>
 8008c32:	6824      	ldr	r4, [r4, #0]
 8008c34:	2c00      	cmp	r4, #0
 8008c36:	d1f7      	bne.n	8008c28 <_fwalk_sglue+0xc>
 8008c38:	4630      	mov	r0, r6
 8008c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c3e:	89ab      	ldrh	r3, [r5, #12]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d907      	bls.n	8008c54 <_fwalk_sglue+0x38>
 8008c44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	d003      	beq.n	8008c54 <_fwalk_sglue+0x38>
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	4638      	mov	r0, r7
 8008c50:	47c0      	blx	r8
 8008c52:	4306      	orrs	r6, r0
 8008c54:	3568      	adds	r5, #104	; 0x68
 8008c56:	e7e9      	b.n	8008c2c <_fwalk_sglue+0x10>

08008c58 <__sread>:
 8008c58:	b510      	push	{r4, lr}
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c60:	f000 f868 	bl	8008d34 <_read_r>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	bfab      	itete	ge
 8008c68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c6a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c6c:	181b      	addge	r3, r3, r0
 8008c6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c72:	bfac      	ite	ge
 8008c74:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c76:	81a3      	strhlt	r3, [r4, #12]
 8008c78:	bd10      	pop	{r4, pc}

08008c7a <__swrite>:
 8008c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c7e:	461f      	mov	r7, r3
 8008c80:	898b      	ldrh	r3, [r1, #12]
 8008c82:	05db      	lsls	r3, r3, #23
 8008c84:	4605      	mov	r5, r0
 8008c86:	460c      	mov	r4, r1
 8008c88:	4616      	mov	r6, r2
 8008c8a:	d505      	bpl.n	8008c98 <__swrite+0x1e>
 8008c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c90:	2302      	movs	r3, #2
 8008c92:	2200      	movs	r2, #0
 8008c94:	f000 f83c 	bl	8008d10 <_lseek_r>
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ca2:	81a3      	strh	r3, [r4, #12]
 8008ca4:	4632      	mov	r2, r6
 8008ca6:	463b      	mov	r3, r7
 8008ca8:	4628      	mov	r0, r5
 8008caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cae:	f000 b853 	b.w	8008d58 <_write_r>

08008cb2 <__sseek>:
 8008cb2:	b510      	push	{r4, lr}
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cba:	f000 f829 	bl	8008d10 <_lseek_r>
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	bf15      	itete	ne
 8008cc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cce:	81a3      	strheq	r3, [r4, #12]
 8008cd0:	bf18      	it	ne
 8008cd2:	81a3      	strhne	r3, [r4, #12]
 8008cd4:	bd10      	pop	{r4, pc}

08008cd6 <__sclose>:
 8008cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cda:	f000 b809 	b.w	8008cf0 <_close_r>

08008cde <memset>:
 8008cde:	4402      	add	r2, r0
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d100      	bne.n	8008ce8 <memset+0xa>
 8008ce6:	4770      	bx	lr
 8008ce8:	f803 1b01 	strb.w	r1, [r3], #1
 8008cec:	e7f9      	b.n	8008ce2 <memset+0x4>
	...

08008cf0 <_close_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4d06      	ldr	r5, [pc, #24]	; (8008d0c <_close_r+0x1c>)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	602b      	str	r3, [r5, #0]
 8008cfc:	f7fa fd67 	bl	80037ce <_close>
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	d102      	bne.n	8008d0a <_close_r+0x1a>
 8008d04:	682b      	ldr	r3, [r5, #0]
 8008d06:	b103      	cbz	r3, 8008d0a <_close_r+0x1a>
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	bd38      	pop	{r3, r4, r5, pc}
 8008d0c:	200008a0 	.word	0x200008a0

08008d10 <_lseek_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4d07      	ldr	r5, [pc, #28]	; (8008d30 <_lseek_r+0x20>)
 8008d14:	4604      	mov	r4, r0
 8008d16:	4608      	mov	r0, r1
 8008d18:	4611      	mov	r1, r2
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	602a      	str	r2, [r5, #0]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	f7fa fd7c 	bl	800381c <_lseek>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d102      	bne.n	8008d2e <_lseek_r+0x1e>
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	b103      	cbz	r3, 8008d2e <_lseek_r+0x1e>
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
 8008d30:	200008a0 	.word	0x200008a0

08008d34 <_read_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	4d07      	ldr	r5, [pc, #28]	; (8008d54 <_read_r+0x20>)
 8008d38:	4604      	mov	r4, r0
 8008d3a:	4608      	mov	r0, r1
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	2200      	movs	r2, #0
 8008d40:	602a      	str	r2, [r5, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	f7fa fd0a 	bl	800375c <_read>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_read_r+0x1e>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_read_r+0x1e>
 8008d50:	6023      	str	r3, [r4, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	200008a0 	.word	0x200008a0

08008d58 <_write_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4d07      	ldr	r5, [pc, #28]	; (8008d78 <_write_r+0x20>)
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	4608      	mov	r0, r1
 8008d60:	4611      	mov	r1, r2
 8008d62:	2200      	movs	r2, #0
 8008d64:	602a      	str	r2, [r5, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	f7fa fd15 	bl	8003796 <_write>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_write_r+0x1e>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_write_r+0x1e>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	200008a0 	.word	0x200008a0

08008d7c <__errno>:
 8008d7c:	4b01      	ldr	r3, [pc, #4]	; (8008d84 <__errno+0x8>)
 8008d7e:	6818      	ldr	r0, [r3, #0]
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	2000011c 	.word	0x2000011c

08008d88 <__libc_init_array>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	4d0d      	ldr	r5, [pc, #52]	; (8008dc0 <__libc_init_array+0x38>)
 8008d8c:	4c0d      	ldr	r4, [pc, #52]	; (8008dc4 <__libc_init_array+0x3c>)
 8008d8e:	1b64      	subs	r4, r4, r5
 8008d90:	10a4      	asrs	r4, r4, #2
 8008d92:	2600      	movs	r6, #0
 8008d94:	42a6      	cmp	r6, r4
 8008d96:	d109      	bne.n	8008dac <__libc_init_array+0x24>
 8008d98:	4d0b      	ldr	r5, [pc, #44]	; (8008dc8 <__libc_init_array+0x40>)
 8008d9a:	4c0c      	ldr	r4, [pc, #48]	; (8008dcc <__libc_init_array+0x44>)
 8008d9c:	f000 fe42 	bl	8009a24 <_init>
 8008da0:	1b64      	subs	r4, r4, r5
 8008da2:	10a4      	asrs	r4, r4, #2
 8008da4:	2600      	movs	r6, #0
 8008da6:	42a6      	cmp	r6, r4
 8008da8:	d105      	bne.n	8008db6 <__libc_init_array+0x2e>
 8008daa:	bd70      	pop	{r4, r5, r6, pc}
 8008dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db0:	4798      	blx	r3
 8008db2:	3601      	adds	r6, #1
 8008db4:	e7ee      	b.n	8008d94 <__libc_init_array+0xc>
 8008db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dba:	4798      	blx	r3
 8008dbc:	3601      	adds	r6, #1
 8008dbe:	e7f2      	b.n	8008da6 <__libc_init_array+0x1e>
 8008dc0:	0800cb0c 	.word	0x0800cb0c
 8008dc4:	0800cb0c 	.word	0x0800cb0c
 8008dc8:	0800cb0c 	.word	0x0800cb0c
 8008dcc:	0800cb10 	.word	0x0800cb10

08008dd0 <__retarget_lock_init_recursive>:
 8008dd0:	4770      	bx	lr

08008dd2 <__retarget_lock_acquire_recursive>:
 8008dd2:	4770      	bx	lr

08008dd4 <__retarget_lock_release_recursive>:
 8008dd4:	4770      	bx	lr
	...

08008dd8 <__assert_func>:
 8008dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dda:	4614      	mov	r4, r2
 8008ddc:	461a      	mov	r2, r3
 8008dde:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <__assert_func+0x2c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4605      	mov	r5, r0
 8008de4:	68d8      	ldr	r0, [r3, #12]
 8008de6:	b14c      	cbz	r4, 8008dfc <__assert_func+0x24>
 8008de8:	4b07      	ldr	r3, [pc, #28]	; (8008e08 <__assert_func+0x30>)
 8008dea:	9100      	str	r1, [sp, #0]
 8008dec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008df0:	4906      	ldr	r1, [pc, #24]	; (8008e0c <__assert_func+0x34>)
 8008df2:	462b      	mov	r3, r5
 8008df4:	f000 fb4c 	bl	8009490 <fiprintf>
 8008df8:	f000 fb6c 	bl	80094d4 <abort>
 8008dfc:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <__assert_func+0x38>)
 8008dfe:	461c      	mov	r4, r3
 8008e00:	e7f3      	b.n	8008dea <__assert_func+0x12>
 8008e02:	bf00      	nop
 8008e04:	2000011c 	.word	0x2000011c
 8008e08:	0800ca93 	.word	0x0800ca93
 8008e0c:	0800caa0 	.word	0x0800caa0
 8008e10:	0800cace 	.word	0x0800cace

08008e14 <_free_r>:
 8008e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e16:	2900      	cmp	r1, #0
 8008e18:	d044      	beq.n	8008ea4 <_free_r+0x90>
 8008e1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e1e:	9001      	str	r0, [sp, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f1a1 0404 	sub.w	r4, r1, #4
 8008e26:	bfb8      	it	lt
 8008e28:	18e4      	addlt	r4, r4, r3
 8008e2a:	f000 f8e7 	bl	8008ffc <__malloc_lock>
 8008e2e:	4a1e      	ldr	r2, [pc, #120]	; (8008ea8 <_free_r+0x94>)
 8008e30:	9801      	ldr	r0, [sp, #4]
 8008e32:	6813      	ldr	r3, [r2, #0]
 8008e34:	b933      	cbnz	r3, 8008e44 <_free_r+0x30>
 8008e36:	6063      	str	r3, [r4, #4]
 8008e38:	6014      	str	r4, [r2, #0]
 8008e3a:	b003      	add	sp, #12
 8008e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e40:	f000 b8e2 	b.w	8009008 <__malloc_unlock>
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	d908      	bls.n	8008e5a <_free_r+0x46>
 8008e48:	6825      	ldr	r5, [r4, #0]
 8008e4a:	1961      	adds	r1, r4, r5
 8008e4c:	428b      	cmp	r3, r1
 8008e4e:	bf01      	itttt	eq
 8008e50:	6819      	ldreq	r1, [r3, #0]
 8008e52:	685b      	ldreq	r3, [r3, #4]
 8008e54:	1949      	addeq	r1, r1, r5
 8008e56:	6021      	streq	r1, [r4, #0]
 8008e58:	e7ed      	b.n	8008e36 <_free_r+0x22>
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	b10b      	cbz	r3, 8008e64 <_free_r+0x50>
 8008e60:	42a3      	cmp	r3, r4
 8008e62:	d9fa      	bls.n	8008e5a <_free_r+0x46>
 8008e64:	6811      	ldr	r1, [r2, #0]
 8008e66:	1855      	adds	r5, r2, r1
 8008e68:	42a5      	cmp	r5, r4
 8008e6a:	d10b      	bne.n	8008e84 <_free_r+0x70>
 8008e6c:	6824      	ldr	r4, [r4, #0]
 8008e6e:	4421      	add	r1, r4
 8008e70:	1854      	adds	r4, r2, r1
 8008e72:	42a3      	cmp	r3, r4
 8008e74:	6011      	str	r1, [r2, #0]
 8008e76:	d1e0      	bne.n	8008e3a <_free_r+0x26>
 8008e78:	681c      	ldr	r4, [r3, #0]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	6053      	str	r3, [r2, #4]
 8008e7e:	440c      	add	r4, r1
 8008e80:	6014      	str	r4, [r2, #0]
 8008e82:	e7da      	b.n	8008e3a <_free_r+0x26>
 8008e84:	d902      	bls.n	8008e8c <_free_r+0x78>
 8008e86:	230c      	movs	r3, #12
 8008e88:	6003      	str	r3, [r0, #0]
 8008e8a:	e7d6      	b.n	8008e3a <_free_r+0x26>
 8008e8c:	6825      	ldr	r5, [r4, #0]
 8008e8e:	1961      	adds	r1, r4, r5
 8008e90:	428b      	cmp	r3, r1
 8008e92:	bf04      	itt	eq
 8008e94:	6819      	ldreq	r1, [r3, #0]
 8008e96:	685b      	ldreq	r3, [r3, #4]
 8008e98:	6063      	str	r3, [r4, #4]
 8008e9a:	bf04      	itt	eq
 8008e9c:	1949      	addeq	r1, r1, r5
 8008e9e:	6021      	streq	r1, [r4, #0]
 8008ea0:	6054      	str	r4, [r2, #4]
 8008ea2:	e7ca      	b.n	8008e3a <_free_r+0x26>
 8008ea4:	b003      	add	sp, #12
 8008ea6:	bd30      	pop	{r4, r5, pc}
 8008ea8:	200008a8 	.word	0x200008a8

08008eac <malloc>:
 8008eac:	4b02      	ldr	r3, [pc, #8]	; (8008eb8 <malloc+0xc>)
 8008eae:	4601      	mov	r1, r0
 8008eb0:	6818      	ldr	r0, [r3, #0]
 8008eb2:	f000 b823 	b.w	8008efc <_malloc_r>
 8008eb6:	bf00      	nop
 8008eb8:	2000011c 	.word	0x2000011c

08008ebc <sbrk_aligned>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	4e0e      	ldr	r6, [pc, #56]	; (8008ef8 <sbrk_aligned+0x3c>)
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	6831      	ldr	r1, [r6, #0]
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	b911      	cbnz	r1, 8008ece <sbrk_aligned+0x12>
 8008ec8:	f000 faf4 	bl	80094b4 <_sbrk_r>
 8008ecc:	6030      	str	r0, [r6, #0]
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f000 faef 	bl	80094b4 <_sbrk_r>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	d00a      	beq.n	8008ef0 <sbrk_aligned+0x34>
 8008eda:	1cc4      	adds	r4, r0, #3
 8008edc:	f024 0403 	bic.w	r4, r4, #3
 8008ee0:	42a0      	cmp	r0, r4
 8008ee2:	d007      	beq.n	8008ef4 <sbrk_aligned+0x38>
 8008ee4:	1a21      	subs	r1, r4, r0
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f000 fae4 	bl	80094b4 <_sbrk_r>
 8008eec:	3001      	adds	r0, #1
 8008eee:	d101      	bne.n	8008ef4 <sbrk_aligned+0x38>
 8008ef0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
 8008ef8:	200008ac 	.word	0x200008ac

08008efc <_malloc_r>:
 8008efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f00:	1ccd      	adds	r5, r1, #3
 8008f02:	f025 0503 	bic.w	r5, r5, #3
 8008f06:	3508      	adds	r5, #8
 8008f08:	2d0c      	cmp	r5, #12
 8008f0a:	bf38      	it	cc
 8008f0c:	250c      	movcc	r5, #12
 8008f0e:	2d00      	cmp	r5, #0
 8008f10:	4607      	mov	r7, r0
 8008f12:	db01      	blt.n	8008f18 <_malloc_r+0x1c>
 8008f14:	42a9      	cmp	r1, r5
 8008f16:	d905      	bls.n	8008f24 <_malloc_r+0x28>
 8008f18:	230c      	movs	r3, #12
 8008f1a:	603b      	str	r3, [r7, #0]
 8008f1c:	2600      	movs	r6, #0
 8008f1e:	4630      	mov	r0, r6
 8008f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ff8 <_malloc_r+0xfc>
 8008f28:	f000 f868 	bl	8008ffc <__malloc_lock>
 8008f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f30:	461c      	mov	r4, r3
 8008f32:	bb5c      	cbnz	r4, 8008f8c <_malloc_r+0x90>
 8008f34:	4629      	mov	r1, r5
 8008f36:	4638      	mov	r0, r7
 8008f38:	f7ff ffc0 	bl	8008ebc <sbrk_aligned>
 8008f3c:	1c43      	adds	r3, r0, #1
 8008f3e:	4604      	mov	r4, r0
 8008f40:	d155      	bne.n	8008fee <_malloc_r+0xf2>
 8008f42:	f8d8 4000 	ldr.w	r4, [r8]
 8008f46:	4626      	mov	r6, r4
 8008f48:	2e00      	cmp	r6, #0
 8008f4a:	d145      	bne.n	8008fd8 <_malloc_r+0xdc>
 8008f4c:	2c00      	cmp	r4, #0
 8008f4e:	d048      	beq.n	8008fe2 <_malloc_r+0xe6>
 8008f50:	6823      	ldr	r3, [r4, #0]
 8008f52:	4631      	mov	r1, r6
 8008f54:	4638      	mov	r0, r7
 8008f56:	eb04 0903 	add.w	r9, r4, r3
 8008f5a:	f000 faab 	bl	80094b4 <_sbrk_r>
 8008f5e:	4581      	cmp	r9, r0
 8008f60:	d13f      	bne.n	8008fe2 <_malloc_r+0xe6>
 8008f62:	6821      	ldr	r1, [r4, #0]
 8008f64:	1a6d      	subs	r5, r5, r1
 8008f66:	4629      	mov	r1, r5
 8008f68:	4638      	mov	r0, r7
 8008f6a:	f7ff ffa7 	bl	8008ebc <sbrk_aligned>
 8008f6e:	3001      	adds	r0, #1
 8008f70:	d037      	beq.n	8008fe2 <_malloc_r+0xe6>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	442b      	add	r3, r5
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	f8d8 3000 	ldr.w	r3, [r8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d038      	beq.n	8008ff2 <_malloc_r+0xf6>
 8008f80:	685a      	ldr	r2, [r3, #4]
 8008f82:	42a2      	cmp	r2, r4
 8008f84:	d12b      	bne.n	8008fde <_malloc_r+0xe2>
 8008f86:	2200      	movs	r2, #0
 8008f88:	605a      	str	r2, [r3, #4]
 8008f8a:	e00f      	b.n	8008fac <_malloc_r+0xb0>
 8008f8c:	6822      	ldr	r2, [r4, #0]
 8008f8e:	1b52      	subs	r2, r2, r5
 8008f90:	d41f      	bmi.n	8008fd2 <_malloc_r+0xd6>
 8008f92:	2a0b      	cmp	r2, #11
 8008f94:	d917      	bls.n	8008fc6 <_malloc_r+0xca>
 8008f96:	1961      	adds	r1, r4, r5
 8008f98:	42a3      	cmp	r3, r4
 8008f9a:	6025      	str	r5, [r4, #0]
 8008f9c:	bf18      	it	ne
 8008f9e:	6059      	strne	r1, [r3, #4]
 8008fa0:	6863      	ldr	r3, [r4, #4]
 8008fa2:	bf08      	it	eq
 8008fa4:	f8c8 1000 	streq.w	r1, [r8]
 8008fa8:	5162      	str	r2, [r4, r5]
 8008faa:	604b      	str	r3, [r1, #4]
 8008fac:	4638      	mov	r0, r7
 8008fae:	f104 060b 	add.w	r6, r4, #11
 8008fb2:	f000 f829 	bl	8009008 <__malloc_unlock>
 8008fb6:	f026 0607 	bic.w	r6, r6, #7
 8008fba:	1d23      	adds	r3, r4, #4
 8008fbc:	1af2      	subs	r2, r6, r3
 8008fbe:	d0ae      	beq.n	8008f1e <_malloc_r+0x22>
 8008fc0:	1b9b      	subs	r3, r3, r6
 8008fc2:	50a3      	str	r3, [r4, r2]
 8008fc4:	e7ab      	b.n	8008f1e <_malloc_r+0x22>
 8008fc6:	42a3      	cmp	r3, r4
 8008fc8:	6862      	ldr	r2, [r4, #4]
 8008fca:	d1dd      	bne.n	8008f88 <_malloc_r+0x8c>
 8008fcc:	f8c8 2000 	str.w	r2, [r8]
 8008fd0:	e7ec      	b.n	8008fac <_malloc_r+0xb0>
 8008fd2:	4623      	mov	r3, r4
 8008fd4:	6864      	ldr	r4, [r4, #4]
 8008fd6:	e7ac      	b.n	8008f32 <_malloc_r+0x36>
 8008fd8:	4634      	mov	r4, r6
 8008fda:	6876      	ldr	r6, [r6, #4]
 8008fdc:	e7b4      	b.n	8008f48 <_malloc_r+0x4c>
 8008fde:	4613      	mov	r3, r2
 8008fe0:	e7cc      	b.n	8008f7c <_malloc_r+0x80>
 8008fe2:	230c      	movs	r3, #12
 8008fe4:	603b      	str	r3, [r7, #0]
 8008fe6:	4638      	mov	r0, r7
 8008fe8:	f000 f80e 	bl	8009008 <__malloc_unlock>
 8008fec:	e797      	b.n	8008f1e <_malloc_r+0x22>
 8008fee:	6025      	str	r5, [r4, #0]
 8008ff0:	e7dc      	b.n	8008fac <_malloc_r+0xb0>
 8008ff2:	605b      	str	r3, [r3, #4]
 8008ff4:	deff      	udf	#255	; 0xff
 8008ff6:	bf00      	nop
 8008ff8:	200008a8 	.word	0x200008a8

08008ffc <__malloc_lock>:
 8008ffc:	4801      	ldr	r0, [pc, #4]	; (8009004 <__malloc_lock+0x8>)
 8008ffe:	f7ff bee8 	b.w	8008dd2 <__retarget_lock_acquire_recursive>
 8009002:	bf00      	nop
 8009004:	200008a4 	.word	0x200008a4

08009008 <__malloc_unlock>:
 8009008:	4801      	ldr	r0, [pc, #4]	; (8009010 <__malloc_unlock+0x8>)
 800900a:	f7ff bee3 	b.w	8008dd4 <__retarget_lock_release_recursive>
 800900e:	bf00      	nop
 8009010:	200008a4 	.word	0x200008a4

08009014 <_printf_common>:
 8009014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009018:	4616      	mov	r6, r2
 800901a:	4699      	mov	r9, r3
 800901c:	688a      	ldr	r2, [r1, #8]
 800901e:	690b      	ldr	r3, [r1, #16]
 8009020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009024:	4293      	cmp	r3, r2
 8009026:	bfb8      	it	lt
 8009028:	4613      	movlt	r3, r2
 800902a:	6033      	str	r3, [r6, #0]
 800902c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009030:	4607      	mov	r7, r0
 8009032:	460c      	mov	r4, r1
 8009034:	b10a      	cbz	r2, 800903a <_printf_common+0x26>
 8009036:	3301      	adds	r3, #1
 8009038:	6033      	str	r3, [r6, #0]
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	0699      	lsls	r1, r3, #26
 800903e:	bf42      	ittt	mi
 8009040:	6833      	ldrmi	r3, [r6, #0]
 8009042:	3302      	addmi	r3, #2
 8009044:	6033      	strmi	r3, [r6, #0]
 8009046:	6825      	ldr	r5, [r4, #0]
 8009048:	f015 0506 	ands.w	r5, r5, #6
 800904c:	d106      	bne.n	800905c <_printf_common+0x48>
 800904e:	f104 0a19 	add.w	sl, r4, #25
 8009052:	68e3      	ldr	r3, [r4, #12]
 8009054:	6832      	ldr	r2, [r6, #0]
 8009056:	1a9b      	subs	r3, r3, r2
 8009058:	42ab      	cmp	r3, r5
 800905a:	dc26      	bgt.n	80090aa <_printf_common+0x96>
 800905c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009060:	1e13      	subs	r3, r2, #0
 8009062:	6822      	ldr	r2, [r4, #0]
 8009064:	bf18      	it	ne
 8009066:	2301      	movne	r3, #1
 8009068:	0692      	lsls	r2, r2, #26
 800906a:	d42b      	bmi.n	80090c4 <_printf_common+0xb0>
 800906c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009070:	4649      	mov	r1, r9
 8009072:	4638      	mov	r0, r7
 8009074:	47c0      	blx	r8
 8009076:	3001      	adds	r0, #1
 8009078:	d01e      	beq.n	80090b8 <_printf_common+0xa4>
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	6922      	ldr	r2, [r4, #16]
 800907e:	f003 0306 	and.w	r3, r3, #6
 8009082:	2b04      	cmp	r3, #4
 8009084:	bf02      	ittt	eq
 8009086:	68e5      	ldreq	r5, [r4, #12]
 8009088:	6833      	ldreq	r3, [r6, #0]
 800908a:	1aed      	subeq	r5, r5, r3
 800908c:	68a3      	ldr	r3, [r4, #8]
 800908e:	bf0c      	ite	eq
 8009090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009094:	2500      	movne	r5, #0
 8009096:	4293      	cmp	r3, r2
 8009098:	bfc4      	itt	gt
 800909a:	1a9b      	subgt	r3, r3, r2
 800909c:	18ed      	addgt	r5, r5, r3
 800909e:	2600      	movs	r6, #0
 80090a0:	341a      	adds	r4, #26
 80090a2:	42b5      	cmp	r5, r6
 80090a4:	d11a      	bne.n	80090dc <_printf_common+0xc8>
 80090a6:	2000      	movs	r0, #0
 80090a8:	e008      	b.n	80090bc <_printf_common+0xa8>
 80090aa:	2301      	movs	r3, #1
 80090ac:	4652      	mov	r2, sl
 80090ae:	4649      	mov	r1, r9
 80090b0:	4638      	mov	r0, r7
 80090b2:	47c0      	blx	r8
 80090b4:	3001      	adds	r0, #1
 80090b6:	d103      	bne.n	80090c0 <_printf_common+0xac>
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295
 80090bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c0:	3501      	adds	r5, #1
 80090c2:	e7c6      	b.n	8009052 <_printf_common+0x3e>
 80090c4:	18e1      	adds	r1, r4, r3
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	2030      	movs	r0, #48	; 0x30
 80090ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090ce:	4422      	add	r2, r4
 80090d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090d8:	3302      	adds	r3, #2
 80090da:	e7c7      	b.n	800906c <_printf_common+0x58>
 80090dc:	2301      	movs	r3, #1
 80090de:	4622      	mov	r2, r4
 80090e0:	4649      	mov	r1, r9
 80090e2:	4638      	mov	r0, r7
 80090e4:	47c0      	blx	r8
 80090e6:	3001      	adds	r0, #1
 80090e8:	d0e6      	beq.n	80090b8 <_printf_common+0xa4>
 80090ea:	3601      	adds	r6, #1
 80090ec:	e7d9      	b.n	80090a2 <_printf_common+0x8e>
	...

080090f0 <_printf_i>:
 80090f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090f4:	7e0f      	ldrb	r7, [r1, #24]
 80090f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090f8:	2f78      	cmp	r7, #120	; 0x78
 80090fa:	4691      	mov	r9, r2
 80090fc:	4680      	mov	r8, r0
 80090fe:	460c      	mov	r4, r1
 8009100:	469a      	mov	sl, r3
 8009102:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009106:	d807      	bhi.n	8009118 <_printf_i+0x28>
 8009108:	2f62      	cmp	r7, #98	; 0x62
 800910a:	d80a      	bhi.n	8009122 <_printf_i+0x32>
 800910c:	2f00      	cmp	r7, #0
 800910e:	f000 80d4 	beq.w	80092ba <_printf_i+0x1ca>
 8009112:	2f58      	cmp	r7, #88	; 0x58
 8009114:	f000 80c0 	beq.w	8009298 <_printf_i+0x1a8>
 8009118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800911c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009120:	e03a      	b.n	8009198 <_printf_i+0xa8>
 8009122:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009126:	2b15      	cmp	r3, #21
 8009128:	d8f6      	bhi.n	8009118 <_printf_i+0x28>
 800912a:	a101      	add	r1, pc, #4	; (adr r1, 8009130 <_printf_i+0x40>)
 800912c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009130:	08009189 	.word	0x08009189
 8009134:	0800919d 	.word	0x0800919d
 8009138:	08009119 	.word	0x08009119
 800913c:	08009119 	.word	0x08009119
 8009140:	08009119 	.word	0x08009119
 8009144:	08009119 	.word	0x08009119
 8009148:	0800919d 	.word	0x0800919d
 800914c:	08009119 	.word	0x08009119
 8009150:	08009119 	.word	0x08009119
 8009154:	08009119 	.word	0x08009119
 8009158:	08009119 	.word	0x08009119
 800915c:	080092a1 	.word	0x080092a1
 8009160:	080091c9 	.word	0x080091c9
 8009164:	0800925b 	.word	0x0800925b
 8009168:	08009119 	.word	0x08009119
 800916c:	08009119 	.word	0x08009119
 8009170:	080092c3 	.word	0x080092c3
 8009174:	08009119 	.word	0x08009119
 8009178:	080091c9 	.word	0x080091c9
 800917c:	08009119 	.word	0x08009119
 8009180:	08009119 	.word	0x08009119
 8009184:	08009263 	.word	0x08009263
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	1d1a      	adds	r2, r3, #4
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	602a      	str	r2, [r5, #0]
 8009190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009198:	2301      	movs	r3, #1
 800919a:	e09f      	b.n	80092dc <_printf_i+0x1ec>
 800919c:	6820      	ldr	r0, [r4, #0]
 800919e:	682b      	ldr	r3, [r5, #0]
 80091a0:	0607      	lsls	r7, r0, #24
 80091a2:	f103 0104 	add.w	r1, r3, #4
 80091a6:	6029      	str	r1, [r5, #0]
 80091a8:	d501      	bpl.n	80091ae <_printf_i+0xbe>
 80091aa:	681e      	ldr	r6, [r3, #0]
 80091ac:	e003      	b.n	80091b6 <_printf_i+0xc6>
 80091ae:	0646      	lsls	r6, r0, #25
 80091b0:	d5fb      	bpl.n	80091aa <_printf_i+0xba>
 80091b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80091b6:	2e00      	cmp	r6, #0
 80091b8:	da03      	bge.n	80091c2 <_printf_i+0xd2>
 80091ba:	232d      	movs	r3, #45	; 0x2d
 80091bc:	4276      	negs	r6, r6
 80091be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091c2:	485a      	ldr	r0, [pc, #360]	; (800932c <_printf_i+0x23c>)
 80091c4:	230a      	movs	r3, #10
 80091c6:	e012      	b.n	80091ee <_printf_i+0xfe>
 80091c8:	682b      	ldr	r3, [r5, #0]
 80091ca:	6820      	ldr	r0, [r4, #0]
 80091cc:	1d19      	adds	r1, r3, #4
 80091ce:	6029      	str	r1, [r5, #0]
 80091d0:	0605      	lsls	r5, r0, #24
 80091d2:	d501      	bpl.n	80091d8 <_printf_i+0xe8>
 80091d4:	681e      	ldr	r6, [r3, #0]
 80091d6:	e002      	b.n	80091de <_printf_i+0xee>
 80091d8:	0641      	lsls	r1, r0, #25
 80091da:	d5fb      	bpl.n	80091d4 <_printf_i+0xe4>
 80091dc:	881e      	ldrh	r6, [r3, #0]
 80091de:	4853      	ldr	r0, [pc, #332]	; (800932c <_printf_i+0x23c>)
 80091e0:	2f6f      	cmp	r7, #111	; 0x6f
 80091e2:	bf0c      	ite	eq
 80091e4:	2308      	moveq	r3, #8
 80091e6:	230a      	movne	r3, #10
 80091e8:	2100      	movs	r1, #0
 80091ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091ee:	6865      	ldr	r5, [r4, #4]
 80091f0:	60a5      	str	r5, [r4, #8]
 80091f2:	2d00      	cmp	r5, #0
 80091f4:	bfa2      	ittt	ge
 80091f6:	6821      	ldrge	r1, [r4, #0]
 80091f8:	f021 0104 	bicge.w	r1, r1, #4
 80091fc:	6021      	strge	r1, [r4, #0]
 80091fe:	b90e      	cbnz	r6, 8009204 <_printf_i+0x114>
 8009200:	2d00      	cmp	r5, #0
 8009202:	d04b      	beq.n	800929c <_printf_i+0x1ac>
 8009204:	4615      	mov	r5, r2
 8009206:	fbb6 f1f3 	udiv	r1, r6, r3
 800920a:	fb03 6711 	mls	r7, r3, r1, r6
 800920e:	5dc7      	ldrb	r7, [r0, r7]
 8009210:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009214:	4637      	mov	r7, r6
 8009216:	42bb      	cmp	r3, r7
 8009218:	460e      	mov	r6, r1
 800921a:	d9f4      	bls.n	8009206 <_printf_i+0x116>
 800921c:	2b08      	cmp	r3, #8
 800921e:	d10b      	bne.n	8009238 <_printf_i+0x148>
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	07de      	lsls	r6, r3, #31
 8009224:	d508      	bpl.n	8009238 <_printf_i+0x148>
 8009226:	6923      	ldr	r3, [r4, #16]
 8009228:	6861      	ldr	r1, [r4, #4]
 800922a:	4299      	cmp	r1, r3
 800922c:	bfde      	ittt	le
 800922e:	2330      	movle	r3, #48	; 0x30
 8009230:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009234:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009238:	1b52      	subs	r2, r2, r5
 800923a:	6122      	str	r2, [r4, #16]
 800923c:	f8cd a000 	str.w	sl, [sp]
 8009240:	464b      	mov	r3, r9
 8009242:	aa03      	add	r2, sp, #12
 8009244:	4621      	mov	r1, r4
 8009246:	4640      	mov	r0, r8
 8009248:	f7ff fee4 	bl	8009014 <_printf_common>
 800924c:	3001      	adds	r0, #1
 800924e:	d14a      	bne.n	80092e6 <_printf_i+0x1f6>
 8009250:	f04f 30ff 	mov.w	r0, #4294967295
 8009254:	b004      	add	sp, #16
 8009256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	f043 0320 	orr.w	r3, r3, #32
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	4833      	ldr	r0, [pc, #204]	; (8009330 <_printf_i+0x240>)
 8009264:	2778      	movs	r7, #120	; 0x78
 8009266:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800926a:	6823      	ldr	r3, [r4, #0]
 800926c:	6829      	ldr	r1, [r5, #0]
 800926e:	061f      	lsls	r7, r3, #24
 8009270:	f851 6b04 	ldr.w	r6, [r1], #4
 8009274:	d402      	bmi.n	800927c <_printf_i+0x18c>
 8009276:	065f      	lsls	r7, r3, #25
 8009278:	bf48      	it	mi
 800927a:	b2b6      	uxthmi	r6, r6
 800927c:	07df      	lsls	r7, r3, #31
 800927e:	bf48      	it	mi
 8009280:	f043 0320 	orrmi.w	r3, r3, #32
 8009284:	6029      	str	r1, [r5, #0]
 8009286:	bf48      	it	mi
 8009288:	6023      	strmi	r3, [r4, #0]
 800928a:	b91e      	cbnz	r6, 8009294 <_printf_i+0x1a4>
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	f023 0320 	bic.w	r3, r3, #32
 8009292:	6023      	str	r3, [r4, #0]
 8009294:	2310      	movs	r3, #16
 8009296:	e7a7      	b.n	80091e8 <_printf_i+0xf8>
 8009298:	4824      	ldr	r0, [pc, #144]	; (800932c <_printf_i+0x23c>)
 800929a:	e7e4      	b.n	8009266 <_printf_i+0x176>
 800929c:	4615      	mov	r5, r2
 800929e:	e7bd      	b.n	800921c <_printf_i+0x12c>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	6826      	ldr	r6, [r4, #0]
 80092a4:	6961      	ldr	r1, [r4, #20]
 80092a6:	1d18      	adds	r0, r3, #4
 80092a8:	6028      	str	r0, [r5, #0]
 80092aa:	0635      	lsls	r5, r6, #24
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	d501      	bpl.n	80092b4 <_printf_i+0x1c4>
 80092b0:	6019      	str	r1, [r3, #0]
 80092b2:	e002      	b.n	80092ba <_printf_i+0x1ca>
 80092b4:	0670      	lsls	r0, r6, #25
 80092b6:	d5fb      	bpl.n	80092b0 <_printf_i+0x1c0>
 80092b8:	8019      	strh	r1, [r3, #0]
 80092ba:	2300      	movs	r3, #0
 80092bc:	6123      	str	r3, [r4, #16]
 80092be:	4615      	mov	r5, r2
 80092c0:	e7bc      	b.n	800923c <_printf_i+0x14c>
 80092c2:	682b      	ldr	r3, [r5, #0]
 80092c4:	1d1a      	adds	r2, r3, #4
 80092c6:	602a      	str	r2, [r5, #0]
 80092c8:	681d      	ldr	r5, [r3, #0]
 80092ca:	6862      	ldr	r2, [r4, #4]
 80092cc:	2100      	movs	r1, #0
 80092ce:	4628      	mov	r0, r5
 80092d0:	f7f6 ff7e 	bl	80001d0 <memchr>
 80092d4:	b108      	cbz	r0, 80092da <_printf_i+0x1ea>
 80092d6:	1b40      	subs	r0, r0, r5
 80092d8:	6060      	str	r0, [r4, #4]
 80092da:	6863      	ldr	r3, [r4, #4]
 80092dc:	6123      	str	r3, [r4, #16]
 80092de:	2300      	movs	r3, #0
 80092e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092e4:	e7aa      	b.n	800923c <_printf_i+0x14c>
 80092e6:	6923      	ldr	r3, [r4, #16]
 80092e8:	462a      	mov	r2, r5
 80092ea:	4649      	mov	r1, r9
 80092ec:	4640      	mov	r0, r8
 80092ee:	47d0      	blx	sl
 80092f0:	3001      	adds	r0, #1
 80092f2:	d0ad      	beq.n	8009250 <_printf_i+0x160>
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	079b      	lsls	r3, r3, #30
 80092f8:	d413      	bmi.n	8009322 <_printf_i+0x232>
 80092fa:	68e0      	ldr	r0, [r4, #12]
 80092fc:	9b03      	ldr	r3, [sp, #12]
 80092fe:	4298      	cmp	r0, r3
 8009300:	bfb8      	it	lt
 8009302:	4618      	movlt	r0, r3
 8009304:	e7a6      	b.n	8009254 <_printf_i+0x164>
 8009306:	2301      	movs	r3, #1
 8009308:	4632      	mov	r2, r6
 800930a:	4649      	mov	r1, r9
 800930c:	4640      	mov	r0, r8
 800930e:	47d0      	blx	sl
 8009310:	3001      	adds	r0, #1
 8009312:	d09d      	beq.n	8009250 <_printf_i+0x160>
 8009314:	3501      	adds	r5, #1
 8009316:	68e3      	ldr	r3, [r4, #12]
 8009318:	9903      	ldr	r1, [sp, #12]
 800931a:	1a5b      	subs	r3, r3, r1
 800931c:	42ab      	cmp	r3, r5
 800931e:	dcf2      	bgt.n	8009306 <_printf_i+0x216>
 8009320:	e7eb      	b.n	80092fa <_printf_i+0x20a>
 8009322:	2500      	movs	r5, #0
 8009324:	f104 0619 	add.w	r6, r4, #25
 8009328:	e7f5      	b.n	8009316 <_printf_i+0x226>
 800932a:	bf00      	nop
 800932c:	0800cacf 	.word	0x0800cacf
 8009330:	0800cae0 	.word	0x0800cae0

08009334 <__sflush_r>:
 8009334:	898a      	ldrh	r2, [r1, #12]
 8009336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800933a:	4605      	mov	r5, r0
 800933c:	0710      	lsls	r0, r2, #28
 800933e:	460c      	mov	r4, r1
 8009340:	d458      	bmi.n	80093f4 <__sflush_r+0xc0>
 8009342:	684b      	ldr	r3, [r1, #4]
 8009344:	2b00      	cmp	r3, #0
 8009346:	dc05      	bgt.n	8009354 <__sflush_r+0x20>
 8009348:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800934a:	2b00      	cmp	r3, #0
 800934c:	dc02      	bgt.n	8009354 <__sflush_r+0x20>
 800934e:	2000      	movs	r0, #0
 8009350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009356:	2e00      	cmp	r6, #0
 8009358:	d0f9      	beq.n	800934e <__sflush_r+0x1a>
 800935a:	2300      	movs	r3, #0
 800935c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009360:	682f      	ldr	r7, [r5, #0]
 8009362:	6a21      	ldr	r1, [r4, #32]
 8009364:	602b      	str	r3, [r5, #0]
 8009366:	d032      	beq.n	80093ce <__sflush_r+0x9a>
 8009368:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800936a:	89a3      	ldrh	r3, [r4, #12]
 800936c:	075a      	lsls	r2, r3, #29
 800936e:	d505      	bpl.n	800937c <__sflush_r+0x48>
 8009370:	6863      	ldr	r3, [r4, #4]
 8009372:	1ac0      	subs	r0, r0, r3
 8009374:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009376:	b10b      	cbz	r3, 800937c <__sflush_r+0x48>
 8009378:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800937a:	1ac0      	subs	r0, r0, r3
 800937c:	2300      	movs	r3, #0
 800937e:	4602      	mov	r2, r0
 8009380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009382:	6a21      	ldr	r1, [r4, #32]
 8009384:	4628      	mov	r0, r5
 8009386:	47b0      	blx	r6
 8009388:	1c43      	adds	r3, r0, #1
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	d106      	bne.n	800939c <__sflush_r+0x68>
 800938e:	6829      	ldr	r1, [r5, #0]
 8009390:	291d      	cmp	r1, #29
 8009392:	d82b      	bhi.n	80093ec <__sflush_r+0xb8>
 8009394:	4a29      	ldr	r2, [pc, #164]	; (800943c <__sflush_r+0x108>)
 8009396:	410a      	asrs	r2, r1
 8009398:	07d6      	lsls	r6, r2, #31
 800939a:	d427      	bmi.n	80093ec <__sflush_r+0xb8>
 800939c:	2200      	movs	r2, #0
 800939e:	6062      	str	r2, [r4, #4]
 80093a0:	04d9      	lsls	r1, r3, #19
 80093a2:	6922      	ldr	r2, [r4, #16]
 80093a4:	6022      	str	r2, [r4, #0]
 80093a6:	d504      	bpl.n	80093b2 <__sflush_r+0x7e>
 80093a8:	1c42      	adds	r2, r0, #1
 80093aa:	d101      	bne.n	80093b0 <__sflush_r+0x7c>
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	b903      	cbnz	r3, 80093b2 <__sflush_r+0x7e>
 80093b0:	6560      	str	r0, [r4, #84]	; 0x54
 80093b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093b4:	602f      	str	r7, [r5, #0]
 80093b6:	2900      	cmp	r1, #0
 80093b8:	d0c9      	beq.n	800934e <__sflush_r+0x1a>
 80093ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093be:	4299      	cmp	r1, r3
 80093c0:	d002      	beq.n	80093c8 <__sflush_r+0x94>
 80093c2:	4628      	mov	r0, r5
 80093c4:	f7ff fd26 	bl	8008e14 <_free_r>
 80093c8:	2000      	movs	r0, #0
 80093ca:	6360      	str	r0, [r4, #52]	; 0x34
 80093cc:	e7c0      	b.n	8009350 <__sflush_r+0x1c>
 80093ce:	2301      	movs	r3, #1
 80093d0:	4628      	mov	r0, r5
 80093d2:	47b0      	blx	r6
 80093d4:	1c41      	adds	r1, r0, #1
 80093d6:	d1c8      	bne.n	800936a <__sflush_r+0x36>
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0c5      	beq.n	800936a <__sflush_r+0x36>
 80093de:	2b1d      	cmp	r3, #29
 80093e0:	d001      	beq.n	80093e6 <__sflush_r+0xb2>
 80093e2:	2b16      	cmp	r3, #22
 80093e4:	d101      	bne.n	80093ea <__sflush_r+0xb6>
 80093e6:	602f      	str	r7, [r5, #0]
 80093e8:	e7b1      	b.n	800934e <__sflush_r+0x1a>
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093f0:	81a3      	strh	r3, [r4, #12]
 80093f2:	e7ad      	b.n	8009350 <__sflush_r+0x1c>
 80093f4:	690f      	ldr	r7, [r1, #16]
 80093f6:	2f00      	cmp	r7, #0
 80093f8:	d0a9      	beq.n	800934e <__sflush_r+0x1a>
 80093fa:	0793      	lsls	r3, r2, #30
 80093fc:	680e      	ldr	r6, [r1, #0]
 80093fe:	bf08      	it	eq
 8009400:	694b      	ldreq	r3, [r1, #20]
 8009402:	600f      	str	r7, [r1, #0]
 8009404:	bf18      	it	ne
 8009406:	2300      	movne	r3, #0
 8009408:	eba6 0807 	sub.w	r8, r6, r7
 800940c:	608b      	str	r3, [r1, #8]
 800940e:	f1b8 0f00 	cmp.w	r8, #0
 8009412:	dd9c      	ble.n	800934e <__sflush_r+0x1a>
 8009414:	6a21      	ldr	r1, [r4, #32]
 8009416:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009418:	4643      	mov	r3, r8
 800941a:	463a      	mov	r2, r7
 800941c:	4628      	mov	r0, r5
 800941e:	47b0      	blx	r6
 8009420:	2800      	cmp	r0, #0
 8009422:	dc06      	bgt.n	8009432 <__sflush_r+0xfe>
 8009424:	89a3      	ldrh	r3, [r4, #12]
 8009426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800942a:	81a3      	strh	r3, [r4, #12]
 800942c:	f04f 30ff 	mov.w	r0, #4294967295
 8009430:	e78e      	b.n	8009350 <__sflush_r+0x1c>
 8009432:	4407      	add	r7, r0
 8009434:	eba8 0800 	sub.w	r8, r8, r0
 8009438:	e7e9      	b.n	800940e <__sflush_r+0xda>
 800943a:	bf00      	nop
 800943c:	dfbffffe 	.word	0xdfbffffe

08009440 <_fflush_r>:
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	690b      	ldr	r3, [r1, #16]
 8009444:	4605      	mov	r5, r0
 8009446:	460c      	mov	r4, r1
 8009448:	b913      	cbnz	r3, 8009450 <_fflush_r+0x10>
 800944a:	2500      	movs	r5, #0
 800944c:	4628      	mov	r0, r5
 800944e:	bd38      	pop	{r3, r4, r5, pc}
 8009450:	b118      	cbz	r0, 800945a <_fflush_r+0x1a>
 8009452:	6a03      	ldr	r3, [r0, #32]
 8009454:	b90b      	cbnz	r3, 800945a <_fflush_r+0x1a>
 8009456:	f7ff fbc9 	bl	8008bec <__sinit>
 800945a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d0f3      	beq.n	800944a <_fflush_r+0xa>
 8009462:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009464:	07d0      	lsls	r0, r2, #31
 8009466:	d404      	bmi.n	8009472 <_fflush_r+0x32>
 8009468:	0599      	lsls	r1, r3, #22
 800946a:	d402      	bmi.n	8009472 <_fflush_r+0x32>
 800946c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800946e:	f7ff fcb0 	bl	8008dd2 <__retarget_lock_acquire_recursive>
 8009472:	4628      	mov	r0, r5
 8009474:	4621      	mov	r1, r4
 8009476:	f7ff ff5d 	bl	8009334 <__sflush_r>
 800947a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800947c:	07da      	lsls	r2, r3, #31
 800947e:	4605      	mov	r5, r0
 8009480:	d4e4      	bmi.n	800944c <_fflush_r+0xc>
 8009482:	89a3      	ldrh	r3, [r4, #12]
 8009484:	059b      	lsls	r3, r3, #22
 8009486:	d4e1      	bmi.n	800944c <_fflush_r+0xc>
 8009488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800948a:	f7ff fca3 	bl	8008dd4 <__retarget_lock_release_recursive>
 800948e:	e7dd      	b.n	800944c <_fflush_r+0xc>

08009490 <fiprintf>:
 8009490:	b40e      	push	{r1, r2, r3}
 8009492:	b503      	push	{r0, r1, lr}
 8009494:	4601      	mov	r1, r0
 8009496:	ab03      	add	r3, sp, #12
 8009498:	4805      	ldr	r0, [pc, #20]	; (80094b0 <fiprintf+0x20>)
 800949a:	f853 2b04 	ldr.w	r2, [r3], #4
 800949e:	6800      	ldr	r0, [r0, #0]
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	f000 f847 	bl	8009534 <_vfiprintf_r>
 80094a6:	b002      	add	sp, #8
 80094a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80094ac:	b003      	add	sp, #12
 80094ae:	4770      	bx	lr
 80094b0:	2000011c 	.word	0x2000011c

080094b4 <_sbrk_r>:
 80094b4:	b538      	push	{r3, r4, r5, lr}
 80094b6:	4d06      	ldr	r5, [pc, #24]	; (80094d0 <_sbrk_r+0x1c>)
 80094b8:	2300      	movs	r3, #0
 80094ba:	4604      	mov	r4, r0
 80094bc:	4608      	mov	r0, r1
 80094be:	602b      	str	r3, [r5, #0]
 80094c0:	f7fa f9ba 	bl	8003838 <_sbrk>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	d102      	bne.n	80094ce <_sbrk_r+0x1a>
 80094c8:	682b      	ldr	r3, [r5, #0]
 80094ca:	b103      	cbz	r3, 80094ce <_sbrk_r+0x1a>
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	bd38      	pop	{r3, r4, r5, pc}
 80094d0:	200008a0 	.word	0x200008a0

080094d4 <abort>:
 80094d4:	b508      	push	{r3, lr}
 80094d6:	2006      	movs	r0, #6
 80094d8:	f000 fa04 	bl	80098e4 <raise>
 80094dc:	2001      	movs	r0, #1
 80094de:	f7fa f933 	bl	8003748 <_exit>

080094e2 <__sfputc_r>:
 80094e2:	6893      	ldr	r3, [r2, #8]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	b410      	push	{r4}
 80094ea:	6093      	str	r3, [r2, #8]
 80094ec:	da08      	bge.n	8009500 <__sfputc_r+0x1e>
 80094ee:	6994      	ldr	r4, [r2, #24]
 80094f0:	42a3      	cmp	r3, r4
 80094f2:	db01      	blt.n	80094f8 <__sfputc_r+0x16>
 80094f4:	290a      	cmp	r1, #10
 80094f6:	d103      	bne.n	8009500 <__sfputc_r+0x1e>
 80094f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094fc:	f000 b934 	b.w	8009768 <__swbuf_r>
 8009500:	6813      	ldr	r3, [r2, #0]
 8009502:	1c58      	adds	r0, r3, #1
 8009504:	6010      	str	r0, [r2, #0]
 8009506:	7019      	strb	r1, [r3, #0]
 8009508:	4608      	mov	r0, r1
 800950a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800950e:	4770      	bx	lr

08009510 <__sfputs_r>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	4606      	mov	r6, r0
 8009514:	460f      	mov	r7, r1
 8009516:	4614      	mov	r4, r2
 8009518:	18d5      	adds	r5, r2, r3
 800951a:	42ac      	cmp	r4, r5
 800951c:	d101      	bne.n	8009522 <__sfputs_r+0x12>
 800951e:	2000      	movs	r0, #0
 8009520:	e007      	b.n	8009532 <__sfputs_r+0x22>
 8009522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009526:	463a      	mov	r2, r7
 8009528:	4630      	mov	r0, r6
 800952a:	f7ff ffda 	bl	80094e2 <__sfputc_r>
 800952e:	1c43      	adds	r3, r0, #1
 8009530:	d1f3      	bne.n	800951a <__sfputs_r+0xa>
 8009532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009534 <_vfiprintf_r>:
 8009534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009538:	460d      	mov	r5, r1
 800953a:	b09d      	sub	sp, #116	; 0x74
 800953c:	4614      	mov	r4, r2
 800953e:	4698      	mov	r8, r3
 8009540:	4606      	mov	r6, r0
 8009542:	b118      	cbz	r0, 800954c <_vfiprintf_r+0x18>
 8009544:	6a03      	ldr	r3, [r0, #32]
 8009546:	b90b      	cbnz	r3, 800954c <_vfiprintf_r+0x18>
 8009548:	f7ff fb50 	bl	8008bec <__sinit>
 800954c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800954e:	07d9      	lsls	r1, r3, #31
 8009550:	d405      	bmi.n	800955e <_vfiprintf_r+0x2a>
 8009552:	89ab      	ldrh	r3, [r5, #12]
 8009554:	059a      	lsls	r2, r3, #22
 8009556:	d402      	bmi.n	800955e <_vfiprintf_r+0x2a>
 8009558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800955a:	f7ff fc3a 	bl	8008dd2 <__retarget_lock_acquire_recursive>
 800955e:	89ab      	ldrh	r3, [r5, #12]
 8009560:	071b      	lsls	r3, r3, #28
 8009562:	d501      	bpl.n	8009568 <_vfiprintf_r+0x34>
 8009564:	692b      	ldr	r3, [r5, #16]
 8009566:	b99b      	cbnz	r3, 8009590 <_vfiprintf_r+0x5c>
 8009568:	4629      	mov	r1, r5
 800956a:	4630      	mov	r0, r6
 800956c:	f000 f93a 	bl	80097e4 <__swsetup_r>
 8009570:	b170      	cbz	r0, 8009590 <_vfiprintf_r+0x5c>
 8009572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009574:	07dc      	lsls	r4, r3, #31
 8009576:	d504      	bpl.n	8009582 <_vfiprintf_r+0x4e>
 8009578:	f04f 30ff 	mov.w	r0, #4294967295
 800957c:	b01d      	add	sp, #116	; 0x74
 800957e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009582:	89ab      	ldrh	r3, [r5, #12]
 8009584:	0598      	lsls	r0, r3, #22
 8009586:	d4f7      	bmi.n	8009578 <_vfiprintf_r+0x44>
 8009588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800958a:	f7ff fc23 	bl	8008dd4 <__retarget_lock_release_recursive>
 800958e:	e7f3      	b.n	8009578 <_vfiprintf_r+0x44>
 8009590:	2300      	movs	r3, #0
 8009592:	9309      	str	r3, [sp, #36]	; 0x24
 8009594:	2320      	movs	r3, #32
 8009596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800959a:	f8cd 800c 	str.w	r8, [sp, #12]
 800959e:	2330      	movs	r3, #48	; 0x30
 80095a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009754 <_vfiprintf_r+0x220>
 80095a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095a8:	f04f 0901 	mov.w	r9, #1
 80095ac:	4623      	mov	r3, r4
 80095ae:	469a      	mov	sl, r3
 80095b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095b4:	b10a      	cbz	r2, 80095ba <_vfiprintf_r+0x86>
 80095b6:	2a25      	cmp	r2, #37	; 0x25
 80095b8:	d1f9      	bne.n	80095ae <_vfiprintf_r+0x7a>
 80095ba:	ebba 0b04 	subs.w	fp, sl, r4
 80095be:	d00b      	beq.n	80095d8 <_vfiprintf_r+0xa4>
 80095c0:	465b      	mov	r3, fp
 80095c2:	4622      	mov	r2, r4
 80095c4:	4629      	mov	r1, r5
 80095c6:	4630      	mov	r0, r6
 80095c8:	f7ff ffa2 	bl	8009510 <__sfputs_r>
 80095cc:	3001      	adds	r0, #1
 80095ce:	f000 80a9 	beq.w	8009724 <_vfiprintf_r+0x1f0>
 80095d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095d4:	445a      	add	r2, fp
 80095d6:	9209      	str	r2, [sp, #36]	; 0x24
 80095d8:	f89a 3000 	ldrb.w	r3, [sl]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 80a1 	beq.w	8009724 <_vfiprintf_r+0x1f0>
 80095e2:	2300      	movs	r3, #0
 80095e4:	f04f 32ff 	mov.w	r2, #4294967295
 80095e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ec:	f10a 0a01 	add.w	sl, sl, #1
 80095f0:	9304      	str	r3, [sp, #16]
 80095f2:	9307      	str	r3, [sp, #28]
 80095f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095f8:	931a      	str	r3, [sp, #104]	; 0x68
 80095fa:	4654      	mov	r4, sl
 80095fc:	2205      	movs	r2, #5
 80095fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009602:	4854      	ldr	r0, [pc, #336]	; (8009754 <_vfiprintf_r+0x220>)
 8009604:	f7f6 fde4 	bl	80001d0 <memchr>
 8009608:	9a04      	ldr	r2, [sp, #16]
 800960a:	b9d8      	cbnz	r0, 8009644 <_vfiprintf_r+0x110>
 800960c:	06d1      	lsls	r1, r2, #27
 800960e:	bf44      	itt	mi
 8009610:	2320      	movmi	r3, #32
 8009612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009616:	0713      	lsls	r3, r2, #28
 8009618:	bf44      	itt	mi
 800961a:	232b      	movmi	r3, #43	; 0x2b
 800961c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009620:	f89a 3000 	ldrb.w	r3, [sl]
 8009624:	2b2a      	cmp	r3, #42	; 0x2a
 8009626:	d015      	beq.n	8009654 <_vfiprintf_r+0x120>
 8009628:	9a07      	ldr	r2, [sp, #28]
 800962a:	4654      	mov	r4, sl
 800962c:	2000      	movs	r0, #0
 800962e:	f04f 0c0a 	mov.w	ip, #10
 8009632:	4621      	mov	r1, r4
 8009634:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009638:	3b30      	subs	r3, #48	; 0x30
 800963a:	2b09      	cmp	r3, #9
 800963c:	d94d      	bls.n	80096da <_vfiprintf_r+0x1a6>
 800963e:	b1b0      	cbz	r0, 800966e <_vfiprintf_r+0x13a>
 8009640:	9207      	str	r2, [sp, #28]
 8009642:	e014      	b.n	800966e <_vfiprintf_r+0x13a>
 8009644:	eba0 0308 	sub.w	r3, r0, r8
 8009648:	fa09 f303 	lsl.w	r3, r9, r3
 800964c:	4313      	orrs	r3, r2
 800964e:	9304      	str	r3, [sp, #16]
 8009650:	46a2      	mov	sl, r4
 8009652:	e7d2      	b.n	80095fa <_vfiprintf_r+0xc6>
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	1d19      	adds	r1, r3, #4
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	9103      	str	r1, [sp, #12]
 800965c:	2b00      	cmp	r3, #0
 800965e:	bfbb      	ittet	lt
 8009660:	425b      	neglt	r3, r3
 8009662:	f042 0202 	orrlt.w	r2, r2, #2
 8009666:	9307      	strge	r3, [sp, #28]
 8009668:	9307      	strlt	r3, [sp, #28]
 800966a:	bfb8      	it	lt
 800966c:	9204      	strlt	r2, [sp, #16]
 800966e:	7823      	ldrb	r3, [r4, #0]
 8009670:	2b2e      	cmp	r3, #46	; 0x2e
 8009672:	d10c      	bne.n	800968e <_vfiprintf_r+0x15a>
 8009674:	7863      	ldrb	r3, [r4, #1]
 8009676:	2b2a      	cmp	r3, #42	; 0x2a
 8009678:	d134      	bne.n	80096e4 <_vfiprintf_r+0x1b0>
 800967a:	9b03      	ldr	r3, [sp, #12]
 800967c:	1d1a      	adds	r2, r3, #4
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	9203      	str	r2, [sp, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	bfb8      	it	lt
 8009686:	f04f 33ff 	movlt.w	r3, #4294967295
 800968a:	3402      	adds	r4, #2
 800968c:	9305      	str	r3, [sp, #20]
 800968e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009764 <_vfiprintf_r+0x230>
 8009692:	7821      	ldrb	r1, [r4, #0]
 8009694:	2203      	movs	r2, #3
 8009696:	4650      	mov	r0, sl
 8009698:	f7f6 fd9a 	bl	80001d0 <memchr>
 800969c:	b138      	cbz	r0, 80096ae <_vfiprintf_r+0x17a>
 800969e:	9b04      	ldr	r3, [sp, #16]
 80096a0:	eba0 000a 	sub.w	r0, r0, sl
 80096a4:	2240      	movs	r2, #64	; 0x40
 80096a6:	4082      	lsls	r2, r0
 80096a8:	4313      	orrs	r3, r2
 80096aa:	3401      	adds	r4, #1
 80096ac:	9304      	str	r3, [sp, #16]
 80096ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b2:	4829      	ldr	r0, [pc, #164]	; (8009758 <_vfiprintf_r+0x224>)
 80096b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096b8:	2206      	movs	r2, #6
 80096ba:	f7f6 fd89 	bl	80001d0 <memchr>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d03f      	beq.n	8009742 <_vfiprintf_r+0x20e>
 80096c2:	4b26      	ldr	r3, [pc, #152]	; (800975c <_vfiprintf_r+0x228>)
 80096c4:	bb1b      	cbnz	r3, 800970e <_vfiprintf_r+0x1da>
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	3307      	adds	r3, #7
 80096ca:	f023 0307 	bic.w	r3, r3, #7
 80096ce:	3308      	adds	r3, #8
 80096d0:	9303      	str	r3, [sp, #12]
 80096d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d4:	443b      	add	r3, r7
 80096d6:	9309      	str	r3, [sp, #36]	; 0x24
 80096d8:	e768      	b.n	80095ac <_vfiprintf_r+0x78>
 80096da:	fb0c 3202 	mla	r2, ip, r2, r3
 80096de:	460c      	mov	r4, r1
 80096e0:	2001      	movs	r0, #1
 80096e2:	e7a6      	b.n	8009632 <_vfiprintf_r+0xfe>
 80096e4:	2300      	movs	r3, #0
 80096e6:	3401      	adds	r4, #1
 80096e8:	9305      	str	r3, [sp, #20]
 80096ea:	4619      	mov	r1, r3
 80096ec:	f04f 0c0a 	mov.w	ip, #10
 80096f0:	4620      	mov	r0, r4
 80096f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096f6:	3a30      	subs	r2, #48	; 0x30
 80096f8:	2a09      	cmp	r2, #9
 80096fa:	d903      	bls.n	8009704 <_vfiprintf_r+0x1d0>
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d0c6      	beq.n	800968e <_vfiprintf_r+0x15a>
 8009700:	9105      	str	r1, [sp, #20]
 8009702:	e7c4      	b.n	800968e <_vfiprintf_r+0x15a>
 8009704:	fb0c 2101 	mla	r1, ip, r1, r2
 8009708:	4604      	mov	r4, r0
 800970a:	2301      	movs	r3, #1
 800970c:	e7f0      	b.n	80096f0 <_vfiprintf_r+0x1bc>
 800970e:	ab03      	add	r3, sp, #12
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	462a      	mov	r2, r5
 8009714:	4b12      	ldr	r3, [pc, #72]	; (8009760 <_vfiprintf_r+0x22c>)
 8009716:	a904      	add	r1, sp, #16
 8009718:	4630      	mov	r0, r6
 800971a:	f3af 8000 	nop.w
 800971e:	4607      	mov	r7, r0
 8009720:	1c78      	adds	r0, r7, #1
 8009722:	d1d6      	bne.n	80096d2 <_vfiprintf_r+0x19e>
 8009724:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009726:	07d9      	lsls	r1, r3, #31
 8009728:	d405      	bmi.n	8009736 <_vfiprintf_r+0x202>
 800972a:	89ab      	ldrh	r3, [r5, #12]
 800972c:	059a      	lsls	r2, r3, #22
 800972e:	d402      	bmi.n	8009736 <_vfiprintf_r+0x202>
 8009730:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009732:	f7ff fb4f 	bl	8008dd4 <__retarget_lock_release_recursive>
 8009736:	89ab      	ldrh	r3, [r5, #12]
 8009738:	065b      	lsls	r3, r3, #25
 800973a:	f53f af1d 	bmi.w	8009578 <_vfiprintf_r+0x44>
 800973e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009740:	e71c      	b.n	800957c <_vfiprintf_r+0x48>
 8009742:	ab03      	add	r3, sp, #12
 8009744:	9300      	str	r3, [sp, #0]
 8009746:	462a      	mov	r2, r5
 8009748:	4b05      	ldr	r3, [pc, #20]	; (8009760 <_vfiprintf_r+0x22c>)
 800974a:	a904      	add	r1, sp, #16
 800974c:	4630      	mov	r0, r6
 800974e:	f7ff fccf 	bl	80090f0 <_printf_i>
 8009752:	e7e4      	b.n	800971e <_vfiprintf_r+0x1ea>
 8009754:	0800caf1 	.word	0x0800caf1
 8009758:	0800cafb 	.word	0x0800cafb
 800975c:	00000000 	.word	0x00000000
 8009760:	08009511 	.word	0x08009511
 8009764:	0800caf7 	.word	0x0800caf7

08009768 <__swbuf_r>:
 8009768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976a:	460e      	mov	r6, r1
 800976c:	4614      	mov	r4, r2
 800976e:	4605      	mov	r5, r0
 8009770:	b118      	cbz	r0, 800977a <__swbuf_r+0x12>
 8009772:	6a03      	ldr	r3, [r0, #32]
 8009774:	b90b      	cbnz	r3, 800977a <__swbuf_r+0x12>
 8009776:	f7ff fa39 	bl	8008bec <__sinit>
 800977a:	69a3      	ldr	r3, [r4, #24]
 800977c:	60a3      	str	r3, [r4, #8]
 800977e:	89a3      	ldrh	r3, [r4, #12]
 8009780:	071a      	lsls	r2, r3, #28
 8009782:	d525      	bpl.n	80097d0 <__swbuf_r+0x68>
 8009784:	6923      	ldr	r3, [r4, #16]
 8009786:	b31b      	cbz	r3, 80097d0 <__swbuf_r+0x68>
 8009788:	6823      	ldr	r3, [r4, #0]
 800978a:	6922      	ldr	r2, [r4, #16]
 800978c:	1a98      	subs	r0, r3, r2
 800978e:	6963      	ldr	r3, [r4, #20]
 8009790:	b2f6      	uxtb	r6, r6
 8009792:	4283      	cmp	r3, r0
 8009794:	4637      	mov	r7, r6
 8009796:	dc04      	bgt.n	80097a2 <__swbuf_r+0x3a>
 8009798:	4621      	mov	r1, r4
 800979a:	4628      	mov	r0, r5
 800979c:	f7ff fe50 	bl	8009440 <_fflush_r>
 80097a0:	b9e0      	cbnz	r0, 80097dc <__swbuf_r+0x74>
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	60a3      	str	r3, [r4, #8]
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	6022      	str	r2, [r4, #0]
 80097ae:	701e      	strb	r6, [r3, #0]
 80097b0:	6962      	ldr	r2, [r4, #20]
 80097b2:	1c43      	adds	r3, r0, #1
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d004      	beq.n	80097c2 <__swbuf_r+0x5a>
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	07db      	lsls	r3, r3, #31
 80097bc:	d506      	bpl.n	80097cc <__swbuf_r+0x64>
 80097be:	2e0a      	cmp	r6, #10
 80097c0:	d104      	bne.n	80097cc <__swbuf_r+0x64>
 80097c2:	4621      	mov	r1, r4
 80097c4:	4628      	mov	r0, r5
 80097c6:	f7ff fe3b 	bl	8009440 <_fflush_r>
 80097ca:	b938      	cbnz	r0, 80097dc <__swbuf_r+0x74>
 80097cc:	4638      	mov	r0, r7
 80097ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d0:	4621      	mov	r1, r4
 80097d2:	4628      	mov	r0, r5
 80097d4:	f000 f806 	bl	80097e4 <__swsetup_r>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d0d5      	beq.n	8009788 <__swbuf_r+0x20>
 80097dc:	f04f 37ff 	mov.w	r7, #4294967295
 80097e0:	e7f4      	b.n	80097cc <__swbuf_r+0x64>
	...

080097e4 <__swsetup_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	4b2a      	ldr	r3, [pc, #168]	; (8009890 <__swsetup_r+0xac>)
 80097e8:	4605      	mov	r5, r0
 80097ea:	6818      	ldr	r0, [r3, #0]
 80097ec:	460c      	mov	r4, r1
 80097ee:	b118      	cbz	r0, 80097f8 <__swsetup_r+0x14>
 80097f0:	6a03      	ldr	r3, [r0, #32]
 80097f2:	b90b      	cbnz	r3, 80097f8 <__swsetup_r+0x14>
 80097f4:	f7ff f9fa 	bl	8008bec <__sinit>
 80097f8:	89a3      	ldrh	r3, [r4, #12]
 80097fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097fe:	0718      	lsls	r0, r3, #28
 8009800:	d422      	bmi.n	8009848 <__swsetup_r+0x64>
 8009802:	06d9      	lsls	r1, r3, #27
 8009804:	d407      	bmi.n	8009816 <__swsetup_r+0x32>
 8009806:	2309      	movs	r3, #9
 8009808:	602b      	str	r3, [r5, #0]
 800980a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800980e:	81a3      	strh	r3, [r4, #12]
 8009810:	f04f 30ff 	mov.w	r0, #4294967295
 8009814:	e034      	b.n	8009880 <__swsetup_r+0x9c>
 8009816:	0758      	lsls	r0, r3, #29
 8009818:	d512      	bpl.n	8009840 <__swsetup_r+0x5c>
 800981a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800981c:	b141      	cbz	r1, 8009830 <__swsetup_r+0x4c>
 800981e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009822:	4299      	cmp	r1, r3
 8009824:	d002      	beq.n	800982c <__swsetup_r+0x48>
 8009826:	4628      	mov	r0, r5
 8009828:	f7ff faf4 	bl	8008e14 <_free_r>
 800982c:	2300      	movs	r3, #0
 800982e:	6363      	str	r3, [r4, #52]	; 0x34
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009836:	81a3      	strh	r3, [r4, #12]
 8009838:	2300      	movs	r3, #0
 800983a:	6063      	str	r3, [r4, #4]
 800983c:	6923      	ldr	r3, [r4, #16]
 800983e:	6023      	str	r3, [r4, #0]
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	f043 0308 	orr.w	r3, r3, #8
 8009846:	81a3      	strh	r3, [r4, #12]
 8009848:	6923      	ldr	r3, [r4, #16]
 800984a:	b94b      	cbnz	r3, 8009860 <__swsetup_r+0x7c>
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009856:	d003      	beq.n	8009860 <__swsetup_r+0x7c>
 8009858:	4621      	mov	r1, r4
 800985a:	4628      	mov	r0, r5
 800985c:	f000 f884 	bl	8009968 <__smakebuf_r>
 8009860:	89a0      	ldrh	r0, [r4, #12]
 8009862:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009866:	f010 0301 	ands.w	r3, r0, #1
 800986a:	d00a      	beq.n	8009882 <__swsetup_r+0x9e>
 800986c:	2300      	movs	r3, #0
 800986e:	60a3      	str	r3, [r4, #8]
 8009870:	6963      	ldr	r3, [r4, #20]
 8009872:	425b      	negs	r3, r3
 8009874:	61a3      	str	r3, [r4, #24]
 8009876:	6923      	ldr	r3, [r4, #16]
 8009878:	b943      	cbnz	r3, 800988c <__swsetup_r+0xa8>
 800987a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800987e:	d1c4      	bne.n	800980a <__swsetup_r+0x26>
 8009880:	bd38      	pop	{r3, r4, r5, pc}
 8009882:	0781      	lsls	r1, r0, #30
 8009884:	bf58      	it	pl
 8009886:	6963      	ldrpl	r3, [r4, #20]
 8009888:	60a3      	str	r3, [r4, #8]
 800988a:	e7f4      	b.n	8009876 <__swsetup_r+0x92>
 800988c:	2000      	movs	r0, #0
 800988e:	e7f7      	b.n	8009880 <__swsetup_r+0x9c>
 8009890:	2000011c 	.word	0x2000011c

08009894 <_raise_r>:
 8009894:	291f      	cmp	r1, #31
 8009896:	b538      	push	{r3, r4, r5, lr}
 8009898:	4604      	mov	r4, r0
 800989a:	460d      	mov	r5, r1
 800989c:	d904      	bls.n	80098a8 <_raise_r+0x14>
 800989e:	2316      	movs	r3, #22
 80098a0:	6003      	str	r3, [r0, #0]
 80098a2:	f04f 30ff 	mov.w	r0, #4294967295
 80098a6:	bd38      	pop	{r3, r4, r5, pc}
 80098a8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80098aa:	b112      	cbz	r2, 80098b2 <_raise_r+0x1e>
 80098ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098b0:	b94b      	cbnz	r3, 80098c6 <_raise_r+0x32>
 80098b2:	4620      	mov	r0, r4
 80098b4:	f000 f830 	bl	8009918 <_getpid_r>
 80098b8:	462a      	mov	r2, r5
 80098ba:	4601      	mov	r1, r0
 80098bc:	4620      	mov	r0, r4
 80098be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098c2:	f000 b817 	b.w	80098f4 <_kill_r>
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d00a      	beq.n	80098e0 <_raise_r+0x4c>
 80098ca:	1c59      	adds	r1, r3, #1
 80098cc:	d103      	bne.n	80098d6 <_raise_r+0x42>
 80098ce:	2316      	movs	r3, #22
 80098d0:	6003      	str	r3, [r0, #0]
 80098d2:	2001      	movs	r0, #1
 80098d4:	e7e7      	b.n	80098a6 <_raise_r+0x12>
 80098d6:	2400      	movs	r4, #0
 80098d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098dc:	4628      	mov	r0, r5
 80098de:	4798      	blx	r3
 80098e0:	2000      	movs	r0, #0
 80098e2:	e7e0      	b.n	80098a6 <_raise_r+0x12>

080098e4 <raise>:
 80098e4:	4b02      	ldr	r3, [pc, #8]	; (80098f0 <raise+0xc>)
 80098e6:	4601      	mov	r1, r0
 80098e8:	6818      	ldr	r0, [r3, #0]
 80098ea:	f7ff bfd3 	b.w	8009894 <_raise_r>
 80098ee:	bf00      	nop
 80098f0:	2000011c 	.word	0x2000011c

080098f4 <_kill_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	4d07      	ldr	r5, [pc, #28]	; (8009914 <_kill_r+0x20>)
 80098f8:	2300      	movs	r3, #0
 80098fa:	4604      	mov	r4, r0
 80098fc:	4608      	mov	r0, r1
 80098fe:	4611      	mov	r1, r2
 8009900:	602b      	str	r3, [r5, #0]
 8009902:	f7f9 ff11 	bl	8003728 <_kill>
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	d102      	bne.n	8009910 <_kill_r+0x1c>
 800990a:	682b      	ldr	r3, [r5, #0]
 800990c:	b103      	cbz	r3, 8009910 <_kill_r+0x1c>
 800990e:	6023      	str	r3, [r4, #0]
 8009910:	bd38      	pop	{r3, r4, r5, pc}
 8009912:	bf00      	nop
 8009914:	200008a0 	.word	0x200008a0

08009918 <_getpid_r>:
 8009918:	f7f9 befe 	b.w	8003718 <_getpid>

0800991c <__swhatbuf_r>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	460c      	mov	r4, r1
 8009920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009924:	2900      	cmp	r1, #0
 8009926:	b096      	sub	sp, #88	; 0x58
 8009928:	4615      	mov	r5, r2
 800992a:	461e      	mov	r6, r3
 800992c:	da0d      	bge.n	800994a <__swhatbuf_r+0x2e>
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009934:	f04f 0100 	mov.w	r1, #0
 8009938:	bf0c      	ite	eq
 800993a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800993e:	2340      	movne	r3, #64	; 0x40
 8009940:	2000      	movs	r0, #0
 8009942:	6031      	str	r1, [r6, #0]
 8009944:	602b      	str	r3, [r5, #0]
 8009946:	b016      	add	sp, #88	; 0x58
 8009948:	bd70      	pop	{r4, r5, r6, pc}
 800994a:	466a      	mov	r2, sp
 800994c:	f000 f848 	bl	80099e0 <_fstat_r>
 8009950:	2800      	cmp	r0, #0
 8009952:	dbec      	blt.n	800992e <__swhatbuf_r+0x12>
 8009954:	9901      	ldr	r1, [sp, #4]
 8009956:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800995a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800995e:	4259      	negs	r1, r3
 8009960:	4159      	adcs	r1, r3
 8009962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009966:	e7eb      	b.n	8009940 <__swhatbuf_r+0x24>

08009968 <__smakebuf_r>:
 8009968:	898b      	ldrh	r3, [r1, #12]
 800996a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800996c:	079d      	lsls	r5, r3, #30
 800996e:	4606      	mov	r6, r0
 8009970:	460c      	mov	r4, r1
 8009972:	d507      	bpl.n	8009984 <__smakebuf_r+0x1c>
 8009974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	6123      	str	r3, [r4, #16]
 800997c:	2301      	movs	r3, #1
 800997e:	6163      	str	r3, [r4, #20]
 8009980:	b002      	add	sp, #8
 8009982:	bd70      	pop	{r4, r5, r6, pc}
 8009984:	ab01      	add	r3, sp, #4
 8009986:	466a      	mov	r2, sp
 8009988:	f7ff ffc8 	bl	800991c <__swhatbuf_r>
 800998c:	9900      	ldr	r1, [sp, #0]
 800998e:	4605      	mov	r5, r0
 8009990:	4630      	mov	r0, r6
 8009992:	f7ff fab3 	bl	8008efc <_malloc_r>
 8009996:	b948      	cbnz	r0, 80099ac <__smakebuf_r+0x44>
 8009998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999c:	059a      	lsls	r2, r3, #22
 800999e:	d4ef      	bmi.n	8009980 <__smakebuf_r+0x18>
 80099a0:	f023 0303 	bic.w	r3, r3, #3
 80099a4:	f043 0302 	orr.w	r3, r3, #2
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	e7e3      	b.n	8009974 <__smakebuf_r+0xc>
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	6020      	str	r0, [r4, #0]
 80099b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099b4:	81a3      	strh	r3, [r4, #12]
 80099b6:	9b00      	ldr	r3, [sp, #0]
 80099b8:	6163      	str	r3, [r4, #20]
 80099ba:	9b01      	ldr	r3, [sp, #4]
 80099bc:	6120      	str	r0, [r4, #16]
 80099be:	b15b      	cbz	r3, 80099d8 <__smakebuf_r+0x70>
 80099c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099c4:	4630      	mov	r0, r6
 80099c6:	f000 f81d 	bl	8009a04 <_isatty_r>
 80099ca:	b128      	cbz	r0, 80099d8 <__smakebuf_r+0x70>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	f023 0303 	bic.w	r3, r3, #3
 80099d2:	f043 0301 	orr.w	r3, r3, #1
 80099d6:	81a3      	strh	r3, [r4, #12]
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	431d      	orrs	r5, r3
 80099dc:	81a5      	strh	r5, [r4, #12]
 80099de:	e7cf      	b.n	8009980 <__smakebuf_r+0x18>

080099e0 <_fstat_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4d07      	ldr	r5, [pc, #28]	; (8009a00 <_fstat_r+0x20>)
 80099e4:	2300      	movs	r3, #0
 80099e6:	4604      	mov	r4, r0
 80099e8:	4608      	mov	r0, r1
 80099ea:	4611      	mov	r1, r2
 80099ec:	602b      	str	r3, [r5, #0]
 80099ee:	f7f9 fefa 	bl	80037e6 <_fstat>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	d102      	bne.n	80099fc <_fstat_r+0x1c>
 80099f6:	682b      	ldr	r3, [r5, #0]
 80099f8:	b103      	cbz	r3, 80099fc <_fstat_r+0x1c>
 80099fa:	6023      	str	r3, [r4, #0]
 80099fc:	bd38      	pop	{r3, r4, r5, pc}
 80099fe:	bf00      	nop
 8009a00:	200008a0 	.word	0x200008a0

08009a04 <_isatty_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4d06      	ldr	r5, [pc, #24]	; (8009a20 <_isatty_r+0x1c>)
 8009a08:	2300      	movs	r3, #0
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	4608      	mov	r0, r1
 8009a0e:	602b      	str	r3, [r5, #0]
 8009a10:	f7f9 fef9 	bl	8003806 <_isatty>
 8009a14:	1c43      	adds	r3, r0, #1
 8009a16:	d102      	bne.n	8009a1e <_isatty_r+0x1a>
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	b103      	cbz	r3, 8009a1e <_isatty_r+0x1a>
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	200008a0 	.word	0x200008a0

08009a24 <_init>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	bf00      	nop
 8009a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2a:	bc08      	pop	{r3}
 8009a2c:	469e      	mov	lr, r3
 8009a2e:	4770      	bx	lr

08009a30 <_fini>:
 8009a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a32:	bf00      	nop
 8009a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a36:	bc08      	pop	{r3}
 8009a38:	469e      	mov	lr, r3
 8009a3a:	4770      	bx	lr
