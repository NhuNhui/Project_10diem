
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a52c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000071c4  0800a6bc  0800a6bc  0001a6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011880  08011880  0003012c  2**0
                  CONTENTS
  4 .ARM          00000008  08011880  08011880  00021880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011888  08011888  0003012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011888  08011888  00021888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801188c  0801188c  0002188c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08011890  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003012c  2**0
                  CONTENTS
 10 .bss          000006a8  2000012c  2000012c  0003012c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007d4  200007d4  0003012c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003012c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002374f  00000000  00000000  0003015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004973  00000000  00000000  000538ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001848  00000000  00000000  00058220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001668  00000000  00000000  00059a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000071ff  00000000  00000000  0005b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000210f8  00000000  00000000  000622cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1612  00000000  00000000  000833c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001649d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e84  00000000  00000000  00164a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000012c 	.word	0x2000012c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6a4 	.word	0x0800a6a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000130 	.word	0x20000130
 80001cc:	0800a6a4 	.word	0x0800a6a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057e:	463b      	mov	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800058a:	4b3d      	ldr	r3, [pc, #244]	; (8000680 <MX_ADC1_Init+0x108>)
 800058c:	4a3d      	ldr	r2, [pc, #244]	; (8000684 <MX_ADC1_Init+0x10c>)
 800058e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000590:	4b3b      	ldr	r3, [pc, #236]	; (8000680 <MX_ADC1_Init+0x108>)
 8000592:	2200      	movs	r2, #0
 8000594:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000596:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <MX_ADC1_Init+0x108>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800059c:	4b38      	ldr	r3, [pc, #224]	; (8000680 <MX_ADC1_Init+0x108>)
 800059e:	2201      	movs	r2, #1
 80005a0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a2:	4b37      	ldr	r3, [pc, #220]	; (8000680 <MX_ADC1_Init+0x108>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a8:	4b35      	ldr	r3, [pc, #212]	; (8000680 <MX_ADC1_Init+0x108>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b0:	4b33      	ldr	r3, [pc, #204]	; (8000680 <MX_ADC1_Init+0x108>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005b6:	4b32      	ldr	r3, [pc, #200]	; (8000680 <MX_ADC1_Init+0x108>)
 80005b8:	4a33      	ldr	r2, [pc, #204]	; (8000688 <MX_ADC1_Init+0x110>)
 80005ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005bc:	4b30      	ldr	r3, [pc, #192]	; (8000680 <MX_ADC1_Init+0x108>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005c2:	4b2f      	ldr	r3, [pc, #188]	; (8000680 <MX_ADC1_Init+0x108>)
 80005c4:	2205      	movs	r2, #5
 80005c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005c8:	4b2d      	ldr	r3, [pc, #180]	; (8000680 <MX_ADC1_Init+0x108>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d0:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <MX_ADC1_Init+0x108>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d6:	482a      	ldr	r0, [pc, #168]	; (8000680 <MX_ADC1_Init+0x108>)
 80005d8:	f003 ff6c 	bl	80044b4 <HAL_ADC_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005e2:	f001 fc1b 	bl	8001e1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005e6:	2308      	movs	r3, #8
 80005e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005ea:	2301      	movs	r3, #1
 80005ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	4619      	mov	r1, r3
 80005f6:	4822      	ldr	r0, [pc, #136]	; (8000680 <MX_ADC1_Init+0x108>)
 80005f8:	f004 f8ce 	bl	8004798 <HAL_ADC_ConfigChannel>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000602:	f001 fc0b 	bl	8001e1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000606:	2309      	movs	r3, #9
 8000608:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800060a:	2302      	movs	r3, #2
 800060c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	463b      	mov	r3, r7
 8000610:	4619      	mov	r1, r3
 8000612:	481b      	ldr	r0, [pc, #108]	; (8000680 <MX_ADC1_Init+0x108>)
 8000614:	f004 f8c0 	bl	8004798 <HAL_ADC_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800061e:	f001 fbfd 	bl	8001e1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000622:	230a      	movs	r3, #10
 8000624:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000626:	2303      	movs	r3, #3
 8000628:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062a:	463b      	mov	r3, r7
 800062c:	4619      	mov	r1, r3
 800062e:	4814      	ldr	r0, [pc, #80]	; (8000680 <MX_ADC1_Init+0x108>)
 8000630:	f004 f8b2 	bl	8004798 <HAL_ADC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800063a:	f001 fbef 	bl	8001e1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800063e:	230b      	movs	r3, #11
 8000640:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000642:	2304      	movs	r3, #4
 8000644:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000646:	463b      	mov	r3, r7
 8000648:	4619      	mov	r1, r3
 800064a:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_ADC1_Init+0x108>)
 800064c:	f004 f8a4 	bl	8004798 <HAL_ADC_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000656:	f001 fbe1 	bl	8001e1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800065a:	230c      	movs	r3, #12
 800065c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800065e:	2305      	movs	r3, #5
 8000660:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	4619      	mov	r1, r3
 8000666:	4806      	ldr	r0, [pc, #24]	; (8000680 <MX_ADC1_Init+0x108>)
 8000668:	f004 f896 	bl	8004798 <HAL_ADC_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000672:	f001 fbd3 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000017c 	.word	0x2000017c
 8000684:	40012000 	.word	0x40012000
 8000688:	0f000001 	.word	0x0f000001

0800068c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a3c      	ldr	r2, [pc, #240]	; (800079c <HAL_ADC_MspInit+0x110>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d171      	bne.n	8000792 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b3b      	ldr	r3, [pc, #236]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a3a      	ldr	r2, [pc, #232]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b38      	ldr	r3, [pc, #224]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	4b34      	ldr	r3, [pc, #208]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a33      	ldr	r2, [pc, #204]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	4b2d      	ldr	r3, [pc, #180]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a2c      	ldr	r2, [pc, #176]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <HAL_ADC_MspInit+0x114>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000702:	2307      	movs	r3, #7
 8000704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	2303      	movs	r3, #3
 8000708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	4823      	ldr	r0, [pc, #140]	; (80007a4 <HAL_ADC_MspInit+0x118>)
 8000716:	f004 fff3 	bl	8005700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800071a:	2303      	movs	r3, #3
 800071c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071e:	2303      	movs	r3, #3
 8000720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	481e      	ldr	r0, [pc, #120]	; (80007a8 <HAL_ADC_MspInit+0x11c>)
 800072e:	f004 ffe7 	bl	8005700 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000734:	4a1e      	ldr	r2, [pc, #120]	; (80007b0 <HAL_ADC_MspInit+0x124>)
 8000736:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800074c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000750:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000758:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800075c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000760:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000768:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000776:	480d      	ldr	r0, [pc, #52]	; (80007ac <HAL_ADC_MspInit+0x120>)
 8000778:	f004 fbc0 	bl	8004efc <HAL_DMA_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000782:	f001 fb4b 	bl	8001e1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a08      	ldr	r2, [pc, #32]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800078a:	639a      	str	r2, [r3, #56]	; 0x38
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_ADC_MspInit+0x120>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40012000 	.word	0x40012000
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020800 	.word	0x40020800
 80007a8:	40020400 	.word	0x40020400
 80007ac:	200001c4 	.word	0x200001c4
 80007b0:	40026410 	.word	0x40026410

080007b4 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2108      	movs	r1, #8
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <button_init+0x14>)
 80007be:	f005 f93b 	bl	8005a38 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40020c00 	.word	0x40020c00

080007cc <button_Scan>:

void button_Scan(){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2108      	movs	r1, #8
 80007d6:	482f      	ldr	r0, [pc, #188]	; (8000894 <button_Scan+0xc8>)
 80007d8:	f005 f92e 	bl	8005a38 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007dc:	2201      	movs	r2, #1
 80007de:	2108      	movs	r1, #8
 80007e0:	482c      	ldr	r0, [pc, #176]	; (8000894 <button_Scan+0xc8>)
 80007e2:	f005 f929 	bl	8005a38 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80007e6:	230a      	movs	r3, #10
 80007e8:	2202      	movs	r2, #2
 80007ea:	492b      	ldr	r1, [pc, #172]	; (8000898 <button_Scan+0xcc>)
 80007ec:	482b      	ldr	r0, [pc, #172]	; (800089c <button_Scan+0xd0>)
 80007ee:	f006 f8ba 	bl	8006966 <HAL_SPI_Receive>
	  int button_index = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80007f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007fa:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	e03f      	b.n	8000882 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db06      	blt.n	8000816 <button_Scan+0x4a>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b03      	cmp	r3, #3
 800080c:	dc03      	bgt.n	8000816 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3304      	adds	r3, #4
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	e018      	b.n	8000848 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2b03      	cmp	r3, #3
 800081a:	dd07      	ble.n	800082c <button_Scan+0x60>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b07      	cmp	r3, #7
 8000820:	dc04      	bgt.n	800082c <button_Scan+0x60>
			  button_index = 7 - i;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f1c3 0307 	rsb	r3, r3, #7
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	e00d      	b.n	8000848 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b07      	cmp	r3, #7
 8000830:	dd06      	ble.n	8000840 <button_Scan+0x74>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0b      	cmp	r3, #11
 8000836:	dc03      	bgt.n	8000840 <button_Scan+0x74>
			  button_index = i + 4;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3304      	adds	r3, #4
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	e003      	b.n	8000848 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f1c3 0317 	rsb	r3, r3, #23
 8000846:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <button_Scan+0xcc>)
 800084a:	881a      	ldrh	r2, [r3, #0]
 800084c:	897b      	ldrh	r3, [r7, #10]
 800084e:	4013      	ands	r3, r2
 8000850:	b29b      	uxth	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d005      	beq.n	8000862 <button_Scan+0x96>
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <button_Scan+0xd4>)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2100      	movs	r1, #0
 800085c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000860:	e009      	b.n	8000876 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000862:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <button_Scan+0xd4>)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800086a:	3301      	adds	r3, #1
 800086c:	b299      	uxth	r1, r3
 800086e:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <button_Scan+0xd4>)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000876:	897b      	ldrh	r3, [r7, #10]
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3301      	adds	r3, #1
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	ddbc      	ble.n	8000802 <button_Scan+0x36>
	  }
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40020c00 	.word	0x40020c00
 8000898:	20000148 	.word	0x20000148
 800089c:	20000608 	.word	0x20000608
 80008a0:	20000224 	.word	0x20000224

080008a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_DMA_Init+0x3c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2038      	movs	r0, #56	; 0x38
 80008cc:	f004 fadf 	bl	8004e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008d0:	2038      	movs	r0, #56	; 0x38
 80008d2:	f004 faf8 	bl	8004ec6 <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08e      	sub	sp, #56	; 0x38
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
 800090c:	615a      	str	r2, [r3, #20]
 800090e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000912:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000916:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000918:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <MX_FSMC_Init+0xec>)
 800091a:	4a2e      	ldr	r2, [pc, #184]	; (80009d4 <MX_FSMC_Init+0xf0>)
 800091c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800091e:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000924:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800092a:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <MX_FSMC_Init+0xec>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000930:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000932:	2210      	movs	r2, #16
 8000934:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000936:	4b26      	ldr	r3, [pc, #152]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800093c:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <MX_FSMC_Init+0xec>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000942:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000948:	4b21      	ldr	r3, [pc, #132]	; (80009d0 <MX_FSMC_Init+0xec>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000950:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000956:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000958:	2200      	movs	r2, #0
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <MX_FSMC_Init+0xec>)
 800095e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000962:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000966:	2200      	movs	r2, #0
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MX_FSMC_Init+0xec>)
 800096c:	2200      	movs	r2, #0
 800096e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_FSMC_Init+0xec>)
 8000972:	2200      	movs	r2, #0
 8000974:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000976:	230f      	movs	r3, #15
 8000978:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800097a:	230f      	movs	r3, #15
 800097c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800097e:	233c      	movs	r3, #60	; 0x3c
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000986:	2310      	movs	r3, #16
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800098a:	2311      	movs	r3, #17
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800098e:	2300      	movs	r3, #0
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000992:	2308      	movs	r3, #8
 8000994:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000996:	230f      	movs	r3, #15
 8000998:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800099a:	2309      	movs	r3, #9
 800099c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80009a2:	2310      	movs	r3, #16
 80009a4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80009a6:	2311      	movs	r3, #17
 80009a8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80009ae:	463a      	mov	r2, r7
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_FSMC_Init+0xec>)
 80009b8:	f006 fbb8 	bl	800712c <HAL_SRAM_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80009c2:	f001 fa2b 	bl	8001e1c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80009c6:	bf00      	nop
 80009c8:	3738      	adds	r7, #56	; 0x38
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000244 	.word	0x20000244
 80009d4:	a0000104 	.word	0xa0000104

080009d8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80009ec:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <HAL_FSMC_MspInit+0x88>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d131      	bne.n	8000a58 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <HAL_FSMC_MspInit+0x88>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <HAL_FSMC_MspInit+0x8c>)
 8000a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <HAL_FSMC_MspInit+0x8c>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6393      	str	r3, [r2, #56]	; 0x38
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <HAL_FSMC_MspInit+0x8c>)
 8000a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000a16:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000a1a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a28:	230c      	movs	r3, #12
 8000a2a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <HAL_FSMC_MspInit+0x90>)
 8000a32:	f004 fe65 	bl	8005700 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000a36:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000a3a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a48:	230c      	movs	r3, #12
 8000a4a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <HAL_FSMC_MspInit+0x94>)
 8000a52:	f004 fe55 	bl	8005700 <HAL_GPIO_Init>
 8000a56:	e000      	b.n	8000a5a <HAL_FSMC_MspInit+0x82>
    return;
 8000a58:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000014c 	.word	0x2000014c
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40020c00 	.word	0x40020c00

08000a70 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000a78:	f7ff ffae 	bl	80009d8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	; 0x38
 8000a88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
 8000a9e:	4b8f      	ldr	r3, [pc, #572]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a8e      	ldr	r2, [pc, #568]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000aa4:	f043 0310 	orr.w	r3, r3, #16
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b8c      	ldr	r3, [pc, #560]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	623b      	str	r3, [r7, #32]
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	4b88      	ldr	r3, [pc, #544]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a87      	ldr	r2, [pc, #540]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b85      	ldr	r3, [pc, #532]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	4b81      	ldr	r3, [pc, #516]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a80      	ldr	r2, [pc, #512]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000adc:	f043 0320 	orr.w	r3, r3, #32
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b7e      	ldr	r3, [pc, #504]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0320 	and.w	r3, r3, #32
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	4b7a      	ldr	r3, [pc, #488]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a79      	ldr	r2, [pc, #484]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b77      	ldr	r3, [pc, #476]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b73      	ldr	r3, [pc, #460]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a72      	ldr	r2, [pc, #456]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b70      	ldr	r3, [pc, #448]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b6c      	ldr	r3, [pc, #432]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a6b      	ldr	r2, [pc, #428]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b69      	ldr	r3, [pc, #420]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b65      	ldr	r3, [pc, #404]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a64      	ldr	r2, [pc, #400]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b62      	ldr	r3, [pc, #392]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b5e      	ldr	r3, [pc, #376]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a5d      	ldr	r2, [pc, #372]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b5b      	ldr	r3, [pc, #364]	; (8000cdc <MX_GPIO_Init+0x258>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2170      	movs	r1, #112	; 0x70
 8000b7e:	4858      	ldr	r0, [pc, #352]	; (8000ce0 <MX_GPIO_Init+0x25c>)
 8000b80:	f004 ff5a 	bl	8005a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8000b8a:	4856      	ldr	r0, [pc, #344]	; (8000ce4 <MX_GPIO_Init+0x260>)
 8000b8c:	f004 ff54 	bl	8005a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b96:	4854      	ldr	r0, [pc, #336]	; (8000ce8 <MX_GPIO_Init+0x264>)
 8000b98:	f004 ff4e 	bl	8005a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000ba2:	4852      	ldr	r0, [pc, #328]	; (8000cec <MX_GPIO_Init+0x268>)
 8000ba4:	f004 ff48 	bl	8005a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bae:	4850      	ldr	r0, [pc, #320]	; (8000cf0 <MX_GPIO_Init+0x26c>)
 8000bb0:	f004 ff42 	bl	8005a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	484e      	ldr	r0, [pc, #312]	; (8000cf4 <MX_GPIO_Init+0x270>)
 8000bba:	f004 ff3d 	bl	8005a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000bbe:	2370      	movs	r3, #112	; 0x70
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4842      	ldr	r0, [pc, #264]	; (8000ce0 <MX_GPIO_Init+0x25c>)
 8000bd6:	f004 fd93 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000bda:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2300      	movs	r3, #0
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	483c      	ldr	r0, [pc, #240]	; (8000ce4 <MX_GPIO_Init+0x260>)
 8000bf4:	f004 fd84 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8000bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4836      	ldr	r0, [pc, #216]	; (8000ce8 <MX_GPIO_Init+0x264>)
 8000c0e:	f004 fd77 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	482f      	ldr	r0, [pc, #188]	; (8000ce8 <MX_GPIO_Init+0x264>)
 8000c2c:	f004 fd68 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000c30:	23c0      	movs	r3, #192	; 0xc0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	482b      	ldr	r0, [pc, #172]	; (8000cf0 <MX_GPIO_Init+0x26c>)
 8000c44:	f004 fd5c 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000c48:	2330      	movs	r3, #48	; 0x30
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4822      	ldr	r0, [pc, #136]	; (8000ce4 <MX_GPIO_Init+0x260>)
 8000c5c:	f004 fd50 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000c60:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	481c      	ldr	r0, [pc, #112]	; (8000cec <MX_GPIO_Init+0x268>)
 8000c7a:	f004 fd41 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8000c7e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <MX_GPIO_Init+0x260>)
 8000c94:	f004 fd34 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <MX_GPIO_Init+0x26c>)
 8000cb2:	f004 fd25 	bl	8005700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000cb6:	2308      	movs	r3, #8
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <MX_GPIO_Init+0x270>)
 8000cce:	f004 fd17 	bl	8005700 <HAL_GPIO_Init>

}
 8000cd2:	bf00      	nop
 8000cd4:	3738      	adds	r7, #56	; 0x38
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40020800 	.word	0x40020800
 8000ce8:	40021400 	.word	0x40021400
 8000cec:	40021800 	.word	0x40021800
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	40020c00 	.word	0x40020c00

08000cf8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000cfe:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <MX_I2C1_Init+0x54>)
 8000d00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d04:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <MX_I2C1_Init+0x58>)
 8000d06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <MX_I2C1_Init+0x50>)
 8000d36:	f004 fe99 	bl	8005a6c <HAL_I2C_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d40:	f001 f86c 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000294 	.word	0x20000294
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	000186a0 	.word	0x000186a0

08000d54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a19      	ldr	r2, [pc, #100]	; (8000dd8 <HAL_I2C_MspInit+0x84>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12b      	bne.n	8000dce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d92:	23c0      	movs	r3, #192	; 0xc0
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d96:	2312      	movs	r3, #18
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da2:	2304      	movs	r3, #4
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	; (8000de0 <HAL_I2C_MspInit+0x8c>)
 8000dae:	f004 fca7 	bl	8005700 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000dbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_I2C_MspInit+0x88>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3728      	adds	r7, #40	; 0x28
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40005400 	.word	0x40005400
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020400 	.word	0x40020400

08000de4 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <LCD_WR_REG+0x1c>)
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	8013      	strh	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	600ffffe 	.word	0x600ffffe

08000e04 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <LCD_WR_DATA+0x1c>)
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	8053      	strh	r3, [r2, #2]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	600ffffe 	.word	0x600ffffe

08000e24 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <LCD_RD_DATA+0x20>)
 8000e2c:	885b      	ldrh	r3, [r3, #2]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	b29b      	uxth	r3, r3
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	600ffffe 	.word	0x600ffffe

08000e48 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4604      	mov	r4, r0
 8000e50:	4608      	mov	r0, r1
 8000e52:	4611      	mov	r1, r2
 8000e54:	461a      	mov	r2, r3
 8000e56:	4623      	mov	r3, r4
 8000e58:	80fb      	strh	r3, [r7, #6]
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80bb      	strh	r3, [r7, #4]
 8000e5e:	460b      	mov	r3, r1
 8000e60:	807b      	strh	r3, [r7, #2]
 8000e62:	4613      	mov	r3, r2
 8000e64:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000e66:	202a      	movs	r0, #42	; 0x2a
 8000e68:	f7ff ffbc 	bl	8000de4 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	0a1b      	lsrs	r3, r3, #8
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ffc6 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ffc0 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	0a1b      	lsrs	r3, r3, #8
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ffba 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000e90:	887b      	ldrh	r3, [r7, #2]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ffb4 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000e9c:	202b      	movs	r0, #43	; 0x2b
 8000e9e:	f7ff ffa1 	bl	8000de4 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000ea2:	88bb      	ldrh	r3, [r7, #4]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ffab 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000eae:	88bb      	ldrh	r3, [r7, #4]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ffa5 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000eba:	883b      	ldrh	r3, [r7, #0]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff9f 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000ec6:	883b      	ldrh	r3, [r7, #0]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff99 	bl	8000e04 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000ed2:	202c      	movs	r0, #44	; 0x2c
 8000ed4:	f7ff ff86 	bl	8000de4 <LCD_WR_REG>
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd90      	pop	{r4, r7, pc}

08000ee0 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <lcd_Clear+0x60>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <lcd_Clear+0x60>)
 8000ef4:	885b      	ldrh	r3, [r3, #2]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	2100      	movs	r1, #0
 8000efc:	2000      	movs	r0, #0
 8000efe:	f7ff ffa3 	bl	8000e48 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	81fb      	strh	r3, [r7, #14]
 8000f06:	e011      	b.n	8000f2c <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	81bb      	strh	r3, [r7, #12]
 8000f0c:	e006      	b.n	8000f1c <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff77 	bl	8000e04 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000f16:	89bb      	ldrh	r3, [r7, #12]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	81bb      	strh	r3, [r7, #12]
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <lcd_Clear+0x60>)
 8000f1e:	885b      	ldrh	r3, [r3, #2]
 8000f20:	89ba      	ldrh	r2, [r7, #12]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d3f3      	bcc.n	8000f0e <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	81fb      	strh	r3, [r7, #14]
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <lcd_Clear+0x60>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	89fa      	ldrh	r2, [r7, #14]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d3e8      	bcc.n	8000f08 <lcd_Clear+0x28>
		}
	}
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200002e8 	.word	0x200002e8

08000f44 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4604      	mov	r4, r0
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	4611      	mov	r1, r2
 8000f50:	461a      	mov	r2, r3
 8000f52:	4623      	mov	r3, r4
 8000f54:	80fb      	strh	r3, [r7, #6]
 8000f56:	4603      	mov	r3, r0
 8000f58:	80bb      	strh	r3, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	807b      	strh	r3, [r7, #2]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000f62:	887b      	ldrh	r3, [r7, #2]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	883b      	ldrh	r3, [r7, #0]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	88b9      	ldrh	r1, [r7, #4]
 8000f70:	88f8      	ldrh	r0, [r7, #6]
 8000f72:	f7ff ff69 	bl	8000e48 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000f76:	88bb      	ldrh	r3, [r7, #4]
 8000f78:	81fb      	strh	r3, [r7, #14]
 8000f7a:	e010      	b.n	8000f9e <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	81bb      	strh	r3, [r7, #12]
 8000f80:	e006      	b.n	8000f90 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000f82:	8c3b      	ldrh	r3, [r7, #32]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff3d 	bl	8000e04 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000f8a:	89bb      	ldrh	r3, [r7, #12]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	81bb      	strh	r3, [r7, #12]
 8000f90:	89ba      	ldrh	r2, [r7, #12]
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3f4      	bcc.n	8000f82 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000f98:	89fb      	ldrh	r3, [r7, #14]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	81fb      	strh	r3, [r7, #14]
 8000f9e:	89fa      	ldrh	r2, [r7, #14]
 8000fa0:	883b      	ldrh	r3, [r7, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d3ea      	bcc.n	8000f7c <lcd_Fill+0x38>
		}
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd90      	pop	{r4, r7, pc}

08000fb0 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	80bb      	strh	r3, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000fc2:	88bb      	ldrh	r3, [r7, #4]
 8000fc4:	88fa      	ldrh	r2, [r7, #6]
 8000fc6:	88b9      	ldrh	r1, [r7, #4]
 8000fc8:	88f8      	ldrh	r0, [r7, #6]
 8000fca:	f7ff ff3d 	bl	8000e48 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff17 	bl	8000e04 <LCD_WR_DATA>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8000fde:	b590      	push	{r4, r7, lr}
 8000fe0:	b08d      	sub	sp, #52	; 0x34
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4611      	mov	r1, r2
 8000fea:	461a      	mov	r2, r3
 8000fec:	4623      	mov	r3, r4
 8000fee:	80fb      	strh	r3, [r7, #6]
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	80bb      	strh	r3, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001004:	887a      	ldrh	r2, [r7, #2]
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 800100c:	883a      	ldrh	r2, [r7, #0]
 800100e:	88bb      	ldrh	r3, [r7, #4]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001014:	88fb      	ldrh	r3, [r7, #6]
 8001016:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001018:	88bb      	ldrh	r3, [r7, #4]
 800101a:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	2b00      	cmp	r3, #0
 8001020:	dd02      	ble.n	8001028 <lcd_DrawLine+0x4a>
 8001022:	2301      	movs	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e00b      	b.n	8001040 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <lcd_DrawLine+0x56>
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	e005      	b.n	8001040 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	425b      	negs	r3, r3
 800103e:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	2b00      	cmp	r3, #0
 8001044:	dd02      	ble.n	800104c <lcd_DrawLine+0x6e>
 8001046:	2301      	movs	r3, #1
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	e00b      	b.n	8001064 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d102      	bne.n	8001058 <lcd_DrawLine+0x7a>
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	e005      	b.n	8001064 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	425b      	negs	r3, r3
 8001062:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001064:	6a3a      	ldr	r2, [r7, #32]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	429a      	cmp	r2, r3
 800106a:	dd02      	ble.n	8001072 <lcd_DrawLine+0x94>
 800106c:	6a3b      	ldr	r3, [r7, #32]
 800106e:	61bb      	str	r3, [r7, #24]
 8001070:	e001      	b.n	8001076 <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001076:	2300      	movs	r3, #0
 8001078:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800107a:	e02b      	b.n	80010d4 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	b29b      	uxth	r3, r3
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	b291      	uxth	r1, r2
 8001084:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff91 	bl	8000fb0 <lcd_DrawPoint>
		xerr+=delta_x;
 800108e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001090:	6a3b      	ldr	r3, [r7, #32]
 8001092:	4413      	add	r3, r2
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 8001096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	4413      	add	r3, r2
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 800109e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dd07      	ble.n	80010b6 <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 80010a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80010b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	dd07      	ble.n	80010ce <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80010be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4413      	add	r3, r2
 80010cc:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80010ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010d0:	3301      	adds	r3, #1
 80010d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80010d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	429a      	cmp	r2, r3
 80010da:	dacf      	bge.n	800107c <lcd_DrawLine+0x9e>
		}
	}
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3734      	adds	r7, #52	; 0x34
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd90      	pop	{r4, r7, pc}

080010e6 <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 80010e6:	b590      	push	{r4, r7, lr}
 80010e8:	b085      	sub	sp, #20
 80010ea:	af02      	add	r7, sp, #8
 80010ec:	4604      	mov	r4, r0
 80010ee:	4608      	mov	r0, r1
 80010f0:	4611      	mov	r1, r2
 80010f2:	461a      	mov	r2, r3
 80010f4:	4623      	mov	r3, r4
 80010f6:	80fb      	strh	r3, [r7, #6]
 80010f8:	4603      	mov	r3, r0
 80010fa:	80bb      	strh	r3, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
 8001100:	4613      	mov	r3, r2
 8001102:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001104:	88bc      	ldrh	r4, [r7, #4]
 8001106:	887a      	ldrh	r2, [r7, #2]
 8001108:	88b9      	ldrh	r1, [r7, #4]
 800110a:	88f8      	ldrh	r0, [r7, #6]
 800110c:	8b3b      	ldrh	r3, [r7, #24]
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	4623      	mov	r3, r4
 8001112:	f7ff ff64 	bl	8000fde <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8001116:	883c      	ldrh	r4, [r7, #0]
 8001118:	88fa      	ldrh	r2, [r7, #6]
 800111a:	88b9      	ldrh	r1, [r7, #4]
 800111c:	88f8      	ldrh	r0, [r7, #6]
 800111e:	8b3b      	ldrh	r3, [r7, #24]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	4623      	mov	r3, r4
 8001124:	f7ff ff5b 	bl	8000fde <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8001128:	883c      	ldrh	r4, [r7, #0]
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	8839      	ldrh	r1, [r7, #0]
 800112e:	88f8      	ldrh	r0, [r7, #6]
 8001130:	8b3b      	ldrh	r3, [r7, #24]
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	4623      	mov	r3, r4
 8001136:	f7ff ff52 	bl	8000fde <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 800113a:	883c      	ldrh	r4, [r7, #0]
 800113c:	887a      	ldrh	r2, [r7, #2]
 800113e:	88b9      	ldrh	r1, [r7, #4]
 8001140:	8878      	ldrh	r0, [r7, #2]
 8001142:	8b3b      	ldrh	r3, [r7, #24]
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	4623      	mov	r3, r4
 8001148:	f7ff ff49 	bl	8000fde <lcd_DrawLine>
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bd90      	pop	{r4, r7, pc}

08001154 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4623      	mov	r3, r4
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4603      	mov	r3, r0
 8001168:	80bb      	strh	r3, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	70fb      	strb	r3, [r7, #3]
 800116e:	4613      	mov	r3, r2
 8001170:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001172:	2300      	movs	r3, #0
 8001174:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800117a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800117e:	085b      	lsrs	r3, r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	08db      	lsrs	r3, r3, #3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	f003 0307 	and.w	r3, r3, #7
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	bf14      	ite	ne
 8001196:	2301      	movne	r3, #1
 8001198:	2300      	moveq	r3, #0
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b29a      	uxth	r2, r3
 80011a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	fb12 f303 	smulbb	r3, r2, r3
 80011aa:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	3b20      	subs	r3, #32
 80011b0:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	4413      	add	r3, r2
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	3b01      	subs	r3, #1
 80011be:	b29c      	uxth	r4, r3
 80011c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	3b01      	subs	r3, #1
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	88b9      	ldrh	r1, [r7, #4]
 80011d2:	88f8      	ldrh	r0, [r7, #6]
 80011d4:	4622      	mov	r2, r4
 80011d6:	f7ff fe37 	bl	8000e48 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80011da:	2300      	movs	r3, #0
 80011dc:	827b      	strh	r3, [r7, #18]
 80011de:	e07a      	b.n	80012d6 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80011e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011e4:	2b0c      	cmp	r3, #12
 80011e6:	d028      	beq.n	800123a <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 80011e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	d108      	bne.n	8001202 <lcd_ShowChar+0xae>
 80011f0:	78fa      	ldrb	r2, [r7, #3]
 80011f2:	8a7b      	ldrh	r3, [r7, #18]
 80011f4:	493c      	ldr	r1, [pc, #240]	; (80012e8 <lcd_ShowChar+0x194>)
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	440a      	add	r2, r1
 80011fa:	4413      	add	r3, r2
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	75fb      	strb	r3, [r7, #23]
 8001200:	e01b      	b.n	800123a <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001202:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001206:	2b18      	cmp	r3, #24
 8001208:	d10b      	bne.n	8001222 <lcd_ShowChar+0xce>
 800120a:	78fa      	ldrb	r2, [r7, #3]
 800120c:	8a79      	ldrh	r1, [r7, #18]
 800120e:	4837      	ldr	r0, [pc, #220]	; (80012ec <lcd_ShowChar+0x198>)
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	4403      	add	r3, r0
 800121a:	440b      	add	r3, r1
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	75fb      	strb	r3, [r7, #23]
 8001220:	e00b      	b.n	800123a <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001222:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001226:	2b20      	cmp	r3, #32
 8001228:	d15a      	bne.n	80012e0 <lcd_ShowChar+0x18c>
 800122a:	78fa      	ldrb	r2, [r7, #3]
 800122c:	8a7b      	ldrh	r3, [r7, #18]
 800122e:	4930      	ldr	r1, [pc, #192]	; (80012f0 <lcd_ShowChar+0x19c>)
 8001230:	0192      	lsls	r2, r2, #6
 8001232:	440a      	add	r2, r1
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800123a:	2300      	movs	r3, #0
 800123c:	75bb      	strb	r3, [r7, #22]
 800123e:	e044      	b.n	80012ca <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001240:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001244:	2b00      	cmp	r3, #0
 8001246:	d120      	bne.n	800128a <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001248:	7dfa      	ldrb	r2, [r7, #23]
 800124a:	7dbb      	ldrb	r3, [r7, #22]
 800124c:	fa42 f303 	asr.w	r3, r2, r3
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d004      	beq.n	8001262 <lcd_ShowChar+0x10e>
 8001258:	883b      	ldrh	r3, [r7, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fdd2 	bl	8000e04 <LCD_WR_DATA>
 8001260:	e003      	b.n	800126a <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001262:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fdcd 	bl	8000e04 <LCD_WR_DATA>
				m++;
 800126a:	7d7b      	ldrb	r3, [r7, #21]
 800126c:	3301      	adds	r3, #1
 800126e:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001270:	7d7b      	ldrb	r3, [r7, #21]
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	fbb3 f1f2 	udiv	r1, r3, r2
 8001278:	fb02 f201 	mul.w	r2, r2, r1
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b00      	cmp	r3, #0
 8001282:	d11f      	bne.n	80012c4 <lcd_ShowChar+0x170>
				{
					m=0;
 8001284:	2300      	movs	r3, #0
 8001286:	757b      	strb	r3, [r7, #21]
					break;
 8001288:	e022      	b.n	80012d0 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800128a:	7dfa      	ldrb	r2, [r7, #23]
 800128c:	7dbb      	ldrb	r3, [r7, #22]
 800128e:	fa42 f303 	asr.w	r3, r2, r3
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <lcd_ShowChar+0x152>
 800129a:	883a      	ldrh	r2, [r7, #0]
 800129c:	88b9      	ldrh	r1, [r7, #4]
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fe85 	bl	8000fb0 <lcd_DrawPoint>
				x++;
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	3301      	adds	r3, #1
 80012aa:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80012ac:	88fa      	ldrh	r2, [r7, #6]
 80012ae:	8a3b      	ldrh	r3, [r7, #16]
 80012b0:	1ad2      	subs	r2, r2, r3
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d105      	bne.n	80012c4 <lcd_ShowChar+0x170>
				{
					x=x0;
 80012b8:	8a3b      	ldrh	r3, [r7, #16]
 80012ba:	80fb      	strh	r3, [r7, #6]
					y++;
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	3301      	adds	r3, #1
 80012c0:	80bb      	strh	r3, [r7, #4]
					break;
 80012c2:	e005      	b.n	80012d0 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80012c4:	7dbb      	ldrb	r3, [r7, #22]
 80012c6:	3301      	adds	r3, #1
 80012c8:	75bb      	strb	r3, [r7, #22]
 80012ca:	7dbb      	ldrb	r3, [r7, #22]
 80012cc:	2b07      	cmp	r3, #7
 80012ce:	d9b7      	bls.n	8001240 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80012d0:	8a7b      	ldrh	r3, [r7, #18]
 80012d2:	3301      	adds	r3, #1
 80012d4:	827b      	strh	r3, [r7, #18]
 80012d6:	8a7a      	ldrh	r2, [r7, #18]
 80012d8:	89bb      	ldrh	r3, [r7, #12]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d380      	bcc.n	80011e0 <lcd_ShowChar+0x8c>
 80012de:	e000      	b.n	80012e2 <lcd_ShowChar+0x18e>
		else return;
 80012e0:	bf00      	nop
				}
			}
		}
	}
}
 80012e2:	371c      	adds	r7, #28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd90      	pop	{r4, r7, pc}
 80012e8:	0800a84c 	.word	0x0800a84c
 80012ec:	0800ae3c 	.word	0x0800ae3c
 80012f0:	0800c00c 	.word	0x0800c00c

080012f4 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	460a      	mov	r2, r1
 80012fe:	71fb      	strb	r3, [r7, #7]
 8001300:	4613      	mov	r3, r2
 8001302:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001304:	2301      	movs	r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001308:	e004      	b.n	8001314 <mypow+0x20>
 800130a:	79fa      	ldrb	r2, [r7, #7]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	1e5a      	subs	r2, r3, #1
 8001318:	71ba      	strb	r2, [r7, #6]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f5      	bne.n	800130a <mypow+0x16>
	return result;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af04      	add	r7, sp, #16
 8001332:	4604      	mov	r4, r0
 8001334:	4608      	mov	r0, r1
 8001336:	4611      	mov	r1, r2
 8001338:	461a      	mov	r2, r3
 800133a:	4623      	mov	r3, r4
 800133c:	80fb      	strh	r3, [r7, #6]
 800133e:	4603      	mov	r3, r0
 8001340:	80bb      	strh	r3, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	807b      	strh	r3, [r7, #2]
 8001346:	4613      	mov	r3, r2
 8001348:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800134a:	2300      	movs	r3, #0
 800134c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 800134e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001352:	085b      	lsrs	r3, r3, #1
 8001354:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]
 800135a:	e059      	b.n	8001410 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 800135c:	887c      	ldrh	r4, [r7, #2]
 800135e:	787a      	ldrb	r2, [r7, #1]
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	3b01      	subs	r3, #1
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4619      	mov	r1, r3
 800136c:	200a      	movs	r0, #10
 800136e:	f7ff ffc1 	bl	80012f4 <mypow>
 8001372:	4603      	mov	r3, r0
 8001374:	fbb4 f1f3 	udiv	r1, r4, r3
 8001378:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <lcd_ShowIntNum+0xf8>)
 800137a:	fba3 2301 	umull	r2, r3, r3, r1
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	1aca      	subs	r2, r1, r3
 800138a:	4613      	mov	r3, r2
 800138c:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 800138e:	7bbb      	ldrb	r3, [r7, #14]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d121      	bne.n	80013d8 <lcd_ShowIntNum+0xac>
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	787b      	ldrb	r3, [r7, #1]
 8001398:	3b01      	subs	r3, #1
 800139a:	429a      	cmp	r2, r3
 800139c:	da1c      	bge.n	80013d8 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800139e:	7b3b      	ldrb	r3, [r7, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d117      	bne.n	80013d4 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	7b7b      	ldrb	r3, [r7, #13]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	fb12 f303 	smulbb	r3, r2, r3
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	4413      	add	r3, r2
 80013b6:	b298      	uxth	r0, r3
 80013b8:	8c3a      	ldrh	r2, [r7, #32]
 80013ba:	88b9      	ldrh	r1, [r7, #4]
 80013bc:	2300      	movs	r3, #0
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	4613      	mov	r3, r2
 80013cc:	2220      	movs	r2, #32
 80013ce:	f7ff fec1 	bl	8001154 <lcd_ShowChar>
				continue;
 80013d2:	e01a      	b.n	800140a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	7b7b      	ldrb	r3, [r7, #13]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	fb12 f303 	smulbb	r3, r2, r3
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	4413      	add	r3, r2
 80013ea:	b298      	uxth	r0, r3
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	3330      	adds	r3, #48	; 0x30
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	8c3c      	ldrh	r4, [r7, #32]
 80013f4:	88b9      	ldrh	r1, [r7, #4]
 80013f6:	2300      	movs	r3, #0
 80013f8:	9302      	str	r3, [sp, #8]
 80013fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	4623      	mov	r3, r4
 8001406:	f7ff fea5 	bl	8001154 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	3301      	adds	r3, #1
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	787b      	ldrb	r3, [r7, #1]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3a1      	bcc.n	800135c <lcd_ShowIntNum+0x30>
	}
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bd90      	pop	{r4, r7, pc}
 8001422:	bf00      	nop
 8001424:	cccccccd 	.word	0xcccccccd

08001428 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	4604      	mov	r4, r0
 8001430:	4608      	mov	r0, r1
 8001432:	4611      	mov	r1, r2
 8001434:	461a      	mov	r2, r3
 8001436:	4623      	mov	r3, r4
 8001438:	80fb      	strh	r3, [r7, #6]
 800143a:	4603      	mov	r3, r0
 800143c:	80bb      	strh	r3, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	807b      	strh	r3, [r7, #2]
 8001442:	4613      	mov	r3, r2
 8001444:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 800144a:	88fa      	ldrh	r2, [r7, #6]
 800144c:	887b      	ldrh	r3, [r7, #2]
 800144e:	4413      	add	r3, r2
 8001450:	b29b      	uxth	r3, r3
 8001452:	3b01      	subs	r3, #1
 8001454:	b29c      	uxth	r4, r3
 8001456:	88ba      	ldrh	r2, [r7, #4]
 8001458:	883b      	ldrh	r3, [r7, #0]
 800145a:	4413      	add	r3, r2
 800145c:	b29b      	uxth	r3, r3
 800145e:	3b01      	subs	r3, #1
 8001460:	b29b      	uxth	r3, r3
 8001462:	88b9      	ldrh	r1, [r7, #4]
 8001464:	88f8      	ldrh	r0, [r7, #6]
 8001466:	4622      	mov	r2, r4
 8001468:	f7ff fcee 	bl	8000e48 <lcd_AddressSet>
	for(i=0;i<length;i++)
 800146c:	2300      	movs	r3, #0
 800146e:	82fb      	strh	r3, [r7, #22]
 8001470:	e027      	b.n	80014c2 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8001472:	2300      	movs	r3, #0
 8001474:	82bb      	strh	r3, [r7, #20]
 8001476:	e01d      	b.n	80014b4 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	3301      	adds	r3, #1
 800148a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b21a      	sxth	r2, r3
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	b21b      	sxth	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	b21b      	sxth	r3, r3
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fcae 	bl	8000e04 <LCD_WR_DATA>
			k++;
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	3301      	adds	r3, #1
 80014ac:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 80014ae:	8abb      	ldrh	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	82bb      	strh	r3, [r7, #20]
 80014b4:	8aba      	ldrh	r2, [r7, #20]
 80014b6:	883b      	ldrh	r3, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d3dd      	bcc.n	8001478 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 80014bc:	8afb      	ldrh	r3, [r7, #22]
 80014be:	3301      	adds	r3, #1
 80014c0:	82fb      	strh	r3, [r7, #22]
 80014c2:	8afa      	ldrh	r2, [r7, #22]
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d3d3      	bcc.n	8001472 <lcd_ShowPicture+0x4a>
		}
	}
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd90      	pop	{r4, r7, pc}

080014d4 <lcd_SetDir>:



void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d007      	beq.n	80014fe <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <lcd_SetDir+0x44>)
 80014f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014f4:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <lcd_SetDir+0x44>)
 80014f8:	22f0      	movs	r2, #240	; 0xf0
 80014fa:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80014fc:	e006      	b.n	800150c <lcd_SetDir+0x38>
		lcddev.width=240;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <lcd_SetDir+0x44>)
 8001500:	22f0      	movs	r2, #240	; 0xf0
 8001502:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <lcd_SetDir+0x44>)
 8001506:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800150a:	805a      	strh	r2, [r3, #2]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	200002e8 	.word	0x200002e8

0800151c <lcd_init>:


void lcd_init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001526:	48aa      	ldr	r0, [pc, #680]	; (80017d0 <lcd_init+0x2b4>)
 8001528:	f004 fa86 	bl	8005a38 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800152c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001530:	f002 ff9c 	bl	800446c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153a:	48a5      	ldr	r0, [pc, #660]	; (80017d0 <lcd_init+0x2b4>)
 800153c:	f004 fa7c 	bl	8005a38 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001540:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001544:	f002 ff92 	bl	800446c <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff ffc3 	bl	80014d4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800154e:	20d3      	movs	r0, #211	; 0xd3
 8001550:	f7ff fc48 	bl	8000de4 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001554:	f7ff fc66 	bl	8000e24 <LCD_RD_DATA>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	4b9d      	ldr	r3, [pc, #628]	; (80017d4 <lcd_init+0x2b8>)
 800155e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001560:	f7ff fc60 	bl	8000e24 <LCD_RD_DATA>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	4b9a      	ldr	r3, [pc, #616]	; (80017d4 <lcd_init+0x2b8>)
 800156a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800156c:	f7ff fc5a 	bl	8000e24 <LCD_RD_DATA>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	4b97      	ldr	r3, [pc, #604]	; (80017d4 <lcd_init+0x2b8>)
 8001576:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001578:	4b96      	ldr	r3, [pc, #600]	; (80017d4 <lcd_init+0x2b8>)
 800157a:	889b      	ldrh	r3, [r3, #4]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b94      	ldr	r3, [pc, #592]	; (80017d4 <lcd_init+0x2b8>)
 8001582:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001584:	f7ff fc4e 	bl	8000e24 <LCD_RD_DATA>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	4b91      	ldr	r3, [pc, #580]	; (80017d4 <lcd_init+0x2b8>)
 800158e:	889b      	ldrh	r3, [r3, #4]
 8001590:	4313      	orrs	r3, r2
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b8f      	ldr	r3, [pc, #572]	; (80017d4 <lcd_init+0x2b8>)
 8001596:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001598:	20cf      	movs	r0, #207	; 0xcf
 800159a:	f7ff fc23 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff fc30 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80015a4:	20c1      	movs	r0, #193	; 0xc1
 80015a6:	f7ff fc2d 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80015aa:	2030      	movs	r0, #48	; 0x30
 80015ac:	f7ff fc2a 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80015b0:	20ed      	movs	r0, #237	; 0xed
 80015b2:	f7ff fc17 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80015b6:	2064      	movs	r0, #100	; 0x64
 80015b8:	f7ff fc24 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80015bc:	2003      	movs	r0, #3
 80015be:	f7ff fc21 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80015c2:	2012      	movs	r0, #18
 80015c4:	f7ff fc1e 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80015c8:	2081      	movs	r0, #129	; 0x81
 80015ca:	f7ff fc1b 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80015ce:	20e8      	movs	r0, #232	; 0xe8
 80015d0:	f7ff fc08 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80015d4:	2085      	movs	r0, #133	; 0x85
 80015d6:	f7ff fc15 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80015da:	2010      	movs	r0, #16
 80015dc:	f7ff fc12 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80015e0:	207a      	movs	r0, #122	; 0x7a
 80015e2:	f7ff fc0f 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80015e6:	20cb      	movs	r0, #203	; 0xcb
 80015e8:	f7ff fbfc 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80015ec:	2039      	movs	r0, #57	; 0x39
 80015ee:	f7ff fc09 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80015f2:	202c      	movs	r0, #44	; 0x2c
 80015f4:	f7ff fc06 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f7ff fc03 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80015fe:	2034      	movs	r0, #52	; 0x34
 8001600:	f7ff fc00 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001604:	2002      	movs	r0, #2
 8001606:	f7ff fbfd 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800160a:	20f7      	movs	r0, #247	; 0xf7
 800160c:	f7ff fbea 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001610:	2020      	movs	r0, #32
 8001612:	f7ff fbf7 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001616:	20ea      	movs	r0, #234	; 0xea
 8001618:	f7ff fbe4 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800161c:	2000      	movs	r0, #0
 800161e:	f7ff fbf1 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001622:	2000      	movs	r0, #0
 8001624:	f7ff fbee 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001628:	20c0      	movs	r0, #192	; 0xc0
 800162a:	f7ff fbdb 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800162e:	201b      	movs	r0, #27
 8001630:	f7ff fbe8 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001634:	20c1      	movs	r0, #193	; 0xc1
 8001636:	f7ff fbd5 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff fbe2 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001640:	20c5      	movs	r0, #197	; 0xc5
 8001642:	f7ff fbcf 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001646:	2030      	movs	r0, #48	; 0x30
 8001648:	f7ff fbdc 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800164c:	2030      	movs	r0, #48	; 0x30
 800164e:	f7ff fbd9 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001652:	20c7      	movs	r0, #199	; 0xc7
 8001654:	f7ff fbc6 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001658:	20b7      	movs	r0, #183	; 0xb7
 800165a:	f7ff fbd3 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800165e:	2036      	movs	r0, #54	; 0x36
 8001660:	f7ff fbc0 	bl	8000de4 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001664:	2008      	movs	r0, #8
 8001666:	f7ff fbcd 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800166a:	203a      	movs	r0, #58	; 0x3a
 800166c:	f7ff fbba 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001670:	2055      	movs	r0, #85	; 0x55
 8001672:	f7ff fbc7 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001676:	20b1      	movs	r0, #177	; 0xb1
 8001678:	f7ff fbb4 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff fbc1 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001682:	201a      	movs	r0, #26
 8001684:	f7ff fbbe 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001688:	20b6      	movs	r0, #182	; 0xb6
 800168a:	f7ff fbab 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800168e:	200a      	movs	r0, #10
 8001690:	f7ff fbb8 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001694:	20a2      	movs	r0, #162	; 0xa2
 8001696:	f7ff fbb5 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800169a:	20f2      	movs	r0, #242	; 0xf2
 800169c:	f7ff fba2 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff fbaf 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80016a6:	2026      	movs	r0, #38	; 0x26
 80016a8:	f7ff fb9c 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f7ff fba9 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80016b2:	20e0      	movs	r0, #224	; 0xe0
 80016b4:	f7ff fb96 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80016b8:	200f      	movs	r0, #15
 80016ba:	f7ff fba3 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80016be:	202a      	movs	r0, #42	; 0x2a
 80016c0:	f7ff fba0 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80016c4:	2028      	movs	r0, #40	; 0x28
 80016c6:	f7ff fb9d 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80016ca:	2008      	movs	r0, #8
 80016cc:	f7ff fb9a 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80016d0:	200e      	movs	r0, #14
 80016d2:	f7ff fb97 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80016d6:	2008      	movs	r0, #8
 80016d8:	f7ff fb94 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80016dc:	2054      	movs	r0, #84	; 0x54
 80016de:	f7ff fb91 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80016e2:	20a9      	movs	r0, #169	; 0xa9
 80016e4:	f7ff fb8e 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80016e8:	2043      	movs	r0, #67	; 0x43
 80016ea:	f7ff fb8b 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80016ee:	200a      	movs	r0, #10
 80016f0:	f7ff fb88 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80016f4:	200f      	movs	r0, #15
 80016f6:	f7ff fb85 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016fa:	2000      	movs	r0, #0
 80016fc:	f7ff fb82 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001700:	2000      	movs	r0, #0
 8001702:	f7ff fb7f 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001706:	2000      	movs	r0, #0
 8001708:	f7ff fb7c 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff fb79 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001712:	20e1      	movs	r0, #225	; 0xe1
 8001714:	f7ff fb66 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001718:	2000      	movs	r0, #0
 800171a:	f7ff fb73 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800171e:	2015      	movs	r0, #21
 8001720:	f7ff fb70 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001724:	2017      	movs	r0, #23
 8001726:	f7ff fb6d 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800172a:	2007      	movs	r0, #7
 800172c:	f7ff fb6a 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001730:	2011      	movs	r0, #17
 8001732:	f7ff fb67 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001736:	2006      	movs	r0, #6
 8001738:	f7ff fb64 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800173c:	202b      	movs	r0, #43	; 0x2b
 800173e:	f7ff fb61 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001742:	2056      	movs	r0, #86	; 0x56
 8001744:	f7ff fb5e 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001748:	203c      	movs	r0, #60	; 0x3c
 800174a:	f7ff fb5b 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800174e:	2005      	movs	r0, #5
 8001750:	f7ff fb58 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001754:	2010      	movs	r0, #16
 8001756:	f7ff fb55 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800175a:	200f      	movs	r0, #15
 800175c:	f7ff fb52 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001760:	203f      	movs	r0, #63	; 0x3f
 8001762:	f7ff fb4f 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001766:	203f      	movs	r0, #63	; 0x3f
 8001768:	f7ff fb4c 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800176c:	200f      	movs	r0, #15
 800176e:	f7ff fb49 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001772:	202b      	movs	r0, #43	; 0x2b
 8001774:	f7ff fb36 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff fb43 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff fb40 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001784:	2001      	movs	r0, #1
 8001786:	f7ff fb3d 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800178a:	203f      	movs	r0, #63	; 0x3f
 800178c:	f7ff fb3a 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001790:	202a      	movs	r0, #42	; 0x2a
 8001792:	f7ff fb27 	bl	8000de4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001796:	2000      	movs	r0, #0
 8001798:	f7ff fb34 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff fb31 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80017a2:	2000      	movs	r0, #0
 80017a4:	f7ff fb2e 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80017a8:	20ef      	movs	r0, #239	; 0xef
 80017aa:	f7ff fb2b 	bl	8000e04 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80017ae:	2011      	movs	r0, #17
 80017b0:	f7ff fb18 	bl	8000de4 <LCD_WR_REG>
	HAL_Delay(120);
 80017b4:	2078      	movs	r0, #120	; 0x78
 80017b6:	f002 fe59 	bl	800446c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80017ba:	2029      	movs	r0, #41	; 0x29
 80017bc:	f7ff fb12 	bl	8000de4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80017c0:	2201      	movs	r2, #1
 80017c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c6:	4804      	ldr	r0, [pc, #16]	; (80017d8 <lcd_init+0x2bc>)
 80017c8:	f004 f936 	bl	8005a38 <HAL_GPIO_WritePin>
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40020800 	.word	0x40020800
 80017d4:	200002e8 	.word	0x200002e8
 80017d8:	40020000 	.word	0x40020000

080017dc <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b08b      	sub	sp, #44	; 0x2c
 80017e0:	af04      	add	r7, sp, #16
 80017e2:	60ba      	str	r2, [r7, #8]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4603      	mov	r3, r0
 80017e8:	81fb      	strh	r3, [r7, #14]
 80017ea:	460b      	mov	r3, r1
 80017ec:	81bb      	strh	r3, [r7, #12]
 80017ee:	4613      	mov	r3, r2
 80017f0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80017f2:	89fb      	ldrh	r3, [r7, #14]
 80017f4:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80017fa:	e048      	b.n	800188e <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d145      	bne.n	800188e <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001802:	89fa      	ldrh	r2, [r7, #14]
 8001804:	4b26      	ldr	r3, [pc, #152]	; (80018a0 <lcd_ShowStr+0xc4>)
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800180e:	085b      	lsrs	r3, r3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	1acb      	subs	r3, r1, r3
 8001814:	429a      	cmp	r2, r3
 8001816:	dc3f      	bgt.n	8001898 <lcd_ShowStr+0xbc>
 8001818:	89ba      	ldrh	r2, [r7, #12]
 800181a:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <lcd_ShowStr+0xc4>)
 800181c:	885b      	ldrh	r3, [r3, #2]
 800181e:	4619      	mov	r1, r3
 8001820:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001824:	1acb      	subs	r3, r1, r3
 8001826:	429a      	cmp	r2, r3
 8001828:	dc36      	bgt.n	8001898 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b80      	cmp	r3, #128	; 0x80
 8001830:	d902      	bls.n	8001838 <lcd_ShowStr+0x5c>
 8001832:	2301      	movs	r3, #1
 8001834:	75fb      	strb	r3, [r7, #23]
 8001836:	e02a      	b.n	800188e <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b0d      	cmp	r3, #13
 800183e:	d10b      	bne.n	8001858 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001840:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001844:	b29a      	uxth	r2, r3
 8001846:	89bb      	ldrh	r3, [r7, #12]
 8001848:	4413      	add	r3, r2
 800184a:	81bb      	strh	r3, [r7, #12]
					x=x0;
 800184c:	8abb      	ldrh	r3, [r7, #20]
 800184e:	81fb      	strh	r3, [r7, #14]
					str++;
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	3301      	adds	r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	e017      	b.n	8001888 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	781a      	ldrb	r2, [r3, #0]
 800185c:	88fc      	ldrh	r4, [r7, #6]
 800185e:	89b9      	ldrh	r1, [r7, #12]
 8001860:	89f8      	ldrh	r0, [r7, #14]
 8001862:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001866:	9302      	str	r3, [sp, #8]
 8001868:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	4623      	mov	r3, r4
 8001874:	f7ff fc6e 	bl	8001154 <lcd_ShowChar>
					x+=sizey/2;
 8001878:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800187c:	085b      	lsrs	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	b29a      	uxth	r2, r3
 8001882:	89fb      	ldrh	r3, [r7, #14]
 8001884:	4413      	add	r3, r2
 8001886:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	3301      	adds	r3, #1
 800188c:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1b2      	bne.n	80017fc <lcd_ShowStr+0x20>
 8001896:	e000      	b.n	800189a <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001898:	bf00      	nop
			}
		}
	}
}
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	bd90      	pop	{r4, r7, pc}
 80018a0:	200002e8 	.word	0x200002e8

080018a4 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80018a8:	2201      	movs	r2, #1
 80018aa:	2140      	movs	r1, #64	; 0x40
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <led7_init+0x14>)
 80018ae:	f004 f8c3 	bl	8005a38 <HAL_GPIO_WritePin>
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40021800 	.word	0x40021800

080018bc <led7_Scan>:

void led7_Scan(){
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80018c0:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <led7_Scan+0x104>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <led7_Scan+0x104>)
 80018ca:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80018cc:	4b3d      	ldr	r3, [pc, #244]	; (80019c4 <led7_Scan+0x108>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a3d      	ldr	r2, [pc, #244]	; (80019c8 <led7_Scan+0x10c>)
 80018d2:	5cd3      	ldrb	r3, [r2, r3]
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	b21a      	sxth	r2, r3
 80018d8:	4b39      	ldr	r3, [pc, #228]	; (80019c0 <led7_Scan+0x104>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	b21b      	sxth	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <led7_Scan+0x104>)
 80018e6:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80018e8:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <led7_Scan+0x108>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d847      	bhi.n	8001980 <led7_Scan+0xc4>
 80018f0:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <led7_Scan+0x3c>)
 80018f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f6:	bf00      	nop
 80018f8:	08001909 	.word	0x08001909
 80018fc:	08001927 	.word	0x08001927
 8001900:	08001945 	.word	0x08001945
 8001904:	08001963 	.word	0x08001963
	case 0:
		spi_buffer |= 0x00b0;
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <led7_Scan+0x104>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001910:	b29a      	uxth	r2, r3
 8001912:	4b2b      	ldr	r3, [pc, #172]	; (80019c0 <led7_Scan+0x104>)
 8001914:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001916:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <led7_Scan+0x104>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800191e:	b29a      	uxth	r2, r3
 8001920:	4b27      	ldr	r3, [pc, #156]	; (80019c0 <led7_Scan+0x104>)
 8001922:	801a      	strh	r2, [r3, #0]
		break;
 8001924:	e02d      	b.n	8001982 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001926:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <led7_Scan+0x104>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <led7_Scan+0x104>)
 8001932:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <led7_Scan+0x104>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	f023 0320 	bic.w	r3, r3, #32
 800193c:	b29a      	uxth	r2, r3
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <led7_Scan+0x104>)
 8001940:	801a      	strh	r2, [r3, #0]
		break;
 8001942:	e01e      	b.n	8001982 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <led7_Scan+0x104>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800194c:	b29a      	uxth	r2, r3
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <led7_Scan+0x104>)
 8001950:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001952:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <led7_Scan+0x104>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	f023 0310 	bic.w	r3, r3, #16
 800195a:	b29a      	uxth	r2, r3
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <led7_Scan+0x104>)
 800195e:	801a      	strh	r2, [r3, #0]
		break;
 8001960:	e00f      	b.n	8001982 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <led7_Scan+0x104>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800196a:	b29a      	uxth	r2, r3
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <led7_Scan+0x104>)
 800196e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <led7_Scan+0x104>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <led7_Scan+0x104>)
 800197c:	801a      	strh	r2, [r3, #0]
		break;
 800197e:	e000      	b.n	8001982 <led7_Scan+0xc6>
	default:
		break;
 8001980:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <led7_Scan+0x108>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	3301      	adds	r3, #1
 8001988:	425a      	negs	r2, r3
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	f002 0203 	and.w	r2, r2, #3
 8001992:	bf58      	it	pl
 8001994:	4253      	negpl	r3, r2
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <led7_Scan+0x108>)
 8001998:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2140      	movs	r1, #64	; 0x40
 800199e:	480b      	ldr	r0, [pc, #44]	; (80019cc <led7_Scan+0x110>)
 80019a0:	f004 f84a 	bl	8005a38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80019a4:	2301      	movs	r3, #1
 80019a6:	2202      	movs	r2, #2
 80019a8:	4905      	ldr	r1, [pc, #20]	; (80019c0 <led7_Scan+0x104>)
 80019aa:	4809      	ldr	r0, [pc, #36]	; (80019d0 <led7_Scan+0x114>)
 80019ac:	f004 fe9f 	bl	80066ee <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80019b0:	2201      	movs	r2, #1
 80019b2:	2140      	movs	r1, #64	; 0x40
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <led7_Scan+0x110>)
 80019b6:	f004 f83f 	bl	8005a38 <HAL_GPIO_WritePin>
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	2000000e 	.word	0x2000000e
 80019c4:	20000150 	.word	0x20000150
 80019c8:	20000000 	.word	0x20000000
 80019cc:	40021800 	.word	0x40021800
 80019d0:	20000608 	.word	0x20000608

080019d4 <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	4613      	mov	r3, r2
 80019e0:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0e      	blt.n	8001a06 <led7_SetDigit+0x32>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b09      	cmp	r3, #9
 80019ec:	dc0b      	bgt.n	8001a06 <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80019ee:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <led7_SetDigit+0x40>)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	b2d9      	uxtb	r1, r3
 80019fc:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <led7_SetDigit+0x44>)
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	4413      	add	r3, r2
 8001a02:	460a      	mov	r2, r1
 8001a04:	701a      	strb	r2, [r3, #0]
	}
}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000004 	.word	0x20000004
 8001a18:	20000000 	.word	0x20000000

08001a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a20:	f002 fcb2 	bl	8004388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a24:	f000 f874 	bl	8001b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a28:	f7ff f82c 	bl	8000a84 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001a2c:	f002 f990 	bl	8003d50 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001a30:	f001 ff6e 	bl	8003910 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001a34:	f7fe ff56 	bl	80008e4 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001a38:	f7ff f95e 	bl	8000cf8 <MX_I2C1_Init>
  MX_TIM13_Init();
 8001a3c:	f002 f9d4 	bl	8003de8 <MX_TIM13_Init>
  MX_DMA_Init();
 8001a40:	f7fe ff30 	bl	80008a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a44:	f7fe fd98 	bl	8000578 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001a48:	f002 f932 	bl	8003cb0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001a4c:	f002 fbbc 	bl	80041c8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001a50:	f002 fb90 	bl	8004174 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001a54:	f000 f8c6 	bl	8001be4 <system_init>
  lcd_Clear(WHITE);
 8001a58:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a5c:	f7ff fa40 	bl	8000ee0 <lcd_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1)
    {
  	  while(!flag_timer2);
 8001a60:	bf00      	nop
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <main+0xe0>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0fb      	beq.n	8001a62 <main+0x46>
	  flag_timer2 = 0;
 8001a6a:	4b24      	ldr	r3, [pc, #144]	; (8001afc <main+0xe0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8001a70:	f7fe feac 	bl	80007cc <button_Scan>

	  if(flag_Sensor == 1) {
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <main+0xe4>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d107      	bne.n	8001a8c <main+0x70>
		  sensor_Read();
 8001a7c:	f000 f9e2 	bl	8001e44 <sensor_Read>
		  uartSendSensor();
 8001a80:	f002 fafe 	bl	8004080 <uartSendSensor>
		  setTimerSendSensor(15000);
 8001a84:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001a88:	f001 fee0 	bl	800384c <setTimerSendSensor>
	  }

//	  test_button();
//	  test_7seg();
	  switch (status) {
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <main+0xe8>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d02b      	beq.n	8001aec <main+0xd0>
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	dce3      	bgt.n	8001a60 <main+0x44>
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <main+0x86>
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d010      	beq.n	8001ac2 <main+0xa6>
 8001aa0:	e02a      	b.n	8001af8 <main+0xdc>
	  case 0:
		  display_UI();
 8001aa2:	f000 f8c7 	bl	8001c34 <display_UI>
		  if(button_count[0] == 1) {
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <main+0xec>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d121      	bne.n	8001af2 <main+0xd6>
			  status = 2;
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <main+0xe8>)
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	801a      	strh	r2, [r3, #0]
			  lcd_Clear(BLACK);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff fa13 	bl	8000ee0 <lcd_Clear>
			  button_count[0] = 0;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <main+0xec>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	801a      	strh	r2, [r3, #0]
		  }
		  break;
 8001ac0:	e017      	b.n	8001af2 <main+0xd6>
	  case 1:

		  wall(difficult);
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <main+0xf0>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 fdea 	bl	80036a0 <wall>
		  move();
 8001acc:	f001 fd22 	bl	8003514 <move>

		  if(button_count[12] == 1) {
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <main+0xec>)
 8001ad2:	8b1b      	ldrh	r3, [r3, #24]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d10e      	bne.n	8001af6 <main+0xda>
			  status = 2;
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <main+0xe8>)
 8001ada:	2202      	movs	r2, #2
 8001adc:	801a      	strh	r2, [r3, #0]
			  lcd_Clear(BLACK);
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7ff f9fe 	bl	8000ee0 <lcd_Clear>
			  button_count[12] = 0;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <main+0xec>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	831a      	strh	r2, [r3, #24]
		  }
		  break;
 8001aea:	e004      	b.n	8001af6 <main+0xda>
	  case 2:
		  display_UI_Snake_Game();
 8001aec:	f000 f948 	bl	8001d80 <display_UI_Snake_Game>
		  break;
 8001af0:	e002      	b.n	8001af8 <main+0xdc>
		  break;
 8001af2:	bf00      	nop
 8001af4:	e7b4      	b.n	8001a60 <main+0x44>
		  break;
 8001af6:	bf00      	nop
  	  while(!flag_timer2);
 8001af8:	e7b2      	b.n	8001a60 <main+0x44>
 8001afa:	bf00      	nop
 8001afc:	20000160 	.word	0x20000160
 8001b00:	20000166 	.word	0x20000166
 8001b04:	20000156 	.word	0x20000156
 8001b08:	20000224 	.word	0x20000224
 8001b0c:	20000010 	.word	0x20000010

08001b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b094      	sub	sp, #80	; 0x50
 8001b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b16:	f107 0320 	add.w	r3, r7, #32
 8001b1a:	2230      	movs	r2, #48	; 0x30
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f007 fbc0 	bl	80092a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <SystemClock_Config+0xcc>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	4a27      	ldr	r2, [pc, #156]	; (8001bdc <SystemClock_Config+0xcc>)
 8001b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b42:	6413      	str	r3, [r2, #64]	; 0x40
 8001b44:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <SystemClock_Config+0xcc>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <SystemClock_Config+0xd0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a21      	ldr	r2, [pc, #132]	; (8001be0 <SystemClock_Config+0xd0>)
 8001b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <SystemClock_Config+0xd0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b70:	2301      	movs	r3, #1
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b74:	2310      	movs	r3, #16
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b80:	2308      	movs	r3, #8
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b84:	23a8      	movs	r3, #168	; 0xa8
 8001b86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b90:	f107 0320 	add.w	r3, r7, #32
 8001b94:	4618      	mov	r0, r3
 8001b96:	f004 f8ad 	bl	8005cf4 <HAL_RCC_OscConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ba0:	f000 f93c 	bl	8001e1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001bb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	2105      	movs	r1, #5
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f004 fb0e 	bl	80061e4 <HAL_RCC_ClockConfig>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bce:	f000 f925 	bl	8001e1c <Error_Handler>
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	3750      	adds	r7, #80	; 0x50
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40007000 	.word	0x40007000

08001be4 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2120      	movs	r1, #32
 8001bec:	4810      	ldr	r0, [pc, #64]	; (8001c30 <system_init+0x4c>)
 8001bee:	f003 ff23 	bl	8005a38 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2140      	movs	r1, #64	; 0x40
 8001bf6:	480e      	ldr	r0, [pc, #56]	; (8001c30 <system_init+0x4c>)
 8001bf8:	f003 ff1e 	bl	8005a38 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2110      	movs	r1, #16
 8001c00:	480b      	ldr	r0, [pc, #44]	; (8001c30 <system_init+0x4c>)
 8001c02:	f003 ff19 	bl	8005a38 <HAL_GPIO_WritePin>
	  timer_init();
 8001c06:	f001 fdf7 	bl	80037f8 <timer_init>
	  led7_init();
 8001c0a:	f7ff fe4b 	bl	80018a4 <led7_init>
	  button_init();
 8001c0e:	f7fe fdd1 	bl	80007b4 <button_init>
	  lcd_init();
 8001c12:	f7ff fc83 	bl	800151c <lcd_init>
	  sensor_init();
 8001c16:	f000 f907 	bl	8001e28 <sensor_init>
	  uart_init_esp();
 8001c1a:	f002 f9bf 	bl	8003f9c <uart_init_esp>
	  setTimer2(50);
 8001c1e:	2032      	movs	r0, #50	; 0x32
 8001c20:	f001 fdf8 	bl	8003814 <setTimer2>
	  setTimerSendSensor(2000);
 8001c24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c28:	f001 fe10 	bl	800384c <setTimerSendSensor>
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000

08001c34 <display_UI>:
	snake_init();

	move();
}

void display_UI() {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af04      	add	r7, sp, #16
	lcd_ShowPicture(80,20, 90, 90, gImage_logo);
 8001c3a:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <display_UI+0xd4>)
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	235a      	movs	r3, #90	; 0x5a
 8001c40:	225a      	movs	r2, #90	; 0x5a
 8001c42:	2114      	movs	r1, #20
 8001c44:	2050      	movs	r0, #80	; 0x50
 8001c46:	f7ff fbef 	bl	8001428 <lcd_ShowPicture>
	lcd_ShowStr(50, 115, "LOGIC DESIGN", RED, WHITE, 24, 1);
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9302      	str	r3, [sp, #8]
 8001c4e:	2318      	movs	r3, #24
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c5c:	4a2b      	ldr	r2, [pc, #172]	; (8001d0c <display_UI+0xd8>)
 8001c5e:	2173      	movs	r1, #115	; 0x73
 8001c60:	2032      	movs	r0, #50	; 0x32
 8001c62:	f7ff fdbb 	bl	80017dc <lcd_ShowStr>
	lcd_ShowStr(42, 150, "GVHD: Vu Trong Thien", BLACK, WHITE, 16, 1);
 8001c66:	2301      	movs	r3, #1
 8001c68:	9302      	str	r3, [sp, #8]
 8001c6a:	2310      	movs	r3, #16
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2300      	movs	r3, #0
 8001c76:	4a26      	ldr	r2, [pc, #152]	; (8001d10 <display_UI+0xdc>)
 8001c78:	2196      	movs	r1, #150	; 0x96
 8001c7a:	202a      	movs	r0, #42	; 0x2a
 8001c7c:	f7ff fdae 	bl	80017dc <lcd_ShowStr>
	lcd_ShowStr(42, 168, "--------------------", BLACK, WHITE, 16, 1);
 8001c80:	2301      	movs	r3, #1
 8001c82:	9302      	str	r3, [sp, #8]
 8001c84:	2310      	movs	r3, #16
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	4a20      	ldr	r2, [pc, #128]	; (8001d14 <display_UI+0xe0>)
 8001c92:	21a8      	movs	r1, #168	; 0xa8
 8001c94:	202a      	movs	r0, #42	; 0x2a
 8001c96:	f7ff fda1 	bl	80017dc <lcd_ShowStr>
	lcd_ShowStr(48, 190, "Nhom 2", BLACK, WHITE, 16, 1);
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	9302      	str	r3, [sp, #8]
 8001c9e:	2310      	movs	r3, #16
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	4a1b      	ldr	r2, [pc, #108]	; (8001d18 <display_UI+0xe4>)
 8001cac:	21be      	movs	r1, #190	; 0xbe
 8001cae:	2030      	movs	r0, #48	; 0x30
 8001cb0:	f7ff fd94 	bl	80017dc <lcd_ShowStr>
	lcd_ShowStr(48, 210, "Huynh Gia Qui", BLACK, WHITE, 16, 1);
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	2310      	movs	r3, #16
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	4a15      	ldr	r2, [pc, #84]	; (8001d1c <display_UI+0xe8>)
 8001cc6:	21d2      	movs	r1, #210	; 0xd2
 8001cc8:	2030      	movs	r0, #48	; 0x30
 8001cca:	f7ff fd87 	bl	80017dc <lcd_ShowStr>
	lcd_ShowStr(48, 230, "Dao Duy Thanh", BLACK, WHITE, 16, 1);
 8001cce:	2301      	movs	r3, #1
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	2310      	movs	r3, #16
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	4a10      	ldr	r2, [pc, #64]	; (8001d20 <display_UI+0xec>)
 8001ce0:	21e6      	movs	r1, #230	; 0xe6
 8001ce2:	2030      	movs	r0, #48	; 0x30
 8001ce4:	f7ff fd7a 	bl	80017dc <lcd_ShowStr>
	lcd_ShowStr(48, 250, "Pham Dinh Quoc Thai", BLACK, WHITE, 16, 1);
 8001ce8:	2301      	movs	r3, #1
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	2310      	movs	r3, #16
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <display_UI+0xf0>)
 8001cfa:	21fa      	movs	r1, #250	; 0xfa
 8001cfc:	2030      	movs	r0, #48	; 0x30
 8001cfe:	f7ff fd6d 	bl	80017dc <lcd_ShowStr>
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	0800d7cc 	.word	0x0800d7cc
 8001d0c:	0800a6bc 	.word	0x0800a6bc
 8001d10:	0800a6cc 	.word	0x0800a6cc
 8001d14:	0800a6e4 	.word	0x0800a6e4
 8001d18:	0800a6fc 	.word	0x0800a6fc
 8001d1c:	0800a704 	.word	0x0800a704
 8001d20:	0800a714 	.word	0x0800a714
 8001d24:	0800a724 	.word	0x0800a724

08001d28 <choose_level>:
void choose_level() {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af04      	add	r7, sp, #16
	if(button_count[3] == 1)
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <choose_level+0x50>)
 8001d30:	88db      	ldrh	r3, [r3, #6]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d105      	bne.n	8001d42 <choose_level+0x1a>
		difficult++;
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <choose_level+0x54>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <choose_level+0x54>)
 8001d40:	801a      	strh	r2, [r3, #0]
	if(button_count[7] == 1)
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <choose_level+0x50>)
 8001d44:	89db      	ldrh	r3, [r3, #14]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d105      	bne.n	8001d56 <choose_level+0x2e>
		difficult--;
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <choose_level+0x54>)
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <choose_level+0x54>)
 8001d54:	801a      	strh	r2, [r3, #0]
	lcd_ShowIntNum(160,250,difficult,1,WHITE,BLACK,16);
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <choose_level+0x54>)
 8001d58:	881a      	ldrh	r2, [r3, #0]
 8001d5a:	2310      	movs	r3, #16
 8001d5c:	9302      	str	r3, [sp, #8]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2301      	movs	r3, #1
 8001d6a:	21fa      	movs	r1, #250	; 0xfa
 8001d6c:	20a0      	movs	r0, #160	; 0xa0
 8001d6e:	f7ff fadd 	bl	800132c <lcd_ShowIntNum>
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000224 	.word	0x20000224
 8001d7c:	20000010 	.word	0x20000010

08001d80 <display_UI_Snake_Game>:
void display_UI_Snake_Game() {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af04      	add	r7, sp, #16
	lcd_ShowStr(40,50,"SNAKE ",WHITE,BLACK,32,0);
 8001d86:	2300      	movs	r3, #0
 8001d88:	9302      	str	r3, [sp, #8]
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d96:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <display_UI_Snake_Game+0x88>)
 8001d98:	2132      	movs	r1, #50	; 0x32
 8001d9a:	2028      	movs	r0, #40	; 0x28
 8001d9c:	f7ff fd1e 	bl	80017dc <lcd_ShowStr>
	lcd_ShowStr(120,100,"GAME",WHITE,BLACK,32,0);
 8001da0:	2300      	movs	r3, #0
 8001da2:	9302      	str	r3, [sp, #8]
 8001da4:	2320      	movs	r3, #32
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	2300      	movs	r3, #0
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db0:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <display_UI_Snake_Game+0x8c>)
 8001db2:	2164      	movs	r1, #100	; 0x64
 8001db4:	2078      	movs	r0, #120	; 0x78
 8001db6:	f7ff fd11 	bl	80017dc <lcd_ShowStr>
	lcd_ShowStr(50,200,"Chon do kho!",WHITE,BLACK,16,0);
 8001dba:	2300      	movs	r3, #0
 8001dbc:	9302      	str	r3, [sp, #8]
 8001dbe:	2310      	movs	r3, #16
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dca:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <display_UI_Snake_Game+0x90>)
 8001dcc:	21c8      	movs	r1, #200	; 0xc8
 8001dce:	2032      	movs	r0, #50	; 0x32
 8001dd0:	f7ff fd04 	bl	80017dc <lcd_ShowStr>
	choose_level();
 8001dd4:	f7ff ffa8 	bl	8001d28 <choose_level>
	if(button_count[4] == 1) {
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <display_UI_Snake_Game+0x94>)
 8001dda:	891b      	ldrh	r3, [r3, #8]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d110      	bne.n	8001e02 <display_UI_Snake_Game+0x82>
		status = 1;
 8001de0:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <display_UI_Snake_Game+0x98>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	801a      	strh	r2, [r3, #0]
		lcd_Clear(WHITE);
 8001de6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dea:	f7ff f879 	bl	8000ee0 <lcd_Clear>
		lcd_Fill(0, 0, 240, 100, BLACK);
 8001dee:	2300      	movs	r3, #0
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2364      	movs	r3, #100	; 0x64
 8001df4:	22f0      	movs	r2, #240	; 0xf0
 8001df6:	2100      	movs	r1, #0
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7ff f8a3 	bl	8000f44 <lcd_Fill>
		snake_init();
 8001dfe:	f000 f899 	bl	8001f34 <snake_init>
	}

//	lcd_ShowStr(0,220,"",WHITE,BLACK,16,0);

}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	0800a738 	.word	0x0800a738
 8001e0c:	0800a740 	.word	0x0800a740
 8001e10:	0800a748 	.word	0x0800a748
 8001e14:	20000224 	.word	0x20000224
 8001e18:	20000156 	.word	0x20000156

08001e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e20:	b672      	cpsid	i
}
 8001e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <Error_Handler+0x8>
	...

08001e28 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8001e2c:	2205      	movs	r2, #5
 8001e2e:	4903      	ldr	r1, [pc, #12]	; (8001e3c <sensor_init+0x14>)
 8001e30:	4803      	ldr	r0, [pc, #12]	; (8001e40 <sensor_init+0x18>)
 8001e32:	f002 fb83 	bl	800453c <HAL_ADC_Start_DMA>
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000324 	.word	0x20000324
 8001e40:	2000017c 	.word	0x2000017c

08001e44 <sensor_Read>:

void sensor_Read(){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 8001e48:	2205      	movs	r2, #5
 8001e4a:	4903      	ldr	r1, [pc, #12]	; (8001e58 <sensor_Read+0x14>)
 8001e4c:	4803      	ldr	r0, [pc, #12]	; (8001e5c <sensor_Read+0x18>)
 8001e4e:	f002 fb75 	bl	800453c <HAL_ADC_Start_DMA>
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000324 	.word	0x20000324
 8001e5c:	2000017c 	.word	0x2000017c

08001e60 <sensor_GetLight>:

uint16_t sensor_GetLight(){
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
	return adc_receive[2];
 8001e64:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <sensor_GetLight+0x14>)
 8001e66:	889b      	ldrh	r3, [r3, #4]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000324 	.word	0x20000324

08001e78 <sensor_GetPotentiometer>:

uint16_t sensor_GetPotentiometer(){
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
	return adc_receive[3];
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <sensor_GetPotentiometer+0x14>)
 8001e7e:	88db      	ldrh	r3, [r3, #6]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000324 	.word	0x20000324

08001e90 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <sensor_GetTemperature+0x30>)
 8001e96:	891b      	ldrh	r3, [r3, #8]
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001ec4 <sensor_GetTemperature+0x34>
 8001ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ea8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001ec8 <sensor_GetTemperature+0x38>
 8001eac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001eb0:	eef0 7a66 	vmov.f32	s15, s13
}
 8001eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	20000324 	.word	0x20000324
 8001ec4:	43a50000 	.word	0x43a50000
 8001ec8:	457ff000 	.word	0x457ff000

08001ecc <random_eat>:
uint8_t flag2 = 0;
uint16_t x1 = 160, y1 = 160, x2 = 170, y2 = 170;
enum state firstState = goDown;
enum state prevState = goRight;

uint16_t random_eat(uint16_t minN, uint16_t maxN) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	460a      	mov	r2, r1
 8001ed6:	80fb      	strh	r3, [r7, #6]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	80bb      	strh	r3, [r7, #4]
	return minN + rand()%(maxN + 1 - minN);
 8001edc:	f007 f9ea 	bl	80092b4 <rand>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	88bb      	ldrh	r3, [r7, #4]
 8001ee4:	1c59      	adds	r1, r3, #1
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	1acb      	subs	r3, r1, r3
 8001eea:	fb92 f1f3 	sdiv	r1, r2, r3
 8001eee:	fb03 f301 	mul.w	r3, r3, r1
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	4413      	add	r3, r2
 8001efa:	b29b      	uxth	r3, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <creatWall>:
        {190, 220, 200, 285},    // Wall 6
        {130, 275, 200, 285},
		{90, 150, 140, 160},
		{115, 150, 125, 200}
    };
void creatWall(int32_t X1, int32_t Y1, int32_t X2, int32_t Y2) {
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	603b      	str	r3, [r7, #0]
    // Replace this with the appropriate function in your graphics library
    lcd_Fill(X1, Y1, X2, Y2, MAGENTA);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	b298      	uxth	r0, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	b299      	uxth	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8001f26:	9400      	str	r4, [sp, #0]
 8001f28:	f7ff f80c 	bl	8000f44 <lcd_Fill>
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd90      	pop	{r4, r7, pc}

08001f34 <snake_init>:
void snake_init() {
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af02      	add	r7, sp, #8
	lcd_Fill(x1, y1, x2, y2, BLUE);
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <snake_init+0x78>)
 8001f3c:	8818      	ldrh	r0, [r3, #0]
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <snake_init+0x7c>)
 8001f40:	8819      	ldrh	r1, [r3, #0]
 8001f42:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <snake_init+0x80>)
 8001f44:	881a      	ldrh	r2, [r3, #0]
 8001f46:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <snake_init+0x84>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	241f      	movs	r4, #31
 8001f4c:	9400      	str	r4, [sp, #0]
 8001f4e:	f7fe fff9 	bl	8000f44 <lcd_Fill>
	 //lcd_Fill(55, 75, 56, 150, RED);
	for (int8_t i = 0; i < 9; ++i) {
 8001f52:	2300      	movs	r3, #0
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	e020      	b.n	8001f9a <snake_init+0x66>
	       creatWall(obstacles[i].x1, obstacles[i].y1, obstacles[i].x2, obstacles[i].y2);
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <snake_init+0x88>)
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	4413      	add	r3, r2
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	4a14      	ldr	r2, [pc, #80]	; (8001fbc <snake_init+0x88>)
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3304      	adds	r3, #4
 8001f70:	6819      	ldr	r1, [r3, #0]
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <snake_init+0x88>)
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3308      	adds	r3, #8
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	4c0d      	ldr	r4, [pc, #52]	; (8001fbc <snake_init+0x88>)
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	4423      	add	r3, r4
 8001f8a:	330c      	adds	r3, #12
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f7ff ffb9 	bl	8001f04 <creatWall>
	for (int8_t i = 0; i < 9; ++i) {
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	3301      	adds	r3, #1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	71fb      	strb	r3, [r7, #7]
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	ddda      	ble.n	8001f58 <snake_init+0x24>
	    }
}
 8001fa2:	bf00      	nop
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd90      	pop	{r4, r7, pc}
 8001fac:	20000018 	.word	0x20000018
 8001fb0:	2000001a 	.word	0x2000001a
 8001fb4:	2000001c 	.word	0x2000001c
 8001fb8:	2000001e 	.word	0x2000001e
 8001fbc:	2000002c 	.word	0x2000002c

08001fc0 <game_over>:

void reset_game() {
	lcd_Clear(WHITE);
	lcd_Fill(0, 0, 240, 100, BLACK);
}
void game_over(){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af04      	add	r7, sp, #16

	lcd_ShowStr(50,175,"Diem cua ban la: ",RED,WHITE,16,0);
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	9302      	str	r3, [sp, #8]
 8001fca:	2310      	movs	r3, #16
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fd8:	4a3f      	ldr	r2, [pc, #252]	; (80020d8 <game_over+0x118>)
 8001fda:	21af      	movs	r1, #175	; 0xaf
 8001fdc:	2032      	movs	r0, #50	; 0x32
 8001fde:	f7ff fbfd 	bl	80017dc <lcd_ShowStr>
	if(count < 10)
 8001fe2:	4b3e      	ldr	r3, [pc, #248]	; (80020dc <game_over+0x11c>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	2b09      	cmp	r3, #9
 8001fe8:	d80f      	bhi.n	800200a <game_over+0x4a>
		lcd_ShowIntNum(185,175,count,1,RED,WHITE,16);
 8001fea:	4b3c      	ldr	r3, [pc, #240]	; (80020dc <game_over+0x11c>)
 8001fec:	881a      	ldrh	r2, [r3, #0]
 8001fee:	2310      	movs	r3, #16
 8001ff0:	9302      	str	r3, [sp, #8]
 8001ff2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2301      	movs	r3, #1
 8002000:	21af      	movs	r1, #175	; 0xaf
 8002002:	20b9      	movs	r0, #185	; 0xb9
 8002004:	f7ff f992 	bl	800132c <lcd_ShowIntNum>
 8002008:	e00e      	b.n	8002028 <game_over+0x68>
	else
		lcd_ShowIntNum(185,175,count,2,RED,WHITE,16);
 800200a:	4b34      	ldr	r3, [pc, #208]	; (80020dc <game_over+0x11c>)
 800200c:	881a      	ldrh	r2, [r3, #0]
 800200e:	2310      	movs	r3, #16
 8002010:	9302      	str	r3, [sp, #8]
 8002012:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2302      	movs	r3, #2
 8002020:	21af      	movs	r1, #175	; 0xaf
 8002022:	20b9      	movs	r0, #185	; 0xb9
 8002024:	f7ff f982 	bl	800132c <lcd_ShowIntNum>

//	lcd_Fill(x1, y1, x2, y2, WHITE);
//	lcd_Fill(x_food, y_food, x_food+5, y_food+5, WHITE);

	lcd_ShowStr(10,230,"Nhan phim 9 de choi lai!",BLACK,WHITE,16,0);
 8002028:	2300      	movs	r3, #0
 800202a:	9302      	str	r3, [sp, #8]
 800202c:	2310      	movs	r3, #16
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2300      	movs	r3, #0
 8002038:	4a29      	ldr	r2, [pc, #164]	; (80020e0 <game_over+0x120>)
 800203a:	21e6      	movs	r1, #230	; 0xe6
 800203c:	200a      	movs	r0, #10
 800203e:	f7ff fbcd 	bl	80017dc <lcd_ShowStr>
	lcd_ShowStr(10,250,"Nhan phim E de thoat game!",BLACK,WHITE,16,0);
 8002042:	2300      	movs	r3, #0
 8002044:	9302      	str	r3, [sp, #8]
 8002046:	2310      	movs	r3, #16
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2300      	movs	r3, #0
 8002052:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <game_over+0x124>)
 8002054:	21fa      	movs	r1, #250	; 0xfa
 8002056:	200a      	movs	r0, #10
 8002058:	f7ff fbc0 	bl	80017dc <lcd_ShowStr>
	lcd_ShowStr(50,130,"Game Over!!!",BLUE,YELLOW,24,0);
 800205c:	2300      	movs	r3, #0
 800205e:	9302      	str	r3, [sp, #8]
 8002060:	2318      	movs	r3, #24
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	231f      	movs	r3, #31
 800206c:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <game_over+0x128>)
 800206e:	2182      	movs	r1, #130	; 0x82
 8002070:	2032      	movs	r0, #50	; 0x32
 8002072:	f7ff fbb3 	bl	80017dc <lcd_ShowStr>
	if(count > max_count) {
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <game_over+0x11c>)
 8002078:	881a      	ldrh	r2, [r3, #0]
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <game_over+0x12c>)
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d903      	bls.n	800208a <game_over+0xca>
		max_count = count;
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <game_over+0x11c>)
 8002084:	881a      	ldrh	r2, [r3, #0]
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <game_over+0x12c>)
 8002088:	801a      	strh	r2, [r3, #0]
	}

	if(button_count[10] == 1) {
 800208a:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <game_over+0x130>)
 800208c:	8a9b      	ldrh	r3, [r3, #20]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d11f      	bne.n	80020d2 <game_over+0x112>
		count = 0;
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <game_over+0x11c>)
 8002094:	2200      	movs	r2, #0
 8002096:	801a      	strh	r2, [r3, #0]
		lcd_Clear(WHITE);
 8002098:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800209c:	f7fe ff20 	bl	8000ee0 <lcd_Clear>
		x1 = 160, y1 = 190, x2 = 170, y2 = 200;
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <game_over+0x134>)
 80020a2:	22a0      	movs	r2, #160	; 0xa0
 80020a4:	801a      	strh	r2, [r3, #0]
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <game_over+0x138>)
 80020a8:	22be      	movs	r2, #190	; 0xbe
 80020aa:	801a      	strh	r2, [r3, #0]
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <game_over+0x13c>)
 80020ae:	22aa      	movs	r2, #170	; 0xaa
 80020b0:	801a      	strh	r2, [r3, #0]
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <game_over+0x140>)
 80020b4:	22c8      	movs	r2, #200	; 0xc8
 80020b6:	801a      	strh	r2, [r3, #0]
		CREATE_FOOD = 1;
 80020b8:	4b12      	ldr	r3, [pc, #72]	; (8002104 <game_over+0x144>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	801a      	strh	r2, [r3, #0]

		lcd_Fill(0, 0, 240, 100, BLACK);
 80020be:	2300      	movs	r3, #0
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2364      	movs	r3, #100	; 0x64
 80020c4:	22f0      	movs	r2, #240	; 0xf0
 80020c6:	2100      	movs	r1, #0
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7fe ff3b 	bl	8000f44 <lcd_Fill>
		snake_init();
 80020ce:	f7ff ff31 	bl	8001f34 <snake_init>
//		wall();
//		move();
	}

}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	0800a758 	.word	0x0800a758
 80020dc:	2000015c 	.word	0x2000015c
 80020e0:	0800a76c 	.word	0x0800a76c
 80020e4:	0800a788 	.word	0x0800a788
 80020e8:	0800a7a4 	.word	0x0800a7a4
 80020ec:	2000015e 	.word	0x2000015e
 80020f0:	20000224 	.word	0x20000224
 80020f4:	20000018 	.word	0x20000018
 80020f8:	2000001a 	.word	0x2000001a
 80020fc:	2000001c 	.word	0x2000001c
 8002100:	2000001e 	.word	0x2000001e
 8002104:	20000028 	.word	0x20000028

08002108 <checkBite>:

uint8_t checkBite (int16_t X1 , int16_t Y1, int16_t X2, int16_t Y2,int8_t count) {
 8002108:	b490      	push	{r4, r7}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	4604      	mov	r4, r0
 8002110:	4608      	mov	r0, r1
 8002112:	4611      	mov	r1, r2
 8002114:	461a      	mov	r2, r3
 8002116:	4623      	mov	r3, r4
 8002118:	80fb      	strh	r3, [r7, #6]
 800211a:	4603      	mov	r3, r0
 800211c:	80bb      	strh	r3, [r7, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	807b      	strh	r3, [r7, #2]
 8002122:	4613      	mov	r3, r2
 8002124:	803b      	strh	r3, [r7, #0]
	for (int8_t i = count; i < currentIndex; i++) {
 8002126:	7e3b      	ldrb	r3, [r7, #24]
 8002128:	73fb      	strb	r3, [r7, #15]
 800212a:	e0b8      	b.n	800229e <checkBite+0x196>
		if (X1 >= allPath[i].x1 && X1 <= allPath[i].x2) {
 800212c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002130:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002134:	4860      	ldr	r0, [pc, #384]	; (80022b8 <checkBite+0x1b0>)
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4403      	add	r3, r0
 8002140:	3308      	adds	r3, #8
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4299      	cmp	r1, r3
 8002146:	db4b      	blt.n	80021e0 <checkBite+0xd8>
 8002148:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800214c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002150:	4859      	ldr	r0, [pc, #356]	; (80022b8 <checkBite+0x1b0>)
 8002152:	4613      	mov	r3, r2
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4403      	add	r3, r0
 800215c:	330c      	adds	r3, #12
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4299      	cmp	r1, r3
 8002162:	dc3d      	bgt.n	80021e0 <checkBite+0xd8>
			if (Y1 >= allPath[i].y1 && Y1 <= allPath[i].y2) {
 8002164:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002168:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800216c:	4852      	ldr	r0, [pc, #328]	; (80022b8 <checkBite+0x1b0>)
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4403      	add	r3, r0
 8002178:	3310      	adds	r3, #16
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4299      	cmp	r1, r3
 800217e:	db0f      	blt.n	80021a0 <checkBite+0x98>
 8002180:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002184:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002188:	484b      	ldr	r0, [pc, #300]	; (80022b8 <checkBite+0x1b0>)
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4403      	add	r3, r0
 8002194:	3314      	adds	r3, #20
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4299      	cmp	r1, r3
 800219a:	dc01      	bgt.n	80021a0 <checkBite+0x98>

				return 1;
 800219c:	2301      	movs	r3, #1
 800219e:	e086      	b.n	80022ae <checkBite+0x1a6>
			} else if (y2 >= allPath[i].y1 && y2 <= allPath[i].y2) {
 80021a0:	4b46      	ldr	r3, [pc, #280]	; (80022bc <checkBite+0x1b4>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80021aa:	4943      	ldr	r1, [pc, #268]	; (80022b8 <checkBite+0x1b0>)
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	440b      	add	r3, r1
 80021b6:	3310      	adds	r3, #16
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4298      	cmp	r0, r3
 80021bc:	db68      	blt.n	8002290 <checkBite+0x188>
 80021be:	4b3f      	ldr	r3, [pc, #252]	; (80022bc <checkBite+0x1b4>)
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80021c8:	493b      	ldr	r1, [pc, #236]	; (80022b8 <checkBite+0x1b0>)
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	440b      	add	r3, r1
 80021d4:	3314      	adds	r3, #20
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4298      	cmp	r0, r3
 80021da:	dc59      	bgt.n	8002290 <checkBite+0x188>

				return 1;
 80021dc:	2301      	movs	r3, #1
 80021de:	e066      	b.n	80022ae <checkBite+0x1a6>
			}
		} else if (X2 >= allPath[i].x1 && X2 <= allPath[i].x2) {
 80021e0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80021e4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80021e8:	4833      	ldr	r0, [pc, #204]	; (80022b8 <checkBite+0x1b0>)
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4403      	add	r3, r0
 80021f4:	3308      	adds	r3, #8
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4299      	cmp	r1, r3
 80021fa:	db4a      	blt.n	8002292 <checkBite+0x18a>
 80021fc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002200:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002204:	482c      	ldr	r0, [pc, #176]	; (80022b8 <checkBite+0x1b0>)
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4403      	add	r3, r0
 8002210:	330c      	adds	r3, #12
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4299      	cmp	r1, r3
 8002216:	dc3c      	bgt.n	8002292 <checkBite+0x18a>
			if (Y1 >= allPath[i].y1 && Y1 <= allPath[i].y2) {
 8002218:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800221c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002220:	4825      	ldr	r0, [pc, #148]	; (80022b8 <checkBite+0x1b0>)
 8002222:	4613      	mov	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4403      	add	r3, r0
 800222c:	3310      	adds	r3, #16
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4299      	cmp	r1, r3
 8002232:	db0f      	blt.n	8002254 <checkBite+0x14c>
 8002234:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002238:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800223c:	481e      	ldr	r0, [pc, #120]	; (80022b8 <checkBite+0x1b0>)
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	4403      	add	r3, r0
 8002248:	3314      	adds	r3, #20
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4299      	cmp	r1, r3
 800224e:	dc01      	bgt.n	8002254 <checkBite+0x14c>

				return 1;
 8002250:	2301      	movs	r3, #1
 8002252:	e02c      	b.n	80022ae <checkBite+0x1a6>
			} else if (Y2 >= allPath[i].y1 && Y2 <= allPath[i].y2) {
 8002254:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002258:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800225c:	4816      	ldr	r0, [pc, #88]	; (80022b8 <checkBite+0x1b0>)
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4403      	add	r3, r0
 8002268:	3310      	adds	r3, #16
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4299      	cmp	r1, r3
 800226e:	db10      	blt.n	8002292 <checkBite+0x18a>
 8002270:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002274:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002278:	480f      	ldr	r0, [pc, #60]	; (80022b8 <checkBite+0x1b0>)
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4403      	add	r3, r0
 8002284:	3314      	adds	r3, #20
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4299      	cmp	r1, r3
 800228a:	dc02      	bgt.n	8002292 <checkBite+0x18a>

				return 1;
 800228c:	2301      	movs	r3, #1
 800228e:	e00e      	b.n	80022ae <checkBite+0x1a6>
			if (Y1 >= allPath[i].y1 && Y1 <= allPath[i].y2) {
 8002290:	bf00      	nop
	for (int8_t i = count; i < currentIndex; i++) {
 8002292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3301      	adds	r3, #1
 800229a:	b2db      	uxtb	r3, r3
 800229c:	73fb      	strb	r3, [r7, #15]
 800229e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a2:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <checkBite+0x1b8>)
 80022a4:	7812      	ldrb	r2, [r2, #0]
 80022a6:	4293      	cmp	r3, r2
 80022a8:	f6ff af40 	blt.w	800212c <checkBite+0x24>
			}
		}
	}
	return 0;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc90      	pop	{r4, r7}
 80022b6:	4770      	bx	lr
 80022b8:	20000334 	.word	0x20000334
 80022bc:	2000001e 	.word	0x2000001e
 80022c0:	20000158 	.word	0x20000158

080022c4 <snakeSelfBite>:
uint8_t snakeSelfBite (int16_t X1 , int16_t Y1, int16_t X2, int16_t Y2,int8_t flag){
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	4604      	mov	r4, r0
 80022cc:	4608      	mov	r0, r1
 80022ce:	4611      	mov	r1, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	4623      	mov	r3, r4
 80022d4:	80fb      	strh	r3, [r7, #6]
 80022d6:	4603      	mov	r3, r0
 80022d8:	80bb      	strh	r3, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	807b      	strh	r3, [r7, #2]
 80022de:	4613      	mov	r3, r2
 80022e0:	803b      	strh	r3, [r7, #0]
	if (flag == 1) {
 80022e2:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d112      	bne.n	8002310 <snakeSelfBite+0x4c>
		if(checkBite(X1, Y1, X2, Y2, 0) == 1)
 80022ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80022ee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80022f2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80022f6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80022fa:	2400      	movs	r4, #0
 80022fc:	9400      	str	r4, [sp, #0]
 80022fe:	f7ff ff03 	bl	8002108 <checkBite>
 8002302:	4603      	mov	r3, r0
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <snakeSelfBite+0x48>
			return 1;
 8002308:	2301      	movs	r3, #1
 800230a:	e017      	b.n	800233c <snakeSelfBite+0x78>
		return 0;
 800230c:	2300      	movs	r3, #0
 800230e:	e015      	b.n	800233c <snakeSelfBite+0x78>
	}
	else {
		if (currentIndex >= 4) {
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <snakeSelfBite+0x80>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b03      	cmp	r3, #3
 8002316:	d910      	bls.n	800233a <snakeSelfBite+0x76>
			if(checkBite(X1, Y1, X2, Y2, 3) == 1) {
 8002318:	f9b7 3000 	ldrsh.w	r3, [r7]
 800231c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002320:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002324:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002328:	2403      	movs	r4, #3
 800232a:	9400      	str	r4, [sp, #0]
 800232c:	f7ff feec 	bl	8002108 <checkBite>
 8002330:	4603      	mov	r3, r0
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <snakeSelfBite+0x76>
				return 1;
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <snakeSelfBite+0x78>
			}
		}
		return 0;
 800233a:	2300      	movs	r3, #0
	}

}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bd90      	pop	{r4, r7, pc}
 8002344:	20000158 	.word	0x20000158

08002348 <moveWall>:
void moveWall() {
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b083      	sub	sp, #12
 800234c:	af02      	add	r7, sp, #8
	if (flag1 == 0) {
 800234e:	4b7c      	ldr	r3, [pc, #496]	; (8002540 <moveWall+0x1f8>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d14a      	bne.n	80023ec <moveWall+0xa4>
		lcd_Fill(obstacles[7].x2-2, obstacles[7].y1, obstacles[7].x2, obstacles[7].y2, WHITE);
 8002356:	4b7b      	ldr	r3, [pc, #492]	; (8002544 <moveWall+0x1fc>)
 8002358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b02      	subs	r3, #2
 800235e:	b298      	uxth	r0, r3
 8002360:	4b78      	ldr	r3, [pc, #480]	; (8002544 <moveWall+0x1fc>)
 8002362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002364:	b299      	uxth	r1, r3
 8002366:	4b77      	ldr	r3, [pc, #476]	; (8002544 <moveWall+0x1fc>)
 8002368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800236a:	b29a      	uxth	r2, r3
 800236c:	4b75      	ldr	r3, [pc, #468]	; (8002544 <moveWall+0x1fc>)
 800236e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002370:	b29b      	uxth	r3, r3
 8002372:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002376:	9400      	str	r4, [sp, #0]
 8002378:	f7fe fde4 	bl	8000f44 <lcd_Fill>
		obstacles[7].x1-=2;
 800237c:	4b71      	ldr	r3, [pc, #452]	; (8002544 <moveWall+0x1fc>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002380:	3b02      	subs	r3, #2
 8002382:	4a70      	ldr	r2, [pc, #448]	; (8002544 <moveWall+0x1fc>)
 8002384:	6713      	str	r3, [r2, #112]	; 0x70
		obstacles[7].x2-=2;
 8002386:	4b6f      	ldr	r3, [pc, #444]	; (8002544 <moveWall+0x1fc>)
 8002388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800238a:	3b02      	subs	r3, #2
 800238c:	4a6d      	ldr	r2, [pc, #436]	; (8002544 <moveWall+0x1fc>)
 800238e:	6793      	str	r3, [r2, #120]	; 0x78
		lcd_Fill(obstacles[7].x1, obstacles[7].y1, obstacles[7].x1+2, obstacles[7].y2, MAGENTA);
 8002390:	4b6c      	ldr	r3, [pc, #432]	; (8002544 <moveWall+0x1fc>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	b298      	uxth	r0, r3
 8002396:	4b6b      	ldr	r3, [pc, #428]	; (8002544 <moveWall+0x1fc>)
 8002398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239a:	b299      	uxth	r1, r3
 800239c:	4b69      	ldr	r3, [pc, #420]	; (8002544 <moveWall+0x1fc>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3302      	adds	r3, #2
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	4b67      	ldr	r3, [pc, #412]	; (8002544 <moveWall+0x1fc>)
 80023a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80023b0:	9400      	str	r4, [sp, #0]
 80023b2:	f7fe fdc7 	bl	8000f44 <lcd_Fill>

		snakeSelfBite(obstacles[7].x1,obstacles[7].y1,obstacles[7].x1+10,obstacles[7].y2, 1);
 80023b6:	4b63      	ldr	r3, [pc, #396]	; (8002544 <moveWall+0x1fc>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	b218      	sxth	r0, r3
 80023bc:	4b61      	ldr	r3, [pc, #388]	; (8002544 <moveWall+0x1fc>)
 80023be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c0:	b219      	sxth	r1, r3
 80023c2:	4b60      	ldr	r3, [pc, #384]	; (8002544 <moveWall+0x1fc>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	330a      	adds	r3, #10
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	b21a      	sxth	r2, r3
 80023ce:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <moveWall+0x1fc>)
 80023d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	2401      	movs	r4, #1
 80023d6:	9400      	str	r4, [sp, #0]
 80023d8:	f7ff ff74 	bl	80022c4 <snakeSelfBite>
		if (obstacles[7].x1 <= 10) flag1 = 1;
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <moveWall+0x1fc>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	2b0a      	cmp	r3, #10
 80023e2:	dc4d      	bgt.n	8002480 <moveWall+0x138>
 80023e4:	4b56      	ldr	r3, [pc, #344]	; (8002540 <moveWall+0x1f8>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	e049      	b.n	8002480 <moveWall+0x138>
	} else {
		lcd_Fill(obstacles[7].x1, obstacles[7].y1, obstacles[7].x1+2, obstacles[7].y2, WHITE);
 80023ec:	4b55      	ldr	r3, [pc, #340]	; (8002544 <moveWall+0x1fc>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	b298      	uxth	r0, r3
 80023f2:	4b54      	ldr	r3, [pc, #336]	; (8002544 <moveWall+0x1fc>)
 80023f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f6:	b299      	uxth	r1, r3
 80023f8:	4b52      	ldr	r3, [pc, #328]	; (8002544 <moveWall+0x1fc>)
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3302      	adds	r3, #2
 8002400:	b29a      	uxth	r2, r3
 8002402:	4b50      	ldr	r3, [pc, #320]	; (8002544 <moveWall+0x1fc>)
 8002404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002406:	b29b      	uxth	r3, r3
 8002408:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800240c:	9400      	str	r4, [sp, #0]
 800240e:	f7fe fd99 	bl	8000f44 <lcd_Fill>
		obstacles[7].x1+=2;
 8002412:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <moveWall+0x1fc>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	3302      	adds	r3, #2
 8002418:	4a4a      	ldr	r2, [pc, #296]	; (8002544 <moveWall+0x1fc>)
 800241a:	6713      	str	r3, [r2, #112]	; 0x70
		obstacles[7].x2+=2;
 800241c:	4b49      	ldr	r3, [pc, #292]	; (8002544 <moveWall+0x1fc>)
 800241e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002420:	3302      	adds	r3, #2
 8002422:	4a48      	ldr	r2, [pc, #288]	; (8002544 <moveWall+0x1fc>)
 8002424:	6793      	str	r3, [r2, #120]	; 0x78
		lcd_Fill(obstacles[7].x2-2, obstacles[7].y1, obstacles[7].x2, obstacles[7].y2, MAGENTA);
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <moveWall+0x1fc>)
 8002428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b02      	subs	r3, #2
 800242e:	b298      	uxth	r0, r3
 8002430:	4b44      	ldr	r3, [pc, #272]	; (8002544 <moveWall+0x1fc>)
 8002432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002434:	b299      	uxth	r1, r3
 8002436:	4b43      	ldr	r3, [pc, #268]	; (8002544 <moveWall+0x1fc>)
 8002438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800243a:	b29a      	uxth	r2, r3
 800243c:	4b41      	ldr	r3, [pc, #260]	; (8002544 <moveWall+0x1fc>)
 800243e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002440:	b29b      	uxth	r3, r3
 8002442:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8002446:	9400      	str	r4, [sp, #0]
 8002448:	f7fe fd7c 	bl	8000f44 <lcd_Fill>
		snakeSelfBite(obstacles[7].x2-10,obstacles[7].y1,obstacles[7].x2,obstacles[7].y2, 1);
 800244c:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <moveWall+0x1fc>)
 800244e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b0a      	subs	r3, #10
 8002454:	b29b      	uxth	r3, r3
 8002456:	b218      	sxth	r0, r3
 8002458:	4b3a      	ldr	r3, [pc, #232]	; (8002544 <moveWall+0x1fc>)
 800245a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245c:	b219      	sxth	r1, r3
 800245e:	4b39      	ldr	r3, [pc, #228]	; (8002544 <moveWall+0x1fc>)
 8002460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002462:	b21a      	sxth	r2, r3
 8002464:	4b37      	ldr	r3, [pc, #220]	; (8002544 <moveWall+0x1fc>)
 8002466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002468:	b21b      	sxth	r3, r3
 800246a:	2401      	movs	r4, #1
 800246c:	9400      	str	r4, [sp, #0]
 800246e:	f7ff ff29 	bl	80022c4 <snakeSelfBite>
		if (obstacles[7].x2 >= 230) flag1 = 0;
 8002472:	4b34      	ldr	r3, [pc, #208]	; (8002544 <moveWall+0x1fc>)
 8002474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002476:	2be5      	cmp	r3, #229	; 0xe5
 8002478:	dd02      	ble.n	8002480 <moveWall+0x138>
 800247a:	4b31      	ldr	r3, [pc, #196]	; (8002540 <moveWall+0x1f8>)
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
	}

	if (flag2 == 0) {
 8002480:	4b31      	ldr	r3, [pc, #196]	; (8002548 <moveWall+0x200>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d163      	bne.n	8002550 <moveWall+0x208>
		lcd_Fill(obstacles[8].x1, obstacles[8].y2-2, obstacles[8].x2, obstacles[8].y2, WHITE);
 8002488:	4b2e      	ldr	r3, [pc, #184]	; (8002544 <moveWall+0x1fc>)
 800248a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800248e:	b298      	uxth	r0, r3
 8002490:	4b2c      	ldr	r3, [pc, #176]	; (8002544 <moveWall+0x1fc>)
 8002492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b02      	subs	r3, #2
 800249a:	b299      	uxth	r1, r3
 800249c:	4b29      	ldr	r3, [pc, #164]	; (8002544 <moveWall+0x1fc>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	4b27      	ldr	r3, [pc, #156]	; (8002544 <moveWall+0x1fc>)
 80024a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80024b0:	9400      	str	r4, [sp, #0]
 80024b2:	f7fe fd47 	bl	8000f44 <lcd_Fill>
		obstacles[8].y1-=2;
 80024b6:	4b23      	ldr	r3, [pc, #140]	; (8002544 <moveWall+0x1fc>)
 80024b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024bc:	3b02      	subs	r3, #2
 80024be:	4a21      	ldr	r2, [pc, #132]	; (8002544 <moveWall+0x1fc>)
 80024c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		obstacles[8].y2-=2;
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <moveWall+0x1fc>)
 80024c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ca:	3b02      	subs	r3, #2
 80024cc:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <moveWall+0x1fc>)
 80024ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		lcd_Fill(obstacles[8].x1, obstacles[8].y1, obstacles[8].x2, obstacles[8].y1+2, MAGENTA);
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <moveWall+0x1fc>)
 80024d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024d8:	b298      	uxth	r0, r3
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <moveWall+0x1fc>)
 80024dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e0:	b299      	uxth	r1, r3
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <moveWall+0x1fc>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	4b16      	ldr	r3, [pc, #88]	; (8002544 <moveWall+0x1fc>)
 80024ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3302      	adds	r3, #2
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80024fa:	9400      	str	r4, [sp, #0]
 80024fc:	f7fe fd22 	bl	8000f44 <lcd_Fill>
		snakeSelfBite(obstacles[7].x1,obstacles[7].y1,obstacles[7].x2,obstacles[7].y1+10, 1);
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <moveWall+0x1fc>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	b218      	sxth	r0, r3
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <moveWall+0x1fc>)
 8002508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250a:	b219      	sxth	r1, r3
 800250c:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <moveWall+0x1fc>)
 800250e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002510:	b21a      	sxth	r2, r3
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <moveWall+0x1fc>)
 8002514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002516:	b29b      	uxth	r3, r3
 8002518:	330a      	adds	r3, #10
 800251a:	b29b      	uxth	r3, r3
 800251c:	b21b      	sxth	r3, r3
 800251e:	2401      	movs	r4, #1
 8002520:	9400      	str	r4, [sp, #0]
 8002522:	f7ff fecf 	bl	80022c4 <snakeSelfBite>
		if (obstacles[8].y1 <= y_min) flag2 = 1;
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <moveWall+0x1fc>)
 8002528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800252c:	4a07      	ldr	r2, [pc, #28]	; (800254c <moveWall+0x204>)
 800252e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002532:	4293      	cmp	r3, r2
 8002534:	dc64      	bgt.n	8002600 <moveWall+0x2b8>
 8002536:	4b04      	ldr	r3, [pc, #16]	; (8002548 <moveWall+0x200>)
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
		lcd_Fill(obstacles[8].x1, obstacles[8].y2-2, obstacles[8].x2, obstacles[8].y2, MAGENTA);
		snakeSelfBite(obstacles[7].x1,obstacles[7].y2-10,obstacles[7].x2,obstacles[7].y2, 1);
		if (obstacles[8].y2 >= 310) flag2 = 0;
	}

}
 800253c:	e060      	b.n	8002600 <moveWall+0x2b8>
 800253e:	bf00      	nop
 8002540:	2000015a 	.word	0x2000015a
 8002544:	2000002c 	.word	0x2000002c
 8002548:	2000015b 	.word	0x2000015b
 800254c:	20000016 	.word	0x20000016
		lcd_Fill(obstacles[8].x1, obstacles[8].y1, obstacles[8].x2, obstacles[8].y1+2, WHITE);
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <moveWall+0x2c0>)
 8002552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002556:	b298      	uxth	r0, r3
 8002558:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <moveWall+0x2c0>)
 800255a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255e:	b299      	uxth	r1, r3
 8002560:	4b29      	ldr	r3, [pc, #164]	; (8002608 <moveWall+0x2c0>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	b29a      	uxth	r2, r3
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <moveWall+0x2c0>)
 800256a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800256e:	b29b      	uxth	r3, r3
 8002570:	3302      	adds	r3, #2
 8002572:	b29b      	uxth	r3, r3
 8002574:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002578:	9400      	str	r4, [sp, #0]
 800257a:	f7fe fce3 	bl	8000f44 <lcd_Fill>
		obstacles[8].y1+=2;
 800257e:	4b22      	ldr	r3, [pc, #136]	; (8002608 <moveWall+0x2c0>)
 8002580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002584:	3302      	adds	r3, #2
 8002586:	4a20      	ldr	r2, [pc, #128]	; (8002608 <moveWall+0x2c0>)
 8002588:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		obstacles[8].y2+=2;
 800258c:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <moveWall+0x2c0>)
 800258e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002592:	3302      	adds	r3, #2
 8002594:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <moveWall+0x2c0>)
 8002596:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		lcd_Fill(obstacles[8].x1, obstacles[8].y2-2, obstacles[8].x2, obstacles[8].y2, MAGENTA);
 800259a:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <moveWall+0x2c0>)
 800259c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a0:	b298      	uxth	r0, r3
 80025a2:	4b19      	ldr	r3, [pc, #100]	; (8002608 <moveWall+0x2c0>)
 80025a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b02      	subs	r3, #2
 80025ac:	b299      	uxth	r1, r3
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <moveWall+0x2c0>)
 80025b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <moveWall+0x2c0>)
 80025b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025bc:	b29b      	uxth	r3, r3
 80025be:	f64f 041f 	movw	r4, #63519	; 0xf81f
 80025c2:	9400      	str	r4, [sp, #0]
 80025c4:	f7fe fcbe 	bl	8000f44 <lcd_Fill>
		snakeSelfBite(obstacles[7].x1,obstacles[7].y2-10,obstacles[7].x2,obstacles[7].y2, 1);
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <moveWall+0x2c0>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	b218      	sxth	r0, r3
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <moveWall+0x2c0>)
 80025d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b0a      	subs	r3, #10
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	b219      	sxth	r1, r3
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <moveWall+0x2c0>)
 80025dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025de:	b21a      	sxth	r2, r3
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <moveWall+0x2c0>)
 80025e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025e4:	b21b      	sxth	r3, r3
 80025e6:	2401      	movs	r4, #1
 80025e8:	9400      	str	r4, [sp, #0]
 80025ea:	f7ff fe6b 	bl	80022c4 <snakeSelfBite>
		if (obstacles[8].y2 >= 310) flag2 = 0;
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <moveWall+0x2c0>)
 80025f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025f4:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80025f8:	db02      	blt.n	8002600 <moveWall+0x2b8>
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <moveWall+0x2c4>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
}
 8002600:	bf00      	nop
 8002602:	3704      	adds	r7, #4
 8002604:	46bd      	mov	sp, r7
 8002606:	bd90      	pop	{r4, r7, pc}
 8002608:	2000002c 	.word	0x2000002c
 800260c:	2000015b 	.word	0x2000015b

08002610 <checkCollision>:

uint8_t checkCollision() {
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
	for (int8_t i = 0; i < 9; ++i) {
 8002616:	2300      	movs	r3, #0
 8002618:	71fb      	strb	r3, [r7, #7]
 800261a:	e09a      	b.n	8002752 <checkCollision+0x142>
		if (x1 >= obstacles[i].x1 && x1 <= obstacles[i].x2) {
 800261c:	4b53      	ldr	r3, [pc, #332]	; (800276c <checkCollision+0x15c>)
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	4619      	mov	r1, r3
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	4a52      	ldr	r2, [pc, #328]	; (8002770 <checkCollision+0x160>)
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	4413      	add	r3, r2
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4299      	cmp	r1, r3
 8002630:	db3f      	blt.n	80026b2 <checkCollision+0xa2>
 8002632:	4b4e      	ldr	r3, [pc, #312]	; (800276c <checkCollision+0x15c>)
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	4619      	mov	r1, r3
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	4a4c      	ldr	r2, [pc, #304]	; (8002770 <checkCollision+0x160>)
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	4413      	add	r3, r2
 8002642:	3308      	adds	r3, #8
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4299      	cmp	r1, r3
 8002648:	dc33      	bgt.n	80026b2 <checkCollision+0xa2>
			if (y1 >= obstacles[i].y1 && y1 <= obstacles[i].y2) {
 800264a:	4b4a      	ldr	r3, [pc, #296]	; (8002774 <checkCollision+0x164>)
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	4619      	mov	r1, r3
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	4a46      	ldr	r2, [pc, #280]	; (8002770 <checkCollision+0x160>)
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	4413      	add	r3, r2
 800265a:	3304      	adds	r3, #4
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4299      	cmp	r1, r3
 8002660:	db0d      	blt.n	800267e <checkCollision+0x6e>
 8002662:	4b44      	ldr	r3, [pc, #272]	; (8002774 <checkCollision+0x164>)
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	4619      	mov	r1, r3
 8002668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266c:	4a40      	ldr	r2, [pc, #256]	; (8002770 <checkCollision+0x160>)
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	4413      	add	r3, r2
 8002672:	330c      	adds	r3, #12
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4299      	cmp	r1, r3
 8002678:	dc01      	bgt.n	800267e <checkCollision+0x6e>

				return 1;
 800267a:	2301      	movs	r3, #1
 800267c:	e06f      	b.n	800275e <checkCollision+0x14e>
			} else if (y2 >= obstacles[i].y1 && y2 <= obstacles[i].y2) {
 800267e:	4b3e      	ldr	r3, [pc, #248]	; (8002778 <checkCollision+0x168>)
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	4619      	mov	r1, r3
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	4a39      	ldr	r2, [pc, #228]	; (8002770 <checkCollision+0x160>)
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	4413      	add	r3, r2
 800268e:	3304      	adds	r3, #4
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4299      	cmp	r1, r3
 8002694:	db58      	blt.n	8002748 <checkCollision+0x138>
 8002696:	4b38      	ldr	r3, [pc, #224]	; (8002778 <checkCollision+0x168>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	4a33      	ldr	r2, [pc, #204]	; (8002770 <checkCollision+0x160>)
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	4413      	add	r3, r2
 80026a6:	330c      	adds	r3, #12
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4299      	cmp	r1, r3
 80026ac:	dc4c      	bgt.n	8002748 <checkCollision+0x138>

				return 1;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e055      	b.n	800275e <checkCollision+0x14e>
			}
		} else if (x2 >= obstacles[i].x1 && x2 <= obstacles[i].x2) {
 80026b2:	4b32      	ldr	r3, [pc, #200]	; (800277c <checkCollision+0x16c>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	4619      	mov	r1, r3
 80026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026bc:	4a2c      	ldr	r2, [pc, #176]	; (8002770 <checkCollision+0x160>)
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	4413      	add	r3, r2
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4299      	cmp	r1, r3
 80026c6:	db40      	blt.n	800274a <checkCollision+0x13a>
 80026c8:	4b2c      	ldr	r3, [pc, #176]	; (800277c <checkCollision+0x16c>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	4a27      	ldr	r2, [pc, #156]	; (8002770 <checkCollision+0x160>)
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	4413      	add	r3, r2
 80026d8:	3308      	adds	r3, #8
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4299      	cmp	r1, r3
 80026de:	dc34      	bgt.n	800274a <checkCollision+0x13a>
			if (y1 >= obstacles[i].y1 && y1 <= obstacles[i].y2) {
 80026e0:	4b24      	ldr	r3, [pc, #144]	; (8002774 <checkCollision+0x164>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	4619      	mov	r1, r3
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	4a21      	ldr	r2, [pc, #132]	; (8002770 <checkCollision+0x160>)
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	4413      	add	r3, r2
 80026f0:	3304      	adds	r3, #4
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4299      	cmp	r1, r3
 80026f6:	db0d      	blt.n	8002714 <checkCollision+0x104>
 80026f8:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <checkCollision+0x164>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <checkCollision+0x160>)
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	4413      	add	r3, r2
 8002708:	330c      	adds	r3, #12
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4299      	cmp	r1, r3
 800270e:	dc01      	bgt.n	8002714 <checkCollision+0x104>

				return 1;
 8002710:	2301      	movs	r3, #1
 8002712:	e024      	b.n	800275e <checkCollision+0x14e>
			} else if (y2 >= obstacles[i].y1 && y2 <= obstacles[i].y2) {
 8002714:	4b18      	ldr	r3, [pc, #96]	; (8002778 <checkCollision+0x168>)
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	4619      	mov	r1, r3
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	4a14      	ldr	r2, [pc, #80]	; (8002770 <checkCollision+0x160>)
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	4413      	add	r3, r2
 8002724:	3304      	adds	r3, #4
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4299      	cmp	r1, r3
 800272a:	db0e      	blt.n	800274a <checkCollision+0x13a>
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <checkCollision+0x168>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <checkCollision+0x160>)
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	4413      	add	r3, r2
 800273c:	330c      	adds	r3, #12
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4299      	cmp	r1, r3
 8002742:	dc02      	bgt.n	800274a <checkCollision+0x13a>

				return 1;
 8002744:	2301      	movs	r3, #1
 8002746:	e00a      	b.n	800275e <checkCollision+0x14e>
			if (y1 >= obstacles[i].y1 && y1 <= obstacles[i].y2) {
 8002748:	bf00      	nop
	for (int8_t i = 0; i < 9; ++i) {
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	3301      	adds	r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	71fb      	strb	r3, [r7, #7]
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b08      	cmp	r3, #8
 8002758:	f77f af60 	ble.w	800261c <checkCollision+0xc>
			}
		}
	}
	return 0;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000018 	.word	0x20000018
 8002770:	2000002c 	.word	0x2000002c
 8002774:	2000001a 	.word	0x2000001a
 8002778:	2000001e 	.word	0x2000001e
 800277c:	2000001c 	.word	0x2000001c

08002780 <delete_path>:
void delete_path() {
 8002780:	b5b0      	push	{r4, r5, r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af02      	add	r7, sp, #8
    // Assuming lcd_Fill is a function to clear the specified area on the LCD with white color
    	if (allPath[0].isTail == 0) {
 8002786:	4b81      	ldr	r3, [pc, #516]	; (800298c <delete_path+0x20c>)
 8002788:	785b      	ldrb	r3, [r3, #1]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 808d 	bne.w	80028aa <delete_path+0x12a>
    		//if (allPath[0].currentState == goRight) lcd_Fill(x1,0, x2, y2, RED);
    		if (allPath[0].length >= snakeTailLen) {
 8002790:	4b7e      	ldr	r3, [pc, #504]	; (800298c <delete_path+0x20c>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a7e      	ldr	r2, [pc, #504]	; (8002990 <delete_path+0x210>)
 8002796:	8812      	ldrh	r2, [r2, #0]
 8002798:	4293      	cmp	r3, r2
 800279a:	f2c0 815a 	blt.w	8002a52 <delete_path+0x2d2>
    			if (allPath[0].currentState == goUp) {
 800279e:	4b7b      	ldr	r3, [pc, #492]	; (800298c <delete_path+0x20c>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d11c      	bne.n	80027e0 <delete_path+0x60>
					lcd_Fill(allPath[0].x1, allPath[0].y2-speed, allPath[0].x2, allPath[0].y2, WHITE);
 80027a6:	4b79      	ldr	r3, [pc, #484]	; (800298c <delete_path+0x20c>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	b298      	uxth	r0, r3
 80027ac:	4b77      	ldr	r3, [pc, #476]	; (800298c <delete_path+0x20c>)
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	4b78      	ldr	r3, [pc, #480]	; (8002994 <delete_path+0x214>)
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	b299      	uxth	r1, r3
 80027ba:	4b74      	ldr	r3, [pc, #464]	; (800298c <delete_path+0x20c>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	4b72      	ldr	r3, [pc, #456]	; (800298c <delete_path+0x20c>)
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80027ca:	9400      	str	r4, [sp, #0]
 80027cc:	f7fe fbba 	bl	8000f44 <lcd_Fill>
					allPath[0].y2 -= speed;
 80027d0:	4b6e      	ldr	r3, [pc, #440]	; (800298c <delete_path+0x20c>)
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	4a6f      	ldr	r2, [pc, #444]	; (8002994 <delete_path+0x214>)
 80027d6:	8812      	ldrh	r2, [r2, #0]
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	4a6c      	ldr	r2, [pc, #432]	; (800298c <delete_path+0x20c>)
 80027dc:	6153      	str	r3, [r2, #20]



    	}

}
 80027de:	e138      	b.n	8002a52 <delete_path+0x2d2>
				} else if (allPath[0].currentState == goDown) {
 80027e0:	4b6a      	ldr	r3, [pc, #424]	; (800298c <delete_path+0x20c>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d11d      	bne.n	8002824 <delete_path+0xa4>
					lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x2, allPath[0].y1 + speed, WHITE);
 80027e8:	4b68      	ldr	r3, [pc, #416]	; (800298c <delete_path+0x20c>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	b298      	uxth	r0, r3
 80027ee:	4b67      	ldr	r3, [pc, #412]	; (800298c <delete_path+0x20c>)
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	b299      	uxth	r1, r3
 80027f4:	4b65      	ldr	r3, [pc, #404]	; (800298c <delete_path+0x20c>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	b29c      	uxth	r4, r3
 80027fa:	4b64      	ldr	r3, [pc, #400]	; (800298c <delete_path+0x20c>)
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	b29a      	uxth	r2, r3
 8002800:	4b64      	ldr	r3, [pc, #400]	; (8002994 <delete_path+0x214>)
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	4413      	add	r3, r2
 8002806:	b29b      	uxth	r3, r3
 8002808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800280c:	9200      	str	r2, [sp, #0]
 800280e:	4622      	mov	r2, r4
 8002810:	f7fe fb98 	bl	8000f44 <lcd_Fill>
					allPath[0].y1 += speed;
 8002814:	4b5d      	ldr	r3, [pc, #372]	; (800298c <delete_path+0x20c>)
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	4a5e      	ldr	r2, [pc, #376]	; (8002994 <delete_path+0x214>)
 800281a:	8812      	ldrh	r2, [r2, #0]
 800281c:	4413      	add	r3, r2
 800281e:	4a5b      	ldr	r2, [pc, #364]	; (800298c <delete_path+0x20c>)
 8002820:	6113      	str	r3, [r2, #16]
}
 8002822:	e116      	b.n	8002a52 <delete_path+0x2d2>
				} else if (allPath[0].currentState == goLeft) {
 8002824:	4b59      	ldr	r3, [pc, #356]	; (800298c <delete_path+0x20c>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d11c      	bne.n	8002866 <delete_path+0xe6>
					lcd_Fill(allPath[0].x2-speed, allPath[0].y1, allPath[0].x2, allPath[0].y2, WHITE);
 800282c:	4b57      	ldr	r3, [pc, #348]	; (800298c <delete_path+0x20c>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	b29a      	uxth	r2, r3
 8002832:	4b58      	ldr	r3, [pc, #352]	; (8002994 <delete_path+0x214>)
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	b298      	uxth	r0, r3
 800283a:	4b54      	ldr	r3, [pc, #336]	; (800298c <delete_path+0x20c>)
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	b299      	uxth	r1, r3
 8002840:	4b52      	ldr	r3, [pc, #328]	; (800298c <delete_path+0x20c>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	b29a      	uxth	r2, r3
 8002846:	4b51      	ldr	r3, [pc, #324]	; (800298c <delete_path+0x20c>)
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	b29b      	uxth	r3, r3
 800284c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002850:	9400      	str	r4, [sp, #0]
 8002852:	f7fe fb77 	bl	8000f44 <lcd_Fill>
					allPath[0].x2 -= speed;
 8002856:	4b4d      	ldr	r3, [pc, #308]	; (800298c <delete_path+0x20c>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	4a4e      	ldr	r2, [pc, #312]	; (8002994 <delete_path+0x214>)
 800285c:	8812      	ldrh	r2, [r2, #0]
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	4a4a      	ldr	r2, [pc, #296]	; (800298c <delete_path+0x20c>)
 8002862:	60d3      	str	r3, [r2, #12]
}
 8002864:	e0f5      	b.n	8002a52 <delete_path+0x2d2>
				} else if (allPath[0].currentState == goRight) {
 8002866:	4b49      	ldr	r3, [pc, #292]	; (800298c <delete_path+0x20c>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b03      	cmp	r3, #3
 800286c:	f040 80f1 	bne.w	8002a52 <delete_path+0x2d2>
					lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x1+speed, allPath[0].y2, WHITE);
 8002870:	4b46      	ldr	r3, [pc, #280]	; (800298c <delete_path+0x20c>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	b298      	uxth	r0, r3
 8002876:	4b45      	ldr	r3, [pc, #276]	; (800298c <delete_path+0x20c>)
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	b299      	uxth	r1, r3
 800287c:	4b43      	ldr	r3, [pc, #268]	; (800298c <delete_path+0x20c>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	b29a      	uxth	r2, r3
 8002882:	4b44      	ldr	r3, [pc, #272]	; (8002994 <delete_path+0x214>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	4413      	add	r3, r2
 8002888:	b29a      	uxth	r2, r3
 800288a:	4b40      	ldr	r3, [pc, #256]	; (800298c <delete_path+0x20c>)
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	b29b      	uxth	r3, r3
 8002890:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002894:	9400      	str	r4, [sp, #0]
 8002896:	f7fe fb55 	bl	8000f44 <lcd_Fill>
					allPath[0].x1 += speed;
 800289a:	4b3c      	ldr	r3, [pc, #240]	; (800298c <delete_path+0x20c>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	4a3d      	ldr	r2, [pc, #244]	; (8002994 <delete_path+0x214>)
 80028a0:	8812      	ldrh	r2, [r2, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a39      	ldr	r2, [pc, #228]	; (800298c <delete_path+0x20c>)
 80028a6:	6093      	str	r3, [r2, #8]
}
 80028a8:	e0d3      	b.n	8002a52 <delete_path+0x2d2>
    	} else if (allPath[0].isTail == 1) {
 80028aa:	4b38      	ldr	r3, [pc, #224]	; (800298c <delete_path+0x20c>)
 80028ac:	785b      	ldrb	r3, [r3, #1]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	f040 80cf 	bne.w	8002a52 <delete_path+0x2d2>
    		allPath[0].length -= speed;
 80028b4:	4b35      	ldr	r3, [pc, #212]	; (800298c <delete_path+0x20c>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a36      	ldr	r2, [pc, #216]	; (8002994 <delete_path+0x214>)
 80028ba:	8812      	ldrh	r2, [r2, #0]
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	4a33      	ldr	r2, [pc, #204]	; (800298c <delete_path+0x20c>)
 80028c0:	6053      	str	r3, [r2, #4]
    		if (allPath[0].currentState == goUp) {
 80028c2:	4b32      	ldr	r3, [pc, #200]	; (800298c <delete_path+0x20c>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d11c      	bne.n	8002904 <delete_path+0x184>
				lcd_Fill(allPath[0].x1, allPath[0].y2-speed, allPath[0].x2, allPath[0].y2, WHITE);
 80028ca:	4b30      	ldr	r3, [pc, #192]	; (800298c <delete_path+0x20c>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	b298      	uxth	r0, r3
 80028d0:	4b2e      	ldr	r3, [pc, #184]	; (800298c <delete_path+0x20c>)
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	4b2f      	ldr	r3, [pc, #188]	; (8002994 <delete_path+0x214>)
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	b299      	uxth	r1, r3
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <delete_path+0x20c>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	4b29      	ldr	r3, [pc, #164]	; (800298c <delete_path+0x20c>)
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80028ee:	9400      	str	r4, [sp, #0]
 80028f0:	f7fe fb28 	bl	8000f44 <lcd_Fill>
				allPath[0].y2 -= speed;
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <delete_path+0x20c>)
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	4a26      	ldr	r2, [pc, #152]	; (8002994 <delete_path+0x214>)
 80028fa:	8812      	ldrh	r2, [r2, #0]
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	4a23      	ldr	r2, [pc, #140]	; (800298c <delete_path+0x20c>)
 8002900:	6153      	str	r3, [r2, #20]
 8002902:	e069      	b.n	80029d8 <delete_path+0x258>
			} else if (allPath[0].currentState == goDown) {
 8002904:	4b21      	ldr	r3, [pc, #132]	; (800298c <delete_path+0x20c>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d11d      	bne.n	8002948 <delete_path+0x1c8>
				lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x2, allPath[0].y1 + speed, WHITE);
 800290c:	4b1f      	ldr	r3, [pc, #124]	; (800298c <delete_path+0x20c>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	b298      	uxth	r0, r3
 8002912:	4b1e      	ldr	r3, [pc, #120]	; (800298c <delete_path+0x20c>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	b299      	uxth	r1, r3
 8002918:	4b1c      	ldr	r3, [pc, #112]	; (800298c <delete_path+0x20c>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	b29c      	uxth	r4, r3
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <delete_path+0x20c>)
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	b29a      	uxth	r2, r3
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <delete_path+0x214>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	4413      	add	r3, r2
 800292a:	b29b      	uxth	r3, r3
 800292c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002930:	9200      	str	r2, [sp, #0]
 8002932:	4622      	mov	r2, r4
 8002934:	f7fe fb06 	bl	8000f44 <lcd_Fill>
				allPath[0].y1 += speed;
 8002938:	4b14      	ldr	r3, [pc, #80]	; (800298c <delete_path+0x20c>)
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	4a15      	ldr	r2, [pc, #84]	; (8002994 <delete_path+0x214>)
 800293e:	8812      	ldrh	r2, [r2, #0]
 8002940:	4413      	add	r3, r2
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <delete_path+0x20c>)
 8002944:	6113      	str	r3, [r2, #16]
 8002946:	e047      	b.n	80029d8 <delete_path+0x258>
			} else if (allPath[0].currentState == goLeft) {
 8002948:	4b10      	ldr	r3, [pc, #64]	; (800298c <delete_path+0x20c>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d123      	bne.n	8002998 <delete_path+0x218>
				lcd_Fill(allPath[0].x2-speed, allPath[0].y1, allPath[0].x2, allPath[0].y2, WHITE);
 8002950:	4b0e      	ldr	r3, [pc, #56]	; (800298c <delete_path+0x20c>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	b29a      	uxth	r2, r3
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <delete_path+0x214>)
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	b298      	uxth	r0, r3
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <delete_path+0x20c>)
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	b299      	uxth	r1, r3
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <delete_path+0x20c>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	b29a      	uxth	r2, r3
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <delete_path+0x20c>)
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	b29b      	uxth	r3, r3
 8002970:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002974:	9400      	str	r4, [sp, #0]
 8002976:	f7fe fae5 	bl	8000f44 <lcd_Fill>
				allPath[0].x2 -= speed;
 800297a:	4b04      	ldr	r3, [pc, #16]	; (800298c <delete_path+0x20c>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	4a05      	ldr	r2, [pc, #20]	; (8002994 <delete_path+0x214>)
 8002980:	8812      	ldrh	r2, [r2, #0]
 8002982:	1a9b      	subs	r3, r3, r2
 8002984:	4a01      	ldr	r2, [pc, #4]	; (800298c <delete_path+0x20c>)
 8002986:	60d3      	str	r3, [r2, #12]
 8002988:	e026      	b.n	80029d8 <delete_path+0x258>
 800298a:	bf00      	nop
 800298c:	20000334 	.word	0x20000334
 8002990:	20000024 	.word	0x20000024
 8002994:	20000026 	.word	0x20000026
			} else if (allPath[0].currentState == goRight) {
 8002998:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <delete_path+0x2dc>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d11b      	bne.n	80029d8 <delete_path+0x258>
				lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x1+speed, allPath[0].y2, WHITE);
 80029a0:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <delete_path+0x2dc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	b298      	uxth	r0, r3
 80029a6:	4b2d      	ldr	r3, [pc, #180]	; (8002a5c <delete_path+0x2dc>)
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	b299      	uxth	r1, r3
 80029ac:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <delete_path+0x2dc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	4b2b      	ldr	r3, [pc, #172]	; (8002a60 <delete_path+0x2e0>)
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <delete_path+0x2dc>)
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80029c4:	9400      	str	r4, [sp, #0]
 80029c6:	f7fe fabd 	bl	8000f44 <lcd_Fill>
				allPath[0].x1 += speed;
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <delete_path+0x2dc>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	4a24      	ldr	r2, [pc, #144]	; (8002a60 <delete_path+0x2e0>)
 80029d0:	8812      	ldrh	r2, [r2, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	4a21      	ldr	r2, [pc, #132]	; (8002a5c <delete_path+0x2dc>)
 80029d6:	6093      	str	r3, [r2, #8]
    		if (flag == 0) {
 80029d8:	4b22      	ldr	r3, [pc, #136]	; (8002a64 <delete_path+0x2e4>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d138      	bne.n	8002a52 <delete_path+0x2d2>
				if (allPath[0].length == 0 || allPath[0].length < 0) {
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <delete_path+0x2dc>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <delete_path+0x270>
 80029e8:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <delete_path+0x2dc>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	da30      	bge.n	8002a52 <delete_path+0x2d2>
						flag = 1;
 80029f0:	4b1c      	ldr	r3, [pc, #112]	; (8002a64 <delete_path+0x2e4>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
						delete_path();
 80029f6:	f7ff fec3 	bl	8002780 <delete_path>
						flag = 0;
 80029fa:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <delete_path+0x2e4>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
					for (uint8_t i = 0; i < currentIndex - 1; i++) {
 8002a00:	2300      	movs	r3, #0
 8002a02:	71fb      	strb	r3, [r7, #7]
 8002a04:	e019      	b.n	8002a3a <delete_path+0x2ba>
						allPath[i] = allPath[i + 1];
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	79f9      	ldrb	r1, [r7, #7]
 8002a0c:	4813      	ldr	r0, [pc, #76]	; (8002a5c <delete_path+0x2dc>)
 8002a0e:	460b      	mov	r3, r1
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	440b      	add	r3, r1
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4418      	add	r0, r3
 8002a18:	4910      	ldr	r1, [pc, #64]	; (8002a5c <delete_path+0x2dc>)
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	4604      	mov	r4, r0
 8002a26:	461d      	mov	r5, r3
 8002a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a2c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a30:	e884 0003 	stmia.w	r4, {r0, r1}
					for (uint8_t i = 0; i < currentIndex - 1; i++) {
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	3301      	adds	r3, #1
 8002a38:	71fb      	strb	r3, [r7, #7]
 8002a3a:	79fa      	ldrb	r2, [r7, #7]
 8002a3c:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <delete_path+0x2e8>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	429a      	cmp	r2, r3
 8002a44:	dbdf      	blt.n	8002a06 <delete_path+0x286>
					currentIndex--;
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <delete_path+0x2e8>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <delete_path+0x2e8>)
 8002a50:	701a      	strb	r2, [r3, #0]
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bdb0      	pop	{r4, r5, r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000334 	.word	0x20000334
 8002a60:	20000026 	.word	0x20000026
 8002a64:	20000159 	.word	0x20000159
 8002a68:	20000158 	.word	0x20000158

08002a6c <right>:
void right() {
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af02      	add	r7, sp, #8

	if (prevState == goRight) {
 8002a72:	4b75      	ldr	r3, [pc, #468]	; (8002c48 <right+0x1dc>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d137      	bne.n	8002aea <right+0x7e>
				if (allPath[currentIndex-1].length <= snakeTailLen) {
 8002a7a:	4b74      	ldr	r3, [pc, #464]	; (8002c4c <right+0x1e0>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	1e5a      	subs	r2, r3, #1
 8002a80:	4973      	ldr	r1, [pc, #460]	; (8002c50 <right+0x1e4>)
 8002a82:	4613      	mov	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a70      	ldr	r2, [pc, #448]	; (8002c54 <right+0x1e8>)
 8002a92:	8812      	ldrh	r2, [r2, #0]
 8002a94:	4293      	cmp	r3, r2
 8002a96:	dc19      	bgt.n	8002acc <right+0x60>
					allPath[currentIndex-1].length +=speed;
 8002a98:	4b6c      	ldr	r3, [pc, #432]	; (8002c4c <right+0x1e0>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	1e5a      	subs	r2, r3, #1
 8002a9e:	496c      	ldr	r1, [pc, #432]	; (8002c50 <right+0x1e4>)
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3304      	adds	r3, #4
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a6a      	ldr	r2, [pc, #424]	; (8002c58 <right+0x1ec>)
 8002ab0:	8812      	ldrh	r2, [r2, #0]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4a65      	ldr	r2, [pc, #404]	; (8002c4c <right+0x1e0>)
 8002ab6:	7812      	ldrb	r2, [r2, #0]
 8002ab8:	3a01      	subs	r2, #1
 8002aba:	4419      	add	r1, r3
 8002abc:	4864      	ldr	r0, [pc, #400]	; (8002c50 <right+0x1e4>)
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4403      	add	r3, r0
 8002ac8:	3304      	adds	r3, #4
 8002aca:	6019      	str	r1, [r3, #0]
				}
				allPath[currentIndex-1].x2 = x2;
 8002acc:	4b63      	ldr	r3, [pc, #396]	; (8002c5c <right+0x1f0>)
 8002ace:	8819      	ldrh	r1, [r3, #0]
 8002ad0:	4b5e      	ldr	r3, [pc, #376]	; (8002c4c <right+0x1e0>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	1e5a      	subs	r2, r3, #1
 8002ad6:	4608      	mov	r0, r1
 8002ad8:	495d      	ldr	r1, [pc, #372]	; (8002c50 <right+0x1e4>)
 8002ada:	4613      	mov	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	330c      	adds	r3, #12
 8002ae6:	6018      	str	r0, [r3, #0]
 8002ae8:	e089      	b.n	8002bfe <right+0x192>
			} else {
				if (currentIndex == 0) allPath[0].isTail = 0;
 8002aea:	4b58      	ldr	r3, [pc, #352]	; (8002c4c <right+0x1e0>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d103      	bne.n	8002afa <right+0x8e>
 8002af2:	4b57      	ldr	r3, [pc, #348]	; (8002c50 <right+0x1e4>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	705a      	strb	r2, [r3, #1]
 8002af8:	e00b      	b.n	8002b12 <right+0xa6>
				else allPath[currentIndex-1].isTail = 1;
 8002afa:	4b54      	ldr	r3, [pc, #336]	; (8002c4c <right+0x1e0>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	1e5a      	subs	r2, r3, #1
 8002b00:	4953      	ldr	r1, [pc, #332]	; (8002c50 <right+0x1e4>)
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
				allPath[currentIndex].isTail = 0;
 8002b12:	4b4e      	ldr	r3, [pc, #312]	; (8002c4c <right+0x1e0>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	4619      	mov	r1, r3
 8002b18:	4a4d      	ldr	r2, [pc, #308]	; (8002c50 <right+0x1e4>)
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	440b      	add	r3, r1
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	3301      	adds	r3, #1
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
				if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 8002b2a:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <right+0x1e8>)
 8002b2c:	881a      	ldrh	r2, [r3, #0]
 8002b2e:	4b4c      	ldr	r3, [pc, #304]	; (8002c60 <right+0x1f4>)
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d10e      	bne.n	8002b54 <right+0xe8>
 8002b36:	4b47      	ldr	r3, [pc, #284]	; (8002c54 <right+0x1e8>)
 8002b38:	881a      	ldrh	r2, [r3, #0]
 8002b3a:	4b44      	ldr	r3, [pc, #272]	; (8002c4c <right+0x1e0>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	4a43      	ldr	r2, [pc, #268]	; (8002c50 <right+0x1e4>)
 8002b44:	460b      	mov	r3, r1
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	440b      	add	r3, r1
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3304      	adds	r3, #4
 8002b50:	6018      	str	r0, [r3, #0]
 8002b52:	e00b      	b.n	8002b6c <right+0x100>
				else allPath[currentIndex].length = 0;
 8002b54:	4b3d      	ldr	r3, [pc, #244]	; (8002c4c <right+0x1e0>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4a3d      	ldr	r2, [pc, #244]	; (8002c50 <right+0x1e4>)
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	440b      	add	r3, r1
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	3304      	adds	r3, #4
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
				allPath[currentIndex].currentState = goRight;
 8002b6c:	4b37      	ldr	r3, [pc, #220]	; (8002c4c <right+0x1e0>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	4619      	mov	r1, r3
 8002b72:	4a37      	ldr	r2, [pc, #220]	; (8002c50 <right+0x1e4>)
 8002b74:	460b      	mov	r3, r1
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	440b      	add	r3, r1
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	2203      	movs	r2, #3
 8002b80:	701a      	strb	r2, [r3, #0]
				allPath[currentIndex].x1 = x1;
 8002b82:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <right+0x1f8>)
 8002b84:	881a      	ldrh	r2, [r3, #0]
 8002b86:	4b31      	ldr	r3, [pc, #196]	; (8002c4c <right+0x1e0>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4a30      	ldr	r2, [pc, #192]	; (8002c50 <right+0x1e4>)
 8002b90:	460b      	mov	r3, r1
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	440b      	add	r3, r1
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	6018      	str	r0, [r3, #0]
				allPath[currentIndex].x2 = x2;
 8002b9e:	4b2f      	ldr	r3, [pc, #188]	; (8002c5c <right+0x1f0>)
 8002ba0:	881a      	ldrh	r2, [r3, #0]
 8002ba2:	4b2a      	ldr	r3, [pc, #168]	; (8002c4c <right+0x1e0>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4a29      	ldr	r2, [pc, #164]	; (8002c50 <right+0x1e4>)
 8002bac:	460b      	mov	r3, r1
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	440b      	add	r3, r1
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	330c      	adds	r3, #12
 8002bb8:	6018      	str	r0, [r3, #0]
				allPath[currentIndex].y1 = y1;
 8002bba:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <right+0x1fc>)
 8002bbc:	881a      	ldrh	r2, [r3, #0]
 8002bbe:	4b23      	ldr	r3, [pc, #140]	; (8002c4c <right+0x1e0>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4a22      	ldr	r2, [pc, #136]	; (8002c50 <right+0x1e4>)
 8002bc8:	460b      	mov	r3, r1
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	440b      	add	r3, r1
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3310      	adds	r3, #16
 8002bd4:	6018      	str	r0, [r3, #0]
				allPath[currentIndex].y2 = y2;
 8002bd6:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <right+0x200>)
 8002bd8:	881a      	ldrh	r2, [r3, #0]
 8002bda:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <right+0x1e0>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	4619      	mov	r1, r3
 8002be0:	4610      	mov	r0, r2
 8002be2:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <right+0x1e4>)
 8002be4:	460b      	mov	r3, r1
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	440b      	add	r3, r1
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	3314      	adds	r3, #20
 8002bf0:	6018      	str	r0, [r3, #0]

				currentIndex++;
 8002bf2:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <right+0x1e0>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <right+0x1e0>)
 8002bfc:	701a      	strb	r2, [r3, #0]
			}
			prevState = goRight;
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <right+0x1dc>)
 8002c00:	2203      	movs	r2, #3
 8002c02:	701a      	strb	r2, [r3, #0]
			//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;
			x1 += speed;
 8002c04:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <right+0x1f8>)
 8002c06:	881a      	ldrh	r2, [r3, #0]
 8002c08:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <right+0x1ec>)
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <right+0x1f8>)
 8002c12:	801a      	strh	r2, [r3, #0]
			x2 += speed;
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <right+0x1f0>)
 8002c16:	881a      	ldrh	r2, [r3, #0]
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <right+0x1ec>)
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	4b0e      	ldr	r3, [pc, #56]	; (8002c5c <right+0x1f0>)
 8002c22:	801a      	strh	r2, [r3, #0]


			lcd_Fill(x1, y1, x2, y2, BLUE);
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <right+0x1f8>)
 8002c26:	8818      	ldrh	r0, [r3, #0]
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <right+0x1fc>)
 8002c2a:	8819      	ldrh	r1, [r3, #0]
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <right+0x1f0>)
 8002c2e:	881a      	ldrh	r2, [r3, #0]
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <right+0x200>)
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	241f      	movs	r4, #31
 8002c36:	9400      	str	r4, [sp, #0]
 8002c38:	f7fe f984 	bl	8000f44 <lcd_Fill>
			delete_path();
 8002c3c:	f7ff fda0 	bl	8002780 <delete_path>
}
 8002c40:	bf00      	nop
 8002c42:	3704      	adds	r7, #4
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd90      	pop	{r4, r7, pc}
 8002c48:	20000021 	.word	0x20000021
 8002c4c:	20000158 	.word	0x20000158
 8002c50:	20000334 	.word	0x20000334
 8002c54:	20000024 	.word	0x20000024
 8002c58:	20000026 	.word	0x20000026
 8002c5c:	2000001c 	.word	0x2000001c
 8002c60:	20000022 	.word	0x20000022
 8002c64:	20000018 	.word	0x20000018
 8002c68:	2000001a 	.word	0x2000001a
 8002c6c:	2000001e 	.word	0x2000001e

08002c70 <left>:
void left() {
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af02      	add	r7, sp, #8
	if (prevState == goLeft) {
 8002c76:	4b75      	ldr	r3, [pc, #468]	; (8002e4c <left+0x1dc>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d137      	bne.n	8002cee <left+0x7e>
		if (allPath[currentIndex-1].length <= snakeTailLen) {
 8002c7e:	4b74      	ldr	r3, [pc, #464]	; (8002e50 <left+0x1e0>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	1e5a      	subs	r2, r3, #1
 8002c84:	4973      	ldr	r1, [pc, #460]	; (8002e54 <left+0x1e4>)
 8002c86:	4613      	mov	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	3304      	adds	r3, #4
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a70      	ldr	r2, [pc, #448]	; (8002e58 <left+0x1e8>)
 8002c96:	8812      	ldrh	r2, [r2, #0]
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	dc19      	bgt.n	8002cd0 <left+0x60>

							allPath[currentIndex-1].length +=speed;
 8002c9c:	4b6c      	ldr	r3, [pc, #432]	; (8002e50 <left+0x1e0>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	1e5a      	subs	r2, r3, #1
 8002ca2:	496c      	ldr	r1, [pc, #432]	; (8002e54 <left+0x1e4>)
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	3304      	adds	r3, #4
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a6a      	ldr	r2, [pc, #424]	; (8002e5c <left+0x1ec>)
 8002cb4:	8812      	ldrh	r2, [r2, #0]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4a65      	ldr	r2, [pc, #404]	; (8002e50 <left+0x1e0>)
 8002cba:	7812      	ldrb	r2, [r2, #0]
 8002cbc:	3a01      	subs	r2, #1
 8002cbe:	4419      	add	r1, r3
 8002cc0:	4864      	ldr	r0, [pc, #400]	; (8002e54 <left+0x1e4>)
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4413      	add	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4403      	add	r3, r0
 8002ccc:	3304      	adds	r3, #4
 8002cce:	6019      	str	r1, [r3, #0]
						}

			allPath[currentIndex-1].x1 = x1;
 8002cd0:	4b63      	ldr	r3, [pc, #396]	; (8002e60 <left+0x1f0>)
 8002cd2:	8819      	ldrh	r1, [r3, #0]
 8002cd4:	4b5e      	ldr	r3, [pc, #376]	; (8002e50 <left+0x1e0>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	1e5a      	subs	r2, r3, #1
 8002cda:	4608      	mov	r0, r1
 8002cdc:	495d      	ldr	r1, [pc, #372]	; (8002e54 <left+0x1e4>)
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3308      	adds	r3, #8
 8002cea:	6018      	str	r0, [r3, #0]
 8002cec:	e089      	b.n	8002e02 <left+0x192>

		} else {
			if (currentIndex == 0) allPath[0].isTail = 0;
 8002cee:	4b58      	ldr	r3, [pc, #352]	; (8002e50 <left+0x1e0>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d103      	bne.n	8002cfe <left+0x8e>
 8002cf6:	4b57      	ldr	r3, [pc, #348]	; (8002e54 <left+0x1e4>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	705a      	strb	r2, [r3, #1]
 8002cfc:	e00b      	b.n	8002d16 <left+0xa6>
			else allPath[currentIndex-1].isTail = 1;
 8002cfe:	4b54      	ldr	r3, [pc, #336]	; (8002e50 <left+0x1e0>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	1e5a      	subs	r2, r3, #1
 8002d04:	4953      	ldr	r1, [pc, #332]	; (8002e54 <left+0x1e4>)
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	440b      	add	r3, r1
 8002d10:	3301      	adds	r3, #1
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
			allPath[currentIndex].isTail = 0;
 8002d16:	4b4e      	ldr	r3, [pc, #312]	; (8002e50 <left+0x1e0>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4a4d      	ldr	r2, [pc, #308]	; (8002e54 <left+0x1e4>)
 8002d1e:	460b      	mov	r3, r1
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	440b      	add	r3, r1
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4413      	add	r3, r2
 8002d28:	3301      	adds	r3, #1
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
			if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 8002d2e:	4b4a      	ldr	r3, [pc, #296]	; (8002e58 <left+0x1e8>)
 8002d30:	881a      	ldrh	r2, [r3, #0]
 8002d32:	4b4c      	ldr	r3, [pc, #304]	; (8002e64 <left+0x1f4>)
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d10e      	bne.n	8002d58 <left+0xe8>
 8002d3a:	4b47      	ldr	r3, [pc, #284]	; (8002e58 <left+0x1e8>)
 8002d3c:	881a      	ldrh	r2, [r3, #0]
 8002d3e:	4b44      	ldr	r3, [pc, #272]	; (8002e50 <left+0x1e0>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	4619      	mov	r1, r3
 8002d44:	4610      	mov	r0, r2
 8002d46:	4a43      	ldr	r2, [pc, #268]	; (8002e54 <left+0x1e4>)
 8002d48:	460b      	mov	r3, r1
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	440b      	add	r3, r1
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	3304      	adds	r3, #4
 8002d54:	6018      	str	r0, [r3, #0]
 8002d56:	e00b      	b.n	8002d70 <left+0x100>
			else allPath[currentIndex].length = 0;
 8002d58:	4b3d      	ldr	r3, [pc, #244]	; (8002e50 <left+0x1e0>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4a3d      	ldr	r2, [pc, #244]	; (8002e54 <left+0x1e4>)
 8002d60:	460b      	mov	r3, r1
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	440b      	add	r3, r1
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
			allPath[currentIndex].currentState = goLeft;
 8002d70:	4b37      	ldr	r3, [pc, #220]	; (8002e50 <left+0x1e0>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4619      	mov	r1, r3
 8002d76:	4a37      	ldr	r2, [pc, #220]	; (8002e54 <left+0x1e4>)
 8002d78:	460b      	mov	r3, r1
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	440b      	add	r3, r1
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	2202      	movs	r2, #2
 8002d84:	701a      	strb	r2, [r3, #0]
			allPath[currentIndex].x1 = x1;
 8002d86:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <left+0x1f0>)
 8002d88:	881a      	ldrh	r2, [r3, #0]
 8002d8a:	4b31      	ldr	r3, [pc, #196]	; (8002e50 <left+0x1e0>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4610      	mov	r0, r2
 8002d92:	4a30      	ldr	r2, [pc, #192]	; (8002e54 <left+0x1e4>)
 8002d94:	460b      	mov	r3, r1
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	440b      	add	r3, r1
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3308      	adds	r3, #8
 8002da0:	6018      	str	r0, [r3, #0]
			allPath[currentIndex].x2 = x2;
 8002da2:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <left+0x1f8>)
 8002da4:	881a      	ldrh	r2, [r3, #0]
 8002da6:	4b2a      	ldr	r3, [pc, #168]	; (8002e50 <left+0x1e0>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	4619      	mov	r1, r3
 8002dac:	4610      	mov	r0, r2
 8002dae:	4a29      	ldr	r2, [pc, #164]	; (8002e54 <left+0x1e4>)
 8002db0:	460b      	mov	r3, r1
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	440b      	add	r3, r1
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4413      	add	r3, r2
 8002dba:	330c      	adds	r3, #12
 8002dbc:	6018      	str	r0, [r3, #0]
			allPath[currentIndex].y1 = y1;
 8002dbe:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <left+0x1fc>)
 8002dc0:	881a      	ldrh	r2, [r3, #0]
 8002dc2:	4b23      	ldr	r3, [pc, #140]	; (8002e50 <left+0x1e0>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <left+0x1e4>)
 8002dcc:	460b      	mov	r3, r1
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	440b      	add	r3, r1
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3310      	adds	r3, #16
 8002dd8:	6018      	str	r0, [r3, #0]
			allPath[currentIndex].y2 = y2;
 8002dda:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <left+0x200>)
 8002ddc:	881a      	ldrh	r2, [r3, #0]
 8002dde:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <left+0x1e0>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	4619      	mov	r1, r3
 8002de4:	4610      	mov	r0, r2
 8002de6:	4a1b      	ldr	r2, [pc, #108]	; (8002e54 <left+0x1e4>)
 8002de8:	460b      	mov	r3, r1
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	440b      	add	r3, r1
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	3314      	adds	r3, #20
 8002df4:	6018      	str	r0, [r3, #0]
			currentIndex++;
 8002df6:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <left+0x1e0>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <left+0x1e0>)
 8002e00:	701a      	strb	r2, [r3, #0]
		}
		prevState = goLeft;
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <left+0x1dc>)
 8002e04:	2202      	movs	r2, #2
 8002e06:	701a      	strb	r2, [r3, #0]
		//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;
		x1 -= speed;
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <left+0x1f0>)
 8002e0a:	881a      	ldrh	r2, [r3, #0]
 8002e0c:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <left+0x1ec>)
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <left+0x1f0>)
 8002e16:	801a      	strh	r2, [r3, #0]
		x2 -= speed;
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <left+0x1f8>)
 8002e1a:	881a      	ldrh	r2, [r3, #0]
 8002e1c:	4b0f      	ldr	r3, [pc, #60]	; (8002e5c <left+0x1ec>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <left+0x1f8>)
 8002e26:	801a      	strh	r2, [r3, #0]


		lcd_Fill(x1, y1, x2, y2, BLUE);
 8002e28:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <left+0x1f0>)
 8002e2a:	8818      	ldrh	r0, [r3, #0]
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <left+0x1fc>)
 8002e2e:	8819      	ldrh	r1, [r3, #0]
 8002e30:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <left+0x1f8>)
 8002e32:	881a      	ldrh	r2, [r3, #0]
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <left+0x200>)
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	241f      	movs	r4, #31
 8002e3a:	9400      	str	r4, [sp, #0]
 8002e3c:	f7fe f882 	bl	8000f44 <lcd_Fill>
		delete_path();
 8002e40:	f7ff fc9e 	bl	8002780 <delete_path>

}
 8002e44:	bf00      	nop
 8002e46:	3704      	adds	r7, #4
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd90      	pop	{r4, r7, pc}
 8002e4c:	20000021 	.word	0x20000021
 8002e50:	20000158 	.word	0x20000158
 8002e54:	20000334 	.word	0x20000334
 8002e58:	20000024 	.word	0x20000024
 8002e5c:	20000026 	.word	0x20000026
 8002e60:	20000018 	.word	0x20000018
 8002e64:	20000022 	.word	0x20000022
 8002e68:	2000001c 	.word	0x2000001c
 8002e6c:	2000001a 	.word	0x2000001a
 8002e70:	2000001e 	.word	0x2000001e

08002e74 <up>:


void up() {
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af02      	add	r7, sp, #8

	if (prevState == goUp) {
 8002e7a:	4b7b      	ldr	r3, [pc, #492]	; (8003068 <up+0x1f4>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d143      	bne.n	8002f0a <up+0x96>
		if (allPath[currentIndex-1].length <= snakeTailLen) {
 8002e82:	4b7a      	ldr	r3, [pc, #488]	; (800306c <up+0x1f8>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	1e5a      	subs	r2, r3, #1
 8002e88:	4979      	ldr	r1, [pc, #484]	; (8003070 <up+0x1fc>)
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	3304      	adds	r3, #4
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a76      	ldr	r2, [pc, #472]	; (8003074 <up+0x200>)
 8002e9a:	8812      	ldrh	r2, [r2, #0]
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	dc19      	bgt.n	8002ed4 <up+0x60>

					allPath[currentIndex-1].length += speed;
 8002ea0:	4b72      	ldr	r3, [pc, #456]	; (800306c <up+0x1f8>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	1e5a      	subs	r2, r3, #1
 8002ea6:	4972      	ldr	r1, [pc, #456]	; (8003070 <up+0x1fc>)
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a70      	ldr	r2, [pc, #448]	; (8003078 <up+0x204>)
 8002eb8:	8812      	ldrh	r2, [r2, #0]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4a6b      	ldr	r2, [pc, #428]	; (800306c <up+0x1f8>)
 8002ebe:	7812      	ldrb	r2, [r2, #0]
 8002ec0:	3a01      	subs	r2, #1
 8002ec2:	4419      	add	r1, r3
 8002ec4:	486a      	ldr	r0, [pc, #424]	; (8003070 <up+0x1fc>)
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4403      	add	r3, r0
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	6019      	str	r1, [r3, #0]
				}

		allPath[currentIndex-1].y1 -= y1 ;
 8002ed4:	4b65      	ldr	r3, [pc, #404]	; (800306c <up+0x1f8>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	1e5a      	subs	r2, r3, #1
 8002eda:	4965      	ldr	r1, [pc, #404]	; (8003070 <up+0x1fc>)
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3310      	adds	r3, #16
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a64      	ldr	r2, [pc, #400]	; (800307c <up+0x208>)
 8002eec:	8812      	ldrh	r2, [r2, #0]
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4a5e      	ldr	r2, [pc, #376]	; (800306c <up+0x1f8>)
 8002ef2:	7812      	ldrb	r2, [r2, #0]
 8002ef4:	3a01      	subs	r2, #1
 8002ef6:	1a59      	subs	r1, r3, r1
 8002ef8:	485d      	ldr	r0, [pc, #372]	; (8003070 <up+0x1fc>)
 8002efa:	4613      	mov	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4403      	add	r3, r0
 8002f04:	3310      	adds	r3, #16
 8002f06:	6019      	str	r1, [r3, #0]
 8002f08:	e089      	b.n	800301e <up+0x1aa>


	} else {
		if (currentIndex == 0) allPath[0].isTail = 0;
 8002f0a:	4b58      	ldr	r3, [pc, #352]	; (800306c <up+0x1f8>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d103      	bne.n	8002f1a <up+0xa6>
 8002f12:	4b57      	ldr	r3, [pc, #348]	; (8003070 <up+0x1fc>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	705a      	strb	r2, [r3, #1]
 8002f18:	e00b      	b.n	8002f32 <up+0xbe>
		else allPath[currentIndex-1].isTail = 1;
 8002f1a:	4b54      	ldr	r3, [pc, #336]	; (800306c <up+0x1f8>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	1e5a      	subs	r2, r3, #1
 8002f20:	4953      	ldr	r1, [pc, #332]	; (8003070 <up+0x1fc>)
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	2201      	movs	r2, #1
 8002f30:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].isTail = 0;
 8002f32:	4b4e      	ldr	r3, [pc, #312]	; (800306c <up+0x1f8>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	4619      	mov	r1, r3
 8002f38:	4a4d      	ldr	r2, [pc, #308]	; (8003070 <up+0x1fc>)
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	440b      	add	r3, r1
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	3301      	adds	r3, #1
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
		if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 8002f4a:	4b4a      	ldr	r3, [pc, #296]	; (8003074 <up+0x200>)
 8002f4c:	881a      	ldrh	r2, [r3, #0]
 8002f4e:	4b4c      	ldr	r3, [pc, #304]	; (8003080 <up+0x20c>)
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d10e      	bne.n	8002f74 <up+0x100>
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <up+0x200>)
 8002f58:	881a      	ldrh	r2, [r3, #0]
 8002f5a:	4b44      	ldr	r3, [pc, #272]	; (800306c <up+0x1f8>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4610      	mov	r0, r2
 8002f62:	4a43      	ldr	r2, [pc, #268]	; (8003070 <up+0x1fc>)
 8002f64:	460b      	mov	r3, r1
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	440b      	add	r3, r1
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3304      	adds	r3, #4
 8002f70:	6018      	str	r0, [r3, #0]
 8002f72:	e00b      	b.n	8002f8c <up+0x118>
		else allPath[currentIndex].length = 0;
 8002f74:	4b3d      	ldr	r3, [pc, #244]	; (800306c <up+0x1f8>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4a3d      	ldr	r2, [pc, #244]	; (8003070 <up+0x1fc>)
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	440b      	add	r3, r1
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	3304      	adds	r3, #4
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
		allPath[currentIndex].currentState = goUp;
 8002f8c:	4b37      	ldr	r3, [pc, #220]	; (800306c <up+0x1f8>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	4619      	mov	r1, r3
 8002f92:	4a37      	ldr	r2, [pc, #220]	; (8003070 <up+0x1fc>)
 8002f94:	460b      	mov	r3, r1
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	440b      	add	r3, r1
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].x1 = x1;
 8002fa2:	4b38      	ldr	r3, [pc, #224]	; (8003084 <up+0x210>)
 8002fa4:	881a      	ldrh	r2, [r3, #0]
 8002fa6:	4b31      	ldr	r3, [pc, #196]	; (800306c <up+0x1f8>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	4619      	mov	r1, r3
 8002fac:	4610      	mov	r0, r2
 8002fae:	4a30      	ldr	r2, [pc, #192]	; (8003070 <up+0x1fc>)
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	440b      	add	r3, r1
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	3308      	adds	r3, #8
 8002fbc:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].x2 = x2;
 8002fbe:	4b32      	ldr	r3, [pc, #200]	; (8003088 <up+0x214>)
 8002fc0:	881a      	ldrh	r2, [r3, #0]
 8002fc2:	4b2a      	ldr	r3, [pc, #168]	; (800306c <up+0x1f8>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4a29      	ldr	r2, [pc, #164]	; (8003070 <up+0x1fc>)
 8002fcc:	460b      	mov	r3, r1
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	440b      	add	r3, r1
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	330c      	adds	r3, #12
 8002fd8:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y1 = y1;
 8002fda:	4b28      	ldr	r3, [pc, #160]	; (800307c <up+0x208>)
 8002fdc:	881a      	ldrh	r2, [r3, #0]
 8002fde:	4b23      	ldr	r3, [pc, #140]	; (800306c <up+0x1f8>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4a22      	ldr	r2, [pc, #136]	; (8003070 <up+0x1fc>)
 8002fe8:	460b      	mov	r3, r1
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	440b      	add	r3, r1
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3310      	adds	r3, #16
 8002ff4:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y2 = y2;
 8002ff6:	4b25      	ldr	r3, [pc, #148]	; (800308c <up+0x218>)
 8002ff8:	881a      	ldrh	r2, [r3, #0]
 8002ffa:	4b1c      	ldr	r3, [pc, #112]	; (800306c <up+0x1f8>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	4619      	mov	r1, r3
 8003000:	4610      	mov	r0, r2
 8003002:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <up+0x1fc>)
 8003004:	460b      	mov	r3, r1
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	440b      	add	r3, r1
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	3314      	adds	r3, #20
 8003010:	6018      	str	r0, [r3, #0]
		currentIndex++;
 8003012:	4b16      	ldr	r3, [pc, #88]	; (800306c <up+0x1f8>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <up+0x1f8>)
 800301c:	701a      	strb	r2, [r3, #0]
	}
	prevState = goUp;
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <up+0x1f4>)
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
	//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;

	y1 -= speed;
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <up+0x208>)
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	4b13      	ldr	r3, [pc, #76]	; (8003078 <up+0x204>)
 800302a:	881b      	ldrh	r3, [r3, #0]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	b29a      	uxth	r2, r3
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <up+0x208>)
 8003032:	801a      	strh	r2, [r3, #0]
	y2 -= speed;
 8003034:	4b15      	ldr	r3, [pc, #84]	; (800308c <up+0x218>)
 8003036:	881a      	ldrh	r2, [r3, #0]
 8003038:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <up+0x204>)
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	b29a      	uxth	r2, r3
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <up+0x218>)
 8003042:	801a      	strh	r2, [r3, #0]


	lcd_Fill(x1, y1, x2, y2, BLUE);
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <up+0x210>)
 8003046:	8818      	ldrh	r0, [r3, #0]
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <up+0x208>)
 800304a:	8819      	ldrh	r1, [r3, #0]
 800304c:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <up+0x214>)
 800304e:	881a      	ldrh	r2, [r3, #0]
 8003050:	4b0e      	ldr	r3, [pc, #56]	; (800308c <up+0x218>)
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	241f      	movs	r4, #31
 8003056:	9400      	str	r4, [sp, #0]
 8003058:	f7fd ff74 	bl	8000f44 <lcd_Fill>
	delete_path();
 800305c:	f7ff fb90 	bl	8002780 <delete_path>
}
 8003060:	bf00      	nop
 8003062:	3704      	adds	r7, #4
 8003064:	46bd      	mov	sp, r7
 8003066:	bd90      	pop	{r4, r7, pc}
 8003068:	20000021 	.word	0x20000021
 800306c:	20000158 	.word	0x20000158
 8003070:	20000334 	.word	0x20000334
 8003074:	20000024 	.word	0x20000024
 8003078:	20000026 	.word	0x20000026
 800307c:	2000001a 	.word	0x2000001a
 8003080:	20000022 	.word	0x20000022
 8003084:	20000018 	.word	0x20000018
 8003088:	2000001c 	.word	0x2000001c
 800308c:	2000001e 	.word	0x2000001e

08003090 <down>:


void down() {
 8003090:	b590      	push	{r4, r7, lr}
 8003092:	b083      	sub	sp, #12
 8003094:	af02      	add	r7, sp, #8

	if (prevState == goDown) {
 8003096:	4b75      	ldr	r3, [pc, #468]	; (800326c <down+0x1dc>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d137      	bne.n	800310e <down+0x7e>
		if (allPath[currentIndex-1].length <= snakeTailLen) {
 800309e:	4b74      	ldr	r3, [pc, #464]	; (8003270 <down+0x1e0>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	1e5a      	subs	r2, r3, #1
 80030a4:	4973      	ldr	r1, [pc, #460]	; (8003274 <down+0x1e4>)
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	440b      	add	r3, r1
 80030b0:	3304      	adds	r3, #4
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a70      	ldr	r2, [pc, #448]	; (8003278 <down+0x1e8>)
 80030b6:	8812      	ldrh	r2, [r2, #0]
 80030b8:	4293      	cmp	r3, r2
 80030ba:	dc19      	bgt.n	80030f0 <down+0x60>

			allPath[currentIndex-1].length += speed;
 80030bc:	4b6c      	ldr	r3, [pc, #432]	; (8003270 <down+0x1e0>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	1e5a      	subs	r2, r3, #1
 80030c2:	496c      	ldr	r1, [pc, #432]	; (8003274 <down+0x1e4>)
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	440b      	add	r3, r1
 80030ce:	3304      	adds	r3, #4
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a6a      	ldr	r2, [pc, #424]	; (800327c <down+0x1ec>)
 80030d4:	8812      	ldrh	r2, [r2, #0]
 80030d6:	4611      	mov	r1, r2
 80030d8:	4a65      	ldr	r2, [pc, #404]	; (8003270 <down+0x1e0>)
 80030da:	7812      	ldrb	r2, [r2, #0]
 80030dc:	3a01      	subs	r2, #1
 80030de:	4419      	add	r1, r3
 80030e0:	4864      	ldr	r0, [pc, #400]	; (8003274 <down+0x1e4>)
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4403      	add	r3, r0
 80030ec:	3304      	adds	r3, #4
 80030ee:	6019      	str	r1, [r3, #0]
		}

		allPath[currentIndex-1].y2 = y2;
 80030f0:	4b63      	ldr	r3, [pc, #396]	; (8003280 <down+0x1f0>)
 80030f2:	8819      	ldrh	r1, [r3, #0]
 80030f4:	4b5e      	ldr	r3, [pc, #376]	; (8003270 <down+0x1e0>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	1e5a      	subs	r2, r3, #1
 80030fa:	4608      	mov	r0, r1
 80030fc:	495d      	ldr	r1, [pc, #372]	; (8003274 <down+0x1e4>)
 80030fe:	4613      	mov	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	440b      	add	r3, r1
 8003108:	3314      	adds	r3, #20
 800310a:	6018      	str	r0, [r3, #0]
 800310c:	e089      	b.n	8003222 <down+0x192>
	} else {
		if (currentIndex == 0) allPath[0].isTail = 0;
 800310e:	4b58      	ldr	r3, [pc, #352]	; (8003270 <down+0x1e0>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d103      	bne.n	800311e <down+0x8e>
 8003116:	4b57      	ldr	r3, [pc, #348]	; (8003274 <down+0x1e4>)
 8003118:	2200      	movs	r2, #0
 800311a:	705a      	strb	r2, [r3, #1]
 800311c:	e00b      	b.n	8003136 <down+0xa6>
		else allPath[currentIndex-1].isTail = 1;
 800311e:	4b54      	ldr	r3, [pc, #336]	; (8003270 <down+0x1e0>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	1e5a      	subs	r2, r3, #1
 8003124:	4953      	ldr	r1, [pc, #332]	; (8003274 <down+0x1e4>)
 8003126:	4613      	mov	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	440b      	add	r3, r1
 8003130:	3301      	adds	r3, #1
 8003132:	2201      	movs	r2, #1
 8003134:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].isTail = 0;
 8003136:	4b4e      	ldr	r3, [pc, #312]	; (8003270 <down+0x1e0>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	4619      	mov	r1, r3
 800313c:	4a4d      	ldr	r2, [pc, #308]	; (8003274 <down+0x1e4>)
 800313e:	460b      	mov	r3, r1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	440b      	add	r3, r1
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	3301      	adds	r3, #1
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
		if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 800314e:	4b4a      	ldr	r3, [pc, #296]	; (8003278 <down+0x1e8>)
 8003150:	881a      	ldrh	r2, [r3, #0]
 8003152:	4b4c      	ldr	r3, [pc, #304]	; (8003284 <down+0x1f4>)
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d10e      	bne.n	8003178 <down+0xe8>
 800315a:	4b47      	ldr	r3, [pc, #284]	; (8003278 <down+0x1e8>)
 800315c:	881a      	ldrh	r2, [r3, #0]
 800315e:	4b44      	ldr	r3, [pc, #272]	; (8003270 <down+0x1e0>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	4619      	mov	r1, r3
 8003164:	4610      	mov	r0, r2
 8003166:	4a43      	ldr	r2, [pc, #268]	; (8003274 <down+0x1e4>)
 8003168:	460b      	mov	r3, r1
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	440b      	add	r3, r1
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	3304      	adds	r3, #4
 8003174:	6018      	str	r0, [r3, #0]
 8003176:	e00b      	b.n	8003190 <down+0x100>
		else allPath[currentIndex].length = 0;
 8003178:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <down+0x1e0>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	4619      	mov	r1, r3
 800317e:	4a3d      	ldr	r2, [pc, #244]	; (8003274 <down+0x1e4>)
 8003180:	460b      	mov	r3, r1
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	440b      	add	r3, r1
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	3304      	adds	r3, #4
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
		allPath[currentIndex].currentState = goDown;
 8003190:	4b37      	ldr	r3, [pc, #220]	; (8003270 <down+0x1e0>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	4a37      	ldr	r2, [pc, #220]	; (8003274 <down+0x1e4>)
 8003198:	460b      	mov	r3, r1
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	440b      	add	r3, r1
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4413      	add	r3, r2
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].x1 = x1;
 80031a6:	4b38      	ldr	r3, [pc, #224]	; (8003288 <down+0x1f8>)
 80031a8:	881a      	ldrh	r2, [r3, #0]
 80031aa:	4b31      	ldr	r3, [pc, #196]	; (8003270 <down+0x1e0>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	4619      	mov	r1, r3
 80031b0:	4610      	mov	r0, r2
 80031b2:	4a30      	ldr	r2, [pc, #192]	; (8003274 <down+0x1e4>)
 80031b4:	460b      	mov	r3, r1
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	440b      	add	r3, r1
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4413      	add	r3, r2
 80031be:	3308      	adds	r3, #8
 80031c0:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].x2 = x2;
 80031c2:	4b32      	ldr	r3, [pc, #200]	; (800328c <down+0x1fc>)
 80031c4:	881a      	ldrh	r2, [r3, #0]
 80031c6:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <down+0x1e0>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	4619      	mov	r1, r3
 80031cc:	4610      	mov	r0, r2
 80031ce:	4a29      	ldr	r2, [pc, #164]	; (8003274 <down+0x1e4>)
 80031d0:	460b      	mov	r3, r1
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	440b      	add	r3, r1
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4413      	add	r3, r2
 80031da:	330c      	adds	r3, #12
 80031dc:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y1 = y1;
 80031de:	4b2c      	ldr	r3, [pc, #176]	; (8003290 <down+0x200>)
 80031e0:	881a      	ldrh	r2, [r3, #0]
 80031e2:	4b23      	ldr	r3, [pc, #140]	; (8003270 <down+0x1e0>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	4a22      	ldr	r2, [pc, #136]	; (8003274 <down+0x1e4>)
 80031ec:	460b      	mov	r3, r1
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	440b      	add	r3, r1
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	3310      	adds	r3, #16
 80031f8:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y2 = y2;
 80031fa:	4b21      	ldr	r3, [pc, #132]	; (8003280 <down+0x1f0>)
 80031fc:	881a      	ldrh	r2, [r3, #0]
 80031fe:	4b1c      	ldr	r3, [pc, #112]	; (8003270 <down+0x1e0>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	4619      	mov	r1, r3
 8003204:	4610      	mov	r0, r2
 8003206:	4a1b      	ldr	r2, [pc, #108]	; (8003274 <down+0x1e4>)
 8003208:	460b      	mov	r3, r1
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	440b      	add	r3, r1
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	3314      	adds	r3, #20
 8003214:	6018      	str	r0, [r3, #0]
		currentIndex++;
 8003216:	4b16      	ldr	r3, [pc, #88]	; (8003270 <down+0x1e0>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	3301      	adds	r3, #1
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4b14      	ldr	r3, [pc, #80]	; (8003270 <down+0x1e0>)
 8003220:	701a      	strb	r2, [r3, #0]
	}
	prevState = goDown;
 8003222:	4b12      	ldr	r3, [pc, #72]	; (800326c <down+0x1dc>)
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
	//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;
		y1 += speed;
 8003228:	4b19      	ldr	r3, [pc, #100]	; (8003290 <down+0x200>)
 800322a:	881a      	ldrh	r2, [r3, #0]
 800322c:	4b13      	ldr	r3, [pc, #76]	; (800327c <down+0x1ec>)
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	4413      	add	r3, r2
 8003232:	b29a      	uxth	r2, r3
 8003234:	4b16      	ldr	r3, [pc, #88]	; (8003290 <down+0x200>)
 8003236:	801a      	strh	r2, [r3, #0]
		y2 += speed;
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <down+0x1f0>)
 800323a:	881a      	ldrh	r2, [r3, #0]
 800323c:	4b0f      	ldr	r3, [pc, #60]	; (800327c <down+0x1ec>)
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	4413      	add	r3, r2
 8003242:	b29a      	uxth	r2, r3
 8003244:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <down+0x1f0>)
 8003246:	801a      	strh	r2, [r3, #0]

		lcd_Fill(x1, y1, x2, y2, BLUE);
 8003248:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <down+0x1f8>)
 800324a:	8818      	ldrh	r0, [r3, #0]
 800324c:	4b10      	ldr	r3, [pc, #64]	; (8003290 <down+0x200>)
 800324e:	8819      	ldrh	r1, [r3, #0]
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <down+0x1fc>)
 8003252:	881a      	ldrh	r2, [r3, #0]
 8003254:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <down+0x1f0>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	241f      	movs	r4, #31
 800325a:	9400      	str	r4, [sp, #0]
 800325c:	f7fd fe72 	bl	8000f44 <lcd_Fill>
		delete_path();
 8003260:	f7ff fa8e 	bl	8002780 <delete_path>
}
 8003264:	bf00      	nop
 8003266:	3704      	adds	r7, #4
 8003268:	46bd      	mov	sp, r7
 800326a:	bd90      	pop	{r4, r7, pc}
 800326c:	20000021 	.word	0x20000021
 8003270:	20000158 	.word	0x20000158
 8003274:	20000334 	.word	0x20000334
 8003278:	20000024 	.word	0x20000024
 800327c:	20000026 	.word	0x20000026
 8003280:	2000001e 	.word	0x2000001e
 8003284:	20000022 	.word	0x20000022
 8003288:	20000018 	.word	0x20000018
 800328c:	2000001c 	.word	0x2000001c
 8003290:	2000001a 	.word	0x2000001a

08003294 <eat_food_success>:

void eat_food_success() {
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b083      	sub	sp, #12
 8003298:	af02      	add	r7, sp, #8
	CREATE_FOOD = 1; //QUAY LAI HÀM TẠO FRUIT
 800329a:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <eat_food_success+0x44>)
 800329c:	2201      	movs	r2, #1
 800329e:	801a      	strh	r2, [r3, #0]
	count++; //tăng số điểm
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <eat_food_success+0x48>)
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	3301      	adds	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <eat_food_success+0x48>)
 80032aa:	801a      	strh	r2, [r3, #0]
	lcd_Fill(x_food, y_food, x_food+5, y_food+5, WHITE);
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <eat_food_success+0x4c>)
 80032ae:	8818      	ldrh	r0, [r3, #0]
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <eat_food_success+0x50>)
 80032b2:	8819      	ldrh	r1, [r3, #0]
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <eat_food_success+0x4c>)
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	3305      	adds	r3, #5
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <eat_food_success+0x50>)
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	3305      	adds	r3, #5
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80032c8:	9400      	str	r4, [sp, #0]
 80032ca:	f7fd fe3b 	bl	8000f44 <lcd_Fill>
}
 80032ce:	bf00      	nop
 80032d0:	3704      	adds	r7, #4
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd90      	pop	{r4, r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000028 	.word	0x20000028
 80032dc:	2000015c 	.word	0x2000015c
 80032e0:	20000330 	.word	0x20000330
 80032e4:	20000604 	.word	0x20000604

080032e8 <food>:

void food() {
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af02      	add	r7, sp, #8
	if(CREATE_FOOD == 1) { // Tạo mồi nhậu
 80032ee:	4b80      	ldr	r3, [pc, #512]	; (80034f0 <food+0x208>)
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d130      	bne.n	8003358 <food+0x70>
		x_food = random_eat(0,x_max-5);
 80032f6:	4b7f      	ldr	r3, [pc, #508]	; (80034f4 <food+0x20c>)
 80032f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b05      	subs	r3, #5
 8003300:	b29b      	uxth	r3, r3
 8003302:	4619      	mov	r1, r3
 8003304:	2000      	movs	r0, #0
 8003306:	f7fe fde1 	bl	8001ecc <random_eat>
 800330a:	4603      	mov	r3, r0
 800330c:	461a      	mov	r2, r3
 800330e:	4b7a      	ldr	r3, [pc, #488]	; (80034f8 <food+0x210>)
 8003310:	801a      	strh	r2, [r3, #0]
		y_food = random_eat(100,y_max-5);
 8003312:	4b7a      	ldr	r3, [pc, #488]	; (80034fc <food+0x214>)
 8003314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b05      	subs	r3, #5
 800331c:	b29b      	uxth	r3, r3
 800331e:	4619      	mov	r1, r3
 8003320:	2064      	movs	r0, #100	; 0x64
 8003322:	f7fe fdd3 	bl	8001ecc <random_eat>
 8003326:	4603      	mov	r3, r0
 8003328:	461a      	mov	r2, r3
 800332a:	4b75      	ldr	r3, [pc, #468]	; (8003500 <food+0x218>)
 800332c:	801a      	strh	r2, [r3, #0]
		lcd_Fill(x_food, y_food, x_food+5, y_food+5, RED);
 800332e:	4b72      	ldr	r3, [pc, #456]	; (80034f8 <food+0x210>)
 8003330:	8818      	ldrh	r0, [r3, #0]
 8003332:	4b73      	ldr	r3, [pc, #460]	; (8003500 <food+0x218>)
 8003334:	8819      	ldrh	r1, [r3, #0]
 8003336:	4b70      	ldr	r3, [pc, #448]	; (80034f8 <food+0x210>)
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	3305      	adds	r3, #5
 800333c:	b29a      	uxth	r2, r3
 800333e:	4b70      	ldr	r3, [pc, #448]	; (8003500 <food+0x218>)
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	3305      	adds	r3, #5
 8003344:	b29b      	uxth	r3, r3
 8003346:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800334a:	9400      	str	r4, [sp, #0]
 800334c:	f7fd fdfa 	bl	8000f44 <lcd_Fill>
		CREATE_FOOD = 0; // tránh tạo mồi liên tục
 8003350:	4b67      	ldr	r3, [pc, #412]	; (80034f0 <food+0x208>)
 8003352:	2200      	movs	r2, #0
 8003354:	801a      	strh	r2, [r3, #0]
			)
			) {
			eat_food_success();
		}
	}
}
 8003356:	e0c7      	b.n	80034e8 <food+0x200>
		if((x2 == x_food) && (
 8003358:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <food+0x21c>)
 800335a:	881a      	ldrh	r2, [r3, #0]
 800335c:	4b66      	ldr	r3, [pc, #408]	; (80034f8 <food+0x210>)
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d12a      	bne.n	80033ba <food+0xd2>
				(y1 >= y_food && y1 <= y_food+5)
 8003364:	4b68      	ldr	r3, [pc, #416]	; (8003508 <food+0x220>)
 8003366:	881a      	ldrh	r2, [r3, #0]
 8003368:	4b65      	ldr	r3, [pc, #404]	; (8003500 <food+0x218>)
 800336a:	881b      	ldrh	r3, [r3, #0]
		if((x2 == x_food) && (
 800336c:	429a      	cmp	r2, r3
 800336e:	d307      	bcc.n	8003380 <food+0x98>
				(y1 >= y_food && y1 <= y_food+5)
 8003370:	4b65      	ldr	r3, [pc, #404]	; (8003508 <food+0x220>)
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	4b62      	ldr	r3, [pc, #392]	; (8003500 <food+0x218>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	3305      	adds	r3, #5
 800337c:	429a      	cmp	r2, r3
 800337e:	dd1a      	ble.n	80033b6 <food+0xce>
			||	(y2 >= y_food && y2 <= y_food+5)
 8003380:	4b62      	ldr	r3, [pc, #392]	; (800350c <food+0x224>)
 8003382:	881a      	ldrh	r2, [r3, #0]
 8003384:	4b5e      	ldr	r3, [pc, #376]	; (8003500 <food+0x218>)
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d307      	bcc.n	800339c <food+0xb4>
 800338c:	4b5f      	ldr	r3, [pc, #380]	; (800350c <food+0x224>)
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	4b5b      	ldr	r3, [pc, #364]	; (8003500 <food+0x218>)
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	3305      	adds	r3, #5
 8003398:	429a      	cmp	r2, r3
 800339a:	dd0c      	ble.n	80033b6 <food+0xce>
			||  (y1 <= y_food && y2 >= y_food+5)
 800339c:	4b5a      	ldr	r3, [pc, #360]	; (8003508 <food+0x220>)
 800339e:	881a      	ldrh	r2, [r3, #0]
 80033a0:	4b57      	ldr	r3, [pc, #348]	; (8003500 <food+0x218>)
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d808      	bhi.n	80033ba <food+0xd2>
 80033a8:	4b55      	ldr	r3, [pc, #340]	; (8003500 <food+0x218>)
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	3304      	adds	r3, #4
 80033ae:	4a57      	ldr	r2, [pc, #348]	; (800350c <food+0x224>)
 80033b0:	8812      	ldrh	r2, [r2, #0]
 80033b2:	4293      	cmp	r3, r2
 80033b4:	da01      	bge.n	80033ba <food+0xd2>
			eat_food_success();
 80033b6:	f7ff ff6d 	bl	8003294 <eat_food_success>
		if((x1 == x_food+5) && (
 80033ba:	4b55      	ldr	r3, [pc, #340]	; (8003510 <food+0x228>)
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	4b4d      	ldr	r3, [pc, #308]	; (80034f8 <food+0x210>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	3305      	adds	r3, #5
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d12a      	bne.n	8003420 <food+0x138>
				(y1 >= y_food && y1 <= y_food+5)
 80033ca:	4b4f      	ldr	r3, [pc, #316]	; (8003508 <food+0x220>)
 80033cc:	881a      	ldrh	r2, [r3, #0]
 80033ce:	4b4c      	ldr	r3, [pc, #304]	; (8003500 <food+0x218>)
 80033d0:	881b      	ldrh	r3, [r3, #0]
		if((x1 == x_food+5) && (
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d307      	bcc.n	80033e6 <food+0xfe>
				(y1 >= y_food && y1 <= y_food+5)
 80033d6:	4b4c      	ldr	r3, [pc, #304]	; (8003508 <food+0x220>)
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	4b48      	ldr	r3, [pc, #288]	; (8003500 <food+0x218>)
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	3305      	adds	r3, #5
 80033e2:	429a      	cmp	r2, r3
 80033e4:	dd1a      	ble.n	800341c <food+0x134>
			||	(y2 >= y_food && y2 <= y_food+5)
 80033e6:	4b49      	ldr	r3, [pc, #292]	; (800350c <food+0x224>)
 80033e8:	881a      	ldrh	r2, [r3, #0]
 80033ea:	4b45      	ldr	r3, [pc, #276]	; (8003500 <food+0x218>)
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d307      	bcc.n	8003402 <food+0x11a>
 80033f2:	4b46      	ldr	r3, [pc, #280]	; (800350c <food+0x224>)
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	4b41      	ldr	r3, [pc, #260]	; (8003500 <food+0x218>)
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	3305      	adds	r3, #5
 80033fe:	429a      	cmp	r2, r3
 8003400:	dd0c      	ble.n	800341c <food+0x134>
			||  (y1 <= y_food && y2 >= y_food+5)
 8003402:	4b41      	ldr	r3, [pc, #260]	; (8003508 <food+0x220>)
 8003404:	881a      	ldrh	r2, [r3, #0]
 8003406:	4b3e      	ldr	r3, [pc, #248]	; (8003500 <food+0x218>)
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d808      	bhi.n	8003420 <food+0x138>
 800340e:	4b3c      	ldr	r3, [pc, #240]	; (8003500 <food+0x218>)
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	3304      	adds	r3, #4
 8003414:	4a3d      	ldr	r2, [pc, #244]	; (800350c <food+0x224>)
 8003416:	8812      	ldrh	r2, [r2, #0]
 8003418:	4293      	cmp	r3, r2
 800341a:	da01      	bge.n	8003420 <food+0x138>
			eat_food_success();
 800341c:	f7ff ff3a 	bl	8003294 <eat_food_success>
		if((y2 == y_food) && (
 8003420:	4b3a      	ldr	r3, [pc, #232]	; (800350c <food+0x224>)
 8003422:	881a      	ldrh	r2, [r3, #0]
 8003424:	4b36      	ldr	r3, [pc, #216]	; (8003500 <food+0x218>)
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d12a      	bne.n	8003482 <food+0x19a>
				(x1 >= x_food && x1 <= x_food+5)
 800342c:	4b38      	ldr	r3, [pc, #224]	; (8003510 <food+0x228>)
 800342e:	881a      	ldrh	r2, [r3, #0]
 8003430:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <food+0x210>)
 8003432:	881b      	ldrh	r3, [r3, #0]
		if((y2 == y_food) && (
 8003434:	429a      	cmp	r2, r3
 8003436:	d307      	bcc.n	8003448 <food+0x160>
				(x1 >= x_food && x1 <= x_food+5)
 8003438:	4b35      	ldr	r3, [pc, #212]	; (8003510 <food+0x228>)
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <food+0x210>)
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	3305      	adds	r3, #5
 8003444:	429a      	cmp	r2, r3
 8003446:	dd1a      	ble.n	800347e <food+0x196>
			||	(x2 >= x_food && x2 <= x_food+5)
 8003448:	4b2e      	ldr	r3, [pc, #184]	; (8003504 <food+0x21c>)
 800344a:	881a      	ldrh	r2, [r3, #0]
 800344c:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <food+0x210>)
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d307      	bcc.n	8003464 <food+0x17c>
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <food+0x21c>)
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	461a      	mov	r2, r3
 800345a:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <food+0x210>)
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	3305      	adds	r3, #5
 8003460:	429a      	cmp	r2, r3
 8003462:	dd0c      	ble.n	800347e <food+0x196>
			||  (x1 <= x_food && x2 >= x_food+5)
 8003464:	4b2a      	ldr	r3, [pc, #168]	; (8003510 <food+0x228>)
 8003466:	881a      	ldrh	r2, [r3, #0]
 8003468:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <food+0x210>)
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d808      	bhi.n	8003482 <food+0x19a>
 8003470:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <food+0x210>)
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	3304      	adds	r3, #4
 8003476:	4a23      	ldr	r2, [pc, #140]	; (8003504 <food+0x21c>)
 8003478:	8812      	ldrh	r2, [r2, #0]
 800347a:	4293      	cmp	r3, r2
 800347c:	da01      	bge.n	8003482 <food+0x19a>
			eat_food_success();
 800347e:	f7ff ff09 	bl	8003294 <eat_food_success>
		if((y1 == y_food+5) && (
 8003482:	4b21      	ldr	r3, [pc, #132]	; (8003508 <food+0x220>)
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	4b1d      	ldr	r3, [pc, #116]	; (8003500 <food+0x218>)
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	3305      	adds	r3, #5
 800348e:	429a      	cmp	r2, r3
 8003490:	d12a      	bne.n	80034e8 <food+0x200>
				(x1 >= x_food && x1 <= x_food+5)
 8003492:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <food+0x228>)
 8003494:	881a      	ldrh	r2, [r3, #0]
 8003496:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <food+0x210>)
 8003498:	881b      	ldrh	r3, [r3, #0]
		if((y1 == y_food+5) && (
 800349a:	429a      	cmp	r2, r3
 800349c:	d307      	bcc.n	80034ae <food+0x1c6>
				(x1 >= x_food && x1 <= x_food+5)
 800349e:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <food+0x228>)
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <food+0x210>)
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	3305      	adds	r3, #5
 80034aa:	429a      	cmp	r2, r3
 80034ac:	dd1a      	ble.n	80034e4 <food+0x1fc>
			||	(x2 >= x_food && x2 <= x_food+5)
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <food+0x21c>)
 80034b0:	881a      	ldrh	r2, [r3, #0]
 80034b2:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <food+0x210>)
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d307      	bcc.n	80034ca <food+0x1e2>
 80034ba:	4b12      	ldr	r3, [pc, #72]	; (8003504 <food+0x21c>)
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <food+0x210>)
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	3305      	adds	r3, #5
 80034c6:	429a      	cmp	r2, r3
 80034c8:	dd0c      	ble.n	80034e4 <food+0x1fc>
			||  (x1 <= x_food && x2 >= x_food+5)
 80034ca:	4b11      	ldr	r3, [pc, #68]	; (8003510 <food+0x228>)
 80034cc:	881a      	ldrh	r2, [r3, #0]
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <food+0x210>)
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d808      	bhi.n	80034e8 <food+0x200>
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <food+0x210>)
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	3304      	adds	r3, #4
 80034dc:	4a09      	ldr	r2, [pc, #36]	; (8003504 <food+0x21c>)
 80034de:	8812      	ldrh	r2, [r2, #0]
 80034e0:	4293      	cmp	r3, r2
 80034e2:	da01      	bge.n	80034e8 <food+0x200>
			eat_food_success();
 80034e4:	f7ff fed6 	bl	8003294 <eat_food_success>
}
 80034e8:	bf00      	nop
 80034ea:	3704      	adds	r7, #4
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd90      	pop	{r4, r7, pc}
 80034f0:	20000028 	.word	0x20000028
 80034f4:	20000012 	.word	0x20000012
 80034f8:	20000330 	.word	0x20000330
 80034fc:	20000014 	.word	0x20000014
 8003500:	20000604 	.word	0x20000604
 8003504:	2000001c 	.word	0x2000001c
 8003508:	2000001a 	.word	0x2000001a
 800350c:	2000001e 	.word	0x2000001e
 8003510:	20000018 	.word	0x20000018

08003514 <move>:


void move() {
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b083      	sub	sp, #12
 8003518:	af02      	add	r7, sp, #8
	if(x1 == 0 || x1 == x_max || x2 == 0 || x2 == x_max
 800351a:	4b57      	ldr	r3, [pc, #348]	; (8003678 <move+0x164>)
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d043      	beq.n	80035aa <move+0x96>
 8003522:	4b55      	ldr	r3, [pc, #340]	; (8003678 <move+0x164>)
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	4b54      	ldr	r3, [pc, #336]	; (800367c <move+0x168>)
 800352a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800352e:	429a      	cmp	r2, r3
 8003530:	d03b      	beq.n	80035aa <move+0x96>
 8003532:	4b53      	ldr	r3, [pc, #332]	; (8003680 <move+0x16c>)
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d037      	beq.n	80035aa <move+0x96>
 800353a:	4b51      	ldr	r3, [pc, #324]	; (8003680 <move+0x16c>)
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	4b4e      	ldr	r3, [pc, #312]	; (800367c <move+0x168>)
 8003542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003546:	429a      	cmp	r2, r3
 8003548:	d02f      	beq.n	80035aa <move+0x96>
	|| y1 == 100 || y1 == y_max || y2 == 100 || y2 == y_max
 800354a:	4b4e      	ldr	r3, [pc, #312]	; (8003684 <move+0x170>)
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	2b64      	cmp	r3, #100	; 0x64
 8003550:	d02b      	beq.n	80035aa <move+0x96>
 8003552:	4b4c      	ldr	r3, [pc, #304]	; (8003684 <move+0x170>)
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <move+0x174>)
 800355a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800355e:	429a      	cmp	r2, r3
 8003560:	d023      	beq.n	80035aa <move+0x96>
 8003562:	4b4a      	ldr	r3, [pc, #296]	; (800368c <move+0x178>)
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d01f      	beq.n	80035aa <move+0x96>
 800356a:	4b48      	ldr	r3, [pc, #288]	; (800368c <move+0x178>)
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	4b45      	ldr	r3, [pc, #276]	; (8003688 <move+0x174>)
 8003572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003576:	429a      	cmp	r2, r3
 8003578:	d017      	beq.n	80035aa <move+0x96>
	|| checkCollision() == 1 || snakeSelfBite(x1,y1,x2,y2,0) == 1) { //đụng tường
 800357a:	f7ff f849 	bl	8002610 <checkCollision>
 800357e:	4603      	mov	r3, r0
 8003580:	2b01      	cmp	r3, #1
 8003582:	d012      	beq.n	80035aa <move+0x96>
 8003584:	4b3c      	ldr	r3, [pc, #240]	; (8003678 <move+0x164>)
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	b218      	sxth	r0, r3
 800358a:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <move+0x170>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	b219      	sxth	r1, r3
 8003590:	4b3b      	ldr	r3, [pc, #236]	; (8003680 <move+0x16c>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b21a      	sxth	r2, r3
 8003596:	4b3d      	ldr	r3, [pc, #244]	; (800368c <move+0x178>)
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	b21b      	sxth	r3, r3
 800359c:	2400      	movs	r4, #0
 800359e:	9400      	str	r4, [sp, #0]
 80035a0:	f7fe fe90 	bl	80022c4 <snakeSelfBite>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d102      	bne.n	80035b0 <move+0x9c>
			game_over();
 80035aa:	f7fe fd09 	bl	8001fc0 <game_over>
			return;
 80035ae:	e060      	b.n	8003672 <move+0x15e>
	}
	led7_SetDigit(0, 0, 0);
 80035b0:	2200      	movs	r2, #0
 80035b2:	2100      	movs	r1, #0
 80035b4:	2000      	movs	r0, #0
 80035b6:	f7fe fa0d 	bl	80019d4 <led7_SetDigit>
	led7_SetDigit(0, 1, 0);
 80035ba:	2200      	movs	r2, #0
 80035bc:	2101      	movs	r1, #1
 80035be:	2000      	movs	r0, #0
 80035c0:	f7fe fa08 	bl	80019d4 <led7_SetDigit>
	led7_SetDigit(count/10, 2, 0);
 80035c4:	4b32      	ldr	r3, [pc, #200]	; (8003690 <move+0x17c>)
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	4a32      	ldr	r2, [pc, #200]	; (8003694 <move+0x180>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	08db      	lsrs	r3, r3, #3
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2200      	movs	r2, #0
 80035d4:	2102      	movs	r1, #2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe f9fc 	bl	80019d4 <led7_SetDigit>
	led7_SetDigit(count%10, 3, 0); //hiển thị điểm số
 80035dc:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <move+0x17c>)
 80035de:	881a      	ldrh	r2, [r3, #0]
 80035e0:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <move+0x180>)
 80035e2:	fba3 1302 	umull	r1, r3, r3, r2
 80035e6:	08d9      	lsrs	r1, r3, #3
 80035e8:	460b      	mov	r3, r1
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	2200      	movs	r2, #0
 80035f6:	2103      	movs	r1, #3
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe f9eb 	bl	80019d4 <led7_SetDigit>
//	count++;

	food();
 80035fe:	f7ff fe73 	bl	80032e8 <food>

	moveWall(); // mode 3
 8003602:	f7fe fea1 	bl	8002348 <moveWall>
	 //mode 2 va 3
	//snake move with button
	if (button_count[6] == 1) {
 8003606:	4b24      	ldr	r3, [pc, #144]	; (8003698 <move+0x184>)
 8003608:	899b      	ldrh	r3, [r3, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d103      	bne.n	8003616 <move+0x102>
		firstState = goUp;
 800360e:	4b23      	ldr	r3, [pc, #140]	; (800369c <move+0x188>)
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	e016      	b.n	8003644 <move+0x130>
	}
	else if (button_count[14] == 1) {
 8003616:	4b20      	ldr	r3, [pc, #128]	; (8003698 <move+0x184>)
 8003618:	8b9b      	ldrh	r3, [r3, #28]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d103      	bne.n	8003626 <move+0x112>
		firstState = goDown;
 800361e:	4b1f      	ldr	r3, [pc, #124]	; (800369c <move+0x188>)
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	e00e      	b.n	8003644 <move+0x130>
	}
	else if (button_count[11] == 1) {
 8003626:	4b1c      	ldr	r3, [pc, #112]	; (8003698 <move+0x184>)
 8003628:	8adb      	ldrh	r3, [r3, #22]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d103      	bne.n	8003636 <move+0x122>
		firstState = goRight;
 800362e:	4b1b      	ldr	r3, [pc, #108]	; (800369c <move+0x188>)
 8003630:	2203      	movs	r2, #3
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e006      	b.n	8003644 <move+0x130>
	}
	else if (button_count[9] == 1) {
 8003636:	4b18      	ldr	r3, [pc, #96]	; (8003698 <move+0x184>)
 8003638:	8a5b      	ldrh	r3, [r3, #18]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d102      	bne.n	8003644 <move+0x130>
		firstState = goLeft;
 800363e:	4b17      	ldr	r3, [pc, #92]	; (800369c <move+0x188>)
 8003640:	2202      	movs	r2, #2
 8003642:	701a      	strb	r2, [r3, #0]
	}
	switch (firstState) {
 8003644:	4b15      	ldr	r3, [pc, #84]	; (800369c <move+0x188>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b03      	cmp	r3, #3
 800364a:	d00c      	beq.n	8003666 <move+0x152>
 800364c:	2b03      	cmp	r3, #3
 800364e:	dc0d      	bgt.n	800366c <move+0x158>
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <move+0x146>
 8003654:	2b01      	cmp	r3, #1
 8003656:	d003      	beq.n	8003660 <move+0x14c>
 8003658:	e008      	b.n	800366c <move+0x158>
		case goUp:
			up();
 800365a:	f7ff fc0b 	bl	8002e74 <up>
			break;
 800365e:	e008      	b.n	8003672 <move+0x15e>
		case goDown:
			down();
 8003660:	f7ff fd16 	bl	8003090 <down>
			break;
 8003664:	e005      	b.n	8003672 <move+0x15e>
		case goRight:
			right();
 8003666:	f7ff fa01 	bl	8002a6c <right>
			break;
 800366a:	e002      	b.n	8003672 <move+0x15e>
		default:
			left();
 800366c:	f7ff fb00 	bl	8002c70 <left>
			break;
 8003670:	bf00      	nop
	}
}
 8003672:	3704      	adds	r7, #4
 8003674:	46bd      	mov	sp, r7
 8003676:	bd90      	pop	{r4, r7, pc}
 8003678:	20000018 	.word	0x20000018
 800367c:	20000012 	.word	0x20000012
 8003680:	2000001c 	.word	0x2000001c
 8003684:	2000001a 	.word	0x2000001a
 8003688:	20000014 	.word	0x20000014
 800368c:	2000001e 	.word	0x2000001e
 8003690:	2000015c 	.word	0x2000015c
 8003694:	cccccccd 	.word	0xcccccccd
 8003698:	20000224 	.word	0x20000224
 800369c:	20000020 	.word	0x20000020

080036a0 <wall>:

void wall(uint16_t difficult) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af04      	add	r7, sp, #16
 80036a6:	4603      	mov	r3, r0
 80036a8:	80fb      	strh	r3, [r7, #6]
	lcd_ShowStr(10,10,"SNAKE GAME!!!",WHITE,BLACK,16,0);
 80036aa:	2300      	movs	r3, #0
 80036ac:	9302      	str	r3, [sp, #8]
 80036ae:	2310      	movs	r3, #16
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	2300      	movs	r3, #0
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ba:	4a47      	ldr	r2, [pc, #284]	; (80037d8 <wall+0x138>)
 80036bc:	210a      	movs	r1, #10
 80036be:	200a      	movs	r0, #10
 80036c0:	f7fe f88c 	bl	80017dc <lcd_ShowStr>


//	hiện thị score hiện tại
	lcd_ShowStr(10,30,"Diem so cua ban la: ",WHITE,BLACK,16,0);
 80036c4:	2300      	movs	r3, #0
 80036c6:	9302      	str	r3, [sp, #8]
 80036c8:	2310      	movs	r3, #16
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	2300      	movs	r3, #0
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036d4:	4a41      	ldr	r2, [pc, #260]	; (80037dc <wall+0x13c>)
 80036d6:	211e      	movs	r1, #30
 80036d8:	200a      	movs	r0, #10
 80036da:	f7fe f87f 	bl	80017dc <lcd_ShowStr>
	if(count < 10)
 80036de:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <wall+0x140>)
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	2b09      	cmp	r3, #9
 80036e4:	d80e      	bhi.n	8003704 <wall+0x64>
		lcd_ShowIntNum(164,30,count,1,WHITE,BLACK,16);
 80036e6:	4b3e      	ldr	r3, [pc, #248]	; (80037e0 <wall+0x140>)
 80036e8:	881a      	ldrh	r2, [r3, #0]
 80036ea:	2310      	movs	r3, #16
 80036ec:	9302      	str	r3, [sp, #8]
 80036ee:	2300      	movs	r3, #0
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2301      	movs	r3, #1
 80036fa:	211e      	movs	r1, #30
 80036fc:	20a4      	movs	r0, #164	; 0xa4
 80036fe:	f7fd fe15 	bl	800132c <lcd_ShowIntNum>
 8003702:	e00d      	b.n	8003720 <wall+0x80>
	else
		lcd_ShowIntNum(164,30,count,2,WHITE,BLACK,16);
 8003704:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <wall+0x140>)
 8003706:	881a      	ldrh	r2, [r3, #0]
 8003708:	2310      	movs	r3, #16
 800370a:	9302      	str	r3, [sp, #8]
 800370c:	2300      	movs	r3, #0
 800370e:	9301      	str	r3, [sp, #4]
 8003710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	2302      	movs	r3, #2
 8003718:	211e      	movs	r1, #30
 800371a:	20a4      	movs	r0, #164	; 0xa4
 800371c:	f7fd fe06 	bl	800132c <lcd_ShowIntNum>


	// hiển thị max score
	lcd_ShowStr(10,50,"Diem so cao nhat la: ",WHITE,BLACK,16,0);
 8003720:	2300      	movs	r3, #0
 8003722:	9302      	str	r3, [sp, #8]
 8003724:	2310      	movs	r3, #16
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	2300      	movs	r3, #0
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003730:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <wall+0x144>)
 8003732:	2132      	movs	r1, #50	; 0x32
 8003734:	200a      	movs	r0, #10
 8003736:	f7fe f851 	bl	80017dc <lcd_ShowStr>
	if(max_count < 10)
 800373a:	4b2b      	ldr	r3, [pc, #172]	; (80037e8 <wall+0x148>)
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	2b09      	cmp	r3, #9
 8003740:	d80e      	bhi.n	8003760 <wall+0xc0>
		lcd_ShowIntNum(173,50,max_count,1,WHITE,BLACK,16);
 8003742:	4b29      	ldr	r3, [pc, #164]	; (80037e8 <wall+0x148>)
 8003744:	881a      	ldrh	r2, [r3, #0]
 8003746:	2310      	movs	r3, #16
 8003748:	9302      	str	r3, [sp, #8]
 800374a:	2300      	movs	r3, #0
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	2301      	movs	r3, #1
 8003756:	2132      	movs	r1, #50	; 0x32
 8003758:	20ad      	movs	r0, #173	; 0xad
 800375a:	f7fd fde7 	bl	800132c <lcd_ShowIntNum>
 800375e:	e00d      	b.n	800377c <wall+0xdc>
	else
		lcd_ShowIntNum(173,50,max_count,2,WHITE,BLACK,16);
 8003760:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <wall+0x148>)
 8003762:	881a      	ldrh	r2, [r3, #0]
 8003764:	2310      	movs	r3, #16
 8003766:	9302      	str	r3, [sp, #8]
 8003768:	2300      	movs	r3, #0
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	2302      	movs	r3, #2
 8003774:	2132      	movs	r1, #50	; 0x32
 8003776:	20ad      	movs	r0, #173	; 0xad
 8003778:	f7fd fdd8 	bl	800132c <lcd_ShowIntNum>


	lcd_ShowStr(10,70,"Do kho: ",WHITE,BLACK,16,0);
 800377c:	2300      	movs	r3, #0
 800377e:	9302      	str	r3, [sp, #8]
 8003780:	2310      	movs	r3, #16
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	2300      	movs	r3, #0
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800378c:	4a17      	ldr	r2, [pc, #92]	; (80037ec <wall+0x14c>)
 800378e:	2146      	movs	r1, #70	; 0x46
 8003790:	200a      	movs	r0, #10
 8003792:	f7fe f823 	bl	80017dc <lcd_ShowStr>
	lcd_ShowIntNum(70,70,difficult,1,WHITE,BLACK,16);
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	2310      	movs	r3, #16
 800379a:	9302      	str	r3, [sp, #8]
 800379c:	2300      	movs	r3, #0
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	2301      	movs	r3, #1
 80037a8:	2146      	movs	r1, #70	; 0x46
 80037aa:	2046      	movs	r0, #70	; 0x46
 80037ac:	f7fd fdbe 	bl	800132c <lcd_ShowIntNum>

	lcd_DrawRectangle(0, 100, x_max, y_max, RED); //TẠO TƯỜNG
 80037b0:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <wall+0x150>)
 80037b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	4b0e      	ldr	r3, [pc, #56]	; (80037f4 <wall+0x154>)
 80037ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80037c4:	9100      	str	r1, [sp, #0]
 80037c6:	2164      	movs	r1, #100	; 0x64
 80037c8:	2000      	movs	r0, #0
 80037ca:	f7fd fc8c 	bl	80010e6 <lcd_DrawRectangle>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	0800a7b4 	.word	0x0800a7b4
 80037dc:	0800a7c4 	.word	0x0800a7c4
 80037e0:	2000015c 	.word	0x2000015c
 80037e4:	0800a7dc 	.word	0x0800a7dc
 80037e8:	2000015e 	.word	0x2000015e
 80037ec:	0800a7f4 	.word	0x0800a7f4
 80037f0:	20000012 	.word	0x20000012
 80037f4:	20000014 	.word	0x20000014

080037f8 <timer_init>:

uint16_t flag_Sensor = 0;
uint16_t timer_Sensor = 0;
uint16_t timer_Sensor_MUL = 0;

void timer_init(){
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80037fc:	4803      	ldr	r0, [pc, #12]	; (800380c <timer_init+0x14>)
 80037fe:	f003 fd91 	bl	8007324 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8003802:	4803      	ldr	r0, [pc, #12]	; (8003810 <timer_init+0x18>)
 8003804:	f003 fd26 	bl	8007254 <HAL_TIM_Base_Start>
}
 8003808:	bf00      	nop
 800380a:	bd80      	pop	{r7, pc}
 800380c:	200006f0 	.word	0x200006f0
 8003810:	200006a8 	.word	0x200006a8

08003814 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800381e:	4a08      	ldr	r2, [pc, #32]	; (8003840 <setTimer2+0x2c>)
 8003820:	88fb      	ldrh	r3, [r7, #6]
 8003822:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <setTimer2+0x2c>)
 8003826:	881a      	ldrh	r2, [r3, #0]
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <setTimer2+0x30>)
 800382a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <setTimer2+0x34>)
 800382e:	2200      	movs	r2, #0
 8003830:	801a      	strh	r2, [r3, #0]
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000164 	.word	0x20000164
 8003844:	20000162 	.word	0x20000162
 8003848:	20000160 	.word	0x20000160

0800384c <setTimerSendSensor>:

void setTimerSendSensor(uint16_t duration)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	80fb      	strh	r3, [r7, #6]
	timer_Sensor_MUL = duration/TIMER_CYCLE_2;
 8003856:	4a08      	ldr	r2, [pc, #32]	; (8003878 <setTimerSendSensor+0x2c>)
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	8013      	strh	r3, [r2, #0]
	timer_Sensor = timer_Sensor_MUL;
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <setTimerSendSensor+0x2c>)
 800385e:	881a      	ldrh	r2, [r3, #0]
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <setTimerSendSensor+0x30>)
 8003862:	801a      	strh	r2, [r3, #0]
	flag_Sensor = 0;
 8003864:	4b06      	ldr	r3, [pc, #24]	; (8003880 <setTimerSendSensor+0x34>)
 8003866:	2200      	movs	r2, #0
 8003868:	801a      	strh	r2, [r3, #0]
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	2000016a 	.word	0x2000016a
 800387c:	20000168 	.word	0x20000168
 8003880:	20000166 	.word	0x20000166

08003884 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003894:	d12b      	bne.n	80038ee <HAL_TIM_PeriodElapsedCallback+0x6a>
		if(timer2_counter > 0){
 8003896:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003898:	881b      	ldrh	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d010      	beq.n	80038c0 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800389e:	4b16      	ldr	r3, [pc, #88]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	4b14      	ldr	r3, [pc, #80]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80038a8:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80038aa:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d106      	bne.n	80038c0 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x78>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80038b8:	4b11      	ldr	r3, [pc, #68]	; (8003900 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80038ba:	881a      	ldrh	r2, [r3, #0]
 80038bc:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80038be:	801a      	strh	r2, [r3, #0]
			}
		}
		if (timer_Sensor > 0)
 80038c0:	4b10      	ldr	r3, [pc, #64]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d010      	beq.n	80038ea <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			timer_Sensor--;
 80038c8:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80038d2:	801a      	strh	r2, [r3, #0]
			if (timer_Sensor <= 0)
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				flag_Sensor = 1;
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80038de:	2201      	movs	r2, #1
 80038e0:	801a      	strh	r2, [r3, #0]
				timer_Sensor = timer_Sensor_MUL;
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_TIM_PeriodElapsedCallback+0x88>)
 80038e4:	881a      	ldrh	r2, [r3, #0]
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80038e8:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80038ea:	f7fd ffe7 	bl	80018bc <led7_Scan>
	}
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000162 	.word	0x20000162
 80038fc:	20000160 	.word	0x20000160
 8003900:	20000164 	.word	0x20000164
 8003904:	20000168 	.word	0x20000168
 8003908:	20000166 	.word	0x20000166
 800390c:	2000016a 	.word	0x2000016a

08003910 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003914:	4b17      	ldr	r3, [pc, #92]	; (8003974 <MX_SPI1_Init+0x64>)
 8003916:	4a18      	ldr	r2, [pc, #96]	; (8003978 <MX_SPI1_Init+0x68>)
 8003918:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <MX_SPI1_Init+0x64>)
 800391c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003920:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003922:	4b14      	ldr	r3, [pc, #80]	; (8003974 <MX_SPI1_Init+0x64>)
 8003924:	2200      	movs	r2, #0
 8003926:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003928:	4b12      	ldr	r3, [pc, #72]	; (8003974 <MX_SPI1_Init+0x64>)
 800392a:	2200      	movs	r2, #0
 800392c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <MX_SPI1_Init+0x64>)
 8003930:	2200      	movs	r2, #0
 8003932:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <MX_SPI1_Init+0x64>)
 8003936:	2200      	movs	r2, #0
 8003938:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <MX_SPI1_Init+0x64>)
 800393c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003940:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003942:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <MX_SPI1_Init+0x64>)
 8003944:	2200      	movs	r2, #0
 8003946:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <MX_SPI1_Init+0x64>)
 800394a:	2200      	movs	r2, #0
 800394c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <MX_SPI1_Init+0x64>)
 8003950:	2200      	movs	r2, #0
 8003952:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <MX_SPI1_Init+0x64>)
 8003956:	2200      	movs	r2, #0
 8003958:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <MX_SPI1_Init+0x64>)
 800395c:	220a      	movs	r2, #10
 800395e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003960:	4804      	ldr	r0, [pc, #16]	; (8003974 <MX_SPI1_Init+0x64>)
 8003962:	f002 fe3b 	bl	80065dc <HAL_SPI_Init>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800396c:	f7fe fa56 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003970:	bf00      	nop
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20000608 	.word	0x20000608
 8003978:	40013000 	.word	0x40013000

0800397c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	; 0x28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003984:	f107 0314 	add.w	r3, r7, #20
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a19      	ldr	r2, [pc, #100]	; (8003a00 <HAL_SPI_MspInit+0x84>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d12b      	bne.n	80039f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <HAL_SPI_MspInit+0x88>)
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	4a17      	ldr	r2, [pc, #92]	; (8003a04 <HAL_SPI_MspInit+0x88>)
 80039a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039ac:	6453      	str	r3, [r2, #68]	; 0x44
 80039ae:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <HAL_SPI_MspInit+0x88>)
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <HAL_SPI_MspInit+0x88>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	4a10      	ldr	r2, [pc, #64]	; (8003a04 <HAL_SPI_MspInit+0x88>)
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ca:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <HAL_SPI_MspInit+0x88>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80039d6:	2338      	movs	r3, #56	; 0x38
 80039d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039da:	2302      	movs	r3, #2
 80039dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e2:	2303      	movs	r3, #3
 80039e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039e6:	2305      	movs	r3, #5
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ea:	f107 0314 	add.w	r3, r7, #20
 80039ee:	4619      	mov	r1, r3
 80039f0:	4805      	ldr	r0, [pc, #20]	; (8003a08 <HAL_SPI_MspInit+0x8c>)
 80039f2:	f001 fe85 	bl	8005700 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80039f6:	bf00      	nop
 80039f8:	3728      	adds	r7, #40	; 0x28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40013000 	.word	0x40013000
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40020400 	.word	0x40020400

08003a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <HAL_MspInit+0x4c>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	4a0f      	ldr	r2, [pc, #60]	; (8003a58 <HAL_MspInit+0x4c>)
 8003a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a20:	6453      	str	r3, [r2, #68]	; 0x44
 8003a22:	4b0d      	ldr	r3, [pc, #52]	; (8003a58 <HAL_MspInit+0x4c>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2a:	607b      	str	r3, [r7, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a2e:	2300      	movs	r3, #0
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <HAL_MspInit+0x4c>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <HAL_MspInit+0x4c>)
 8003a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_MspInit+0x4c>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800

08003a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a60:	e7fe      	b.n	8003a60 <NMI_Handler+0x4>

08003a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a66:	e7fe      	b.n	8003a66 <HardFault_Handler+0x4>

08003a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a6c:	e7fe      	b.n	8003a6c <MemManage_Handler+0x4>

08003a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a72:	e7fe      	b.n	8003a72 <BusFault_Handler+0x4>

08003a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a78:	e7fe      	b.n	8003a78 <UsageFault_Handler+0x4>

08003a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aa8:	f000 fcc0 	bl	800442c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aac:	bf00      	nop
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <TIM2_IRQHandler+0x10>)
 8003ab6:	f003 fcfe 	bl	80074b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	200006f0 	.word	0x200006f0

08003ac4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <USART1_IRQHandler+0x10>)
 8003aca:	f004 fc39 	bl	8008340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000738 	.word	0x20000738

08003ad8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003adc:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <USART2_IRQHandler+0x10>)
 8003ade:	f004 fc2f 	bl	8008340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	2000077c 	.word	0x2000077c

08003aec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003af0:	4802      	ldr	r0, [pc, #8]	; (8003afc <DMA2_Stream0_IRQHandler+0x10>)
 8003af2:	f001 fb9b 	bl	800522c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	200001c4 	.word	0x200001c4

08003b00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
	return 1;
 8003b04:	2301      	movs	r3, #1
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <_kill>:

int _kill(int pid, int sig)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b1a:	f005 fb99 	bl	8009250 <__errno>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2216      	movs	r2, #22
 8003b22:	601a      	str	r2, [r3, #0]
	return -1;
 8003b24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <_exit>:

void _exit (int status)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b38:	f04f 31ff 	mov.w	r1, #4294967295
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ffe7 	bl	8003b10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b42:	e7fe      	b.n	8003b42 <_exit+0x12>

08003b44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e00a      	b.n	8003b6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b56:	f3af 8000 	nop.w
 8003b5a:	4601      	mov	r1, r0
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	60ba      	str	r2, [r7, #8]
 8003b62:	b2ca      	uxtb	r2, r1
 8003b64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	dbf0      	blt.n	8003b56 <_read+0x12>
	}

return len;
 8003b74:	687b      	ldr	r3, [r7, #4]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	e009      	b.n	8003ba4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	60ba      	str	r2, [r7, #8]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	dbf1      	blt.n	8003b90 <_write+0x12>
	}
	return len;
 8003bac:	687b      	ldr	r3, [r7, #4]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <_close>:

int _close(int file)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
	return -1;
 8003bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bde:	605a      	str	r2, [r3, #4]
	return 0;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <_isatty>:

int _isatty(int file)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
	return 1;
 8003bf6:	2301      	movs	r3, #1
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
	return 0;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c28:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <_sbrk+0x5c>)
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <_sbrk+0x60>)
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c34:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <_sbrk+0x64>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d102      	bne.n	8003c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <_sbrk+0x64>)
 8003c3e:	4a12      	ldr	r2, [pc, #72]	; (8003c88 <_sbrk+0x68>)
 8003c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c42:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <_sbrk+0x64>)
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d207      	bcs.n	8003c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c50:	f005 fafe 	bl	8009250 <__errno>
 8003c54:	4603      	mov	r3, r0
 8003c56:	220c      	movs	r2, #12
 8003c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5e:	e009      	b.n	8003c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c60:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <_sbrk+0x64>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <_sbrk+0x64>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	4a05      	ldr	r2, [pc, #20]	; (8003c84 <_sbrk+0x64>)
 8003c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c72:	68fb      	ldr	r3, [r7, #12]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20020000 	.word	0x20020000
 8003c80:	00000400 	.word	0x00000400
 8003c84:	2000016c 	.word	0x2000016c
 8003c88:	200007d8 	.word	0x200007d8

08003c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c90:	4b06      	ldr	r3, [pc, #24]	; (8003cac <SystemInit+0x20>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	4a05      	ldr	r2, [pc, #20]	; (8003cac <SystemInit+0x20>)
 8003c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ca0:	bf00      	nop
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cb6:	f107 0308 	add.w	r3, r7, #8
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	609a      	str	r2, [r3, #8]
 8003cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cc4:	463b      	mov	r3, r7
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ccc:	4b1e      	ldr	r3, [pc, #120]	; (8003d48 <MX_TIM1_Init+0x98>)
 8003cce:	4a1f      	ldr	r2, [pc, #124]	; (8003d4c <MX_TIM1_Init+0x9c>)
 8003cd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8003cd2:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <MX_TIM1_Init+0x98>)
 8003cd4:	2253      	movs	r2, #83	; 0x53
 8003cd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cd8:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <MX_TIM1_Init+0x98>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003cde:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <MX_TIM1_Init+0x98>)
 8003ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ce4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ce6:	4b18      	ldr	r3, [pc, #96]	; (8003d48 <MX_TIM1_Init+0x98>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003cec:	4b16      	ldr	r3, [pc, #88]	; (8003d48 <MX_TIM1_Init+0x98>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <MX_TIM1_Init+0x98>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003cf8:	4813      	ldr	r0, [pc, #76]	; (8003d48 <MX_TIM1_Init+0x98>)
 8003cfa:	f003 fa5b 	bl	80071b4 <HAL_TIM_Base_Init>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003d04:	f7fe f88a 	bl	8001e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003d0e:	f107 0308 	add.w	r3, r7, #8
 8003d12:	4619      	mov	r1, r3
 8003d14:	480c      	ldr	r0, [pc, #48]	; (8003d48 <MX_TIM1_Init+0x98>)
 8003d16:	f003 fd99 	bl	800784c <HAL_TIM_ConfigClockSource>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003d20:	f7fe f87c 	bl	8001e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d24:	2300      	movs	r3, #0
 8003d26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4805      	ldr	r0, [pc, #20]	; (8003d48 <MX_TIM1_Init+0x98>)
 8003d32:	f004 f965 	bl	8008000 <HAL_TIMEx_MasterConfigSynchronization>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003d3c:	f7fe f86e 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003d40:	bf00      	nop
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	200006a8 	.word	0x200006a8
 8003d4c:	40010000 	.word	0x40010000

08003d50 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d56:	f107 0308 	add.w	r3, r7, #8
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	605a      	str	r2, [r3, #4]
 8003d60:	609a      	str	r2, [r3, #8]
 8003d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d64:	463b      	mov	r3, r7
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <MX_TIM2_Init+0x94>)
 8003d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <MX_TIM2_Init+0x94>)
 8003d76:	f240 3247 	movw	r2, #839	; 0x347
 8003d7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <MX_TIM2_Init+0x94>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003d82:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <MX_TIM2_Init+0x94>)
 8003d84:	2263      	movs	r2, #99	; 0x63
 8003d86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d88:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <MX_TIM2_Init+0x94>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d8e:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <MX_TIM2_Init+0x94>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003d94:	4813      	ldr	r0, [pc, #76]	; (8003de4 <MX_TIM2_Init+0x94>)
 8003d96:	f003 fa0d 	bl	80071b4 <HAL_TIM_Base_Init>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003da0:	f7fe f83c 	bl	8001e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003da8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003daa:	f107 0308 	add.w	r3, r7, #8
 8003dae:	4619      	mov	r1, r3
 8003db0:	480c      	ldr	r0, [pc, #48]	; (8003de4 <MX_TIM2_Init+0x94>)
 8003db2:	f003 fd4b 	bl	800784c <HAL_TIM_ConfigClockSource>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003dbc:	f7fe f82e 	bl	8001e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003dc8:	463b      	mov	r3, r7
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4805      	ldr	r0, [pc, #20]	; (8003de4 <MX_TIM2_Init+0x94>)
 8003dce:	f004 f917 	bl	8008000 <HAL_TIMEx_MasterConfigSynchronization>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003dd8:	f7fe f820 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ddc:	bf00      	nop
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	200006f0 	.word	0x200006f0

08003de8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dee:	1d3b      	adds	r3, r7, #4
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	60da      	str	r2, [r3, #12]
 8003dfa:	611a      	str	r2, [r3, #16]
 8003dfc:	615a      	str	r2, [r3, #20]
 8003dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003e00:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <MX_TIM13_Init+0x94>)
 8003e02:	4a1f      	ldr	r2, [pc, #124]	; (8003e80 <MX_TIM13_Init+0x98>)
 8003e04:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8003e06:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <MX_TIM13_Init+0x94>)
 8003e08:	f240 3247 	movw	r2, #839	; 0x347
 8003e0c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e0e:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <MX_TIM13_Init+0x94>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8003e14:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <MX_TIM13_Init+0x94>)
 8003e16:	2263      	movs	r2, #99	; 0x63
 8003e18:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e1a:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <MX_TIM13_Init+0x94>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e20:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <MX_TIM13_Init+0x94>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003e26:	4815      	ldr	r0, [pc, #84]	; (8003e7c <MX_TIM13_Init+0x94>)
 8003e28:	f003 f9c4 	bl	80071b4 <HAL_TIM_Base_Init>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8003e32:	f7fd fff3 	bl	8001e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003e36:	4811      	ldr	r0, [pc, #68]	; (8003e7c <MX_TIM13_Init+0x94>)
 8003e38:	f003 fae4 	bl	8007404 <HAL_TIM_PWM_Init>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8003e42:	f7fd ffeb 	bl	8001e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e46:	2360      	movs	r3, #96	; 0x60
 8003e48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e56:	1d3b      	adds	r3, r7, #4
 8003e58:	2200      	movs	r2, #0
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4807      	ldr	r0, [pc, #28]	; (8003e7c <MX_TIM13_Init+0x94>)
 8003e5e:	f003 fc33 	bl	80076c8 <HAL_TIM_PWM_ConfigChannel>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003e68:	f7fd ffd8 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003e6c:	4803      	ldr	r0, [pc, #12]	; (8003e7c <MX_TIM13_Init+0x94>)
 8003e6e:	f000 f85b 	bl	8003f28 <HAL_TIM_MspPostInit>

}
 8003e72:	bf00      	nop
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000660 	.word	0x20000660
 8003e80:	40001c00 	.word	0x40001c00

08003e84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <HAL_TIM_Base_MspInit+0x98>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d10e      	bne.n	8003eb4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	4b21      	ldr	r3, [pc, #132]	; (8003f20 <HAL_TIM_Base_MspInit+0x9c>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	4a20      	ldr	r2, [pc, #128]	; (8003f20 <HAL_TIM_Base_MspInit+0x9c>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <HAL_TIM_Base_MspInit+0x9c>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003eb2:	e02e      	b.n	8003f12 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebc:	d116      	bne.n	8003eec <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	4b17      	ldr	r3, [pc, #92]	; (8003f20 <HAL_TIM_Base_MspInit+0x9c>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	4a16      	ldr	r2, [pc, #88]	; (8003f20 <HAL_TIM_Base_MspInit+0x9c>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ece:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <HAL_TIM_Base_MspInit+0x9c>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003eda:	2200      	movs	r2, #0
 8003edc:	2100      	movs	r1, #0
 8003ede:	201c      	movs	r0, #28
 8003ee0:	f000 ffd5 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ee4:	201c      	movs	r0, #28
 8003ee6:	f000 ffee 	bl	8004ec6 <HAL_NVIC_EnableIRQ>
}
 8003eea:	e012      	b.n	8003f12 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0c      	ldr	r2, [pc, #48]	; (8003f24 <HAL_TIM_Base_MspInit+0xa0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d10d      	bne.n	8003f12 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_TIM_Base_MspInit+0x9c>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	4a08      	ldr	r2, [pc, #32]	; (8003f20 <HAL_TIM_Base_MspInit+0x9c>)
 8003f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f04:	6413      	str	r3, [r2, #64]	; 0x40
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_TIM_Base_MspInit+0x9c>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
}
 8003f12:	bf00      	nop
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40001c00 	.word	0x40001c00

08003f28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	f107 030c 	add.w	r3, r7, #12
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a12      	ldr	r2, [pc, #72]	; (8003f90 <HAL_TIM_MspPostInit+0x68>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d11e      	bne.n	8003f88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <HAL_TIM_MspPostInit+0x6c>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <HAL_TIM_MspPostInit+0x6c>)
 8003f54:	f043 0320 	orr.w	r3, r3, #32
 8003f58:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <HAL_TIM_MspPostInit+0x6c>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003f78:	2309      	movs	r3, #9
 8003f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f7c:	f107 030c 	add.w	r3, r7, #12
 8003f80:	4619      	mov	r1, r3
 8003f82:	4805      	ldr	r0, [pc, #20]	; (8003f98 <HAL_TIM_MspPostInit+0x70>)
 8003f84:	f001 fbbc 	bl	8005700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003f88:	bf00      	nop
 8003f8a:	3720      	adds	r7, #32
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40001c00 	.word	0x40001c00
 8003f94:	40023800 	.word	0x40023800
 8003f98:	40021400 	.word	0x40021400

08003f9c <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	4906      	ldr	r1, [pc, #24]	; (8003fbc <uart_init_esp+0x20>)
 8003fa4:	4806      	ldr	r0, [pc, #24]	; (8003fc0 <uart_init_esp+0x24>)
 8003fa6:	f004 f99a 	bl	80082de <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8003faa:	2201      	movs	r2, #1
 8003fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fb0:	4804      	ldr	r0, [pc, #16]	; (8003fc4 <uart_init_esp+0x28>)
 8003fb2:	f001 fd41 	bl	8005a38 <HAL_GPIO_WritePin>
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000171 	.word	0x20000171
 8003fc0:	2000077c 	.word	0x2000077c
 8003fc4:	40021400 	.word	0x40021400

08003fc8 <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8003fd4:	887a      	ldrh	r2, [r7, #2]
 8003fd6:	230a      	movs	r3, #10
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4803      	ldr	r0, [pc, #12]	; (8003fe8 <uart_EspSendBytes+0x20>)
 8003fdc:	f004 f8ed 	bl	80081ba <HAL_UART_Transmit>
}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	2000077c 	.word	0x2000077c

08003fec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a19      	ldr	r2, [pc, #100]	; (8004060 <HAL_UART_RxCpltCallback+0x74>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d10a      	bne.n	8004014 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8003ffe:	230a      	movs	r3, #10
 8004000:	2201      	movs	r2, #1
 8004002:	4918      	ldr	r1, [pc, #96]	; (8004064 <HAL_UART_RxCpltCallback+0x78>)
 8004004:	4818      	ldr	r0, [pc, #96]	; (8004068 <HAL_UART_RxCpltCallback+0x7c>)
 8004006:	f004 f8d8 	bl	80081ba <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800400a:	2201      	movs	r2, #1
 800400c:	4915      	ldr	r1, [pc, #84]	; (8004064 <HAL_UART_RxCpltCallback+0x78>)
 800400e:	4816      	ldr	r0, [pc, #88]	; (8004068 <HAL_UART_RxCpltCallback+0x7c>)
 8004010:	f004 f965 	bl	80082de <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a14      	ldr	r2, [pc, #80]	; (800406c <HAL_UART_RxCpltCallback+0x80>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d11b      	bne.n	8004056 <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 800401e:	4b14      	ldr	r3, [pc, #80]	; (8004070 <HAL_UART_RxCpltCallback+0x84>)
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b4f      	cmp	r3, #79	; 0x4f
 8004024:	d103      	bne.n	800402e <HAL_UART_RxCpltCallback+0x42>
 8004026:	4b13      	ldr	r3, [pc, #76]	; (8004074 <HAL_UART_RxCpltCallback+0x88>)
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	e00e      	b.n	800404c <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <HAL_UART_RxCpltCallback+0x84>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b61      	cmp	r3, #97	; 0x61
 8004034:	d103      	bne.n	800403e <HAL_UART_RxCpltCallback+0x52>
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <HAL_UART_RxCpltCallback+0x8c>)
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
 800403c:	e006      	b.n	800404c <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 800403e:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <HAL_UART_RxCpltCallback+0x84>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b41      	cmp	r3, #65	; 0x41
 8004044:	d102      	bne.n	800404c <HAL_UART_RxCpltCallback+0x60>
 8004046:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <HAL_UART_RxCpltCallback+0x8c>)
 8004048:	2201      	movs	r2, #1
 800404a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 800404c:	2201      	movs	r2, #1
 800404e:	4908      	ldr	r1, [pc, #32]	; (8004070 <HAL_UART_RxCpltCallback+0x84>)
 8004050:	480a      	ldr	r0, [pc, #40]	; (800407c <HAL_UART_RxCpltCallback+0x90>)
 8004052:	f004 f944 	bl	80082de <HAL_UART_Receive_IT>
	}
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40011000 	.word	0x40011000
 8004064:	20000170 	.word	0x20000170
 8004068:	20000738 	.word	0x20000738
 800406c:	40004400 	.word	0x40004400
 8004070:	20000171 	.word	0x20000171
 8004074:	20000172 	.word	0x20000172
 8004078:	20000154 	.word	0x20000154
 800407c:	2000077c 	.word	0x2000077c

08004080 <uartSendSensor>:
	if(check_esp == 1) return 1;
	return 0;
}
//snprintf(str2, sizeof(str2), "%d", val);

void uartSendSensor() {
 8004080:	b580      	push	{r7, lr}
 8004082:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8004086:	af00      	add	r7, sp, #0
	char *str = "#";
 8004088:	4b37      	ldr	r3, [pc, #220]	; (8004168 <uartSendSensor+0xe8>)
 800408a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
	char str1[50] = "SENSOR#";
 800408e:	4a37      	ldr	r2, [pc, #220]	; (800416c <uartSendSensor+0xec>)
 8004090:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004098:	e883 0003 	stmia.w	r3, {r0, r1}
 800409c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040a0:	222a      	movs	r2, #42	; 0x2a
 80040a2:	2100      	movs	r1, #0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f005 f8fd 	bl	80092a4 <memset>
//	char str3[60] = "Temperature: ";
	char *str2[50];
	snprintf(str2, sizeof(str2), "%d", (uint16_t)sensor_GetTemperature());
 80040aa:	f7fd fef1 	bl	8001e90 <sensor_GetTemperature>
 80040ae:	eef0 7a40 	vmov.f32	s15, s0
 80040b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b6:	ee17 3a90 	vmov	r3, s15
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 80040c0:	4a2b      	ldr	r2, [pc, #172]	; (8004170 <uartSendSensor+0xf0>)
 80040c2:	21c8      	movs	r1, #200	; 0xc8
 80040c4:	f005 f936 	bl	8009334 <sniprintf>
	strcat(str1, str2);
 80040c8:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 80040cc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f005 f962 	bl	800939c <strcat>
	strcat(str1,str);
 80040d8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80040dc:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 80040e0:	4618      	mov	r0, r3
 80040e2:	f005 f95b 	bl	800939c <strcat>
	//get ánh sáng
	char *str3[50];
	snprintf(str3, sizeof(str3), "%d", (uint16_t)sensor_GetLight());
 80040e6:	f7fd febb 	bl	8001e60 <sensor_GetLight>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 80040f0:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <uartSendSensor+0xf0>)
 80040f2:	21c8      	movs	r1, #200	; 0xc8
 80040f4:	f005 f91e 	bl	8009334 <sniprintf>
	strcat(str1, str3);
 80040f8:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80040fc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004100:	4611      	mov	r1, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f005 f94a 	bl	800939c <strcat>
	strcat(str1,str);
 8004108:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800410c:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8004110:	4618      	mov	r0, r3
 8004112:	f005 f943 	bl	800939c <strcat>
	// get Power
	char *str4[50];

	snprintf(str4, sizeof(str4), "%d", (uint16_t)sensor_GetPotentiometer());
 8004116:	f7fd feaf 	bl	8001e78 <sensor_GetPotentiometer>
 800411a:	4603      	mov	r3, r0
 800411c:	4638      	mov	r0, r7
 800411e:	4a14      	ldr	r2, [pc, #80]	; (8004170 <uartSendSensor+0xf0>)
 8004120:	21c8      	movs	r1, #200	; 0xc8
 8004122:	f005 f907 	bl	8009334 <sniprintf>
	strcat(str1, str4);
 8004126:	463a      	mov	r2, r7
 8004128:	f507 7316 	add.w	r3, r7, #600	; 0x258
 800412c:	4611      	mov	r1, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f005 f934 	bl	800939c <strcat>
	strcat(str1,str);
 8004134:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004138:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 800413c:	4618      	mov	r0, r3
 800413e:	f005 f92d 	bl	800939c <strcat>
	// gửi data
	uart_EspSendBytes(str1, strlen(str1));
 8004142:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004146:	4618      	mov	r0, r3
 8004148:	f7fc f842 	bl	80001d0 <strlen>
 800414c:	4603      	mov	r3, r0
 800414e:	b29a      	uxth	r2, r3
 8004150:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8004154:	4611      	mov	r1, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ff36 	bl	8003fc8 <uart_EspSendBytes>
}
 800415c:	bf00      	nop
 800415e:	f507 7724 	add.w	r7, r7, #656	; 0x290
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	0800a814 	.word	0x0800a814
 800416c:	0800a818 	.word	0x0800a818
 8004170:	0800a808 	.word	0x0800a808

08004174 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <MX_USART1_UART_Init+0x4c>)
 800417a:	4a12      	ldr	r2, [pc, #72]	; (80041c4 <MX_USART1_UART_Init+0x50>)
 800417c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <MX_USART1_UART_Init+0x4c>)
 8004180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004186:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <MX_USART1_UART_Init+0x4c>)
 8004188:	2200      	movs	r2, #0
 800418a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <MX_USART1_UART_Init+0x4c>)
 800418e:	2200      	movs	r2, #0
 8004190:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <MX_USART1_UART_Init+0x4c>)
 8004194:	2200      	movs	r2, #0
 8004196:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004198:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <MX_USART1_UART_Init+0x4c>)
 800419a:	220c      	movs	r2, #12
 800419c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800419e:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <MX_USART1_UART_Init+0x4c>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <MX_USART1_UART_Init+0x4c>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041aa:	4805      	ldr	r0, [pc, #20]	; (80041c0 <MX_USART1_UART_Init+0x4c>)
 80041ac:	f003 ffb8 	bl	8008120 <HAL_UART_Init>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80041b6:	f7fd fe31 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000738 	.word	0x20000738
 80041c4:	40011000 	.word	0x40011000

080041c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80041cc:	4b11      	ldr	r3, [pc, #68]	; (8004214 <MX_USART2_UART_Init+0x4c>)
 80041ce:	4a12      	ldr	r2, [pc, #72]	; (8004218 <MX_USART2_UART_Init+0x50>)
 80041d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80041d2:	4b10      	ldr	r3, [pc, #64]	; (8004214 <MX_USART2_UART_Init+0x4c>)
 80041d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80041da:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <MX_USART2_UART_Init+0x4c>)
 80041dc:	2200      	movs	r2, #0
 80041de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80041e0:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <MX_USART2_UART_Init+0x4c>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80041e6:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <MX_USART2_UART_Init+0x4c>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <MX_USART2_UART_Init+0x4c>)
 80041ee:	220c      	movs	r2, #12
 80041f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041f2:	4b08      	ldr	r3, [pc, #32]	; (8004214 <MX_USART2_UART_Init+0x4c>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <MX_USART2_UART_Init+0x4c>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80041fe:	4805      	ldr	r0, [pc, #20]	; (8004214 <MX_USART2_UART_Init+0x4c>)
 8004200:	f003 ff8e 	bl	8008120 <HAL_UART_Init>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800420a:	f7fd fe07 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	2000077c 	.word	0x2000077c
 8004218:	40004400 	.word	0x40004400

0800421c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08c      	sub	sp, #48	; 0x30
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004224:	f107 031c 	add.w	r3, r7, #28
 8004228:	2200      	movs	r2, #0
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	605a      	str	r2, [r3, #4]
 800422e:	609a      	str	r2, [r3, #8]
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a3a      	ldr	r2, [pc, #232]	; (8004324 <HAL_UART_MspInit+0x108>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d135      	bne.n	80042aa <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	61bb      	str	r3, [r7, #24]
 8004242:	4b39      	ldr	r3, [pc, #228]	; (8004328 <HAL_UART_MspInit+0x10c>)
 8004244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004246:	4a38      	ldr	r2, [pc, #224]	; (8004328 <HAL_UART_MspInit+0x10c>)
 8004248:	f043 0310 	orr.w	r3, r3, #16
 800424c:	6453      	str	r3, [r2, #68]	; 0x44
 800424e:	4b36      	ldr	r3, [pc, #216]	; (8004328 <HAL_UART_MspInit+0x10c>)
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	4b32      	ldr	r3, [pc, #200]	; (8004328 <HAL_UART_MspInit+0x10c>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	4a31      	ldr	r2, [pc, #196]	; (8004328 <HAL_UART_MspInit+0x10c>)
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	6313      	str	r3, [r2, #48]	; 0x30
 800426a:	4b2f      	ldr	r3, [pc, #188]	; (8004328 <HAL_UART_MspInit+0x10c>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004276:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800427a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427c:	2302      	movs	r3, #2
 800427e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004280:	2300      	movs	r3, #0
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004284:	2303      	movs	r3, #3
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004288:	2307      	movs	r3, #7
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800428c:	f107 031c 	add.w	r3, r7, #28
 8004290:	4619      	mov	r1, r3
 8004292:	4826      	ldr	r0, [pc, #152]	; (800432c <HAL_UART_MspInit+0x110>)
 8004294:	f001 fa34 	bl	8005700 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004298:	2200      	movs	r2, #0
 800429a:	2100      	movs	r1, #0
 800429c:	2025      	movs	r0, #37	; 0x25
 800429e:	f000 fdf6 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042a2:	2025      	movs	r0, #37	; 0x25
 80042a4:	f000 fe0f 	bl	8004ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80042a8:	e038      	b.n	800431c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a20      	ldr	r2, [pc, #128]	; (8004330 <HAL_UART_MspInit+0x114>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d133      	bne.n	800431c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80042b4:	2300      	movs	r3, #0
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <HAL_UART_MspInit+0x10c>)
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	4a1a      	ldr	r2, [pc, #104]	; (8004328 <HAL_UART_MspInit+0x10c>)
 80042be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c2:	6413      	str	r3, [r2, #64]	; 0x40
 80042c4:	4b18      	ldr	r3, [pc, #96]	; (8004328 <HAL_UART_MspInit+0x10c>)
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	4b14      	ldr	r3, [pc, #80]	; (8004328 <HAL_UART_MspInit+0x10c>)
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	4a13      	ldr	r2, [pc, #76]	; (8004328 <HAL_UART_MspInit+0x10c>)
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	6313      	str	r3, [r2, #48]	; 0x30
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <HAL_UART_MspInit+0x10c>)
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80042ec:	230c      	movs	r3, #12
 80042ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f0:	2302      	movs	r3, #2
 80042f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f8:	2303      	movs	r3, #3
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80042fc:	2307      	movs	r3, #7
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004300:	f107 031c 	add.w	r3, r7, #28
 8004304:	4619      	mov	r1, r3
 8004306:	4809      	ldr	r0, [pc, #36]	; (800432c <HAL_UART_MspInit+0x110>)
 8004308:	f001 f9fa 	bl	8005700 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800430c:	2200      	movs	r2, #0
 800430e:	2100      	movs	r1, #0
 8004310:	2026      	movs	r0, #38	; 0x26
 8004312:	f000 fdbc 	bl	8004e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004316:	2026      	movs	r0, #38	; 0x26
 8004318:	f000 fdd5 	bl	8004ec6 <HAL_NVIC_EnableIRQ>
}
 800431c:	bf00      	nop
 800431e:	3730      	adds	r7, #48	; 0x30
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40011000 	.word	0x40011000
 8004328:	40023800 	.word	0x40023800
 800432c:	40020000 	.word	0x40020000
 8004330:	40004400 	.word	0x40004400

08004334 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800436c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004338:	480d      	ldr	r0, [pc, #52]	; (8004370 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800433a:	490e      	ldr	r1, [pc, #56]	; (8004374 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800433c:	4a0e      	ldr	r2, [pc, #56]	; (8004378 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800433e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004340:	e002      	b.n	8004348 <LoopCopyDataInit>

08004342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004346:	3304      	adds	r3, #4

08004348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800434a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800434c:	d3f9      	bcc.n	8004342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800434e:	4a0b      	ldr	r2, [pc, #44]	; (800437c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004350:	4c0b      	ldr	r4, [pc, #44]	; (8004380 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004354:	e001      	b.n	800435a <LoopFillZerobss>

08004356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004358:	3204      	adds	r2, #4

0800435a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800435a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800435c:	d3fb      	bcc.n	8004356 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800435e:	f7ff fc95 	bl	8003c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004362:	f004 ff7b 	bl	800925c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004366:	f7fd fb59 	bl	8001a1c <main>
  bx  lr    
 800436a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800436c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004374:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 8004378:	08011890 	.word	0x08011890
  ldr r2, =_sbss
 800437c:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 8004380:	200007d4 	.word	0x200007d4

08004384 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004384:	e7fe      	b.n	8004384 <ADC_IRQHandler>
	...

08004388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800438c:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <HAL_Init+0x40>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a0d      	ldr	r2, [pc, #52]	; (80043c8 <HAL_Init+0x40>)
 8004392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004396:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_Init+0x40>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a0a      	ldr	r2, [pc, #40]	; (80043c8 <HAL_Init+0x40>)
 800439e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043a4:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <HAL_Init+0x40>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a07      	ldr	r2, [pc, #28]	; (80043c8 <HAL_Init+0x40>)
 80043aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043b0:	2003      	movs	r0, #3
 80043b2:	f000 fd61 	bl	8004e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043b6:	200f      	movs	r0, #15
 80043b8:	f000 f808 	bl	80043cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043bc:	f7ff fb26 	bl	8003a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40023c00 	.word	0x40023c00

080043cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043d4:	4b12      	ldr	r3, [pc, #72]	; (8004420 <HAL_InitTick+0x54>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b12      	ldr	r3, [pc, #72]	; (8004424 <HAL_InitTick+0x58>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	4619      	mov	r1, r3
 80043de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fd79 	bl	8004ee2 <HAL_SYSTICK_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e00e      	b.n	8004418 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b0f      	cmp	r3, #15
 80043fe:	d80a      	bhi.n	8004416 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004400:	2200      	movs	r2, #0
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	f04f 30ff 	mov.w	r0, #4294967295
 8004408:	f000 fd41 	bl	8004e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800440c:	4a06      	ldr	r2, [pc, #24]	; (8004428 <HAL_InitTick+0x5c>)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	e000      	b.n	8004418 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	200000bc 	.word	0x200000bc
 8004424:	200000c4 	.word	0x200000c4
 8004428:	200000c0 	.word	0x200000c0

0800442c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004430:	4b06      	ldr	r3, [pc, #24]	; (800444c <HAL_IncTick+0x20>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <HAL_IncTick+0x24>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4413      	add	r3, r2
 800443c:	4a04      	ldr	r2, [pc, #16]	; (8004450 <HAL_IncTick+0x24>)
 800443e:	6013      	str	r3, [r2, #0]
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	200000c4 	.word	0x200000c4
 8004450:	200007c0 	.word	0x200007c0

08004454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return uwTick;
 8004458:	4b03      	ldr	r3, [pc, #12]	; (8004468 <HAL_GetTick+0x14>)
 800445a:	681b      	ldr	r3, [r3, #0]
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	200007c0 	.word	0x200007c0

0800446c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004474:	f7ff ffee 	bl	8004454 <HAL_GetTick>
 8004478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d005      	beq.n	8004492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004486:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <HAL_Delay+0x44>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4413      	add	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004492:	bf00      	nop
 8004494:	f7ff ffde 	bl	8004454 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d8f7      	bhi.n	8004494 <HAL_Delay+0x28>
  {
  }
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	200000c4 	.word	0x200000c4

080044b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e033      	b.n	8004532 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fc f8da 	bl	800068c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d118      	bne.n	8004524 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80044fa:	f023 0302 	bic.w	r3, r3, #2
 80044fe:	f043 0202 	orr.w	r2, r3, #2
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fa68 	bl	80049dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	f043 0201 	orr.w	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	641a      	str	r2, [r3, #64]	; 0x40
 8004522:	e001      	b.n	8004528 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_ADC_Start_DMA+0x1e>
 8004556:	2302      	movs	r3, #2
 8004558:	e0e9      	b.n	800472e <HAL_ADC_Start_DMA+0x1f2>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b01      	cmp	r3, #1
 800456e:	d018      	beq.n	80045a2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004580:	4b6d      	ldr	r3, [pc, #436]	; (8004738 <HAL_ADC_Start_DMA+0x1fc>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a6d      	ldr	r2, [pc, #436]	; (800473c <HAL_ADC_Start_DMA+0x200>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	0c9a      	lsrs	r2, r3, #18
 800458c:	4613      	mov	r3, r2
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	4413      	add	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004594:	e002      	b.n	800459c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	3b01      	subs	r3, #1
 800459a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f9      	bne.n	8004596 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b0:	d107      	bne.n	80045c2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	f040 80a1 	bne.w	8004714 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80045fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800460c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004610:	d106      	bne.n	8004620 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	f023 0206 	bic.w	r2, r3, #6
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	645a      	str	r2, [r3, #68]	; 0x44
 800461e:	e002      	b.n	8004626 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800462e:	4b44      	ldr	r3, [pc, #272]	; (8004740 <HAL_ADC_Start_DMA+0x204>)
 8004630:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	4a43      	ldr	r2, [pc, #268]	; (8004744 <HAL_ADC_Start_DMA+0x208>)
 8004638:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	4a42      	ldr	r2, [pc, #264]	; (8004748 <HAL_ADC_Start_DMA+0x20c>)
 8004640:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004646:	4a41      	ldr	r2, [pc, #260]	; (800474c <HAL_ADC_Start_DMA+0x210>)
 8004648:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004652:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004662:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004672:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	334c      	adds	r3, #76	; 0x4c
 800467e:	4619      	mov	r1, r3
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f000 fce8 	bl	8005058 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	2b00      	cmp	r3, #0
 8004692:	d12a      	bne.n	80046ea <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a2d      	ldr	r2, [pc, #180]	; (8004750 <HAL_ADC_Start_DMA+0x214>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d015      	beq.n	80046ca <HAL_ADC_Start_DMA+0x18e>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2c      	ldr	r2, [pc, #176]	; (8004754 <HAL_ADC_Start_DMA+0x218>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d105      	bne.n	80046b4 <HAL_ADC_Start_DMA+0x178>
 80046a8:	4b25      	ldr	r3, [pc, #148]	; (8004740 <HAL_ADC_Start_DMA+0x204>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a27      	ldr	r2, [pc, #156]	; (8004758 <HAL_ADC_Start_DMA+0x21c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d136      	bne.n	800472c <HAL_ADC_Start_DMA+0x1f0>
 80046be:	4b20      	ldr	r3, [pc, #128]	; (8004740 <HAL_ADC_Start_DMA+0x204>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d130      	bne.n	800472c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d129      	bne.n	800472c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	e020      	b.n	800472c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a18      	ldr	r2, [pc, #96]	; (8004750 <HAL_ADC_Start_DMA+0x214>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d11b      	bne.n	800472c <HAL_ADC_Start_DMA+0x1f0>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d114      	bne.n	800472c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004710:	609a      	str	r2, [r3, #8]
 8004712:	e00b      	b.n	800472c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004718:	f043 0210 	orr.w	r2, r3, #16
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004724:	f043 0201 	orr.w	r2, r3, #1
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	200000bc 	.word	0x200000bc
 800473c:	431bde83 	.word	0x431bde83
 8004740:	40012300 	.word	0x40012300
 8004744:	08004bd5 	.word	0x08004bd5
 8004748:	08004c8f 	.word	0x08004c8f
 800474c:	08004cab 	.word	0x08004cab
 8004750:	40012000 	.word	0x40012000
 8004754:	40012100 	.word	0x40012100
 8004758:	40012200 	.word	0x40012200

0800475c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_ADC_ConfigChannel+0x1c>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e105      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x228>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b09      	cmp	r3, #9
 80047c2:	d925      	bls.n	8004810 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68d9      	ldr	r1, [r3, #12]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	4613      	mov	r3, r2
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	4413      	add	r3, r2
 80047d8:	3b1e      	subs	r3, #30
 80047da:	2207      	movs	r2, #7
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43da      	mvns	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	400a      	ands	r2, r1
 80047e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68d9      	ldr	r1, [r3, #12]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	4618      	mov	r0, r3
 80047fc:	4603      	mov	r3, r0
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4403      	add	r3, r0
 8004802:	3b1e      	subs	r3, #30
 8004804:	409a      	lsls	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	60da      	str	r2, [r3, #12]
 800480e:	e022      	b.n	8004856 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6919      	ldr	r1, [r3, #16]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	b29b      	uxth	r3, r3
 800481c:	461a      	mov	r2, r3
 800481e:	4613      	mov	r3, r2
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	4413      	add	r3, r2
 8004824:	2207      	movs	r2, #7
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43da      	mvns	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	400a      	ands	r2, r1
 8004832:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6919      	ldr	r1, [r3, #16]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	4618      	mov	r0, r3
 8004846:	4603      	mov	r3, r0
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4403      	add	r3, r0
 800484c:	409a      	lsls	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b06      	cmp	r3, #6
 800485c:	d824      	bhi.n	80048a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	3b05      	subs	r3, #5
 8004870:	221f      	movs	r2, #31
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43da      	mvns	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	400a      	ands	r2, r1
 800487e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	b29b      	uxth	r3, r3
 800488c:	4618      	mov	r0, r3
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	3b05      	subs	r3, #5
 800489a:	fa00 f203 	lsl.w	r2, r0, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	635a      	str	r2, [r3, #52]	; 0x34
 80048a6:	e04c      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b0c      	cmp	r3, #12
 80048ae:	d824      	bhi.n	80048fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	3b23      	subs	r3, #35	; 0x23
 80048c2:	221f      	movs	r2, #31
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43da      	mvns	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	400a      	ands	r2, r1
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	4618      	mov	r0, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	4613      	mov	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	3b23      	subs	r3, #35	; 0x23
 80048ec:	fa00 f203 	lsl.w	r2, r0, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
 80048f8:	e023      	b.n	8004942 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	3b41      	subs	r3, #65	; 0x41
 800490c:	221f      	movs	r2, #31
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43da      	mvns	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	400a      	ands	r2, r1
 800491a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	4618      	mov	r0, r3
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	3b41      	subs	r3, #65	; 0x41
 8004936:	fa00 f203 	lsl.w	r2, r0, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004942:	4b22      	ldr	r3, [pc, #136]	; (80049cc <HAL_ADC_ConfigChannel+0x234>)
 8004944:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a21      	ldr	r2, [pc, #132]	; (80049d0 <HAL_ADC_ConfigChannel+0x238>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d109      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x1cc>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b12      	cmp	r3, #18
 8004956:	d105      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a19      	ldr	r2, [pc, #100]	; (80049d0 <HAL_ADC_ConfigChannel+0x238>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d123      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x21e>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b10      	cmp	r3, #16
 8004974:	d003      	beq.n	800497e <HAL_ADC_ConfigChannel+0x1e6>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2b11      	cmp	r3, #17
 800497c:	d11b      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b10      	cmp	r3, #16
 8004990:	d111      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <HAL_ADC_ConfigChannel+0x23c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a10      	ldr	r2, [pc, #64]	; (80049d8 <HAL_ADC_ConfigChannel+0x240>)
 8004998:	fba2 2303 	umull	r2, r3, r2, r3
 800499c:	0c9a      	lsrs	r2, r3, #18
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049a8:	e002      	b.n	80049b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f9      	bne.n	80049aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40012300 	.word	0x40012300
 80049d0:	40012000 	.word	0x40012000
 80049d4:	200000bc 	.word	0x200000bc
 80049d8:	431bde83 	.word	0x431bde83

080049dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049e4:	4b79      	ldr	r3, [pc, #484]	; (8004bcc <ADC_Init+0x1f0>)
 80049e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	431a      	orrs	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6859      	ldr	r1, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	021a      	lsls	r2, r3, #8
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6859      	ldr	r1, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6899      	ldr	r1, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6e:	4a58      	ldr	r2, [pc, #352]	; (8004bd0 <ADC_Init+0x1f4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d022      	beq.n	8004aba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689a      	ldr	r2, [r3, #8]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6899      	ldr	r1, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004aa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6899      	ldr	r1, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
 8004ab8:	e00f      	b.n	8004ada <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ac8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ad8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0202 	bic.w	r2, r2, #2
 8004ae8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6899      	ldr	r1, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	7e1b      	ldrb	r3, [r3, #24]
 8004af4:	005a      	lsls	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01b      	beq.n	8004b40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6859      	ldr	r1, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	3b01      	subs	r3, #1
 8004b34:	035a      	lsls	r2, r3, #13
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	e007      	b.n	8004b50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	051a      	lsls	r2, r3, #20
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6899      	ldr	r1, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b92:	025a      	lsls	r2, r3, #9
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004baa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6899      	ldr	r1, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	029a      	lsls	r2, r3, #10
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	609a      	str	r2, [r3, #8]
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40012300 	.word	0x40012300
 8004bd0:	0f000001 	.word	0x0f000001

08004bd4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d13c      	bne.n	8004c68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d12b      	bne.n	8004c60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d127      	bne.n	8004c60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d006      	beq.n	8004c2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d119      	bne.n	8004c60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0220 	bic.w	r2, r2, #32
 8004c3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d105      	bne.n	8004c60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	f043 0201 	orr.w	r2, r3, #1
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f7ff fd7b 	bl	800475c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004c66:	e00e      	b.n	8004c86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f7ff fd85 	bl	8004784 <HAL_ADC_ErrorCallback>
}
 8004c7a:	e004      	b.n	8004c86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	4798      	blx	r3
}
 8004c86:	bf00      	nop
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f7ff fd67 	bl	8004770 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2240      	movs	r2, #64	; 0x40
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	f043 0204 	orr.w	r2, r3, #4
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f7ff fd5a 	bl	8004784 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cd0:	bf00      	nop
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <__NVIC_SetPriorityGrouping+0x44>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d0a:	4a04      	ldr	r2, [pc, #16]	; (8004d1c <__NVIC_SetPriorityGrouping+0x44>)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	60d3      	str	r3, [r2, #12]
}
 8004d10:	bf00      	nop
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	e000ed00 	.word	0xe000ed00

08004d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d24:	4b04      	ldr	r3, [pc, #16]	; (8004d38 <__NVIC_GetPriorityGrouping+0x18>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	0a1b      	lsrs	r3, r3, #8
 8004d2a:	f003 0307 	and.w	r3, r3, #7
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	e000ed00 	.word	0xe000ed00

08004d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	db0b      	blt.n	8004d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d4e:	79fb      	ldrb	r3, [r7, #7]
 8004d50:	f003 021f 	and.w	r2, r3, #31
 8004d54:	4907      	ldr	r1, [pc, #28]	; (8004d74 <__NVIC_EnableIRQ+0x38>)
 8004d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5a:	095b      	lsrs	r3, r3, #5
 8004d5c:	2001      	movs	r0, #1
 8004d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	e000e100 	.word	0xe000e100

08004d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	6039      	str	r1, [r7, #0]
 8004d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	db0a      	blt.n	8004da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	490c      	ldr	r1, [pc, #48]	; (8004dc4 <__NVIC_SetPriority+0x4c>)
 8004d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d96:	0112      	lsls	r2, r2, #4
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004da0:	e00a      	b.n	8004db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	4908      	ldr	r1, [pc, #32]	; (8004dc8 <__NVIC_SetPriority+0x50>)
 8004da8:	79fb      	ldrb	r3, [r7, #7]
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	3b04      	subs	r3, #4
 8004db0:	0112      	lsls	r2, r2, #4
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	440b      	add	r3, r1
 8004db6:	761a      	strb	r2, [r3, #24]
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	e000e100 	.word	0xe000e100
 8004dc8:	e000ed00 	.word	0xe000ed00

08004dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	f1c3 0307 	rsb	r3, r3, #7
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	bf28      	it	cs
 8004dea:	2304      	movcs	r3, #4
 8004dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	3304      	adds	r3, #4
 8004df2:	2b06      	cmp	r3, #6
 8004df4:	d902      	bls.n	8004dfc <NVIC_EncodePriority+0x30>
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	3b03      	subs	r3, #3
 8004dfa:	e000      	b.n	8004dfe <NVIC_EncodePriority+0x32>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e00:	f04f 32ff 	mov.w	r2, #4294967295
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0a:	43da      	mvns	r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	401a      	ands	r2, r3
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e14:	f04f 31ff 	mov.w	r1, #4294967295
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1e:	43d9      	mvns	r1, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e24:	4313      	orrs	r3, r2
         );
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3724      	adds	r7, #36	; 0x24
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e44:	d301      	bcc.n	8004e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e46:	2301      	movs	r3, #1
 8004e48:	e00f      	b.n	8004e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e4a:	4a0a      	ldr	r2, [pc, #40]	; (8004e74 <SysTick_Config+0x40>)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e52:	210f      	movs	r1, #15
 8004e54:	f04f 30ff 	mov.w	r0, #4294967295
 8004e58:	f7ff ff8e 	bl	8004d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <SysTick_Config+0x40>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e62:	4b04      	ldr	r3, [pc, #16]	; (8004e74 <SysTick_Config+0x40>)
 8004e64:	2207      	movs	r2, #7
 8004e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	e000e010 	.word	0xe000e010

08004e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff ff29 	bl	8004cd8 <__NVIC_SetPriorityGrouping>
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b086      	sub	sp, #24
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	4603      	mov	r3, r0
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	607a      	str	r2, [r7, #4]
 8004e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ea0:	f7ff ff3e 	bl	8004d20 <__NVIC_GetPriorityGrouping>
 8004ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	6978      	ldr	r0, [r7, #20]
 8004eac:	f7ff ff8e 	bl	8004dcc <NVIC_EncodePriority>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff ff5d 	bl	8004d78 <__NVIC_SetPriority>
}
 8004ebe:	bf00      	nop
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	4603      	mov	r3, r0
 8004ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff ff31 	bl	8004d3c <__NVIC_EnableIRQ>
}
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff ffa2 	bl	8004e34 <SysTick_Config>
 8004ef0:	4603      	mov	r3, r0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f08:	f7ff faa4 	bl	8004454 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e099      	b.n	800504c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0201 	bic.w	r2, r2, #1
 8004f36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f38:	e00f      	b.n	8004f5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f3a:	f7ff fa8b 	bl	8004454 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b05      	cmp	r3, #5
 8004f46:	d908      	bls.n	8004f5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2203      	movs	r2, #3
 8004f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e078      	b.n	800504c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1e8      	bne.n	8004f3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4b38      	ldr	r3, [pc, #224]	; (8005054 <HAL_DMA_Init+0x158>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d107      	bne.n	8004fc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0307 	bic.w	r3, r3, #7
 8004fda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	d117      	bne.n	800501e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00e      	beq.n	800501e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fb01 	bl	8005608 <DMA_CheckFifoParam>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2240      	movs	r2, #64	; 0x40
 8005010:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800501a:	2301      	movs	r3, #1
 800501c:	e016      	b.n	800504c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fab8 	bl	800559c <DMA_CalcBaseAndBitshift>
 800502c:	4603      	mov	r3, r0
 800502e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005034:	223f      	movs	r2, #63	; 0x3f
 8005036:	409a      	lsls	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	f010803f 	.word	0xf010803f

08005058 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_DMA_Start_IT+0x26>
 800507a:	2302      	movs	r3, #2
 800507c:	e040      	b.n	8005100 <HAL_DMA_Start_IT+0xa8>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b01      	cmp	r3, #1
 8005090:	d12f      	bne.n	80050f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 fa4a 	bl	8005540 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b0:	223f      	movs	r2, #63	; 0x3f
 80050b2:	409a      	lsls	r2, r3
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0216 	orr.w	r2, r2, #22
 80050c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d007      	beq.n	80050e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0208 	orr.w	r2, r2, #8
 80050de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	e005      	b.n	80050fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050fa:	2302      	movs	r3, #2
 80050fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80050fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005114:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005116:	f7ff f99d 	bl	8004454 <HAL_GetTick>
 800511a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d008      	beq.n	800513a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2280      	movs	r2, #128	; 0x80
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e052      	b.n	80051e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0216 	bic.w	r2, r2, #22
 8005148:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695a      	ldr	r2, [r3, #20]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005158:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	2b00      	cmp	r3, #0
 8005160:	d103      	bne.n	800516a <HAL_DMA_Abort+0x62>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005166:	2b00      	cmp	r3, #0
 8005168:	d007      	beq.n	800517a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0208 	bic.w	r2, r2, #8
 8005178:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800518a:	e013      	b.n	80051b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800518c:	f7ff f962 	bl	8004454 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b05      	cmp	r3, #5
 8005198:	d90c      	bls.n	80051b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2203      	movs	r2, #3
 80051a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e015      	b.n	80051e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1e4      	bne.n	800518c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c6:	223f      	movs	r2, #63	; 0x3f
 80051c8:	409a      	lsls	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d004      	beq.n	8005206 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2280      	movs	r2, #128	; 0x80
 8005200:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e00c      	b.n	8005220 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2205      	movs	r2, #5
 800520a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0201 	bic.w	r2, r2, #1
 800521c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005238:	4b92      	ldr	r3, [pc, #584]	; (8005484 <HAL_DMA_IRQHandler+0x258>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a92      	ldr	r2, [pc, #584]	; (8005488 <HAL_DMA_IRQHandler+0x25c>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	0a9b      	lsrs	r3, r3, #10
 8005244:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005256:	2208      	movs	r2, #8
 8005258:	409a      	lsls	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4013      	ands	r3, r2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01a      	beq.n	8005298 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d013      	beq.n	8005298 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0204 	bic.w	r2, r2, #4
 800527e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005284:	2208      	movs	r2, #8
 8005286:	409a      	lsls	r2, r3
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005290:	f043 0201 	orr.w	r2, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529c:	2201      	movs	r2, #1
 800529e:	409a      	lsls	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d012      	beq.n	80052ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00b      	beq.n	80052ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ba:	2201      	movs	r2, #1
 80052bc:	409a      	lsls	r2, r3
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c6:	f043 0202 	orr.w	r2, r3, #2
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d2:	2204      	movs	r2, #4
 80052d4:	409a      	lsls	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4013      	ands	r3, r2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d012      	beq.n	8005304 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f0:	2204      	movs	r2, #4
 80052f2:	409a      	lsls	r2, r3
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fc:	f043 0204 	orr.w	r2, r3, #4
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005308:	2210      	movs	r2, #16
 800530a:	409a      	lsls	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4013      	ands	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d043      	beq.n	800539c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d03c      	beq.n	800539c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005326:	2210      	movs	r2, #16
 8005328:	409a      	lsls	r2, r3
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d018      	beq.n	800536e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d108      	bne.n	800535c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d024      	beq.n	800539c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	4798      	blx	r3
 800535a:	e01f      	b.n	800539c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01b      	beq.n	800539c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	4798      	blx	r3
 800536c:	e016      	b.n	800539c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005378:	2b00      	cmp	r3, #0
 800537a:	d107      	bne.n	800538c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0208 	bic.w	r2, r2, #8
 800538a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a0:	2220      	movs	r2, #32
 80053a2:	409a      	lsls	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 808e 	beq.w	80054ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0310 	and.w	r3, r3, #16
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 8086 	beq.w	80054ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c2:	2220      	movs	r2, #32
 80053c4:	409a      	lsls	r2, r3
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b05      	cmp	r3, #5
 80053d4:	d136      	bne.n	8005444 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0216 	bic.w	r2, r2, #22
 80053e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695a      	ldr	r2, [r3, #20]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d103      	bne.n	8005406 <HAL_DMA_IRQHandler+0x1da>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005402:	2b00      	cmp	r3, #0
 8005404:	d007      	beq.n	8005416 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0208 	bic.w	r2, r2, #8
 8005414:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541a:	223f      	movs	r2, #63	; 0x3f
 800541c:	409a      	lsls	r2, r3
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005436:	2b00      	cmp	r3, #0
 8005438:	d07d      	beq.n	8005536 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	4798      	blx	r3
        }
        return;
 8005442:	e078      	b.n	8005536 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01c      	beq.n	800548c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d108      	bne.n	8005472 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005464:	2b00      	cmp	r3, #0
 8005466:	d030      	beq.n	80054ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
 8005470:	e02b      	b.n	80054ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d027      	beq.n	80054ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	4798      	blx	r3
 8005482:	e022      	b.n	80054ca <HAL_DMA_IRQHandler+0x29e>
 8005484:	200000bc 	.word	0x200000bc
 8005488:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10f      	bne.n	80054ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0210 	bic.w	r2, r2, #16
 80054a8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d032      	beq.n	8005538 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d022      	beq.n	8005524 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2205      	movs	r2, #5
 80054e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0201 	bic.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	3301      	adds	r3, #1
 80054fa:	60bb      	str	r3, [r7, #8]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d307      	bcc.n	8005512 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1f2      	bne.n	80054f6 <HAL_DMA_IRQHandler+0x2ca>
 8005510:	e000      	b.n	8005514 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005512:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005528:	2b00      	cmp	r3, #0
 800552a:	d005      	beq.n	8005538 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	4798      	blx	r3
 8005534:	e000      	b.n	8005538 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005536:	bf00      	nop
    }
  }
}
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop

08005540 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800555c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d108      	bne.n	8005580 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800557e:	e007      	b.n	8005590 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	60da      	str	r2, [r3, #12]
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	3b10      	subs	r3, #16
 80055ac:	4a14      	ldr	r2, [pc, #80]	; (8005600 <DMA_CalcBaseAndBitshift+0x64>)
 80055ae:	fba2 2303 	umull	r2, r3, r2, r3
 80055b2:	091b      	lsrs	r3, r3, #4
 80055b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055b6:	4a13      	ldr	r2, [pc, #76]	; (8005604 <DMA_CalcBaseAndBitshift+0x68>)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	461a      	mov	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d909      	bls.n	80055de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055d2:	f023 0303 	bic.w	r3, r3, #3
 80055d6:	1d1a      	adds	r2, r3, #4
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	659a      	str	r2, [r3, #88]	; 0x58
 80055dc:	e007      	b.n	80055ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055e6:	f023 0303 	bic.w	r3, r3, #3
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	aaaaaaab 	.word	0xaaaaaaab
 8005604:	0801172c 	.word	0x0801172c

08005608 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d11f      	bne.n	8005662 <DMA_CheckFifoParam+0x5a>
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	2b03      	cmp	r3, #3
 8005626:	d856      	bhi.n	80056d6 <DMA_CheckFifoParam+0xce>
 8005628:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <DMA_CheckFifoParam+0x28>)
 800562a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562e:	bf00      	nop
 8005630:	08005641 	.word	0x08005641
 8005634:	08005653 	.word	0x08005653
 8005638:	08005641 	.word	0x08005641
 800563c:	080056d7 	.word	0x080056d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d046      	beq.n	80056da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005650:	e043      	b.n	80056da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005656:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800565a:	d140      	bne.n	80056de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005660:	e03d      	b.n	80056de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800566a:	d121      	bne.n	80056b0 <DMA_CheckFifoParam+0xa8>
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b03      	cmp	r3, #3
 8005670:	d837      	bhi.n	80056e2 <DMA_CheckFifoParam+0xda>
 8005672:	a201      	add	r2, pc, #4	; (adr r2, 8005678 <DMA_CheckFifoParam+0x70>)
 8005674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005678:	08005689 	.word	0x08005689
 800567c:	0800568f 	.word	0x0800568f
 8005680:	08005689 	.word	0x08005689
 8005684:	080056a1 	.word	0x080056a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
      break;
 800568c:	e030      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d025      	beq.n	80056e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800569e:	e022      	b.n	80056e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056a8:	d11f      	bne.n	80056ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056ae:	e01c      	b.n	80056ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d903      	bls.n	80056be <DMA_CheckFifoParam+0xb6>
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d003      	beq.n	80056c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056bc:	e018      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	73fb      	strb	r3, [r7, #15]
      break;
 80056c2:	e015      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00e      	beq.n	80056ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]
      break;
 80056d4:	e00b      	b.n	80056ee <DMA_CheckFifoParam+0xe6>
      break;
 80056d6:	bf00      	nop
 80056d8:	e00a      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
      break;
 80056da:	bf00      	nop
 80056dc:	e008      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
      break;
 80056de:	bf00      	nop
 80056e0:	e006      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
      break;
 80056e2:	bf00      	nop
 80056e4:	e004      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
      break;
 80056e6:	bf00      	nop
 80056e8:	e002      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <DMA_CheckFifoParam+0xe8>
      break;
 80056ee:	bf00      	nop
    }
  } 
  
  return status; 
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop

08005700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005700:	b480      	push	{r7}
 8005702:	b089      	sub	sp, #36	; 0x24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800570a:	2300      	movs	r3, #0
 800570c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800570e:	2300      	movs	r3, #0
 8005710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005712:	2300      	movs	r3, #0
 8005714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	e16b      	b.n	80059f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800571c:	2201      	movs	r2, #1
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4013      	ands	r3, r2
 800572e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	429a      	cmp	r2, r3
 8005736:	f040 815a 	bne.w	80059ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	2b01      	cmp	r3, #1
 8005744:	d005      	beq.n	8005752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800574e:	2b02      	cmp	r3, #2
 8005750:	d130      	bne.n	80057b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	2203      	movs	r2, #3
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	43db      	mvns	r3, r3
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	4013      	ands	r3, r2
 8005768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	4313      	orrs	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005788:	2201      	movs	r2, #1
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	43db      	mvns	r3, r3
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	4013      	ands	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	f003 0201 	and.w	r2, r3, #1
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d017      	beq.n	80057f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	2203      	movs	r2, #3
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	43db      	mvns	r3, r3
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4013      	ands	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d123      	bne.n	8005844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	08da      	lsrs	r2, r3, #3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3208      	adds	r2, #8
 8005804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	220f      	movs	r2, #15
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	43db      	mvns	r3, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	691a      	ldr	r2, [r3, #16]
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	4313      	orrs	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	08da      	lsrs	r2, r3, #3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3208      	adds	r2, #8
 800583e:	69b9      	ldr	r1, [r7, #24]
 8005840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	2203      	movs	r2, #3
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 0203 	and.w	r2, r3, #3
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4313      	orrs	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80b4 	beq.w	80059ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	4b60      	ldr	r3, [pc, #384]	; (8005a0c <HAL_GPIO_Init+0x30c>)
 800588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588e:	4a5f      	ldr	r2, [pc, #380]	; (8005a0c <HAL_GPIO_Init+0x30c>)
 8005890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005894:	6453      	str	r3, [r2, #68]	; 0x44
 8005896:	4b5d      	ldr	r3, [pc, #372]	; (8005a0c <HAL_GPIO_Init+0x30c>)
 8005898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058a2:	4a5b      	ldr	r2, [pc, #364]	; (8005a10 <HAL_GPIO_Init+0x310>)
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	089b      	lsrs	r3, r3, #2
 80058a8:	3302      	adds	r3, #2
 80058aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	220f      	movs	r2, #15
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	43db      	mvns	r3, r3
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	4013      	ands	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a52      	ldr	r2, [pc, #328]	; (8005a14 <HAL_GPIO_Init+0x314>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d02b      	beq.n	8005926 <HAL_GPIO_Init+0x226>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a51      	ldr	r2, [pc, #324]	; (8005a18 <HAL_GPIO_Init+0x318>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d025      	beq.n	8005922 <HAL_GPIO_Init+0x222>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a50      	ldr	r2, [pc, #320]	; (8005a1c <HAL_GPIO_Init+0x31c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01f      	beq.n	800591e <HAL_GPIO_Init+0x21e>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a4f      	ldr	r2, [pc, #316]	; (8005a20 <HAL_GPIO_Init+0x320>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d019      	beq.n	800591a <HAL_GPIO_Init+0x21a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a4e      	ldr	r2, [pc, #312]	; (8005a24 <HAL_GPIO_Init+0x324>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <HAL_GPIO_Init+0x216>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a4d      	ldr	r2, [pc, #308]	; (8005a28 <HAL_GPIO_Init+0x328>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00d      	beq.n	8005912 <HAL_GPIO_Init+0x212>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a4c      	ldr	r2, [pc, #304]	; (8005a2c <HAL_GPIO_Init+0x32c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d007      	beq.n	800590e <HAL_GPIO_Init+0x20e>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a4b      	ldr	r2, [pc, #300]	; (8005a30 <HAL_GPIO_Init+0x330>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d101      	bne.n	800590a <HAL_GPIO_Init+0x20a>
 8005906:	2307      	movs	r3, #7
 8005908:	e00e      	b.n	8005928 <HAL_GPIO_Init+0x228>
 800590a:	2308      	movs	r3, #8
 800590c:	e00c      	b.n	8005928 <HAL_GPIO_Init+0x228>
 800590e:	2306      	movs	r3, #6
 8005910:	e00a      	b.n	8005928 <HAL_GPIO_Init+0x228>
 8005912:	2305      	movs	r3, #5
 8005914:	e008      	b.n	8005928 <HAL_GPIO_Init+0x228>
 8005916:	2304      	movs	r3, #4
 8005918:	e006      	b.n	8005928 <HAL_GPIO_Init+0x228>
 800591a:	2303      	movs	r3, #3
 800591c:	e004      	b.n	8005928 <HAL_GPIO_Init+0x228>
 800591e:	2302      	movs	r3, #2
 8005920:	e002      	b.n	8005928 <HAL_GPIO_Init+0x228>
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <HAL_GPIO_Init+0x228>
 8005926:	2300      	movs	r3, #0
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	f002 0203 	and.w	r2, r2, #3
 800592e:	0092      	lsls	r2, r2, #2
 8005930:	4093      	lsls	r3, r2
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4313      	orrs	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005938:	4935      	ldr	r1, [pc, #212]	; (8005a10 <HAL_GPIO_Init+0x310>)
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	089b      	lsrs	r3, r3, #2
 800593e:	3302      	adds	r3, #2
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005946:	4b3b      	ldr	r3, [pc, #236]	; (8005a34 <HAL_GPIO_Init+0x334>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	43db      	mvns	r3, r3
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	4013      	ands	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800596a:	4a32      	ldr	r2, [pc, #200]	; (8005a34 <HAL_GPIO_Init+0x334>)
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005970:	4b30      	ldr	r3, [pc, #192]	; (8005a34 <HAL_GPIO_Init+0x334>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005994:	4a27      	ldr	r2, [pc, #156]	; (8005a34 <HAL_GPIO_Init+0x334>)
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800599a:	4b26      	ldr	r3, [pc, #152]	; (8005a34 <HAL_GPIO_Init+0x334>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059be:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <HAL_GPIO_Init+0x334>)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059c4:	4b1b      	ldr	r3, [pc, #108]	; (8005a34 <HAL_GPIO_Init+0x334>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	43db      	mvns	r3, r3
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	4013      	ands	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059e8:	4a12      	ldr	r2, [pc, #72]	; (8005a34 <HAL_GPIO_Init+0x334>)
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	3301      	adds	r3, #1
 80059f2:	61fb      	str	r3, [r7, #28]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	2b0f      	cmp	r3, #15
 80059f8:	f67f ae90 	bls.w	800571c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059fc:	bf00      	nop
 80059fe:	bf00      	nop
 8005a00:	3724      	adds	r7, #36	; 0x24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	40013800 	.word	0x40013800
 8005a14:	40020000 	.word	0x40020000
 8005a18:	40020400 	.word	0x40020400
 8005a1c:	40020800 	.word	0x40020800
 8005a20:	40020c00 	.word	0x40020c00
 8005a24:	40021000 	.word	0x40021000
 8005a28:	40021400 	.word	0x40021400
 8005a2c:	40021800 	.word	0x40021800
 8005a30:	40021c00 	.word	0x40021c00
 8005a34:	40013c00 	.word	0x40013c00

08005a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	807b      	strh	r3, [r7, #2]
 8005a44:	4613      	mov	r3, r2
 8005a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a48:	787b      	ldrb	r3, [r7, #1]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a4e:	887a      	ldrh	r2, [r7, #2]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a54:	e003      	b.n	8005a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a56:	887b      	ldrh	r3, [r7, #2]
 8005a58:	041a      	lsls	r2, r3, #16
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	619a      	str	r2, [r3, #24]
}
 8005a5e:	bf00      	nop
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
	...

08005a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e12b      	b.n	8005cd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7fb f95e 	bl	8000d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2224      	movs	r2, #36	; 0x24
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0201 	bic.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005abe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ace:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ad0:	f000 fd5c 	bl	800658c <HAL_RCC_GetPCLK1Freq>
 8005ad4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	4a81      	ldr	r2, [pc, #516]	; (8005ce0 <HAL_I2C_Init+0x274>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d807      	bhi.n	8005af0 <HAL_I2C_Init+0x84>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4a80      	ldr	r2, [pc, #512]	; (8005ce4 <HAL_I2C_Init+0x278>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	bf94      	ite	ls
 8005ae8:	2301      	movls	r3, #1
 8005aea:	2300      	movhi	r3, #0
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	e006      	b.n	8005afe <HAL_I2C_Init+0x92>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4a7d      	ldr	r2, [pc, #500]	; (8005ce8 <HAL_I2C_Init+0x27c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	bf94      	ite	ls
 8005af8:	2301      	movls	r3, #1
 8005afa:	2300      	movhi	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e0e7      	b.n	8005cd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4a78      	ldr	r2, [pc, #480]	; (8005cec <HAL_I2C_Init+0x280>)
 8005b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0e:	0c9b      	lsrs	r3, r3, #18
 8005b10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	4a6a      	ldr	r2, [pc, #424]	; (8005ce0 <HAL_I2C_Init+0x274>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d802      	bhi.n	8005b40 <HAL_I2C_Init+0xd4>
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	e009      	b.n	8005b54 <HAL_I2C_Init+0xe8>
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b46:	fb02 f303 	mul.w	r3, r2, r3
 8005b4a:	4a69      	ldr	r2, [pc, #420]	; (8005cf0 <HAL_I2C_Init+0x284>)
 8005b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b50:	099b      	lsrs	r3, r3, #6
 8005b52:	3301      	adds	r3, #1
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6812      	ldr	r2, [r2, #0]
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	495c      	ldr	r1, [pc, #368]	; (8005ce0 <HAL_I2C_Init+0x274>)
 8005b70:	428b      	cmp	r3, r1
 8005b72:	d819      	bhi.n	8005ba8 <HAL_I2C_Init+0x13c>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	1e59      	subs	r1, r3, #1
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b82:	1c59      	adds	r1, r3, #1
 8005b84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b88:	400b      	ands	r3, r1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <HAL_I2C_Init+0x138>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	1e59      	subs	r1, r3, #1
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ba2:	e051      	b.n	8005c48 <HAL_I2C_Init+0x1dc>
 8005ba4:	2304      	movs	r3, #4
 8005ba6:	e04f      	b.n	8005c48 <HAL_I2C_Init+0x1dc>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d111      	bne.n	8005bd4 <HAL_I2C_Init+0x168>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	1e58      	subs	r0, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6859      	ldr	r1, [r3, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	440b      	add	r3, r1
 8005bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	bf0c      	ite	eq
 8005bcc:	2301      	moveq	r3, #1
 8005bce:	2300      	movne	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	e012      	b.n	8005bfa <HAL_I2C_Init+0x18e>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	1e58      	subs	r0, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6859      	ldr	r1, [r3, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	0099      	lsls	r1, r3, #2
 8005be4:	440b      	add	r3, r1
 8005be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bea:	3301      	adds	r3, #1
 8005bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	bf0c      	ite	eq
 8005bf4:	2301      	moveq	r3, #1
 8005bf6:	2300      	movne	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_I2C_Init+0x196>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e022      	b.n	8005c48 <HAL_I2C_Init+0x1dc>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10e      	bne.n	8005c28 <HAL_I2C_Init+0x1bc>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	1e58      	subs	r0, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6859      	ldr	r1, [r3, #4]
 8005c12:	460b      	mov	r3, r1
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	440b      	add	r3, r1
 8005c18:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c26:	e00f      	b.n	8005c48 <HAL_I2C_Init+0x1dc>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	1e58      	subs	r0, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6859      	ldr	r1, [r3, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	0099      	lsls	r1, r3, #2
 8005c38:	440b      	add	r3, r1
 8005c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c3e:	3301      	adds	r3, #1
 8005c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c48:	6879      	ldr	r1, [r7, #4]
 8005c4a:	6809      	ldr	r1, [r1, #0]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69da      	ldr	r2, [r3, #28]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6911      	ldr	r1, [r2, #16]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	68d2      	ldr	r2, [r2, #12]
 8005c82:	4311      	orrs	r1, r2
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	6812      	ldr	r2, [r2, #0]
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695a      	ldr	r2, [r3, #20]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0201 	orr.w	r2, r2, #1
 8005cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	000186a0 	.word	0x000186a0
 8005ce4:	001e847f 	.word	0x001e847f
 8005ce8:	003d08ff 	.word	0x003d08ff
 8005cec:	431bde83 	.word	0x431bde83
 8005cf0:	10624dd3 	.word	0x10624dd3

08005cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e264      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d075      	beq.n	8005dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d12:	4ba3      	ldr	r3, [pc, #652]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f003 030c 	and.w	r3, r3, #12
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d00c      	beq.n	8005d38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d1e:	4ba0      	ldr	r3, [pc, #640]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d112      	bne.n	8005d50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d2a:	4b9d      	ldr	r3, [pc, #628]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d36:	d10b      	bne.n	8005d50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d38:	4b99      	ldr	r3, [pc, #612]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d05b      	beq.n	8005dfc <HAL_RCC_OscConfig+0x108>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d157      	bne.n	8005dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e23f      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d58:	d106      	bne.n	8005d68 <HAL_RCC_OscConfig+0x74>
 8005d5a:	4b91      	ldr	r3, [pc, #580]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a90      	ldr	r2, [pc, #576]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	e01d      	b.n	8005da4 <HAL_RCC_OscConfig+0xb0>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d70:	d10c      	bne.n	8005d8c <HAL_RCC_OscConfig+0x98>
 8005d72:	4b8b      	ldr	r3, [pc, #556]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a8a      	ldr	r2, [pc, #552]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	4b88      	ldr	r3, [pc, #544]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a87      	ldr	r2, [pc, #540]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	e00b      	b.n	8005da4 <HAL_RCC_OscConfig+0xb0>
 8005d8c:	4b84      	ldr	r3, [pc, #528]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a83      	ldr	r2, [pc, #524]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	4b81      	ldr	r3, [pc, #516]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a80      	ldr	r2, [pc, #512]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d013      	beq.n	8005dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dac:	f7fe fb52 	bl	8004454 <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005db4:	f7fe fb4e 	bl	8004454 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b64      	cmp	r3, #100	; 0x64
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e204      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc6:	4b76      	ldr	r3, [pc, #472]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0f0      	beq.n	8005db4 <HAL_RCC_OscConfig+0xc0>
 8005dd2:	e014      	b.n	8005dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd4:	f7fe fb3e 	bl	8004454 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ddc:	f7fe fb3a 	bl	8004454 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b64      	cmp	r3, #100	; 0x64
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e1f0      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dee:	4b6c      	ldr	r3, [pc, #432]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1f0      	bne.n	8005ddc <HAL_RCC_OscConfig+0xe8>
 8005dfa:	e000      	b.n	8005dfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d063      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e0a:	4b65      	ldr	r3, [pc, #404]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 030c 	and.w	r3, r3, #12
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00b      	beq.n	8005e2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e16:	4b62      	ldr	r3, [pc, #392]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e1e:	2b08      	cmp	r3, #8
 8005e20:	d11c      	bne.n	8005e5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e22:	4b5f      	ldr	r3, [pc, #380]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d116      	bne.n	8005e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e2e:	4b5c      	ldr	r3, [pc, #368]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <HAL_RCC_OscConfig+0x152>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d001      	beq.n	8005e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e1c4      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e46:	4b56      	ldr	r3, [pc, #344]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	4952      	ldr	r1, [pc, #328]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e5a:	e03a      	b.n	8005ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d020      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e64:	4b4f      	ldr	r3, [pc, #316]	; (8005fa4 <HAL_RCC_OscConfig+0x2b0>)
 8005e66:	2201      	movs	r2, #1
 8005e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6a:	f7fe faf3 	bl	8004454 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e72:	f7fe faef 	bl	8004454 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e1a5      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e84:	4b46      	ldr	r3, [pc, #280]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0f0      	beq.n	8005e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e90:	4b43      	ldr	r3, [pc, #268]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	4940      	ldr	r1, [pc, #256]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	600b      	str	r3, [r1, #0]
 8005ea4:	e015      	b.n	8005ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ea6:	4b3f      	ldr	r3, [pc, #252]	; (8005fa4 <HAL_RCC_OscConfig+0x2b0>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eac:	f7fe fad2 	bl	8004454 <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eb4:	f7fe face 	bl	8004454 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e184      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec6:	4b36      	ldr	r3, [pc, #216]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f0      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d030      	beq.n	8005f40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d016      	beq.n	8005f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ee6:	4b30      	ldr	r3, [pc, #192]	; (8005fa8 <HAL_RCC_OscConfig+0x2b4>)
 8005ee8:	2201      	movs	r2, #1
 8005eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eec:	f7fe fab2 	bl	8004454 <HAL_GetTick>
 8005ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ef2:	e008      	b.n	8005f06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ef4:	f7fe faae 	bl	8004454 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e164      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f06:	4b26      	ldr	r3, [pc, #152]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0f0      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x200>
 8005f12:	e015      	b.n	8005f40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f14:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <HAL_RCC_OscConfig+0x2b4>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f1a:	f7fe fa9b 	bl	8004454 <HAL_GetTick>
 8005f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f20:	e008      	b.n	8005f34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f22:	f7fe fa97 	bl	8004454 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e14d      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f34:	4b1a      	ldr	r3, [pc, #104]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1f0      	bne.n	8005f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80a0 	beq.w	800608e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f52:	4b13      	ldr	r3, [pc, #76]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10f      	bne.n	8005f7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	4b0f      	ldr	r3, [pc, #60]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	4a0e      	ldr	r2, [pc, #56]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <HAL_RCC_OscConfig+0x2ac>)
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f76:	60bb      	str	r3, [r7, #8]
 8005f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <HAL_RCC_OscConfig+0x2b8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d121      	bne.n	8005fce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f8a:	4b08      	ldr	r3, [pc, #32]	; (8005fac <HAL_RCC_OscConfig+0x2b8>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a07      	ldr	r2, [pc, #28]	; (8005fac <HAL_RCC_OscConfig+0x2b8>)
 8005f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f96:	f7fe fa5d 	bl	8004454 <HAL_GetTick>
 8005f9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9c:	e011      	b.n	8005fc2 <HAL_RCC_OscConfig+0x2ce>
 8005f9e:	bf00      	nop
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	42470000 	.word	0x42470000
 8005fa8:	42470e80 	.word	0x42470e80
 8005fac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb0:	f7fe fa50 	bl	8004454 <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e106      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc2:	4b85      	ldr	r3, [pc, #532]	; (80061d8 <HAL_RCC_OscConfig+0x4e4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0f0      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d106      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x2f0>
 8005fd6:	4b81      	ldr	r3, [pc, #516]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8005fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fda:	4a80      	ldr	r2, [pc, #512]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8005fe2:	e01c      	b.n	800601e <HAL_RCC_OscConfig+0x32a>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b05      	cmp	r3, #5
 8005fea:	d10c      	bne.n	8006006 <HAL_RCC_OscConfig+0x312>
 8005fec:	4b7b      	ldr	r3, [pc, #492]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8005fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff0:	4a7a      	ldr	r2, [pc, #488]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8005ff2:	f043 0304 	orr.w	r3, r3, #4
 8005ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff8:	4b78      	ldr	r3, [pc, #480]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8005ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffc:	4a77      	ldr	r2, [pc, #476]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8005ffe:	f043 0301 	orr.w	r3, r3, #1
 8006002:	6713      	str	r3, [r2, #112]	; 0x70
 8006004:	e00b      	b.n	800601e <HAL_RCC_OscConfig+0x32a>
 8006006:	4b75      	ldr	r3, [pc, #468]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600a:	4a74      	ldr	r2, [pc, #464]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	6713      	str	r3, [r2, #112]	; 0x70
 8006012:	4b72      	ldr	r3, [pc, #456]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006016:	4a71      	ldr	r2, [pc, #452]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006018:	f023 0304 	bic.w	r3, r3, #4
 800601c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d015      	beq.n	8006052 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006026:	f7fe fa15 	bl	8004454 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800602c:	e00a      	b.n	8006044 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800602e:	f7fe fa11 	bl	8004454 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	f241 3288 	movw	r2, #5000	; 0x1388
 800603c:	4293      	cmp	r3, r2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e0c5      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006044:	4b65      	ldr	r3, [pc, #404]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0ee      	beq.n	800602e <HAL_RCC_OscConfig+0x33a>
 8006050:	e014      	b.n	800607c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006052:	f7fe f9ff 	bl	8004454 <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006058:	e00a      	b.n	8006070 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800605a:	f7fe f9fb 	bl	8004454 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	f241 3288 	movw	r2, #5000	; 0x1388
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e0af      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006070:	4b5a      	ldr	r3, [pc, #360]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1ee      	bne.n	800605a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800607c:	7dfb      	ldrb	r3, [r7, #23]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d105      	bne.n	800608e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006082:	4b56      	ldr	r3, [pc, #344]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	4a55      	ldr	r2, [pc, #340]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800608c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 809b 	beq.w	80061ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006098:	4b50      	ldr	r3, [pc, #320]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 030c 	and.w	r3, r3, #12
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d05c      	beq.n	800615e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d141      	bne.n	8006130 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ac:	4b4c      	ldr	r3, [pc, #304]	; (80061e0 <HAL_RCC_OscConfig+0x4ec>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b2:	f7fe f9cf 	bl	8004454 <HAL_GetTick>
 80060b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060b8:	e008      	b.n	80060cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ba:	f7fe f9cb 	bl	8004454 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e081      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060cc:	4b43      	ldr	r3, [pc, #268]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1f0      	bne.n	80060ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	431a      	orrs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e6:	019b      	lsls	r3, r3, #6
 80060e8:	431a      	orrs	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	085b      	lsrs	r3, r3, #1
 80060f0:	3b01      	subs	r3, #1
 80060f2:	041b      	lsls	r3, r3, #16
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	061b      	lsls	r3, r3, #24
 80060fc:	4937      	ldr	r1, [pc, #220]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006102:	4b37      	ldr	r3, [pc, #220]	; (80061e0 <HAL_RCC_OscConfig+0x4ec>)
 8006104:	2201      	movs	r2, #1
 8006106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006108:	f7fe f9a4 	bl	8004454 <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006110:	f7fe f9a0 	bl	8004454 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e056      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006122:	4b2e      	ldr	r3, [pc, #184]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0f0      	beq.n	8006110 <HAL_RCC_OscConfig+0x41c>
 800612e:	e04e      	b.n	80061ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006130:	4b2b      	ldr	r3, [pc, #172]	; (80061e0 <HAL_RCC_OscConfig+0x4ec>)
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006136:	f7fe f98d 	bl	8004454 <HAL_GetTick>
 800613a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800613c:	e008      	b.n	8006150 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800613e:	f7fe f989 	bl	8004454 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e03f      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006150:	4b22      	ldr	r3, [pc, #136]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1f0      	bne.n	800613e <HAL_RCC_OscConfig+0x44a>
 800615c:	e037      	b.n	80061ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d101      	bne.n	800616a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e032      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800616a:	4b1c      	ldr	r3, [pc, #112]	; (80061dc <HAL_RCC_OscConfig+0x4e8>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d028      	beq.n	80061ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006182:	429a      	cmp	r2, r3
 8006184:	d121      	bne.n	80061ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006190:	429a      	cmp	r2, r3
 8006192:	d11a      	bne.n	80061ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800619a:	4013      	ands	r3, r2
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d111      	bne.n	80061ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b0:	085b      	lsrs	r3, r3, #1
 80061b2:	3b01      	subs	r3, #1
 80061b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d107      	bne.n	80061ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d001      	beq.n	80061ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	40007000 	.word	0x40007000
 80061dc:	40023800 	.word	0x40023800
 80061e0:	42470060 	.word	0x42470060

080061e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e0cc      	b.n	8006392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061f8:	4b68      	ldr	r3, [pc, #416]	; (800639c <HAL_RCC_ClockConfig+0x1b8>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0307 	and.w	r3, r3, #7
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d90c      	bls.n	8006220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006206:	4b65      	ldr	r3, [pc, #404]	; (800639c <HAL_RCC_ClockConfig+0x1b8>)
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	b2d2      	uxtb	r2, r2
 800620c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800620e:	4b63      	ldr	r3, [pc, #396]	; (800639c <HAL_RCC_ClockConfig+0x1b8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	429a      	cmp	r2, r3
 800621a:	d001      	beq.n	8006220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e0b8      	b.n	8006392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0302 	and.w	r3, r3, #2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d020      	beq.n	800626e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b00      	cmp	r3, #0
 8006236:	d005      	beq.n	8006244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006238:	4b59      	ldr	r3, [pc, #356]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	4a58      	ldr	r2, [pc, #352]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 800623e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006242:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b00      	cmp	r3, #0
 800624e:	d005      	beq.n	800625c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006250:	4b53      	ldr	r3, [pc, #332]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	4a52      	ldr	r2, [pc, #328]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800625a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800625c:	4b50      	ldr	r3, [pc, #320]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	494d      	ldr	r1, [pc, #308]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	4313      	orrs	r3, r2
 800626c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d044      	beq.n	8006304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d107      	bne.n	8006292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006282:	4b47      	ldr	r3, [pc, #284]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d119      	bne.n	80062c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e07f      	b.n	8006392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d003      	beq.n	80062a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d107      	bne.n	80062b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062a2:	4b3f      	ldr	r3, [pc, #252]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d109      	bne.n	80062c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e06f      	b.n	8006392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062b2:	4b3b      	ldr	r3, [pc, #236]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e067      	b.n	8006392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062c2:	4b37      	ldr	r3, [pc, #220]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f023 0203 	bic.w	r2, r3, #3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	4934      	ldr	r1, [pc, #208]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062d4:	f7fe f8be 	bl	8004454 <HAL_GetTick>
 80062d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062da:	e00a      	b.n	80062f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062dc:	f7fe f8ba 	bl	8004454 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e04f      	b.n	8006392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062f2:	4b2b      	ldr	r3, [pc, #172]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 020c 	and.w	r2, r3, #12
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	429a      	cmp	r2, r3
 8006302:	d1eb      	bne.n	80062dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006304:	4b25      	ldr	r3, [pc, #148]	; (800639c <HAL_RCC_ClockConfig+0x1b8>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d20c      	bcs.n	800632c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006312:	4b22      	ldr	r3, [pc, #136]	; (800639c <HAL_RCC_ClockConfig+0x1b8>)
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800631a:	4b20      	ldr	r3, [pc, #128]	; (800639c <HAL_RCC_ClockConfig+0x1b8>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	429a      	cmp	r2, r3
 8006326:	d001      	beq.n	800632c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e032      	b.n	8006392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006338:	4b19      	ldr	r3, [pc, #100]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	4916      	ldr	r1, [pc, #88]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	4313      	orrs	r3, r2
 8006348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d009      	beq.n	800636a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006356:	4b12      	ldr	r3, [pc, #72]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	490e      	ldr	r1, [pc, #56]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006366:	4313      	orrs	r3, r2
 8006368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800636a:	f000 f821 	bl	80063b0 <HAL_RCC_GetSysClockFreq>
 800636e:	4602      	mov	r2, r0
 8006370:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	091b      	lsrs	r3, r3, #4
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	490a      	ldr	r1, [pc, #40]	; (80063a4 <HAL_RCC_ClockConfig+0x1c0>)
 800637c:	5ccb      	ldrb	r3, [r1, r3]
 800637e:	fa22 f303 	lsr.w	r3, r2, r3
 8006382:	4a09      	ldr	r2, [pc, #36]	; (80063a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006386:	4b09      	ldr	r3, [pc, #36]	; (80063ac <HAL_RCC_ClockConfig+0x1c8>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe f81e 	bl	80043cc <HAL_InitTick>

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	40023c00 	.word	0x40023c00
 80063a0:	40023800 	.word	0x40023800
 80063a4:	08011714 	.word	0x08011714
 80063a8:	200000bc 	.word	0x200000bc
 80063ac:	200000c0 	.word	0x200000c0

080063b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	607b      	str	r3, [r7, #4]
 80063bc:	2300      	movs	r3, #0
 80063be:	60fb      	str	r3, [r7, #12]
 80063c0:	2300      	movs	r3, #0
 80063c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063c8:	4b67      	ldr	r3, [pc, #412]	; (8006568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 030c 	and.w	r3, r3, #12
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d00d      	beq.n	80063f0 <HAL_RCC_GetSysClockFreq+0x40>
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	f200 80bd 	bhi.w	8006554 <HAL_RCC_GetSysClockFreq+0x1a4>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <HAL_RCC_GetSysClockFreq+0x34>
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d003      	beq.n	80063ea <HAL_RCC_GetSysClockFreq+0x3a>
 80063e2:	e0b7      	b.n	8006554 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063e4:	4b61      	ldr	r3, [pc, #388]	; (800656c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80063e6:	60bb      	str	r3, [r7, #8]
       break;
 80063e8:	e0b7      	b.n	800655a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063ea:	4b61      	ldr	r3, [pc, #388]	; (8006570 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80063ec:	60bb      	str	r3, [r7, #8]
      break;
 80063ee:	e0b4      	b.n	800655a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063f0:	4b5d      	ldr	r3, [pc, #372]	; (8006568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063fa:	4b5b      	ldr	r3, [pc, #364]	; (8006568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d04d      	beq.n	80064a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006406:	4b58      	ldr	r3, [pc, #352]	; (8006568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	099b      	lsrs	r3, r3, #6
 800640c:	461a      	mov	r2, r3
 800640e:	f04f 0300 	mov.w	r3, #0
 8006412:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006416:	f04f 0100 	mov.w	r1, #0
 800641a:	ea02 0800 	and.w	r8, r2, r0
 800641e:	ea03 0901 	and.w	r9, r3, r1
 8006422:	4640      	mov	r0, r8
 8006424:	4649      	mov	r1, r9
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	f04f 0300 	mov.w	r3, #0
 800642e:	014b      	lsls	r3, r1, #5
 8006430:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006434:	0142      	lsls	r2, r0, #5
 8006436:	4610      	mov	r0, r2
 8006438:	4619      	mov	r1, r3
 800643a:	ebb0 0008 	subs.w	r0, r0, r8
 800643e:	eb61 0109 	sbc.w	r1, r1, r9
 8006442:	f04f 0200 	mov.w	r2, #0
 8006446:	f04f 0300 	mov.w	r3, #0
 800644a:	018b      	lsls	r3, r1, #6
 800644c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006450:	0182      	lsls	r2, r0, #6
 8006452:	1a12      	subs	r2, r2, r0
 8006454:	eb63 0301 	sbc.w	r3, r3, r1
 8006458:	f04f 0000 	mov.w	r0, #0
 800645c:	f04f 0100 	mov.w	r1, #0
 8006460:	00d9      	lsls	r1, r3, #3
 8006462:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006466:	00d0      	lsls	r0, r2, #3
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	eb12 0208 	adds.w	r2, r2, r8
 8006470:	eb43 0309 	adc.w	r3, r3, r9
 8006474:	f04f 0000 	mov.w	r0, #0
 8006478:	f04f 0100 	mov.w	r1, #0
 800647c:	0259      	lsls	r1, r3, #9
 800647e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006482:	0250      	lsls	r0, r2, #9
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	4610      	mov	r0, r2
 800648a:	4619      	mov	r1, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	461a      	mov	r2, r3
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	f7f9 fef4 	bl	8000280 <__aeabi_uldivmod>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4613      	mov	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	e04a      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064a2:	4b31      	ldr	r3, [pc, #196]	; (8006568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	099b      	lsrs	r3, r3, #6
 80064a8:	461a      	mov	r2, r3
 80064aa:	f04f 0300 	mov.w	r3, #0
 80064ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80064b2:	f04f 0100 	mov.w	r1, #0
 80064b6:	ea02 0400 	and.w	r4, r2, r0
 80064ba:	ea03 0501 	and.w	r5, r3, r1
 80064be:	4620      	mov	r0, r4
 80064c0:	4629      	mov	r1, r5
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	f04f 0300 	mov.w	r3, #0
 80064ca:	014b      	lsls	r3, r1, #5
 80064cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80064d0:	0142      	lsls	r2, r0, #5
 80064d2:	4610      	mov	r0, r2
 80064d4:	4619      	mov	r1, r3
 80064d6:	1b00      	subs	r0, r0, r4
 80064d8:	eb61 0105 	sbc.w	r1, r1, r5
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	018b      	lsls	r3, r1, #6
 80064e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064ea:	0182      	lsls	r2, r0, #6
 80064ec:	1a12      	subs	r2, r2, r0
 80064ee:	eb63 0301 	sbc.w	r3, r3, r1
 80064f2:	f04f 0000 	mov.w	r0, #0
 80064f6:	f04f 0100 	mov.w	r1, #0
 80064fa:	00d9      	lsls	r1, r3, #3
 80064fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006500:	00d0      	lsls	r0, r2, #3
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	1912      	adds	r2, r2, r4
 8006508:	eb45 0303 	adc.w	r3, r5, r3
 800650c:	f04f 0000 	mov.w	r0, #0
 8006510:	f04f 0100 	mov.w	r1, #0
 8006514:	0299      	lsls	r1, r3, #10
 8006516:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800651a:	0290      	lsls	r0, r2, #10
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4610      	mov	r0, r2
 8006522:	4619      	mov	r1, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	461a      	mov	r2, r3
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	f7f9 fea8 	bl	8000280 <__aeabi_uldivmod>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4613      	mov	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	0c1b      	lsrs	r3, r3, #16
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	3301      	adds	r3, #1
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006550:	60bb      	str	r3, [r7, #8]
      break;
 8006552:	e002      	b.n	800655a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006556:	60bb      	str	r3, [r7, #8]
      break;
 8006558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800655a:	68bb      	ldr	r3, [r7, #8]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006566:	bf00      	nop
 8006568:	40023800 	.word	0x40023800
 800656c:	00f42400 	.word	0x00f42400
 8006570:	007a1200 	.word	0x007a1200

08006574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006578:	4b03      	ldr	r3, [pc, #12]	; (8006588 <HAL_RCC_GetHCLKFreq+0x14>)
 800657a:	681b      	ldr	r3, [r3, #0]
}
 800657c:	4618      	mov	r0, r3
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	200000bc 	.word	0x200000bc

0800658c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006590:	f7ff fff0 	bl	8006574 <HAL_RCC_GetHCLKFreq>
 8006594:	4602      	mov	r2, r0
 8006596:	4b05      	ldr	r3, [pc, #20]	; (80065ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	0a9b      	lsrs	r3, r3, #10
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	4903      	ldr	r1, [pc, #12]	; (80065b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065a2:	5ccb      	ldrb	r3, [r1, r3]
 80065a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40023800 	.word	0x40023800
 80065b0:	08011724 	.word	0x08011724

080065b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065b8:	f7ff ffdc 	bl	8006574 <HAL_RCC_GetHCLKFreq>
 80065bc:	4602      	mov	r2, r0
 80065be:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	0b5b      	lsrs	r3, r3, #13
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	4903      	ldr	r1, [pc, #12]	; (80065d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065ca:	5ccb      	ldrb	r3, [r1, r3]
 80065cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	40023800 	.word	0x40023800
 80065d8:	08011724 	.word	0x08011724

080065dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e07b      	b.n	80066e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d108      	bne.n	8006608 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065fe:	d009      	beq.n	8006614 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	61da      	str	r2, [r3, #28]
 8006606:	e005      	b.n	8006614 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fd f9a4 	bl	800397c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800665c:	431a      	orrs	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006698:	ea42 0103 	orr.w	r1, r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	0c1b      	lsrs	r3, r3, #16
 80066b2:	f003 0104 	and.w	r1, r3, #4
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	f003 0210 	and.w	r2, r3, #16
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69da      	ldr	r2, [r3, #28]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b088      	sub	sp, #32
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	60f8      	str	r0, [r7, #12]
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	603b      	str	r3, [r7, #0]
 80066fa:	4613      	mov	r3, r2
 80066fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <HAL_SPI_Transmit+0x22>
 800670c:	2302      	movs	r3, #2
 800670e:	e126      	b.n	800695e <HAL_SPI_Transmit+0x270>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006718:	f7fd fe9c 	bl	8004454 <HAL_GetTick>
 800671c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800671e:	88fb      	ldrh	r3, [r7, #6]
 8006720:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b01      	cmp	r3, #1
 800672c:	d002      	beq.n	8006734 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800672e:	2302      	movs	r3, #2
 8006730:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006732:	e10b      	b.n	800694c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d002      	beq.n	8006740 <HAL_SPI_Transmit+0x52>
 800673a:	88fb      	ldrh	r3, [r7, #6]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d102      	bne.n	8006746 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006744:	e102      	b.n	800694c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2203      	movs	r2, #3
 800674a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	88fa      	ldrh	r2, [r7, #6]
 800675e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	88fa      	ldrh	r2, [r7, #6]
 8006764:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800678c:	d10f      	bne.n	80067ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800679c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b8:	2b40      	cmp	r3, #64	; 0x40
 80067ba:	d007      	beq.n	80067cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d4:	d14b      	bne.n	800686e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_SPI_Transmit+0xf6>
 80067de:	8afb      	ldrh	r3, [r7, #22]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d13e      	bne.n	8006862 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	881a      	ldrh	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f4:	1c9a      	adds	r2, r3, #2
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067fe:	b29b      	uxth	r3, r3
 8006800:	3b01      	subs	r3, #1
 8006802:	b29a      	uxth	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006808:	e02b      	b.n	8006862 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b02      	cmp	r3, #2
 8006816:	d112      	bne.n	800683e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681c:	881a      	ldrh	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006828:	1c9a      	adds	r2, r3, #2
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006832:	b29b      	uxth	r3, r3
 8006834:	3b01      	subs	r3, #1
 8006836:	b29a      	uxth	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	86da      	strh	r2, [r3, #54]	; 0x36
 800683c:	e011      	b.n	8006862 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800683e:	f7fd fe09 	bl	8004454 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d803      	bhi.n	8006856 <HAL_SPI_Transmit+0x168>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006854:	d102      	bne.n	800685c <HAL_SPI_Transmit+0x16e>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006860:	e074      	b.n	800694c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1ce      	bne.n	800680a <HAL_SPI_Transmit+0x11c>
 800686c:	e04c      	b.n	8006908 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <HAL_SPI_Transmit+0x18e>
 8006876:	8afb      	ldrh	r3, [r7, #22]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d140      	bne.n	80068fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	330c      	adds	r3, #12
 8006886:	7812      	ldrb	r2, [r2, #0]
 8006888:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006898:	b29b      	uxth	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80068a2:	e02c      	b.n	80068fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d113      	bne.n	80068da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	330c      	adds	r3, #12
 80068bc:	7812      	ldrb	r2, [r2, #0]
 80068be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80068d8:	e011      	b.n	80068fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068da:	f7fd fdbb 	bl	8004454 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d803      	bhi.n	80068f2 <HAL_SPI_Transmit+0x204>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f0:	d102      	bne.n	80068f8 <HAL_SPI_Transmit+0x20a>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d102      	bne.n	80068fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068fc:	e026      	b.n	800694c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006902:	b29b      	uxth	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1cd      	bne.n	80068a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006908:	69ba      	ldr	r2, [r7, #24]
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 fbcb 	bl	80070a8 <SPI_EndRxTxTransaction>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2220      	movs	r2, #32
 800691c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10a      	bne.n	800693c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006926:	2300      	movs	r3, #0
 8006928:	613b      	str	r3, [r7, #16]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	613b      	str	r3, [r7, #16]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e000      	b.n	800694c <HAL_SPI_Transmit+0x25e>
  }

error:
 800694a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800695c:	7ffb      	ldrb	r3, [r7, #31]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3720      	adds	r7, #32
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b088      	sub	sp, #32
 800696a:	af02      	add	r7, sp, #8
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	603b      	str	r3, [r7, #0]
 8006972:	4613      	mov	r3, r2
 8006974:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006982:	d112      	bne.n	80069aa <HAL_SPI_Receive+0x44>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10e      	bne.n	80069aa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2204      	movs	r2, #4
 8006990:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006994:	88fa      	ldrh	r2, [r7, #6]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	4613      	mov	r3, r2
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 f8f1 	bl	8006b88 <HAL_SPI_TransmitReceive>
 80069a6:	4603      	mov	r3, r0
 80069a8:	e0ea      	b.n	8006b80 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_SPI_Receive+0x52>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e0e3      	b.n	8006b80 <HAL_SPI_Receive+0x21a>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069c0:	f7fd fd48 	bl	8004454 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d002      	beq.n	80069d8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80069d2:	2302      	movs	r3, #2
 80069d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069d6:	e0ca      	b.n	8006b6e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <HAL_SPI_Receive+0x7e>
 80069de:	88fb      	ldrh	r3, [r7, #6]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d102      	bne.n	80069ea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069e8:	e0c1      	b.n	8006b6e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2204      	movs	r2, #4
 80069ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	88fa      	ldrh	r2, [r7, #6]
 8006a02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	88fa      	ldrh	r2, [r7, #6]
 8006a08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a30:	d10f      	bne.n	8006a52 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a50:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5c:	2b40      	cmp	r3, #64	; 0x40
 8006a5e:	d007      	beq.n	8006a70 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a6e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d162      	bne.n	8006b3e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006a78:	e02e      	b.n	8006ad8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d115      	bne.n	8006ab4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f103 020c 	add.w	r2, r3, #12
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	7812      	ldrb	r2, [r2, #0]
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ab2:	e011      	b.n	8006ad8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ab4:	f7fd fcce 	bl	8004454 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d803      	bhi.n	8006acc <HAL_SPI_Receive+0x166>
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aca:	d102      	bne.n	8006ad2 <HAL_SPI_Receive+0x16c>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d102      	bne.n	8006ad8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006ad6:	e04a      	b.n	8006b6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1cb      	bne.n	8006a7a <HAL_SPI_Receive+0x114>
 8006ae2:	e031      	b.n	8006b48 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d113      	bne.n	8006b1a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	b292      	uxth	r2, r2
 8006afe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b04:	1c9a      	adds	r2, r3, #2
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	3b01      	subs	r3, #1
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b18:	e011      	b.n	8006b3e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b1a:	f7fd fc9b 	bl	8004454 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d803      	bhi.n	8006b32 <HAL_SPI_Receive+0x1cc>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d102      	bne.n	8006b38 <HAL_SPI_Receive+0x1d2>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d102      	bne.n	8006b3e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b3c:	e017      	b.n	8006b6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1cd      	bne.n	8006ae4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 fa45 	bl	8006fdc <SPI_EndRxTransaction>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	75fb      	strb	r3, [r7, #23]
 8006b6a:	e000      	b.n	8006b6e <HAL_SPI_Receive+0x208>
  }

error :
 8006b6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08c      	sub	sp, #48	; 0x30
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b96:	2301      	movs	r3, #1
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d101      	bne.n	8006bae <HAL_SPI_TransmitReceive+0x26>
 8006baa:	2302      	movs	r3, #2
 8006bac:	e18a      	b.n	8006ec4 <HAL_SPI_TransmitReceive+0x33c>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bb6:	f7fd fc4d 	bl	8004454 <HAL_GetTick>
 8006bba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006bcc:	887b      	ldrh	r3, [r7, #2]
 8006bce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006bd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d00f      	beq.n	8006bf8 <HAL_SPI_TransmitReceive+0x70>
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bde:	d107      	bne.n	8006bf0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d103      	bne.n	8006bf0 <HAL_SPI_TransmitReceive+0x68>
 8006be8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bec:	2b04      	cmp	r3, #4
 8006bee:	d003      	beq.n	8006bf8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006bf6:	e15b      	b.n	8006eb0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d005      	beq.n	8006c0a <HAL_SPI_TransmitReceive+0x82>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <HAL_SPI_TransmitReceive+0x82>
 8006c04:	887b      	ldrh	r3, [r7, #2]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d103      	bne.n	8006c12 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c10:	e14e      	b.n	8006eb0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d003      	beq.n	8006c26 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2205      	movs	r2, #5
 8006c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	887a      	ldrh	r2, [r7, #2]
 8006c36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	887a      	ldrh	r2, [r7, #2]
 8006c3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	887a      	ldrh	r2, [r7, #2]
 8006c48:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	887a      	ldrh	r2, [r7, #2]
 8006c4e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c66:	2b40      	cmp	r3, #64	; 0x40
 8006c68:	d007      	beq.n	8006c7a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c82:	d178      	bne.n	8006d76 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <HAL_SPI_TransmitReceive+0x10a>
 8006c8c:	8b7b      	ldrh	r3, [r7, #26]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d166      	bne.n	8006d60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c96:	881a      	ldrh	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca2:	1c9a      	adds	r2, r3, #2
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cb6:	e053      	b.n	8006d60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d11b      	bne.n	8006cfe <HAL_SPI_TransmitReceive+0x176>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d016      	beq.n	8006cfe <HAL_SPI_TransmitReceive+0x176>
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d113      	bne.n	8006cfe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cda:	881a      	ldrh	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	1c9a      	adds	r2, r3, #2
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d119      	bne.n	8006d40 <HAL_SPI_TransmitReceive+0x1b8>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d014      	beq.n	8006d40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d20:	b292      	uxth	r2, r2
 8006d22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d28:	1c9a      	adds	r2, r3, #2
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	3b01      	subs	r3, #1
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d40:	f7fd fb88 	bl	8004454 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d807      	bhi.n	8006d60 <HAL_SPI_TransmitReceive+0x1d8>
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d56:	d003      	beq.n	8006d60 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006d5e:	e0a7      	b.n	8006eb0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1a6      	bne.n	8006cb8 <HAL_SPI_TransmitReceive+0x130>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1a1      	bne.n	8006cb8 <HAL_SPI_TransmitReceive+0x130>
 8006d74:	e07c      	b.n	8006e70 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <HAL_SPI_TransmitReceive+0x1fc>
 8006d7e:	8b7b      	ldrh	r3, [r7, #26]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d16b      	bne.n	8006e5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	330c      	adds	r3, #12
 8006d8e:	7812      	ldrb	r2, [r2, #0]
 8006d90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006daa:	e057      	b.n	8006e5c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d11c      	bne.n	8006df4 <HAL_SPI_TransmitReceive+0x26c>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d017      	beq.n	8006df4 <HAL_SPI_TransmitReceive+0x26c>
 8006dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d114      	bne.n	8006df4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	330c      	adds	r3, #12
 8006dd4:	7812      	ldrb	r2, [r2, #0]
 8006dd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d119      	bne.n	8006e36 <HAL_SPI_TransmitReceive+0x2ae>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d014      	beq.n	8006e36 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68da      	ldr	r2, [r3, #12]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1e:	1c5a      	adds	r2, r3, #1
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e32:	2301      	movs	r3, #1
 8006e34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e36:	f7fd fb0d 	bl	8004454 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d803      	bhi.n	8006e4e <HAL_SPI_TransmitReceive+0x2c6>
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4c:	d102      	bne.n	8006e54 <HAL_SPI_TransmitReceive+0x2cc>
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d103      	bne.n	8006e5c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006e5a:	e029      	b.n	8006eb0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1a2      	bne.n	8006dac <HAL_SPI_TransmitReceive+0x224>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d19d      	bne.n	8006dac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 f917 	bl	80070a8 <SPI_EndRxTxTransaction>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d006      	beq.n	8006e8e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006e8c:	e010      	b.n	8006eb0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10b      	bne.n	8006eae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e96:	2300      	movs	r3, #0
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	e000      	b.n	8006eb0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006eae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ec0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3730      	adds	r7, #48	; 0x30
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	603b      	str	r3, [r7, #0]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006edc:	f7fd faba 	bl	8004454 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	1a9b      	subs	r3, r3, r2
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	4413      	add	r3, r2
 8006eea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006eec:	f7fd fab2 	bl	8004454 <HAL_GetTick>
 8006ef0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006ef2:	4b39      	ldr	r3, [pc, #228]	; (8006fd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	015b      	lsls	r3, r3, #5
 8006ef8:	0d1b      	lsrs	r3, r3, #20
 8006efa:	69fa      	ldr	r2, [r7, #28]
 8006efc:	fb02 f303 	mul.w	r3, r2, r3
 8006f00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f02:	e054      	b.n	8006fae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0a:	d050      	beq.n	8006fae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f0c:	f7fd faa2 	bl	8004454 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d902      	bls.n	8006f22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d13d      	bne.n	8006f9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f3a:	d111      	bne.n	8006f60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f44:	d004      	beq.n	8006f50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f4e:	d107      	bne.n	8006f60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f68:	d10f      	bne.n	8006f8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e017      	b.n	8006fce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	bf0c      	ite	eq
 8006fbe:	2301      	moveq	r3, #1
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d19b      	bne.n	8006f04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3720      	adds	r7, #32
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	200000bc 	.word	0x200000bc

08006fdc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ff0:	d111      	bne.n	8007016 <SPI_EndRxTransaction+0x3a>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ffa:	d004      	beq.n	8007006 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007004:	d107      	bne.n	8007016 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007014:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800701e:	d12a      	bne.n	8007076 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007028:	d012      	beq.n	8007050 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2200      	movs	r2, #0
 8007032:	2180      	movs	r1, #128	; 0x80
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7ff ff49 	bl	8006ecc <SPI_WaitFlagStateUntilTimeout>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d02d      	beq.n	800709c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007044:	f043 0220 	orr.w	r2, r3, #32
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e026      	b.n	800709e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2200      	movs	r2, #0
 8007058:	2101      	movs	r1, #1
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f7ff ff36 	bl	8006ecc <SPI_WaitFlagStateUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d01a      	beq.n	800709c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706a:	f043 0220 	orr.w	r2, r3, #32
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e013      	b.n	800709e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2200      	movs	r2, #0
 800707e:	2101      	movs	r1, #1
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f7ff ff23 	bl	8006ecc <SPI_WaitFlagStateUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d007      	beq.n	800709c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007090:	f043 0220 	orr.w	r2, r3, #32
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e000      	b.n	800709e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070b4:	4b1b      	ldr	r3, [pc, #108]	; (8007124 <SPI_EndRxTxTransaction+0x7c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a1b      	ldr	r2, [pc, #108]	; (8007128 <SPI_EndRxTxTransaction+0x80>)
 80070ba:	fba2 2303 	umull	r2, r3, r2, r3
 80070be:	0d5b      	lsrs	r3, r3, #21
 80070c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070c4:	fb02 f303 	mul.w	r3, r2, r3
 80070c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070d2:	d112      	bne.n	80070fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2200      	movs	r2, #0
 80070dc:	2180      	movs	r1, #128	; 0x80
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f7ff fef4 	bl	8006ecc <SPI_WaitFlagStateUntilTimeout>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d016      	beq.n	8007118 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ee:	f043 0220 	orr.w	r2, r3, #32
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e00f      	b.n	800711a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00a      	beq.n	8007116 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	3b01      	subs	r3, #1
 8007104:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007110:	2b80      	cmp	r3, #128	; 0x80
 8007112:	d0f2      	beq.n	80070fa <SPI_EndRxTxTransaction+0x52>
 8007114:	e000      	b.n	8007118 <SPI_EndRxTxTransaction+0x70>
        break;
 8007116:	bf00      	nop
  }

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	200000bc 	.word	0x200000bc
 8007128:	165e9f81 	.word	0x165e9f81

0800712c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e034      	b.n	80071ac <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7f9 fc8a 	bl	8000a70 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3308      	adds	r3, #8
 8007164:	4619      	mov	r1, r3
 8007166:	4610      	mov	r0, r2
 8007168:	f001 ffa2 	bl	80090b0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	461a      	mov	r2, r3
 8007176:	68b9      	ldr	r1, [r7, #8]
 8007178:	f001 ffec 	bl	8009154 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6858      	ldr	r0, [r3, #4]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	f002 f821 	bl	80091d0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	6892      	ldr	r2, [r2, #8]
 8007196:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	6892      	ldr	r2, [r2, #8]
 80071a2:	f041 0101 	orr.w	r1, r1, #1
 80071a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e041      	b.n	800724a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d106      	bne.n	80071e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fc fe52 	bl	8003e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	3304      	adds	r3, #4
 80071f0:	4619      	mov	r1, r3
 80071f2:	4610      	mov	r0, r2
 80071f4:	f000 fc1a 	bl	8007a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b01      	cmp	r3, #1
 8007266:	d001      	beq.n	800726c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e046      	b.n	80072fa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a23      	ldr	r2, [pc, #140]	; (8007308 <HAL_TIM_Base_Start+0xb4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d022      	beq.n	80072c4 <HAL_TIM_Base_Start+0x70>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007286:	d01d      	beq.n	80072c4 <HAL_TIM_Base_Start+0x70>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1f      	ldr	r2, [pc, #124]	; (800730c <HAL_TIM_Base_Start+0xb8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d018      	beq.n	80072c4 <HAL_TIM_Base_Start+0x70>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a1e      	ldr	r2, [pc, #120]	; (8007310 <HAL_TIM_Base_Start+0xbc>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d013      	beq.n	80072c4 <HAL_TIM_Base_Start+0x70>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a1c      	ldr	r2, [pc, #112]	; (8007314 <HAL_TIM_Base_Start+0xc0>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d00e      	beq.n	80072c4 <HAL_TIM_Base_Start+0x70>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a1b      	ldr	r2, [pc, #108]	; (8007318 <HAL_TIM_Base_Start+0xc4>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d009      	beq.n	80072c4 <HAL_TIM_Base_Start+0x70>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a19      	ldr	r2, [pc, #100]	; (800731c <HAL_TIM_Base_Start+0xc8>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d004      	beq.n	80072c4 <HAL_TIM_Base_Start+0x70>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a18      	ldr	r2, [pc, #96]	; (8007320 <HAL_TIM_Base_Start+0xcc>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d111      	bne.n	80072e8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b06      	cmp	r3, #6
 80072d4:	d010      	beq.n	80072f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f042 0201 	orr.w	r2, r2, #1
 80072e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e6:	e007      	b.n	80072f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0201 	orr.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	40010000 	.word	0x40010000
 800730c:	40000400 	.word	0x40000400
 8007310:	40000800 	.word	0x40000800
 8007314:	40000c00 	.word	0x40000c00
 8007318:	40010400 	.word	0x40010400
 800731c:	40014000 	.word	0x40014000
 8007320:	40001800 	.word	0x40001800

08007324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b01      	cmp	r3, #1
 8007336:	d001      	beq.n	800733c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e04e      	b.n	80073da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a23      	ldr	r2, [pc, #140]	; (80073e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d022      	beq.n	80073a4 <HAL_TIM_Base_Start_IT+0x80>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007366:	d01d      	beq.n	80073a4 <HAL_TIM_Base_Start_IT+0x80>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a1f      	ldr	r2, [pc, #124]	; (80073ec <HAL_TIM_Base_Start_IT+0xc8>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d018      	beq.n	80073a4 <HAL_TIM_Base_Start_IT+0x80>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a1e      	ldr	r2, [pc, #120]	; (80073f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d013      	beq.n	80073a4 <HAL_TIM_Base_Start_IT+0x80>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a1c      	ldr	r2, [pc, #112]	; (80073f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d00e      	beq.n	80073a4 <HAL_TIM_Base_Start_IT+0x80>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a1b      	ldr	r2, [pc, #108]	; (80073f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d009      	beq.n	80073a4 <HAL_TIM_Base_Start_IT+0x80>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a19      	ldr	r2, [pc, #100]	; (80073fc <HAL_TIM_Base_Start_IT+0xd8>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d004      	beq.n	80073a4 <HAL_TIM_Base_Start_IT+0x80>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a18      	ldr	r2, [pc, #96]	; (8007400 <HAL_TIM_Base_Start_IT+0xdc>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d111      	bne.n	80073c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2b06      	cmp	r3, #6
 80073b4:	d010      	beq.n	80073d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f042 0201 	orr.w	r2, r2, #1
 80073c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c6:	e007      	b.n	80073d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0201 	orr.w	r2, r2, #1
 80073d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	40010000 	.word	0x40010000
 80073ec:	40000400 	.word	0x40000400
 80073f0:	40000800 	.word	0x40000800
 80073f4:	40000c00 	.word	0x40000c00
 80073f8:	40010400 	.word	0x40010400
 80073fc:	40014000 	.word	0x40014000
 8007400:	40001800 	.word	0x40001800

08007404 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e041      	b.n	800749a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d106      	bne.n	8007430 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f839 	bl	80074a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2202      	movs	r2, #2
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3304      	adds	r3, #4
 8007440:	4619      	mov	r1, r3
 8007442:	4610      	mov	r0, r2
 8007444:	f000 faf2 	bl	8007a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80074aa:	bf00      	nop
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b082      	sub	sp, #8
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d122      	bne.n	8007512 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d11b      	bne.n	8007512 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f06f 0202 	mvn.w	r2, #2
 80074e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	f003 0303 	and.w	r3, r3, #3
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fa78 	bl	80079ee <HAL_TIM_IC_CaptureCallback>
 80074fe:	e005      	b.n	800750c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fa6a 	bl	80079da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fa7b 	bl	8007a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b04      	cmp	r3, #4
 800751e:	d122      	bne.n	8007566 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b04      	cmp	r3, #4
 800752c:	d11b      	bne.n	8007566 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f06f 0204 	mvn.w	r2, #4
 8007536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fa4e 	bl	80079ee <HAL_TIM_IC_CaptureCallback>
 8007552:	e005      	b.n	8007560 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fa40 	bl	80079da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fa51 	bl	8007a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	f003 0308 	and.w	r3, r3, #8
 8007570:	2b08      	cmp	r3, #8
 8007572:	d122      	bne.n	80075ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f003 0308 	and.w	r3, r3, #8
 800757e:	2b08      	cmp	r3, #8
 8007580:	d11b      	bne.n	80075ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f06f 0208 	mvn.w	r2, #8
 800758a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2204      	movs	r2, #4
 8007590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	f003 0303 	and.w	r3, r3, #3
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fa24 	bl	80079ee <HAL_TIM_IC_CaptureCallback>
 80075a6:	e005      	b.n	80075b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fa16 	bl	80079da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fa27 	bl	8007a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	f003 0310 	and.w	r3, r3, #16
 80075c4:	2b10      	cmp	r3, #16
 80075c6:	d122      	bne.n	800760e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f003 0310 	and.w	r3, r3, #16
 80075d2:	2b10      	cmp	r3, #16
 80075d4:	d11b      	bne.n	800760e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f06f 0210 	mvn.w	r2, #16
 80075de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2208      	movs	r2, #8
 80075e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f9fa 	bl	80079ee <HAL_TIM_IC_CaptureCallback>
 80075fa:	e005      	b.n	8007608 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f9ec 	bl	80079da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f9fd 	bl	8007a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	f003 0301 	and.w	r3, r3, #1
 8007618:	2b01      	cmp	r3, #1
 800761a:	d10e      	bne.n	800763a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b01      	cmp	r3, #1
 8007628:	d107      	bne.n	800763a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f06f 0201 	mvn.w	r2, #1
 8007632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7fc f925 	bl	8003884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007644:	2b80      	cmp	r3, #128	; 0x80
 8007646:	d10e      	bne.n	8007666 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007652:	2b80      	cmp	r3, #128	; 0x80
 8007654:	d107      	bne.n	8007666 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800765e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fd53 	bl	800810c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007670:	2b40      	cmp	r3, #64	; 0x40
 8007672:	d10e      	bne.n	8007692 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767e:	2b40      	cmp	r3, #64	; 0x40
 8007680:	d107      	bne.n	8007692 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800768a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f9c2 	bl	8007a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	f003 0320 	and.w	r3, r3, #32
 800769c:	2b20      	cmp	r3, #32
 800769e:	d10e      	bne.n	80076be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	f003 0320 	and.w	r3, r3, #32
 80076aa:	2b20      	cmp	r3, #32
 80076ac:	d107      	bne.n	80076be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f06f 0220 	mvn.w	r2, #32
 80076b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fd1d 	bl	80080f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076e2:	2302      	movs	r3, #2
 80076e4:	e0ae      	b.n	8007844 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b0c      	cmp	r3, #12
 80076f2:	f200 809f 	bhi.w	8007834 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80076f6:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fc:	08007731 	.word	0x08007731
 8007700:	08007835 	.word	0x08007835
 8007704:	08007835 	.word	0x08007835
 8007708:	08007835 	.word	0x08007835
 800770c:	08007771 	.word	0x08007771
 8007710:	08007835 	.word	0x08007835
 8007714:	08007835 	.word	0x08007835
 8007718:	08007835 	.word	0x08007835
 800771c:	080077b3 	.word	0x080077b3
 8007720:	08007835 	.word	0x08007835
 8007724:	08007835 	.word	0x08007835
 8007728:	08007835 	.word	0x08007835
 800772c:	080077f3 	.word	0x080077f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	4618      	mov	r0, r3
 8007738:	f000 fa18 	bl	8007b6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699a      	ldr	r2, [r3, #24]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 0208 	orr.w	r2, r2, #8
 800774a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	699a      	ldr	r2, [r3, #24]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0204 	bic.w	r2, r2, #4
 800775a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6999      	ldr	r1, [r3, #24]
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	691a      	ldr	r2, [r3, #16]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	619a      	str	r2, [r3, #24]
      break;
 800776e:	e064      	b.n	800783a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68b9      	ldr	r1, [r7, #8]
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fa68 	bl	8007c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699a      	ldr	r2, [r3, #24]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800778a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	699a      	ldr	r2, [r3, #24]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800779a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6999      	ldr	r1, [r3, #24]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	021a      	lsls	r2, r3, #8
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	619a      	str	r2, [r3, #24]
      break;
 80077b0:	e043      	b.n	800783a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68b9      	ldr	r1, [r7, #8]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 fabd 	bl	8007d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69da      	ldr	r2, [r3, #28]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f042 0208 	orr.w	r2, r2, #8
 80077cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69da      	ldr	r2, [r3, #28]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 0204 	bic.w	r2, r2, #4
 80077dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69d9      	ldr	r1, [r3, #28]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	691a      	ldr	r2, [r3, #16]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	61da      	str	r2, [r3, #28]
      break;
 80077f0:	e023      	b.n	800783a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68b9      	ldr	r1, [r7, #8]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fb11 	bl	8007e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	69da      	ldr	r2, [r3, #28]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800780c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69da      	ldr	r2, [r3, #28]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800781c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69d9      	ldr	r1, [r3, #28]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	021a      	lsls	r2, r3, #8
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	61da      	str	r2, [r3, #28]
      break;
 8007832:	e002      	b.n	800783a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	75fb      	strb	r3, [r7, #23]
      break;
 8007838:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007860:	2b01      	cmp	r3, #1
 8007862:	d101      	bne.n	8007868 <HAL_TIM_ConfigClockSource+0x1c>
 8007864:	2302      	movs	r3, #2
 8007866:	e0b4      	b.n	80079d2 <HAL_TIM_ConfigClockSource+0x186>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800788e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078a0:	d03e      	beq.n	8007920 <HAL_TIM_ConfigClockSource+0xd4>
 80078a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078a6:	f200 8087 	bhi.w	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ae:	f000 8086 	beq.w	80079be <HAL_TIM_ConfigClockSource+0x172>
 80078b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b6:	d87f      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078b8:	2b70      	cmp	r3, #112	; 0x70
 80078ba:	d01a      	beq.n	80078f2 <HAL_TIM_ConfigClockSource+0xa6>
 80078bc:	2b70      	cmp	r3, #112	; 0x70
 80078be:	d87b      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078c0:	2b60      	cmp	r3, #96	; 0x60
 80078c2:	d050      	beq.n	8007966 <HAL_TIM_ConfigClockSource+0x11a>
 80078c4:	2b60      	cmp	r3, #96	; 0x60
 80078c6:	d877      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078c8:	2b50      	cmp	r3, #80	; 0x50
 80078ca:	d03c      	beq.n	8007946 <HAL_TIM_ConfigClockSource+0xfa>
 80078cc:	2b50      	cmp	r3, #80	; 0x50
 80078ce:	d873      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078d0:	2b40      	cmp	r3, #64	; 0x40
 80078d2:	d058      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0x13a>
 80078d4:	2b40      	cmp	r3, #64	; 0x40
 80078d6:	d86f      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078d8:	2b30      	cmp	r3, #48	; 0x30
 80078da:	d064      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x15a>
 80078dc:	2b30      	cmp	r3, #48	; 0x30
 80078de:	d86b      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078e0:	2b20      	cmp	r3, #32
 80078e2:	d060      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x15a>
 80078e4:	2b20      	cmp	r3, #32
 80078e6:	d867      	bhi.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d05c      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x15a>
 80078ec:	2b10      	cmp	r3, #16
 80078ee:	d05a      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x15a>
 80078f0:	e062      	b.n	80079b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	6899      	ldr	r1, [r3, #8]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f000 fb5d 	bl	8007fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	609a      	str	r2, [r3, #8]
      break;
 800791e:	e04f      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	6899      	ldr	r1, [r3, #8]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	f000 fb46 	bl	8007fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689a      	ldr	r2, [r3, #8]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007942:	609a      	str	r2, [r3, #8]
      break;
 8007944:	e03c      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6818      	ldr	r0, [r3, #0]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	6859      	ldr	r1, [r3, #4]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	461a      	mov	r2, r3
 8007954:	f000 faba 	bl	8007ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2150      	movs	r1, #80	; 0x50
 800795e:	4618      	mov	r0, r3
 8007960:	f000 fb13 	bl	8007f8a <TIM_ITRx_SetConfig>
      break;
 8007964:	e02c      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6859      	ldr	r1, [r3, #4]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	461a      	mov	r2, r3
 8007974:	f000 fad9 	bl	8007f2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2160      	movs	r1, #96	; 0x60
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fb03 	bl	8007f8a <TIM_ITRx_SetConfig>
      break;
 8007984:	e01c      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6818      	ldr	r0, [r3, #0]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6859      	ldr	r1, [r3, #4]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	461a      	mov	r2, r3
 8007994:	f000 fa9a 	bl	8007ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2140      	movs	r1, #64	; 0x40
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 faf3 	bl	8007f8a <TIM_ITRx_SetConfig>
      break;
 80079a4:	e00c      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4619      	mov	r1, r3
 80079b0:	4610      	mov	r0, r2
 80079b2:	f000 faea 	bl	8007f8a <TIM_ITRx_SetConfig>
      break;
 80079b6:	e003      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	73fb      	strb	r3, [r7, #15]
      break;
 80079bc:	e000      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b083      	sub	sp, #12
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b083      	sub	sp, #12
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a0a:	bf00      	nop
 8007a0c:	370c      	adds	r7, #12
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a1e:	bf00      	nop
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
	...

08007a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a40      	ldr	r2, [pc, #256]	; (8007b40 <TIM_Base_SetConfig+0x114>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d013      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4a:	d00f      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a3d      	ldr	r2, [pc, #244]	; (8007b44 <TIM_Base_SetConfig+0x118>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00b      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a3c      	ldr	r2, [pc, #240]	; (8007b48 <TIM_Base_SetConfig+0x11c>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d007      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a3b      	ldr	r2, [pc, #236]	; (8007b4c <TIM_Base_SetConfig+0x120>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d003      	beq.n	8007a6c <TIM_Base_SetConfig+0x40>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a3a      	ldr	r2, [pc, #232]	; (8007b50 <TIM_Base_SetConfig+0x124>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d108      	bne.n	8007a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a2f      	ldr	r2, [pc, #188]	; (8007b40 <TIM_Base_SetConfig+0x114>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d02b      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a8c:	d027      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a2c      	ldr	r2, [pc, #176]	; (8007b44 <TIM_Base_SetConfig+0x118>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d023      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a2b      	ldr	r2, [pc, #172]	; (8007b48 <TIM_Base_SetConfig+0x11c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d01f      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a2a      	ldr	r2, [pc, #168]	; (8007b4c <TIM_Base_SetConfig+0x120>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d01b      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a29      	ldr	r2, [pc, #164]	; (8007b50 <TIM_Base_SetConfig+0x124>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d017      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a28      	ldr	r2, [pc, #160]	; (8007b54 <TIM_Base_SetConfig+0x128>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d013      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a27      	ldr	r2, [pc, #156]	; (8007b58 <TIM_Base_SetConfig+0x12c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00f      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a26      	ldr	r2, [pc, #152]	; (8007b5c <TIM_Base_SetConfig+0x130>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00b      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a25      	ldr	r2, [pc, #148]	; (8007b60 <TIM_Base_SetConfig+0x134>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d007      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a24      	ldr	r2, [pc, #144]	; (8007b64 <TIM_Base_SetConfig+0x138>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d003      	beq.n	8007ade <TIM_Base_SetConfig+0xb2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a23      	ldr	r2, [pc, #140]	; (8007b68 <TIM_Base_SetConfig+0x13c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d108      	bne.n	8007af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a0a      	ldr	r2, [pc, #40]	; (8007b40 <TIM_Base_SetConfig+0x114>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d003      	beq.n	8007b24 <TIM_Base_SetConfig+0xf8>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	4a0c      	ldr	r2, [pc, #48]	; (8007b50 <TIM_Base_SetConfig+0x124>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d103      	bne.n	8007b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	691a      	ldr	r2, [r3, #16]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	615a      	str	r2, [r3, #20]
}
 8007b32:	bf00      	nop
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	40010000 	.word	0x40010000
 8007b44:	40000400 	.word	0x40000400
 8007b48:	40000800 	.word	0x40000800
 8007b4c:	40000c00 	.word	0x40000c00
 8007b50:	40010400 	.word	0x40010400
 8007b54:	40014000 	.word	0x40014000
 8007b58:	40014400 	.word	0x40014400
 8007b5c:	40014800 	.word	0x40014800
 8007b60:	40001800 	.word	0x40001800
 8007b64:	40001c00 	.word	0x40001c00
 8007b68:	40002000 	.word	0x40002000

08007b6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	f023 0201 	bic.w	r2, r3, #1
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0303 	bic.w	r3, r3, #3
 8007ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f023 0302 	bic.w	r3, r3, #2
 8007bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	4a20      	ldr	r2, [pc, #128]	; (8007c44 <TIM_OC1_SetConfig+0xd8>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d003      	beq.n	8007bd0 <TIM_OC1_SetConfig+0x64>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a1f      	ldr	r2, [pc, #124]	; (8007c48 <TIM_OC1_SetConfig+0xdc>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d10c      	bne.n	8007bea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f023 0308 	bic.w	r3, r3, #8
 8007bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f023 0304 	bic.w	r3, r3, #4
 8007be8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a15      	ldr	r2, [pc, #84]	; (8007c44 <TIM_OC1_SetConfig+0xd8>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d003      	beq.n	8007bfa <TIM_OC1_SetConfig+0x8e>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a14      	ldr	r2, [pc, #80]	; (8007c48 <TIM_OC1_SetConfig+0xdc>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d111      	bne.n	8007c1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	693a      	ldr	r2, [r7, #16]
 8007c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	621a      	str	r2, [r3, #32]
}
 8007c38:	bf00      	nop
 8007c3a:	371c      	adds	r7, #28
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	40010000 	.word	0x40010000
 8007c48:	40010400 	.word	0x40010400

08007c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	f023 0210 	bic.w	r2, r3, #16
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	699b      	ldr	r3, [r3, #24]
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	021b      	lsls	r3, r3, #8
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f023 0320 	bic.w	r3, r3, #32
 8007c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a22      	ldr	r2, [pc, #136]	; (8007d30 <TIM_OC2_SetConfig+0xe4>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d003      	beq.n	8007cb4 <TIM_OC2_SetConfig+0x68>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a21      	ldr	r2, [pc, #132]	; (8007d34 <TIM_OC2_SetConfig+0xe8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d10d      	bne.n	8007cd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	011b      	lsls	r3, r3, #4
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a17      	ldr	r2, [pc, #92]	; (8007d30 <TIM_OC2_SetConfig+0xe4>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d003      	beq.n	8007ce0 <TIM_OC2_SetConfig+0x94>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a16      	ldr	r2, [pc, #88]	; (8007d34 <TIM_OC2_SetConfig+0xe8>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d113      	bne.n	8007d08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	621a      	str	r2, [r3, #32]
}
 8007d22:	bf00      	nop
 8007d24:	371c      	adds	r7, #28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	40010000 	.word	0x40010000
 8007d34:	40010400 	.word	0x40010400

08007d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f023 0303 	bic.w	r3, r3, #3
 8007d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	021b      	lsls	r3, r3, #8
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a21      	ldr	r2, [pc, #132]	; (8007e18 <TIM_OC3_SetConfig+0xe0>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d003      	beq.n	8007d9e <TIM_OC3_SetConfig+0x66>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a20      	ldr	r2, [pc, #128]	; (8007e1c <TIM_OC3_SetConfig+0xe4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d10d      	bne.n	8007dba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007da4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	021b      	lsls	r3, r3, #8
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a16      	ldr	r2, [pc, #88]	; (8007e18 <TIM_OC3_SetConfig+0xe0>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d003      	beq.n	8007dca <TIM_OC3_SetConfig+0x92>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a15      	ldr	r2, [pc, #84]	; (8007e1c <TIM_OC3_SetConfig+0xe4>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d113      	bne.n	8007df2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	011b      	lsls	r3, r3, #4
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	011b      	lsls	r3, r3, #4
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	621a      	str	r2, [r3, #32]
}
 8007e0c:	bf00      	nop
 8007e0e:	371c      	adds	r7, #28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	40010000 	.word	0x40010000
 8007e1c:	40010400 	.word	0x40010400

08007e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	031b      	lsls	r3, r3, #12
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a12      	ldr	r2, [pc, #72]	; (8007ec4 <TIM_OC4_SetConfig+0xa4>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d003      	beq.n	8007e88 <TIM_OC4_SetConfig+0x68>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a11      	ldr	r2, [pc, #68]	; (8007ec8 <TIM_OC4_SetConfig+0xa8>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d109      	bne.n	8007e9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	019b      	lsls	r3, r3, #6
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	621a      	str	r2, [r3, #32]
}
 8007eb6:	bf00      	nop
 8007eb8:	371c      	adds	r7, #28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	40010000 	.word	0x40010000
 8007ec8:	40010400 	.word	0x40010400

08007ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	f023 0201 	bic.w	r2, r3, #1
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	011b      	lsls	r3, r3, #4
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f023 030a 	bic.w	r3, r3, #10
 8007f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	621a      	str	r2, [r3, #32]
}
 8007f1e:	bf00      	nop
 8007f20:	371c      	adds	r7, #28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b087      	sub	sp, #28
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	f023 0210 	bic.w	r2, r3, #16
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	031b      	lsls	r3, r3, #12
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	011b      	lsls	r3, r3, #4
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	621a      	str	r2, [r3, #32]
}
 8007f7e:	bf00      	nop
 8007f80:	371c      	adds	r7, #28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	f043 0307 	orr.w	r3, r3, #7
 8007fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	609a      	str	r2, [r3, #8]
}
 8007fb4:	bf00      	nop
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	021a      	lsls	r2, r3, #8
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	609a      	str	r2, [r3, #8]
}
 8007ff4:	bf00      	nop
 8007ff6:	371c      	adds	r7, #28
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008010:	2b01      	cmp	r3, #1
 8008012:	d101      	bne.n	8008018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008014:	2302      	movs	r3, #2
 8008016:	e05a      	b.n	80080ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	4313      	orrs	r3, r2
 8008048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a21      	ldr	r2, [pc, #132]	; (80080dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d022      	beq.n	80080a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008064:	d01d      	beq.n	80080a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a1d      	ldr	r2, [pc, #116]	; (80080e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d018      	beq.n	80080a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a1b      	ldr	r2, [pc, #108]	; (80080e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d013      	beq.n	80080a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a1a      	ldr	r2, [pc, #104]	; (80080e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d00e      	beq.n	80080a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a18      	ldr	r2, [pc, #96]	; (80080ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d009      	beq.n	80080a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a17      	ldr	r2, [pc, #92]	; (80080f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d004      	beq.n	80080a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a15      	ldr	r2, [pc, #84]	; (80080f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d10c      	bne.n	80080bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	40010000 	.word	0x40010000
 80080e0:	40000400 	.word	0x40000400
 80080e4:	40000800 	.word	0x40000800
 80080e8:	40000c00 	.word	0x40000c00
 80080ec:	40010400 	.word	0x40010400
 80080f0:	40014000 	.word	0x40014000
 80080f4:	40001800 	.word	0x40001800

080080f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008100:	bf00      	nop
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008114:	bf00      	nop
 8008116:	370c      	adds	r7, #12
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e03f      	b.n	80081b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d106      	bne.n	800814c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7fc f868 	bl	800421c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2224      	movs	r2, #36	; 0x24
 8008150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fddb 	bl	8008d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	691a      	ldr	r2, [r3, #16]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	695a      	ldr	r2, [r3, #20]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68da      	ldr	r2, [r3, #12]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2220      	movs	r2, #32
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2220      	movs	r2, #32
 80081ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b08a      	sub	sp, #40	; 0x28
 80081be:	af02      	add	r7, sp, #8
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	603b      	str	r3, [r7, #0]
 80081c6:	4613      	mov	r3, r2
 80081c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b20      	cmp	r3, #32
 80081d8:	d17c      	bne.n	80082d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <HAL_UART_Transmit+0x2c>
 80081e0:	88fb      	ldrh	r3, [r7, #6]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e075      	b.n	80082d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d101      	bne.n	80081f8 <HAL_UART_Transmit+0x3e>
 80081f4:	2302      	movs	r3, #2
 80081f6:	e06e      	b.n	80082d6 <HAL_UART_Transmit+0x11c>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2221      	movs	r2, #33	; 0x21
 800820a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800820e:	f7fc f921 	bl	8004454 <HAL_GetTick>
 8008212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	88fa      	ldrh	r2, [r7, #6]
 8008218:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	88fa      	ldrh	r2, [r7, #6]
 800821e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008228:	d108      	bne.n	800823c <HAL_UART_Transmit+0x82>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d104      	bne.n	800823c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008232:	2300      	movs	r3, #0
 8008234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	61bb      	str	r3, [r7, #24]
 800823a:	e003      	b.n	8008244 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008240:	2300      	movs	r3, #0
 8008242:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800824c:	e02a      	b.n	80082a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	2200      	movs	r2, #0
 8008256:	2180      	movs	r1, #128	; 0x80
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 fb1f 	bl	800889c <UART_WaitOnFlagUntilTimeout>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e036      	b.n	80082d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10b      	bne.n	8008286 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800827c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	3302      	adds	r3, #2
 8008282:	61bb      	str	r3, [r7, #24]
 8008284:	e007      	b.n	8008296 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	781a      	ldrb	r2, [r3, #0]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	3301      	adds	r3, #1
 8008294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800829a:	b29b      	uxth	r3, r3
 800829c:	3b01      	subs	r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1cf      	bne.n	800824e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2200      	movs	r2, #0
 80082b6:	2140      	movs	r1, #64	; 0x40
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	f000 faef 	bl	800889c <UART_WaitOnFlagUntilTimeout>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e006      	b.n	80082d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	e000      	b.n	80082d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80082d4:	2302      	movs	r3, #2
  }
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3720      	adds	r7, #32
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	60b9      	str	r1, [r7, #8]
 80082e8:	4613      	mov	r3, r2
 80082ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b20      	cmp	r3, #32
 80082f6:	d11d      	bne.n	8008334 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <HAL_UART_Receive_IT+0x26>
 80082fe:	88fb      	ldrh	r3, [r7, #6]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e016      	b.n	8008336 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800830e:	2b01      	cmp	r3, #1
 8008310:	d101      	bne.n	8008316 <HAL_UART_Receive_IT+0x38>
 8008312:	2302      	movs	r3, #2
 8008314:	e00f      	b.n	8008336 <HAL_UART_Receive_IT+0x58>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008324:	88fb      	ldrh	r3, [r7, #6]
 8008326:	461a      	mov	r2, r3
 8008328:	68b9      	ldr	r1, [r7, #8]
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 fb24 	bl	8008978 <UART_Start_Receive_IT>
 8008330:	4603      	mov	r3, r0
 8008332:	e000      	b.n	8008336 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008334:	2302      	movs	r3, #2
  }
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
	...

08008340 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b0ba      	sub	sp, #232	; 0xe8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008366:	2300      	movs	r3, #0
 8008368:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800836c:	2300      	movs	r3, #0
 800836e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008376:	f003 030f 	and.w	r3, r3, #15
 800837a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800837e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10f      	bne.n	80083a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b00      	cmp	r3, #0
 8008390:	d009      	beq.n	80083a6 <HAL_UART_IRQHandler+0x66>
 8008392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008396:	f003 0320 	and.w	r3, r3, #32
 800839a:	2b00      	cmp	r3, #0
 800839c:	d003      	beq.n	80083a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fc03 	bl	8008baa <UART_Receive_IT>
      return;
 80083a4:	e256      	b.n	8008854 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80083a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 80de 	beq.w	800856c <HAL_UART_IRQHandler+0x22c>
 80083b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d106      	bne.n	80083ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80083bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 80d1 	beq.w	800856c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80083ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00b      	beq.n	80083ee <HAL_UART_IRQHandler+0xae>
 80083d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d005      	beq.n	80083ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e6:	f043 0201 	orr.w	r2, r3, #1
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f2:	f003 0304 	and.w	r3, r3, #4
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00b      	beq.n	8008412 <HAL_UART_IRQHandler+0xd2>
 80083fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d005      	beq.n	8008412 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	f043 0202 	orr.w	r2, r3, #2
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00b      	beq.n	8008436 <HAL_UART_IRQHandler+0xf6>
 800841e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b00      	cmp	r3, #0
 8008428:	d005      	beq.n	8008436 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842e:	f043 0204 	orr.w	r2, r3, #4
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800843a:	f003 0308 	and.w	r3, r3, #8
 800843e:	2b00      	cmp	r3, #0
 8008440:	d011      	beq.n	8008466 <HAL_UART_IRQHandler+0x126>
 8008442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008446:	f003 0320 	and.w	r3, r3, #32
 800844a:	2b00      	cmp	r3, #0
 800844c:	d105      	bne.n	800845a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800844e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d005      	beq.n	8008466 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	f043 0208 	orr.w	r2, r3, #8
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 81ed 	beq.w	800884a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008474:	f003 0320 	and.w	r3, r3, #32
 8008478:	2b00      	cmp	r3, #0
 800847a:	d008      	beq.n	800848e <HAL_UART_IRQHandler+0x14e>
 800847c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fb8e 	bl	8008baa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	bf0c      	ite	eq
 800849c:	2301      	moveq	r3, #1
 800849e:	2300      	movne	r3, #0
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084aa:	f003 0308 	and.w	r3, r3, #8
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d103      	bne.n	80084ba <HAL_UART_IRQHandler+0x17a>
 80084b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d04f      	beq.n	800855a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fa96 	bl	80089ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ca:	2b40      	cmp	r3, #64	; 0x40
 80084cc:	d141      	bne.n	8008552 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3314      	adds	r3, #20
 80084d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80084e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3314      	adds	r3, #20
 80084f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80084fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80084fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800850a:	e841 2300 	strex	r3, r2, [r1]
 800850e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1d9      	bne.n	80084ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851e:	2b00      	cmp	r3, #0
 8008520:	d013      	beq.n	800854a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	4a7d      	ldr	r2, [pc, #500]	; (800871c <HAL_UART_IRQHandler+0x3dc>)
 8008528:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	4618      	mov	r0, r3
 8008530:	f7fc fe5a 	bl	80051e8 <HAL_DMA_Abort_IT>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d016      	beq.n	8008568 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008544:	4610      	mov	r0, r2
 8008546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008548:	e00e      	b.n	8008568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f990 	bl	8008870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008550:	e00a      	b.n	8008568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f98c 	bl	8008870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008558:	e006      	b.n	8008568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f988 	bl	8008870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008566:	e170      	b.n	800884a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008568:	bf00      	nop
    return;
 800856a:	e16e      	b.n	800884a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008570:	2b01      	cmp	r3, #1
 8008572:	f040 814a 	bne.w	800880a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800857a:	f003 0310 	and.w	r3, r3, #16
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 8143 	beq.w	800880a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008588:	f003 0310 	and.w	r3, r3, #16
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 813c 	beq.w	800880a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008592:	2300      	movs	r3, #0
 8008594:	60bb      	str	r3, [r7, #8]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	60bb      	str	r3, [r7, #8]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	60bb      	str	r3, [r7, #8]
 80085a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b2:	2b40      	cmp	r3, #64	; 0x40
 80085b4:	f040 80b4 	bne.w	8008720 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 8140 	beq.w	800884e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085d6:	429a      	cmp	r2, r3
 80085d8:	f080 8139 	bcs.w	800884e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ee:	f000 8088 	beq.w	8008702 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	330c      	adds	r3, #12
 80085f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008608:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800860c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008610:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	330c      	adds	r3, #12
 800861a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800861e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800862a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800862e:	e841 2300 	strex	r3, r2, [r1]
 8008632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008636:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1d9      	bne.n	80085f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3314      	adds	r3, #20
 8008644:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800864e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008650:	f023 0301 	bic.w	r3, r3, #1
 8008654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3314      	adds	r3, #20
 800865e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008662:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008666:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008668:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800866a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800866e:	e841 2300 	strex	r3, r2, [r1]
 8008672:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1e1      	bne.n	800863e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3314      	adds	r3, #20
 8008680:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800868a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800868c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	3314      	adds	r3, #20
 800869a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800869e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80086a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086a6:	e841 2300 	strex	r3, r2, [r1]
 80086aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80086ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1e3      	bne.n	800867a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2220      	movs	r2, #32
 80086b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	330c      	adds	r3, #12
 80086c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ca:	e853 3f00 	ldrex	r3, [r3]
 80086ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086d2:	f023 0310 	bic.w	r3, r3, #16
 80086d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	330c      	adds	r3, #12
 80086e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80086e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80086e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80086ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086ec:	e841 2300 	strex	r3, r2, [r1]
 80086f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80086f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e3      	bne.n	80086c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fc fd03 	bl	8005108 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800870a:	b29b      	uxth	r3, r3
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	b29b      	uxth	r3, r3
 8008710:	4619      	mov	r1, r3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 f8b6 	bl	8008884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008718:	e099      	b.n	800884e <HAL_UART_IRQHandler+0x50e>
 800871a:	bf00      	nop
 800871c:	08008ab3 	.word	0x08008ab3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008728:	b29b      	uxth	r3, r3
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008734:	b29b      	uxth	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	f000 808b 	beq.w	8008852 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800873c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 8086 	beq.w	8008852 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	330c      	adds	r3, #12
 800874c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008750:	e853 3f00 	ldrex	r3, [r3]
 8008754:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008758:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800875c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	330c      	adds	r3, #12
 8008766:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800876a:	647a      	str	r2, [r7, #68]	; 0x44
 800876c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008772:	e841 2300 	strex	r3, r2, [r1]
 8008776:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e3      	bne.n	8008746 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3314      	adds	r3, #20
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	e853 3f00 	ldrex	r3, [r3]
 800878c:	623b      	str	r3, [r7, #32]
   return(result);
 800878e:	6a3b      	ldr	r3, [r7, #32]
 8008790:	f023 0301 	bic.w	r3, r3, #1
 8008794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	3314      	adds	r3, #20
 800879e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087a2:	633a      	str	r2, [r7, #48]	; 0x30
 80087a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1e3      	bne.n	800877e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2220      	movs	r2, #32
 80087ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	330c      	adds	r3, #12
 80087ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	e853 3f00 	ldrex	r3, [r3]
 80087d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f023 0310 	bic.w	r3, r3, #16
 80087da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	330c      	adds	r3, #12
 80087e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80087e8:	61fa      	str	r2, [r7, #28]
 80087ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ec:	69b9      	ldr	r1, [r7, #24]
 80087ee:	69fa      	ldr	r2, [r7, #28]
 80087f0:	e841 2300 	strex	r3, r2, [r1]
 80087f4:	617b      	str	r3, [r7, #20]
   return(result);
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e3      	bne.n	80087c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f83e 	bl	8008884 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008808:	e023      	b.n	8008852 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800880a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800880e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008812:	2b00      	cmp	r3, #0
 8008814:	d009      	beq.n	800882a <HAL_UART_IRQHandler+0x4ea>
 8008816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800881a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f959 	bl	8008ada <UART_Transmit_IT>
    return;
 8008828:	e014      	b.n	8008854 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800882a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00e      	beq.n	8008854 <HAL_UART_IRQHandler+0x514>
 8008836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800883a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883e:	2b00      	cmp	r3, #0
 8008840:	d008      	beq.n	8008854 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f999 	bl	8008b7a <UART_EndTransmit_IT>
    return;
 8008848:	e004      	b.n	8008854 <HAL_UART_IRQHandler+0x514>
    return;
 800884a:	bf00      	nop
 800884c:	e002      	b.n	8008854 <HAL_UART_IRQHandler+0x514>
      return;
 800884e:	bf00      	nop
 8008850:	e000      	b.n	8008854 <HAL_UART_IRQHandler+0x514>
      return;
 8008852:	bf00      	nop
  }
}
 8008854:	37e8      	adds	r7, #232	; 0xe8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop

0800885c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	460b      	mov	r3, r1
 800888e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b090      	sub	sp, #64	; 0x40
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	603b      	str	r3, [r7, #0]
 80088a8:	4613      	mov	r3, r2
 80088aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088ac:	e050      	b.n	8008950 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b4:	d04c      	beq.n	8008950 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80088b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d007      	beq.n	80088cc <UART_WaitOnFlagUntilTimeout+0x30>
 80088bc:	f7fb fdca 	bl	8004454 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d241      	bcs.n	8008950 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	330c      	adds	r3, #12
 80088d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	e853 3f00 	ldrex	r3, [r3]
 80088da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	330c      	adds	r3, #12
 80088ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088ec:	637a      	str	r2, [r7, #52]	; 0x34
 80088ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088f4:	e841 2300 	strex	r3, r2, [r1]
 80088f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80088fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1e5      	bne.n	80088cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3314      	adds	r3, #20
 8008906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	e853 3f00 	ldrex	r3, [r3]
 800890e:	613b      	str	r3, [r7, #16]
   return(result);
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f023 0301 	bic.w	r3, r3, #1
 8008916:	63bb      	str	r3, [r7, #56]	; 0x38
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3314      	adds	r3, #20
 800891e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008920:	623a      	str	r2, [r7, #32]
 8008922:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008924:	69f9      	ldr	r1, [r7, #28]
 8008926:	6a3a      	ldr	r2, [r7, #32]
 8008928:	e841 2300 	strex	r3, r2, [r1]
 800892c:	61bb      	str	r3, [r7, #24]
   return(result);
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e5      	bne.n	8008900 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2220      	movs	r2, #32
 8008938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2220      	movs	r2, #32
 8008940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e00f      	b.n	8008970 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	4013      	ands	r3, r2
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	429a      	cmp	r2, r3
 800895e:	bf0c      	ite	eq
 8008960:	2301      	moveq	r3, #1
 8008962:	2300      	movne	r3, #0
 8008964:	b2db      	uxtb	r3, r3
 8008966:	461a      	mov	r2, r3
 8008968:	79fb      	ldrb	r3, [r7, #7]
 800896a:	429a      	cmp	r2, r3
 800896c:	d09f      	beq.n	80088ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3740      	adds	r7, #64	; 0x40
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	4613      	mov	r3, r2
 8008984:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	88fa      	ldrh	r2, [r7, #6]
 8008990:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	88fa      	ldrh	r2, [r7, #6]
 8008996:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2222      	movs	r2, #34	; 0x22
 80089a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68da      	ldr	r2, [r3, #12]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089bc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	695a      	ldr	r2, [r3, #20]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f042 0201 	orr.w	r2, r2, #1
 80089cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68da      	ldr	r2, [r3, #12]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 0220 	orr.w	r2, r2, #32
 80089dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b095      	sub	sp, #84	; 0x54
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	330c      	adds	r3, #12
 80089fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	330c      	adds	r3, #12
 8008a12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a14:	643a      	str	r2, [r7, #64]	; 0x40
 8008a16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e5      	bne.n	80089f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3314      	adds	r3, #20
 8008a2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a38:	69fb      	ldr	r3, [r7, #28]
 8008a3a:	f023 0301 	bic.w	r3, r3, #1
 8008a3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3314      	adds	r3, #20
 8008a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e5      	bne.n	8008a28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d119      	bne.n	8008a98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	330c      	adds	r3, #12
 8008a6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	e853 3f00 	ldrex	r3, [r3]
 8008a72:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	f023 0310 	bic.w	r3, r3, #16
 8008a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	330c      	adds	r3, #12
 8008a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a84:	61ba      	str	r2, [r7, #24]
 8008a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a88:	6979      	ldr	r1, [r7, #20]
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	e841 2300 	strex	r3, r2, [r1]
 8008a90:	613b      	str	r3, [r7, #16]
   return(result);
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1e5      	bne.n	8008a64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008aa6:	bf00      	nop
 8008aa8:	3754      	adds	r7, #84	; 0x54
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f7ff fecf 	bl	8008870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ad2:	bf00      	nop
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b085      	sub	sp, #20
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b21      	cmp	r3, #33	; 0x21
 8008aec:	d13e      	bne.n	8008b6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008af6:	d114      	bne.n	8008b22 <UART_Transmit_IT+0x48>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d110      	bne.n	8008b22 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	1c9a      	adds	r2, r3, #2
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	621a      	str	r2, [r3, #32]
 8008b20:	e008      	b.n	8008b34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	1c59      	adds	r1, r3, #1
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	6211      	str	r1, [r2, #32]
 8008b2c:	781a      	ldrb	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	4619      	mov	r1, r3
 8008b42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10f      	bne.n	8008b68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68da      	ldr	r2, [r3, #12]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e000      	b.n	8008b6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b6c:	2302      	movs	r3, #2
  }
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b082      	sub	sp, #8
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68da      	ldr	r2, [r3, #12]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2220      	movs	r2, #32
 8008b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7ff fe5e 	bl	800885c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3708      	adds	r7, #8
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b08c      	sub	sp, #48	; 0x30
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b22      	cmp	r3, #34	; 0x22
 8008bbc:	f040 80ab 	bne.w	8008d16 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc8:	d117      	bne.n	8008bfa <UART_Receive_IT+0x50>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d113      	bne.n	8008bfa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bda:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf2:	1c9a      	adds	r2, r3, #2
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8008bf8:	e026      	b.n	8008c48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008c00:	2300      	movs	r3, #0
 8008c02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c0c:	d007      	beq.n	8008c1e <UART_Receive_IT+0x74>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10a      	bne.n	8008c2c <UART_Receive_IT+0x82>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d106      	bne.n	8008c2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c28:	701a      	strb	r2, [r3, #0]
 8008c2a:	e008      	b.n	8008c3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c42:	1c5a      	adds	r2, r3, #1
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	4619      	mov	r1, r3
 8008c56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d15a      	bne.n	8008d12 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f022 0220 	bic.w	r2, r2, #32
 8008c6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	695a      	ldr	r2, [r3, #20]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f022 0201 	bic.w	r2, r2, #1
 8008c8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2220      	movs	r2, #32
 8008c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d135      	bne.n	8008d08 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	330c      	adds	r3, #12
 8008ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	e853 3f00 	ldrex	r3, [r3]
 8008cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f023 0310 	bic.w	r3, r3, #16
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	330c      	adds	r3, #12
 8008cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc2:	623a      	str	r2, [r7, #32]
 8008cc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc6:	69f9      	ldr	r1, [r7, #28]
 8008cc8:	6a3a      	ldr	r2, [r7, #32]
 8008cca:	e841 2300 	strex	r3, r2, [r1]
 8008cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1e5      	bne.n	8008ca2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0310 	and.w	r3, r3, #16
 8008ce0:	2b10      	cmp	r3, #16
 8008ce2:	d10a      	bne.n	8008cfa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	60fb      	str	r3, [r7, #12]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff fdbf 	bl	8008884 <HAL_UARTEx_RxEventCallback>
 8008d06:	e002      	b.n	8008d0e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7fb f96f 	bl	8003fec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e002      	b.n	8008d18 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	e000      	b.n	8008d18 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008d16:	2302      	movs	r3, #2
  }
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3730      	adds	r7, #48	; 0x30
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d24:	b09f      	sub	sp, #124	; 0x7c
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d36:	68d9      	ldr	r1, [r3, #12]
 8008d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	ea40 0301 	orr.w	r3, r0, r1
 8008d40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	431a      	orrs	r2, r3
 8008d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d54:	69db      	ldr	r3, [r3, #28]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d64:	f021 010c 	bic.w	r1, r1, #12
 8008d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d6e:	430b      	orrs	r3, r1
 8008d70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	695b      	ldr	r3, [r3, #20]
 8008d78:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d7e:	6999      	ldr	r1, [r3, #24]
 8008d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	ea40 0301 	orr.w	r3, r0, r1
 8008d88:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	4bc5      	ldr	r3, [pc, #788]	; (80090a4 <UART_SetConfig+0x384>)
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d004      	beq.n	8008d9e <UART_SetConfig+0x7e>
 8008d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	4bc3      	ldr	r3, [pc, #780]	; (80090a8 <UART_SetConfig+0x388>)
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d103      	bne.n	8008da6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d9e:	f7fd fc09 	bl	80065b4 <HAL_RCC_GetPCLK2Freq>
 8008da2:	6778      	str	r0, [r7, #116]	; 0x74
 8008da4:	e002      	b.n	8008dac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008da6:	f7fd fbf1 	bl	800658c <HAL_RCC_GetPCLK1Freq>
 8008daa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db4:	f040 80b6 	bne.w	8008f24 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dba:	461c      	mov	r4, r3
 8008dbc:	f04f 0500 	mov.w	r5, #0
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	462b      	mov	r3, r5
 8008dc4:	1891      	adds	r1, r2, r2
 8008dc6:	6439      	str	r1, [r7, #64]	; 0x40
 8008dc8:	415b      	adcs	r3, r3
 8008dca:	647b      	str	r3, [r7, #68]	; 0x44
 8008dcc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008dd0:	1912      	adds	r2, r2, r4
 8008dd2:	eb45 0303 	adc.w	r3, r5, r3
 8008dd6:	f04f 0000 	mov.w	r0, #0
 8008dda:	f04f 0100 	mov.w	r1, #0
 8008dde:	00d9      	lsls	r1, r3, #3
 8008de0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008de4:	00d0      	lsls	r0, r2, #3
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	1911      	adds	r1, r2, r4
 8008dec:	6639      	str	r1, [r7, #96]	; 0x60
 8008dee:	416b      	adcs	r3, r5
 8008df0:	667b      	str	r3, [r7, #100]	; 0x64
 8008df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	461a      	mov	r2, r3
 8008df8:	f04f 0300 	mov.w	r3, #0
 8008dfc:	1891      	adds	r1, r2, r2
 8008dfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e00:	415b      	adcs	r3, r3
 8008e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e08:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008e0c:	f7f7 fa38 	bl	8000280 <__aeabi_uldivmod>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	4ba5      	ldr	r3, [pc, #660]	; (80090ac <UART_SetConfig+0x38c>)
 8008e16:	fba3 2302 	umull	r2, r3, r3, r2
 8008e1a:	095b      	lsrs	r3, r3, #5
 8008e1c:	011e      	lsls	r6, r3, #4
 8008e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e20:	461c      	mov	r4, r3
 8008e22:	f04f 0500 	mov.w	r5, #0
 8008e26:	4622      	mov	r2, r4
 8008e28:	462b      	mov	r3, r5
 8008e2a:	1891      	adds	r1, r2, r2
 8008e2c:	6339      	str	r1, [r7, #48]	; 0x30
 8008e2e:	415b      	adcs	r3, r3
 8008e30:	637b      	str	r3, [r7, #52]	; 0x34
 8008e32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008e36:	1912      	adds	r2, r2, r4
 8008e38:	eb45 0303 	adc.w	r3, r5, r3
 8008e3c:	f04f 0000 	mov.w	r0, #0
 8008e40:	f04f 0100 	mov.w	r1, #0
 8008e44:	00d9      	lsls	r1, r3, #3
 8008e46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e4a:	00d0      	lsls	r0, r2, #3
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	1911      	adds	r1, r2, r4
 8008e52:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e54:	416b      	adcs	r3, r5
 8008e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f04f 0300 	mov.w	r3, #0
 8008e62:	1891      	adds	r1, r2, r2
 8008e64:	62b9      	str	r1, [r7, #40]	; 0x28
 8008e66:	415b      	adcs	r3, r3
 8008e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e6e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008e72:	f7f7 fa05 	bl	8000280 <__aeabi_uldivmod>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4b8c      	ldr	r3, [pc, #560]	; (80090ac <UART_SetConfig+0x38c>)
 8008e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e80:	095b      	lsrs	r3, r3, #5
 8008e82:	2164      	movs	r1, #100	; 0x64
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	00db      	lsls	r3, r3, #3
 8008e8c:	3332      	adds	r3, #50	; 0x32
 8008e8e:	4a87      	ldr	r2, [pc, #540]	; (80090ac <UART_SetConfig+0x38c>)
 8008e90:	fba2 2303 	umull	r2, r3, r2, r3
 8008e94:	095b      	lsrs	r3, r3, #5
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008e9c:	441e      	add	r6, r3
 8008e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f04f 0100 	mov.w	r1, #0
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	1894      	adds	r4, r2, r2
 8008eac:	623c      	str	r4, [r7, #32]
 8008eae:	415b      	adcs	r3, r3
 8008eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008eb6:	1812      	adds	r2, r2, r0
 8008eb8:	eb41 0303 	adc.w	r3, r1, r3
 8008ebc:	f04f 0400 	mov.w	r4, #0
 8008ec0:	f04f 0500 	mov.w	r5, #0
 8008ec4:	00dd      	lsls	r5, r3, #3
 8008ec6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008eca:	00d4      	lsls	r4, r2, #3
 8008ecc:	4622      	mov	r2, r4
 8008ece:	462b      	mov	r3, r5
 8008ed0:	1814      	adds	r4, r2, r0
 8008ed2:	653c      	str	r4, [r7, #80]	; 0x50
 8008ed4:	414b      	adcs	r3, r1
 8008ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	461a      	mov	r2, r3
 8008ede:	f04f 0300 	mov.w	r3, #0
 8008ee2:	1891      	adds	r1, r2, r2
 8008ee4:	61b9      	str	r1, [r7, #24]
 8008ee6:	415b      	adcs	r3, r3
 8008ee8:	61fb      	str	r3, [r7, #28]
 8008eea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008eee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008ef2:	f7f7 f9c5 	bl	8000280 <__aeabi_uldivmod>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4b6c      	ldr	r3, [pc, #432]	; (80090ac <UART_SetConfig+0x38c>)
 8008efc:	fba3 1302 	umull	r1, r3, r3, r2
 8008f00:	095b      	lsrs	r3, r3, #5
 8008f02:	2164      	movs	r1, #100	; 0x64
 8008f04:	fb01 f303 	mul.w	r3, r1, r3
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	00db      	lsls	r3, r3, #3
 8008f0c:	3332      	adds	r3, #50	; 0x32
 8008f0e:	4a67      	ldr	r2, [pc, #412]	; (80090ac <UART_SetConfig+0x38c>)
 8008f10:	fba2 2303 	umull	r2, r3, r2, r3
 8008f14:	095b      	lsrs	r3, r3, #5
 8008f16:	f003 0207 	and.w	r2, r3, #7
 8008f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4432      	add	r2, r6
 8008f20:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f22:	e0b9      	b.n	8009098 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f26:	461c      	mov	r4, r3
 8008f28:	f04f 0500 	mov.w	r5, #0
 8008f2c:	4622      	mov	r2, r4
 8008f2e:	462b      	mov	r3, r5
 8008f30:	1891      	adds	r1, r2, r2
 8008f32:	6139      	str	r1, [r7, #16]
 8008f34:	415b      	adcs	r3, r3
 8008f36:	617b      	str	r3, [r7, #20]
 8008f38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f3c:	1912      	adds	r2, r2, r4
 8008f3e:	eb45 0303 	adc.w	r3, r5, r3
 8008f42:	f04f 0000 	mov.w	r0, #0
 8008f46:	f04f 0100 	mov.w	r1, #0
 8008f4a:	00d9      	lsls	r1, r3, #3
 8008f4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f50:	00d0      	lsls	r0, r2, #3
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	eb12 0804 	adds.w	r8, r2, r4
 8008f5a:	eb43 0905 	adc.w	r9, r3, r5
 8008f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f04f 0100 	mov.w	r1, #0
 8008f68:	f04f 0200 	mov.w	r2, #0
 8008f6c:	f04f 0300 	mov.w	r3, #0
 8008f70:	008b      	lsls	r3, r1, #2
 8008f72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f76:	0082      	lsls	r2, r0, #2
 8008f78:	4640      	mov	r0, r8
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	f7f7 f980 	bl	8000280 <__aeabi_uldivmod>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4b49      	ldr	r3, [pc, #292]	; (80090ac <UART_SetConfig+0x38c>)
 8008f86:	fba3 2302 	umull	r2, r3, r3, r2
 8008f8a:	095b      	lsrs	r3, r3, #5
 8008f8c:	011e      	lsls	r6, r3, #4
 8008f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f90:	4618      	mov	r0, r3
 8008f92:	f04f 0100 	mov.w	r1, #0
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	1894      	adds	r4, r2, r2
 8008f9c:	60bc      	str	r4, [r7, #8]
 8008f9e:	415b      	adcs	r3, r3
 8008fa0:	60fb      	str	r3, [r7, #12]
 8008fa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fa6:	1812      	adds	r2, r2, r0
 8008fa8:	eb41 0303 	adc.w	r3, r1, r3
 8008fac:	f04f 0400 	mov.w	r4, #0
 8008fb0:	f04f 0500 	mov.w	r5, #0
 8008fb4:	00dd      	lsls	r5, r3, #3
 8008fb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008fba:	00d4      	lsls	r4, r2, #3
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	462b      	mov	r3, r5
 8008fc0:	1814      	adds	r4, r2, r0
 8008fc2:	64bc      	str	r4, [r7, #72]	; 0x48
 8008fc4:	414b      	adcs	r3, r1
 8008fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f04f 0100 	mov.w	r1, #0
 8008fd2:	f04f 0200 	mov.w	r2, #0
 8008fd6:	f04f 0300 	mov.w	r3, #0
 8008fda:	008b      	lsls	r3, r1, #2
 8008fdc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008fe0:	0082      	lsls	r2, r0, #2
 8008fe2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008fe6:	f7f7 f94b 	bl	8000280 <__aeabi_uldivmod>
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	4b2f      	ldr	r3, [pc, #188]	; (80090ac <UART_SetConfig+0x38c>)
 8008ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ff4:	095b      	lsrs	r3, r3, #5
 8008ff6:	2164      	movs	r1, #100	; 0x64
 8008ff8:	fb01 f303 	mul.w	r3, r1, r3
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	011b      	lsls	r3, r3, #4
 8009000:	3332      	adds	r3, #50	; 0x32
 8009002:	4a2a      	ldr	r2, [pc, #168]	; (80090ac <UART_SetConfig+0x38c>)
 8009004:	fba2 2303 	umull	r2, r3, r2, r3
 8009008:	095b      	lsrs	r3, r3, #5
 800900a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800900e:	441e      	add	r6, r3
 8009010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009012:	4618      	mov	r0, r3
 8009014:	f04f 0100 	mov.w	r1, #0
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	1894      	adds	r4, r2, r2
 800901e:	603c      	str	r4, [r7, #0]
 8009020:	415b      	adcs	r3, r3
 8009022:	607b      	str	r3, [r7, #4]
 8009024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009028:	1812      	adds	r2, r2, r0
 800902a:	eb41 0303 	adc.w	r3, r1, r3
 800902e:	f04f 0400 	mov.w	r4, #0
 8009032:	f04f 0500 	mov.w	r5, #0
 8009036:	00dd      	lsls	r5, r3, #3
 8009038:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800903c:	00d4      	lsls	r4, r2, #3
 800903e:	4622      	mov	r2, r4
 8009040:	462b      	mov	r3, r5
 8009042:	eb12 0a00 	adds.w	sl, r2, r0
 8009046:	eb43 0b01 	adc.w	fp, r3, r1
 800904a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	4618      	mov	r0, r3
 8009050:	f04f 0100 	mov.w	r1, #0
 8009054:	f04f 0200 	mov.w	r2, #0
 8009058:	f04f 0300 	mov.w	r3, #0
 800905c:	008b      	lsls	r3, r1, #2
 800905e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009062:	0082      	lsls	r2, r0, #2
 8009064:	4650      	mov	r0, sl
 8009066:	4659      	mov	r1, fp
 8009068:	f7f7 f90a 	bl	8000280 <__aeabi_uldivmod>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4b0e      	ldr	r3, [pc, #56]	; (80090ac <UART_SetConfig+0x38c>)
 8009072:	fba3 1302 	umull	r1, r3, r3, r2
 8009076:	095b      	lsrs	r3, r3, #5
 8009078:	2164      	movs	r1, #100	; 0x64
 800907a:	fb01 f303 	mul.w	r3, r1, r3
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	011b      	lsls	r3, r3, #4
 8009082:	3332      	adds	r3, #50	; 0x32
 8009084:	4a09      	ldr	r2, [pc, #36]	; (80090ac <UART_SetConfig+0x38c>)
 8009086:	fba2 2303 	umull	r2, r3, r2, r3
 800908a:	095b      	lsrs	r3, r3, #5
 800908c:	f003 020f 	and.w	r2, r3, #15
 8009090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4432      	add	r2, r6
 8009096:	609a      	str	r2, [r3, #8]
}
 8009098:	bf00      	nop
 800909a:	377c      	adds	r7, #124	; 0x7c
 800909c:	46bd      	mov	sp, r7
 800909e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a2:	bf00      	nop
 80090a4:	40011000 	.word	0x40011000
 80090a8:	40011400 	.word	0x40011400
 80090ac:	51eb851f 	.word	0x51eb851f

080090b0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80090ba:	2300      	movs	r3, #0
 80090bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	4b20      	ldr	r3, [pc, #128]	; (8009150 <FSMC_NORSRAM_Init+0xa0>)
 80090ce:	4013      	ands	r3, r2
 80090d0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80090da:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80090e0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80090e6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80090ec:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80090f2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80090f8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80090fe:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8009104:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800910a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8009110:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8009116:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800911c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	4313      	orrs	r3, r2
 8009122:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	2b08      	cmp	r3, #8
 800912a:	d103      	bne.n	8009134 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009132:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68f9      	ldr	r1, [r7, #12]
 800913c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	fff00080 	.word	0xfff00080

08009154 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009160:	2300      	movs	r3, #0
 8009162:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009176:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009182:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800918a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8009192:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	3b01      	subs	r3, #1
 800919a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800919c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	3b02      	subs	r3, #2
 80091a4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80091a6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80091ac:	4313      	orrs	r3, r2
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6979      	ldr	r1, [r7, #20]
 80091bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	371c      	adds	r7, #28
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
	...

080091d0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b087      	sub	sp, #28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]
 80091dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091e8:	d122      	bne.n	8009230 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	4b15      	ldr	r3, [pc, #84]	; (800924c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80091f8:	4013      	ands	r3, r2
 80091fa:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009206:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800920e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8009216:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800921c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	4313      	orrs	r3, r2
 8009222:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	6979      	ldr	r1, [r7, #20]
 800922a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800922e:	e005      	b.n	800923c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	371c      	adds	r7, #28
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	cff00000 	.word	0xcff00000

08009250 <__errno>:
 8009250:	4b01      	ldr	r3, [pc, #4]	; (8009258 <__errno+0x8>)
 8009252:	6818      	ldr	r0, [r3, #0]
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	200000c8 	.word	0x200000c8

0800925c <__libc_init_array>:
 800925c:	b570      	push	{r4, r5, r6, lr}
 800925e:	4d0d      	ldr	r5, [pc, #52]	; (8009294 <__libc_init_array+0x38>)
 8009260:	4c0d      	ldr	r4, [pc, #52]	; (8009298 <__libc_init_array+0x3c>)
 8009262:	1b64      	subs	r4, r4, r5
 8009264:	10a4      	asrs	r4, r4, #2
 8009266:	2600      	movs	r6, #0
 8009268:	42a6      	cmp	r6, r4
 800926a:	d109      	bne.n	8009280 <__libc_init_array+0x24>
 800926c:	4d0b      	ldr	r5, [pc, #44]	; (800929c <__libc_init_array+0x40>)
 800926e:	4c0c      	ldr	r4, [pc, #48]	; (80092a0 <__libc_init_array+0x44>)
 8009270:	f001 fa18 	bl	800a6a4 <_init>
 8009274:	1b64      	subs	r4, r4, r5
 8009276:	10a4      	asrs	r4, r4, #2
 8009278:	2600      	movs	r6, #0
 800927a:	42a6      	cmp	r6, r4
 800927c:	d105      	bne.n	800928a <__libc_init_array+0x2e>
 800927e:	bd70      	pop	{r4, r5, r6, pc}
 8009280:	f855 3b04 	ldr.w	r3, [r5], #4
 8009284:	4798      	blx	r3
 8009286:	3601      	adds	r6, #1
 8009288:	e7ee      	b.n	8009268 <__libc_init_array+0xc>
 800928a:	f855 3b04 	ldr.w	r3, [r5], #4
 800928e:	4798      	blx	r3
 8009290:	3601      	adds	r6, #1
 8009292:	e7f2      	b.n	800927a <__libc_init_array+0x1e>
 8009294:	08011888 	.word	0x08011888
 8009298:	08011888 	.word	0x08011888
 800929c:	08011888 	.word	0x08011888
 80092a0:	0801188c 	.word	0x0801188c

080092a4 <memset>:
 80092a4:	4402      	add	r2, r0
 80092a6:	4603      	mov	r3, r0
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d100      	bne.n	80092ae <memset+0xa>
 80092ac:	4770      	bx	lr
 80092ae:	f803 1b01 	strb.w	r1, [r3], #1
 80092b2:	e7f9      	b.n	80092a8 <memset+0x4>

080092b4 <rand>:
 80092b4:	4b17      	ldr	r3, [pc, #92]	; (8009314 <rand+0x60>)
 80092b6:	b510      	push	{r4, lr}
 80092b8:	681c      	ldr	r4, [r3, #0]
 80092ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80092bc:	b9b3      	cbnz	r3, 80092ec <rand+0x38>
 80092be:	2018      	movs	r0, #24
 80092c0:	f000 f8ac 	bl	800941c <malloc>
 80092c4:	63a0      	str	r0, [r4, #56]	; 0x38
 80092c6:	b928      	cbnz	r0, 80092d4 <rand+0x20>
 80092c8:	4602      	mov	r2, r0
 80092ca:	4b13      	ldr	r3, [pc, #76]	; (8009318 <rand+0x64>)
 80092cc:	4813      	ldr	r0, [pc, #76]	; (800931c <rand+0x68>)
 80092ce:	214e      	movs	r1, #78	; 0x4e
 80092d0:	f000 f874 	bl	80093bc <__assert_func>
 80092d4:	4a12      	ldr	r2, [pc, #72]	; (8009320 <rand+0x6c>)
 80092d6:	4b13      	ldr	r3, [pc, #76]	; (8009324 <rand+0x70>)
 80092d8:	e9c0 2300 	strd	r2, r3, [r0]
 80092dc:	4b12      	ldr	r3, [pc, #72]	; (8009328 <rand+0x74>)
 80092de:	6083      	str	r3, [r0, #8]
 80092e0:	230b      	movs	r3, #11
 80092e2:	8183      	strh	r3, [r0, #12]
 80092e4:	2201      	movs	r2, #1
 80092e6:	2300      	movs	r3, #0
 80092e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80092ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80092ee:	480f      	ldr	r0, [pc, #60]	; (800932c <rand+0x78>)
 80092f0:	690a      	ldr	r2, [r1, #16]
 80092f2:	694b      	ldr	r3, [r1, #20]
 80092f4:	4c0e      	ldr	r4, [pc, #56]	; (8009330 <rand+0x7c>)
 80092f6:	4350      	muls	r0, r2
 80092f8:	fb04 0003 	mla	r0, r4, r3, r0
 80092fc:	fba2 3404 	umull	r3, r4, r2, r4
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	4404      	add	r4, r0
 8009304:	f144 0000 	adc.w	r0, r4, #0
 8009308:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800930c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009310:	bd10      	pop	{r4, pc}
 8009312:	bf00      	nop
 8009314:	200000c8 	.word	0x200000c8
 8009318:	08011738 	.word	0x08011738
 800931c:	0801174f 	.word	0x0801174f
 8009320:	abcd330e 	.word	0xabcd330e
 8009324:	e66d1234 	.word	0xe66d1234
 8009328:	0005deec 	.word	0x0005deec
 800932c:	5851f42d 	.word	0x5851f42d
 8009330:	4c957f2d 	.word	0x4c957f2d

08009334 <sniprintf>:
 8009334:	b40c      	push	{r2, r3}
 8009336:	b530      	push	{r4, r5, lr}
 8009338:	4b17      	ldr	r3, [pc, #92]	; (8009398 <sniprintf+0x64>)
 800933a:	1e0c      	subs	r4, r1, #0
 800933c:	681d      	ldr	r5, [r3, #0]
 800933e:	b09d      	sub	sp, #116	; 0x74
 8009340:	da08      	bge.n	8009354 <sniprintf+0x20>
 8009342:	238b      	movs	r3, #139	; 0x8b
 8009344:	602b      	str	r3, [r5, #0]
 8009346:	f04f 30ff 	mov.w	r0, #4294967295
 800934a:	b01d      	add	sp, #116	; 0x74
 800934c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009350:	b002      	add	sp, #8
 8009352:	4770      	bx	lr
 8009354:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009358:	f8ad 3014 	strh.w	r3, [sp, #20]
 800935c:	bf14      	ite	ne
 800935e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009362:	4623      	moveq	r3, r4
 8009364:	9304      	str	r3, [sp, #16]
 8009366:	9307      	str	r3, [sp, #28]
 8009368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800936c:	9002      	str	r0, [sp, #8]
 800936e:	9006      	str	r0, [sp, #24]
 8009370:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009374:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009376:	ab21      	add	r3, sp, #132	; 0x84
 8009378:	a902      	add	r1, sp, #8
 800937a:	4628      	mov	r0, r5
 800937c:	9301      	str	r3, [sp, #4]
 800937e:	f000 f95b 	bl	8009638 <_svfiprintf_r>
 8009382:	1c43      	adds	r3, r0, #1
 8009384:	bfbc      	itt	lt
 8009386:	238b      	movlt	r3, #139	; 0x8b
 8009388:	602b      	strlt	r3, [r5, #0]
 800938a:	2c00      	cmp	r4, #0
 800938c:	d0dd      	beq.n	800934a <sniprintf+0x16>
 800938e:	9b02      	ldr	r3, [sp, #8]
 8009390:	2200      	movs	r2, #0
 8009392:	701a      	strb	r2, [r3, #0]
 8009394:	e7d9      	b.n	800934a <sniprintf+0x16>
 8009396:	bf00      	nop
 8009398:	200000c8 	.word	0x200000c8

0800939c <strcat>:
 800939c:	b510      	push	{r4, lr}
 800939e:	4602      	mov	r2, r0
 80093a0:	7814      	ldrb	r4, [r2, #0]
 80093a2:	4613      	mov	r3, r2
 80093a4:	3201      	adds	r2, #1
 80093a6:	2c00      	cmp	r4, #0
 80093a8:	d1fa      	bne.n	80093a0 <strcat+0x4>
 80093aa:	3b01      	subs	r3, #1
 80093ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093b4:	2a00      	cmp	r2, #0
 80093b6:	d1f9      	bne.n	80093ac <strcat+0x10>
 80093b8:	bd10      	pop	{r4, pc}
	...

080093bc <__assert_func>:
 80093bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093be:	4614      	mov	r4, r2
 80093c0:	461a      	mov	r2, r3
 80093c2:	4b09      	ldr	r3, [pc, #36]	; (80093e8 <__assert_func+0x2c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4605      	mov	r5, r0
 80093c8:	68d8      	ldr	r0, [r3, #12]
 80093ca:	b14c      	cbz	r4, 80093e0 <__assert_func+0x24>
 80093cc:	4b07      	ldr	r3, [pc, #28]	; (80093ec <__assert_func+0x30>)
 80093ce:	9100      	str	r1, [sp, #0]
 80093d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093d4:	4906      	ldr	r1, [pc, #24]	; (80093f0 <__assert_func+0x34>)
 80093d6:	462b      	mov	r3, r5
 80093d8:	f000 f80e 	bl	80093f8 <fiprintf>
 80093dc:	f000 fdea 	bl	8009fb4 <abort>
 80093e0:	4b04      	ldr	r3, [pc, #16]	; (80093f4 <__assert_func+0x38>)
 80093e2:	461c      	mov	r4, r3
 80093e4:	e7f3      	b.n	80093ce <__assert_func+0x12>
 80093e6:	bf00      	nop
 80093e8:	200000c8 	.word	0x200000c8
 80093ec:	080117ae 	.word	0x080117ae
 80093f0:	080117bb 	.word	0x080117bb
 80093f4:	080117e9 	.word	0x080117e9

080093f8 <fiprintf>:
 80093f8:	b40e      	push	{r1, r2, r3}
 80093fa:	b503      	push	{r0, r1, lr}
 80093fc:	4601      	mov	r1, r0
 80093fe:	ab03      	add	r3, sp, #12
 8009400:	4805      	ldr	r0, [pc, #20]	; (8009418 <fiprintf+0x20>)
 8009402:	f853 2b04 	ldr.w	r2, [r3], #4
 8009406:	6800      	ldr	r0, [r0, #0]
 8009408:	9301      	str	r3, [sp, #4]
 800940a:	f000 fa3f 	bl	800988c <_vfiprintf_r>
 800940e:	b002      	add	sp, #8
 8009410:	f85d eb04 	ldr.w	lr, [sp], #4
 8009414:	b003      	add	sp, #12
 8009416:	4770      	bx	lr
 8009418:	200000c8 	.word	0x200000c8

0800941c <malloc>:
 800941c:	4b02      	ldr	r3, [pc, #8]	; (8009428 <malloc+0xc>)
 800941e:	4601      	mov	r1, r0
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	f000 b853 	b.w	80094cc <_malloc_r>
 8009426:	bf00      	nop
 8009428:	200000c8 	.word	0x200000c8

0800942c <_free_r>:
 800942c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800942e:	2900      	cmp	r1, #0
 8009430:	d048      	beq.n	80094c4 <_free_r+0x98>
 8009432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009436:	9001      	str	r0, [sp, #4]
 8009438:	2b00      	cmp	r3, #0
 800943a:	f1a1 0404 	sub.w	r4, r1, #4
 800943e:	bfb8      	it	lt
 8009440:	18e4      	addlt	r4, r4, r3
 8009442:	f001 f805 	bl	800a450 <__malloc_lock>
 8009446:	4a20      	ldr	r2, [pc, #128]	; (80094c8 <_free_r+0x9c>)
 8009448:	9801      	ldr	r0, [sp, #4]
 800944a:	6813      	ldr	r3, [r2, #0]
 800944c:	4615      	mov	r5, r2
 800944e:	b933      	cbnz	r3, 800945e <_free_r+0x32>
 8009450:	6063      	str	r3, [r4, #4]
 8009452:	6014      	str	r4, [r2, #0]
 8009454:	b003      	add	sp, #12
 8009456:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800945a:	f000 bfff 	b.w	800a45c <__malloc_unlock>
 800945e:	42a3      	cmp	r3, r4
 8009460:	d90b      	bls.n	800947a <_free_r+0x4e>
 8009462:	6821      	ldr	r1, [r4, #0]
 8009464:	1862      	adds	r2, r4, r1
 8009466:	4293      	cmp	r3, r2
 8009468:	bf04      	itt	eq
 800946a:	681a      	ldreq	r2, [r3, #0]
 800946c:	685b      	ldreq	r3, [r3, #4]
 800946e:	6063      	str	r3, [r4, #4]
 8009470:	bf04      	itt	eq
 8009472:	1852      	addeq	r2, r2, r1
 8009474:	6022      	streq	r2, [r4, #0]
 8009476:	602c      	str	r4, [r5, #0]
 8009478:	e7ec      	b.n	8009454 <_free_r+0x28>
 800947a:	461a      	mov	r2, r3
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	b10b      	cbz	r3, 8009484 <_free_r+0x58>
 8009480:	42a3      	cmp	r3, r4
 8009482:	d9fa      	bls.n	800947a <_free_r+0x4e>
 8009484:	6811      	ldr	r1, [r2, #0]
 8009486:	1855      	adds	r5, r2, r1
 8009488:	42a5      	cmp	r5, r4
 800948a:	d10b      	bne.n	80094a4 <_free_r+0x78>
 800948c:	6824      	ldr	r4, [r4, #0]
 800948e:	4421      	add	r1, r4
 8009490:	1854      	adds	r4, r2, r1
 8009492:	42a3      	cmp	r3, r4
 8009494:	6011      	str	r1, [r2, #0]
 8009496:	d1dd      	bne.n	8009454 <_free_r+0x28>
 8009498:	681c      	ldr	r4, [r3, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	6053      	str	r3, [r2, #4]
 800949e:	4421      	add	r1, r4
 80094a0:	6011      	str	r1, [r2, #0]
 80094a2:	e7d7      	b.n	8009454 <_free_r+0x28>
 80094a4:	d902      	bls.n	80094ac <_free_r+0x80>
 80094a6:	230c      	movs	r3, #12
 80094a8:	6003      	str	r3, [r0, #0]
 80094aa:	e7d3      	b.n	8009454 <_free_r+0x28>
 80094ac:	6825      	ldr	r5, [r4, #0]
 80094ae:	1961      	adds	r1, r4, r5
 80094b0:	428b      	cmp	r3, r1
 80094b2:	bf04      	itt	eq
 80094b4:	6819      	ldreq	r1, [r3, #0]
 80094b6:	685b      	ldreq	r3, [r3, #4]
 80094b8:	6063      	str	r3, [r4, #4]
 80094ba:	bf04      	itt	eq
 80094bc:	1949      	addeq	r1, r1, r5
 80094be:	6021      	streq	r1, [r4, #0]
 80094c0:	6054      	str	r4, [r2, #4]
 80094c2:	e7c7      	b.n	8009454 <_free_r+0x28>
 80094c4:	b003      	add	sp, #12
 80094c6:	bd30      	pop	{r4, r5, pc}
 80094c8:	20000174 	.word	0x20000174

080094cc <_malloc_r>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	1ccd      	adds	r5, r1, #3
 80094d0:	f025 0503 	bic.w	r5, r5, #3
 80094d4:	3508      	adds	r5, #8
 80094d6:	2d0c      	cmp	r5, #12
 80094d8:	bf38      	it	cc
 80094da:	250c      	movcc	r5, #12
 80094dc:	2d00      	cmp	r5, #0
 80094de:	4606      	mov	r6, r0
 80094e0:	db01      	blt.n	80094e6 <_malloc_r+0x1a>
 80094e2:	42a9      	cmp	r1, r5
 80094e4:	d903      	bls.n	80094ee <_malloc_r+0x22>
 80094e6:	230c      	movs	r3, #12
 80094e8:	6033      	str	r3, [r6, #0]
 80094ea:	2000      	movs	r0, #0
 80094ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094ee:	f000 ffaf 	bl	800a450 <__malloc_lock>
 80094f2:	4921      	ldr	r1, [pc, #132]	; (8009578 <_malloc_r+0xac>)
 80094f4:	680a      	ldr	r2, [r1, #0]
 80094f6:	4614      	mov	r4, r2
 80094f8:	b99c      	cbnz	r4, 8009522 <_malloc_r+0x56>
 80094fa:	4f20      	ldr	r7, [pc, #128]	; (800957c <_malloc_r+0xb0>)
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	b923      	cbnz	r3, 800950a <_malloc_r+0x3e>
 8009500:	4621      	mov	r1, r4
 8009502:	4630      	mov	r0, r6
 8009504:	f000 fc86 	bl	8009e14 <_sbrk_r>
 8009508:	6038      	str	r0, [r7, #0]
 800950a:	4629      	mov	r1, r5
 800950c:	4630      	mov	r0, r6
 800950e:	f000 fc81 	bl	8009e14 <_sbrk_r>
 8009512:	1c43      	adds	r3, r0, #1
 8009514:	d123      	bne.n	800955e <_malloc_r+0x92>
 8009516:	230c      	movs	r3, #12
 8009518:	6033      	str	r3, [r6, #0]
 800951a:	4630      	mov	r0, r6
 800951c:	f000 ff9e 	bl	800a45c <__malloc_unlock>
 8009520:	e7e3      	b.n	80094ea <_malloc_r+0x1e>
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	1b5b      	subs	r3, r3, r5
 8009526:	d417      	bmi.n	8009558 <_malloc_r+0x8c>
 8009528:	2b0b      	cmp	r3, #11
 800952a:	d903      	bls.n	8009534 <_malloc_r+0x68>
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	441c      	add	r4, r3
 8009530:	6025      	str	r5, [r4, #0]
 8009532:	e004      	b.n	800953e <_malloc_r+0x72>
 8009534:	6863      	ldr	r3, [r4, #4]
 8009536:	42a2      	cmp	r2, r4
 8009538:	bf0c      	ite	eq
 800953a:	600b      	streq	r3, [r1, #0]
 800953c:	6053      	strne	r3, [r2, #4]
 800953e:	4630      	mov	r0, r6
 8009540:	f000 ff8c 	bl	800a45c <__malloc_unlock>
 8009544:	f104 000b 	add.w	r0, r4, #11
 8009548:	1d23      	adds	r3, r4, #4
 800954a:	f020 0007 	bic.w	r0, r0, #7
 800954e:	1ac2      	subs	r2, r0, r3
 8009550:	d0cc      	beq.n	80094ec <_malloc_r+0x20>
 8009552:	1a1b      	subs	r3, r3, r0
 8009554:	50a3      	str	r3, [r4, r2]
 8009556:	e7c9      	b.n	80094ec <_malloc_r+0x20>
 8009558:	4622      	mov	r2, r4
 800955a:	6864      	ldr	r4, [r4, #4]
 800955c:	e7cc      	b.n	80094f8 <_malloc_r+0x2c>
 800955e:	1cc4      	adds	r4, r0, #3
 8009560:	f024 0403 	bic.w	r4, r4, #3
 8009564:	42a0      	cmp	r0, r4
 8009566:	d0e3      	beq.n	8009530 <_malloc_r+0x64>
 8009568:	1a21      	subs	r1, r4, r0
 800956a:	4630      	mov	r0, r6
 800956c:	f000 fc52 	bl	8009e14 <_sbrk_r>
 8009570:	3001      	adds	r0, #1
 8009572:	d1dd      	bne.n	8009530 <_malloc_r+0x64>
 8009574:	e7cf      	b.n	8009516 <_malloc_r+0x4a>
 8009576:	bf00      	nop
 8009578:	20000174 	.word	0x20000174
 800957c:	20000178 	.word	0x20000178

08009580 <__ssputs_r>:
 8009580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009584:	688e      	ldr	r6, [r1, #8]
 8009586:	429e      	cmp	r6, r3
 8009588:	4682      	mov	sl, r0
 800958a:	460c      	mov	r4, r1
 800958c:	4690      	mov	r8, r2
 800958e:	461f      	mov	r7, r3
 8009590:	d838      	bhi.n	8009604 <__ssputs_r+0x84>
 8009592:	898a      	ldrh	r2, [r1, #12]
 8009594:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009598:	d032      	beq.n	8009600 <__ssputs_r+0x80>
 800959a:	6825      	ldr	r5, [r4, #0]
 800959c:	6909      	ldr	r1, [r1, #16]
 800959e:	eba5 0901 	sub.w	r9, r5, r1
 80095a2:	6965      	ldr	r5, [r4, #20]
 80095a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095ac:	3301      	adds	r3, #1
 80095ae:	444b      	add	r3, r9
 80095b0:	106d      	asrs	r5, r5, #1
 80095b2:	429d      	cmp	r5, r3
 80095b4:	bf38      	it	cc
 80095b6:	461d      	movcc	r5, r3
 80095b8:	0553      	lsls	r3, r2, #21
 80095ba:	d531      	bpl.n	8009620 <__ssputs_r+0xa0>
 80095bc:	4629      	mov	r1, r5
 80095be:	f7ff ff85 	bl	80094cc <_malloc_r>
 80095c2:	4606      	mov	r6, r0
 80095c4:	b950      	cbnz	r0, 80095dc <__ssputs_r+0x5c>
 80095c6:	230c      	movs	r3, #12
 80095c8:	f8ca 3000 	str.w	r3, [sl]
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095d2:	81a3      	strh	r3, [r4, #12]
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095dc:	6921      	ldr	r1, [r4, #16]
 80095de:	464a      	mov	r2, r9
 80095e0:	f000 ff0e 	bl	800a400 <memcpy>
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ee:	81a3      	strh	r3, [r4, #12]
 80095f0:	6126      	str	r6, [r4, #16]
 80095f2:	6165      	str	r5, [r4, #20]
 80095f4:	444e      	add	r6, r9
 80095f6:	eba5 0509 	sub.w	r5, r5, r9
 80095fa:	6026      	str	r6, [r4, #0]
 80095fc:	60a5      	str	r5, [r4, #8]
 80095fe:	463e      	mov	r6, r7
 8009600:	42be      	cmp	r6, r7
 8009602:	d900      	bls.n	8009606 <__ssputs_r+0x86>
 8009604:	463e      	mov	r6, r7
 8009606:	4632      	mov	r2, r6
 8009608:	6820      	ldr	r0, [r4, #0]
 800960a:	4641      	mov	r1, r8
 800960c:	f000 ff06 	bl	800a41c <memmove>
 8009610:	68a3      	ldr	r3, [r4, #8]
 8009612:	6822      	ldr	r2, [r4, #0]
 8009614:	1b9b      	subs	r3, r3, r6
 8009616:	4432      	add	r2, r6
 8009618:	60a3      	str	r3, [r4, #8]
 800961a:	6022      	str	r2, [r4, #0]
 800961c:	2000      	movs	r0, #0
 800961e:	e7db      	b.n	80095d8 <__ssputs_r+0x58>
 8009620:	462a      	mov	r2, r5
 8009622:	f000 ff21 	bl	800a468 <_realloc_r>
 8009626:	4606      	mov	r6, r0
 8009628:	2800      	cmp	r0, #0
 800962a:	d1e1      	bne.n	80095f0 <__ssputs_r+0x70>
 800962c:	6921      	ldr	r1, [r4, #16]
 800962e:	4650      	mov	r0, sl
 8009630:	f7ff fefc 	bl	800942c <_free_r>
 8009634:	e7c7      	b.n	80095c6 <__ssputs_r+0x46>
	...

08009638 <_svfiprintf_r>:
 8009638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963c:	4698      	mov	r8, r3
 800963e:	898b      	ldrh	r3, [r1, #12]
 8009640:	061b      	lsls	r3, r3, #24
 8009642:	b09d      	sub	sp, #116	; 0x74
 8009644:	4607      	mov	r7, r0
 8009646:	460d      	mov	r5, r1
 8009648:	4614      	mov	r4, r2
 800964a:	d50e      	bpl.n	800966a <_svfiprintf_r+0x32>
 800964c:	690b      	ldr	r3, [r1, #16]
 800964e:	b963      	cbnz	r3, 800966a <_svfiprintf_r+0x32>
 8009650:	2140      	movs	r1, #64	; 0x40
 8009652:	f7ff ff3b 	bl	80094cc <_malloc_r>
 8009656:	6028      	str	r0, [r5, #0]
 8009658:	6128      	str	r0, [r5, #16]
 800965a:	b920      	cbnz	r0, 8009666 <_svfiprintf_r+0x2e>
 800965c:	230c      	movs	r3, #12
 800965e:	603b      	str	r3, [r7, #0]
 8009660:	f04f 30ff 	mov.w	r0, #4294967295
 8009664:	e0d1      	b.n	800980a <_svfiprintf_r+0x1d2>
 8009666:	2340      	movs	r3, #64	; 0x40
 8009668:	616b      	str	r3, [r5, #20]
 800966a:	2300      	movs	r3, #0
 800966c:	9309      	str	r3, [sp, #36]	; 0x24
 800966e:	2320      	movs	r3, #32
 8009670:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009674:	f8cd 800c 	str.w	r8, [sp, #12]
 8009678:	2330      	movs	r3, #48	; 0x30
 800967a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009824 <_svfiprintf_r+0x1ec>
 800967e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009682:	f04f 0901 	mov.w	r9, #1
 8009686:	4623      	mov	r3, r4
 8009688:	469a      	mov	sl, r3
 800968a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800968e:	b10a      	cbz	r2, 8009694 <_svfiprintf_r+0x5c>
 8009690:	2a25      	cmp	r2, #37	; 0x25
 8009692:	d1f9      	bne.n	8009688 <_svfiprintf_r+0x50>
 8009694:	ebba 0b04 	subs.w	fp, sl, r4
 8009698:	d00b      	beq.n	80096b2 <_svfiprintf_r+0x7a>
 800969a:	465b      	mov	r3, fp
 800969c:	4622      	mov	r2, r4
 800969e:	4629      	mov	r1, r5
 80096a0:	4638      	mov	r0, r7
 80096a2:	f7ff ff6d 	bl	8009580 <__ssputs_r>
 80096a6:	3001      	adds	r0, #1
 80096a8:	f000 80aa 	beq.w	8009800 <_svfiprintf_r+0x1c8>
 80096ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096ae:	445a      	add	r2, fp
 80096b0:	9209      	str	r2, [sp, #36]	; 0x24
 80096b2:	f89a 3000 	ldrb.w	r3, [sl]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 80a2 	beq.w	8009800 <_svfiprintf_r+0x1c8>
 80096bc:	2300      	movs	r3, #0
 80096be:	f04f 32ff 	mov.w	r2, #4294967295
 80096c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096c6:	f10a 0a01 	add.w	sl, sl, #1
 80096ca:	9304      	str	r3, [sp, #16]
 80096cc:	9307      	str	r3, [sp, #28]
 80096ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096d2:	931a      	str	r3, [sp, #104]	; 0x68
 80096d4:	4654      	mov	r4, sl
 80096d6:	2205      	movs	r2, #5
 80096d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096dc:	4851      	ldr	r0, [pc, #324]	; (8009824 <_svfiprintf_r+0x1ec>)
 80096de:	f7f6 fd7f 	bl	80001e0 <memchr>
 80096e2:	9a04      	ldr	r2, [sp, #16]
 80096e4:	b9d8      	cbnz	r0, 800971e <_svfiprintf_r+0xe6>
 80096e6:	06d0      	lsls	r0, r2, #27
 80096e8:	bf44      	itt	mi
 80096ea:	2320      	movmi	r3, #32
 80096ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096f0:	0711      	lsls	r1, r2, #28
 80096f2:	bf44      	itt	mi
 80096f4:	232b      	movmi	r3, #43	; 0x2b
 80096f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096fa:	f89a 3000 	ldrb.w	r3, [sl]
 80096fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009700:	d015      	beq.n	800972e <_svfiprintf_r+0xf6>
 8009702:	9a07      	ldr	r2, [sp, #28]
 8009704:	4654      	mov	r4, sl
 8009706:	2000      	movs	r0, #0
 8009708:	f04f 0c0a 	mov.w	ip, #10
 800970c:	4621      	mov	r1, r4
 800970e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009712:	3b30      	subs	r3, #48	; 0x30
 8009714:	2b09      	cmp	r3, #9
 8009716:	d94e      	bls.n	80097b6 <_svfiprintf_r+0x17e>
 8009718:	b1b0      	cbz	r0, 8009748 <_svfiprintf_r+0x110>
 800971a:	9207      	str	r2, [sp, #28]
 800971c:	e014      	b.n	8009748 <_svfiprintf_r+0x110>
 800971e:	eba0 0308 	sub.w	r3, r0, r8
 8009722:	fa09 f303 	lsl.w	r3, r9, r3
 8009726:	4313      	orrs	r3, r2
 8009728:	9304      	str	r3, [sp, #16]
 800972a:	46a2      	mov	sl, r4
 800972c:	e7d2      	b.n	80096d4 <_svfiprintf_r+0x9c>
 800972e:	9b03      	ldr	r3, [sp, #12]
 8009730:	1d19      	adds	r1, r3, #4
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	9103      	str	r1, [sp, #12]
 8009736:	2b00      	cmp	r3, #0
 8009738:	bfbb      	ittet	lt
 800973a:	425b      	neglt	r3, r3
 800973c:	f042 0202 	orrlt.w	r2, r2, #2
 8009740:	9307      	strge	r3, [sp, #28]
 8009742:	9307      	strlt	r3, [sp, #28]
 8009744:	bfb8      	it	lt
 8009746:	9204      	strlt	r2, [sp, #16]
 8009748:	7823      	ldrb	r3, [r4, #0]
 800974a:	2b2e      	cmp	r3, #46	; 0x2e
 800974c:	d10c      	bne.n	8009768 <_svfiprintf_r+0x130>
 800974e:	7863      	ldrb	r3, [r4, #1]
 8009750:	2b2a      	cmp	r3, #42	; 0x2a
 8009752:	d135      	bne.n	80097c0 <_svfiprintf_r+0x188>
 8009754:	9b03      	ldr	r3, [sp, #12]
 8009756:	1d1a      	adds	r2, r3, #4
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	9203      	str	r2, [sp, #12]
 800975c:	2b00      	cmp	r3, #0
 800975e:	bfb8      	it	lt
 8009760:	f04f 33ff 	movlt.w	r3, #4294967295
 8009764:	3402      	adds	r4, #2
 8009766:	9305      	str	r3, [sp, #20]
 8009768:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009834 <_svfiprintf_r+0x1fc>
 800976c:	7821      	ldrb	r1, [r4, #0]
 800976e:	2203      	movs	r2, #3
 8009770:	4650      	mov	r0, sl
 8009772:	f7f6 fd35 	bl	80001e0 <memchr>
 8009776:	b140      	cbz	r0, 800978a <_svfiprintf_r+0x152>
 8009778:	2340      	movs	r3, #64	; 0x40
 800977a:	eba0 000a 	sub.w	r0, r0, sl
 800977e:	fa03 f000 	lsl.w	r0, r3, r0
 8009782:	9b04      	ldr	r3, [sp, #16]
 8009784:	4303      	orrs	r3, r0
 8009786:	3401      	adds	r4, #1
 8009788:	9304      	str	r3, [sp, #16]
 800978a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800978e:	4826      	ldr	r0, [pc, #152]	; (8009828 <_svfiprintf_r+0x1f0>)
 8009790:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009794:	2206      	movs	r2, #6
 8009796:	f7f6 fd23 	bl	80001e0 <memchr>
 800979a:	2800      	cmp	r0, #0
 800979c:	d038      	beq.n	8009810 <_svfiprintf_r+0x1d8>
 800979e:	4b23      	ldr	r3, [pc, #140]	; (800982c <_svfiprintf_r+0x1f4>)
 80097a0:	bb1b      	cbnz	r3, 80097ea <_svfiprintf_r+0x1b2>
 80097a2:	9b03      	ldr	r3, [sp, #12]
 80097a4:	3307      	adds	r3, #7
 80097a6:	f023 0307 	bic.w	r3, r3, #7
 80097aa:	3308      	adds	r3, #8
 80097ac:	9303      	str	r3, [sp, #12]
 80097ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b0:	4433      	add	r3, r6
 80097b2:	9309      	str	r3, [sp, #36]	; 0x24
 80097b4:	e767      	b.n	8009686 <_svfiprintf_r+0x4e>
 80097b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80097ba:	460c      	mov	r4, r1
 80097bc:	2001      	movs	r0, #1
 80097be:	e7a5      	b.n	800970c <_svfiprintf_r+0xd4>
 80097c0:	2300      	movs	r3, #0
 80097c2:	3401      	adds	r4, #1
 80097c4:	9305      	str	r3, [sp, #20]
 80097c6:	4619      	mov	r1, r3
 80097c8:	f04f 0c0a 	mov.w	ip, #10
 80097cc:	4620      	mov	r0, r4
 80097ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097d2:	3a30      	subs	r2, #48	; 0x30
 80097d4:	2a09      	cmp	r2, #9
 80097d6:	d903      	bls.n	80097e0 <_svfiprintf_r+0x1a8>
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d0c5      	beq.n	8009768 <_svfiprintf_r+0x130>
 80097dc:	9105      	str	r1, [sp, #20]
 80097de:	e7c3      	b.n	8009768 <_svfiprintf_r+0x130>
 80097e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80097e4:	4604      	mov	r4, r0
 80097e6:	2301      	movs	r3, #1
 80097e8:	e7f0      	b.n	80097cc <_svfiprintf_r+0x194>
 80097ea:	ab03      	add	r3, sp, #12
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	462a      	mov	r2, r5
 80097f0:	4b0f      	ldr	r3, [pc, #60]	; (8009830 <_svfiprintf_r+0x1f8>)
 80097f2:	a904      	add	r1, sp, #16
 80097f4:	4638      	mov	r0, r7
 80097f6:	f3af 8000 	nop.w
 80097fa:	1c42      	adds	r2, r0, #1
 80097fc:	4606      	mov	r6, r0
 80097fe:	d1d6      	bne.n	80097ae <_svfiprintf_r+0x176>
 8009800:	89ab      	ldrh	r3, [r5, #12]
 8009802:	065b      	lsls	r3, r3, #25
 8009804:	f53f af2c 	bmi.w	8009660 <_svfiprintf_r+0x28>
 8009808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800980a:	b01d      	add	sp, #116	; 0x74
 800980c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009810:	ab03      	add	r3, sp, #12
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	462a      	mov	r2, r5
 8009816:	4b06      	ldr	r3, [pc, #24]	; (8009830 <_svfiprintf_r+0x1f8>)
 8009818:	a904      	add	r1, sp, #16
 800981a:	4638      	mov	r0, r7
 800981c:	f000 f9d4 	bl	8009bc8 <_printf_i>
 8009820:	e7eb      	b.n	80097fa <_svfiprintf_r+0x1c2>
 8009822:	bf00      	nop
 8009824:	080117ea 	.word	0x080117ea
 8009828:	080117f4 	.word	0x080117f4
 800982c:	00000000 	.word	0x00000000
 8009830:	08009581 	.word	0x08009581
 8009834:	080117f0 	.word	0x080117f0

08009838 <__sfputc_r>:
 8009838:	6893      	ldr	r3, [r2, #8]
 800983a:	3b01      	subs	r3, #1
 800983c:	2b00      	cmp	r3, #0
 800983e:	b410      	push	{r4}
 8009840:	6093      	str	r3, [r2, #8]
 8009842:	da08      	bge.n	8009856 <__sfputc_r+0x1e>
 8009844:	6994      	ldr	r4, [r2, #24]
 8009846:	42a3      	cmp	r3, r4
 8009848:	db01      	blt.n	800984e <__sfputc_r+0x16>
 800984a:	290a      	cmp	r1, #10
 800984c:	d103      	bne.n	8009856 <__sfputc_r+0x1e>
 800984e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009852:	f000 baef 	b.w	8009e34 <__swbuf_r>
 8009856:	6813      	ldr	r3, [r2, #0]
 8009858:	1c58      	adds	r0, r3, #1
 800985a:	6010      	str	r0, [r2, #0]
 800985c:	7019      	strb	r1, [r3, #0]
 800985e:	4608      	mov	r0, r1
 8009860:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009864:	4770      	bx	lr

08009866 <__sfputs_r>:
 8009866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009868:	4606      	mov	r6, r0
 800986a:	460f      	mov	r7, r1
 800986c:	4614      	mov	r4, r2
 800986e:	18d5      	adds	r5, r2, r3
 8009870:	42ac      	cmp	r4, r5
 8009872:	d101      	bne.n	8009878 <__sfputs_r+0x12>
 8009874:	2000      	movs	r0, #0
 8009876:	e007      	b.n	8009888 <__sfputs_r+0x22>
 8009878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800987c:	463a      	mov	r2, r7
 800987e:	4630      	mov	r0, r6
 8009880:	f7ff ffda 	bl	8009838 <__sfputc_r>
 8009884:	1c43      	adds	r3, r0, #1
 8009886:	d1f3      	bne.n	8009870 <__sfputs_r+0xa>
 8009888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800988c <_vfiprintf_r>:
 800988c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009890:	460d      	mov	r5, r1
 8009892:	b09d      	sub	sp, #116	; 0x74
 8009894:	4614      	mov	r4, r2
 8009896:	4698      	mov	r8, r3
 8009898:	4606      	mov	r6, r0
 800989a:	b118      	cbz	r0, 80098a4 <_vfiprintf_r+0x18>
 800989c:	6983      	ldr	r3, [r0, #24]
 800989e:	b90b      	cbnz	r3, 80098a4 <_vfiprintf_r+0x18>
 80098a0:	f000 fcaa 	bl	800a1f8 <__sinit>
 80098a4:	4b89      	ldr	r3, [pc, #548]	; (8009acc <_vfiprintf_r+0x240>)
 80098a6:	429d      	cmp	r5, r3
 80098a8:	d11b      	bne.n	80098e2 <_vfiprintf_r+0x56>
 80098aa:	6875      	ldr	r5, [r6, #4]
 80098ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098ae:	07d9      	lsls	r1, r3, #31
 80098b0:	d405      	bmi.n	80098be <_vfiprintf_r+0x32>
 80098b2:	89ab      	ldrh	r3, [r5, #12]
 80098b4:	059a      	lsls	r2, r3, #22
 80098b6:	d402      	bmi.n	80098be <_vfiprintf_r+0x32>
 80098b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ba:	f000 fd3b 	bl	800a334 <__retarget_lock_acquire_recursive>
 80098be:	89ab      	ldrh	r3, [r5, #12]
 80098c0:	071b      	lsls	r3, r3, #28
 80098c2:	d501      	bpl.n	80098c8 <_vfiprintf_r+0x3c>
 80098c4:	692b      	ldr	r3, [r5, #16]
 80098c6:	b9eb      	cbnz	r3, 8009904 <_vfiprintf_r+0x78>
 80098c8:	4629      	mov	r1, r5
 80098ca:	4630      	mov	r0, r6
 80098cc:	f000 fb04 	bl	8009ed8 <__swsetup_r>
 80098d0:	b1c0      	cbz	r0, 8009904 <_vfiprintf_r+0x78>
 80098d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098d4:	07dc      	lsls	r4, r3, #31
 80098d6:	d50e      	bpl.n	80098f6 <_vfiprintf_r+0x6a>
 80098d8:	f04f 30ff 	mov.w	r0, #4294967295
 80098dc:	b01d      	add	sp, #116	; 0x74
 80098de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e2:	4b7b      	ldr	r3, [pc, #492]	; (8009ad0 <_vfiprintf_r+0x244>)
 80098e4:	429d      	cmp	r5, r3
 80098e6:	d101      	bne.n	80098ec <_vfiprintf_r+0x60>
 80098e8:	68b5      	ldr	r5, [r6, #8]
 80098ea:	e7df      	b.n	80098ac <_vfiprintf_r+0x20>
 80098ec:	4b79      	ldr	r3, [pc, #484]	; (8009ad4 <_vfiprintf_r+0x248>)
 80098ee:	429d      	cmp	r5, r3
 80098f0:	bf08      	it	eq
 80098f2:	68f5      	ldreq	r5, [r6, #12]
 80098f4:	e7da      	b.n	80098ac <_vfiprintf_r+0x20>
 80098f6:	89ab      	ldrh	r3, [r5, #12]
 80098f8:	0598      	lsls	r0, r3, #22
 80098fa:	d4ed      	bmi.n	80098d8 <_vfiprintf_r+0x4c>
 80098fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098fe:	f000 fd1a 	bl	800a336 <__retarget_lock_release_recursive>
 8009902:	e7e9      	b.n	80098d8 <_vfiprintf_r+0x4c>
 8009904:	2300      	movs	r3, #0
 8009906:	9309      	str	r3, [sp, #36]	; 0x24
 8009908:	2320      	movs	r3, #32
 800990a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800990e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009912:	2330      	movs	r3, #48	; 0x30
 8009914:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ad8 <_vfiprintf_r+0x24c>
 8009918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800991c:	f04f 0901 	mov.w	r9, #1
 8009920:	4623      	mov	r3, r4
 8009922:	469a      	mov	sl, r3
 8009924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009928:	b10a      	cbz	r2, 800992e <_vfiprintf_r+0xa2>
 800992a:	2a25      	cmp	r2, #37	; 0x25
 800992c:	d1f9      	bne.n	8009922 <_vfiprintf_r+0x96>
 800992e:	ebba 0b04 	subs.w	fp, sl, r4
 8009932:	d00b      	beq.n	800994c <_vfiprintf_r+0xc0>
 8009934:	465b      	mov	r3, fp
 8009936:	4622      	mov	r2, r4
 8009938:	4629      	mov	r1, r5
 800993a:	4630      	mov	r0, r6
 800993c:	f7ff ff93 	bl	8009866 <__sfputs_r>
 8009940:	3001      	adds	r0, #1
 8009942:	f000 80aa 	beq.w	8009a9a <_vfiprintf_r+0x20e>
 8009946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009948:	445a      	add	r2, fp
 800994a:	9209      	str	r2, [sp, #36]	; 0x24
 800994c:	f89a 3000 	ldrb.w	r3, [sl]
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 80a2 	beq.w	8009a9a <_vfiprintf_r+0x20e>
 8009956:	2300      	movs	r3, #0
 8009958:	f04f 32ff 	mov.w	r2, #4294967295
 800995c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009960:	f10a 0a01 	add.w	sl, sl, #1
 8009964:	9304      	str	r3, [sp, #16]
 8009966:	9307      	str	r3, [sp, #28]
 8009968:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800996c:	931a      	str	r3, [sp, #104]	; 0x68
 800996e:	4654      	mov	r4, sl
 8009970:	2205      	movs	r2, #5
 8009972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009976:	4858      	ldr	r0, [pc, #352]	; (8009ad8 <_vfiprintf_r+0x24c>)
 8009978:	f7f6 fc32 	bl	80001e0 <memchr>
 800997c:	9a04      	ldr	r2, [sp, #16]
 800997e:	b9d8      	cbnz	r0, 80099b8 <_vfiprintf_r+0x12c>
 8009980:	06d1      	lsls	r1, r2, #27
 8009982:	bf44      	itt	mi
 8009984:	2320      	movmi	r3, #32
 8009986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800998a:	0713      	lsls	r3, r2, #28
 800998c:	bf44      	itt	mi
 800998e:	232b      	movmi	r3, #43	; 0x2b
 8009990:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009994:	f89a 3000 	ldrb.w	r3, [sl]
 8009998:	2b2a      	cmp	r3, #42	; 0x2a
 800999a:	d015      	beq.n	80099c8 <_vfiprintf_r+0x13c>
 800999c:	9a07      	ldr	r2, [sp, #28]
 800999e:	4654      	mov	r4, sl
 80099a0:	2000      	movs	r0, #0
 80099a2:	f04f 0c0a 	mov.w	ip, #10
 80099a6:	4621      	mov	r1, r4
 80099a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099ac:	3b30      	subs	r3, #48	; 0x30
 80099ae:	2b09      	cmp	r3, #9
 80099b0:	d94e      	bls.n	8009a50 <_vfiprintf_r+0x1c4>
 80099b2:	b1b0      	cbz	r0, 80099e2 <_vfiprintf_r+0x156>
 80099b4:	9207      	str	r2, [sp, #28]
 80099b6:	e014      	b.n	80099e2 <_vfiprintf_r+0x156>
 80099b8:	eba0 0308 	sub.w	r3, r0, r8
 80099bc:	fa09 f303 	lsl.w	r3, r9, r3
 80099c0:	4313      	orrs	r3, r2
 80099c2:	9304      	str	r3, [sp, #16]
 80099c4:	46a2      	mov	sl, r4
 80099c6:	e7d2      	b.n	800996e <_vfiprintf_r+0xe2>
 80099c8:	9b03      	ldr	r3, [sp, #12]
 80099ca:	1d19      	adds	r1, r3, #4
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	9103      	str	r1, [sp, #12]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	bfbb      	ittet	lt
 80099d4:	425b      	neglt	r3, r3
 80099d6:	f042 0202 	orrlt.w	r2, r2, #2
 80099da:	9307      	strge	r3, [sp, #28]
 80099dc:	9307      	strlt	r3, [sp, #28]
 80099de:	bfb8      	it	lt
 80099e0:	9204      	strlt	r2, [sp, #16]
 80099e2:	7823      	ldrb	r3, [r4, #0]
 80099e4:	2b2e      	cmp	r3, #46	; 0x2e
 80099e6:	d10c      	bne.n	8009a02 <_vfiprintf_r+0x176>
 80099e8:	7863      	ldrb	r3, [r4, #1]
 80099ea:	2b2a      	cmp	r3, #42	; 0x2a
 80099ec:	d135      	bne.n	8009a5a <_vfiprintf_r+0x1ce>
 80099ee:	9b03      	ldr	r3, [sp, #12]
 80099f0:	1d1a      	adds	r2, r3, #4
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	9203      	str	r2, [sp, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	bfb8      	it	lt
 80099fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80099fe:	3402      	adds	r4, #2
 8009a00:	9305      	str	r3, [sp, #20]
 8009a02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ae8 <_vfiprintf_r+0x25c>
 8009a06:	7821      	ldrb	r1, [r4, #0]
 8009a08:	2203      	movs	r2, #3
 8009a0a:	4650      	mov	r0, sl
 8009a0c:	f7f6 fbe8 	bl	80001e0 <memchr>
 8009a10:	b140      	cbz	r0, 8009a24 <_vfiprintf_r+0x198>
 8009a12:	2340      	movs	r3, #64	; 0x40
 8009a14:	eba0 000a 	sub.w	r0, r0, sl
 8009a18:	fa03 f000 	lsl.w	r0, r3, r0
 8009a1c:	9b04      	ldr	r3, [sp, #16]
 8009a1e:	4303      	orrs	r3, r0
 8009a20:	3401      	adds	r4, #1
 8009a22:	9304      	str	r3, [sp, #16]
 8009a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a28:	482c      	ldr	r0, [pc, #176]	; (8009adc <_vfiprintf_r+0x250>)
 8009a2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a2e:	2206      	movs	r2, #6
 8009a30:	f7f6 fbd6 	bl	80001e0 <memchr>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	d03f      	beq.n	8009ab8 <_vfiprintf_r+0x22c>
 8009a38:	4b29      	ldr	r3, [pc, #164]	; (8009ae0 <_vfiprintf_r+0x254>)
 8009a3a:	bb1b      	cbnz	r3, 8009a84 <_vfiprintf_r+0x1f8>
 8009a3c:	9b03      	ldr	r3, [sp, #12]
 8009a3e:	3307      	adds	r3, #7
 8009a40:	f023 0307 	bic.w	r3, r3, #7
 8009a44:	3308      	adds	r3, #8
 8009a46:	9303      	str	r3, [sp, #12]
 8009a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a4a:	443b      	add	r3, r7
 8009a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a4e:	e767      	b.n	8009920 <_vfiprintf_r+0x94>
 8009a50:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a54:	460c      	mov	r4, r1
 8009a56:	2001      	movs	r0, #1
 8009a58:	e7a5      	b.n	80099a6 <_vfiprintf_r+0x11a>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	3401      	adds	r4, #1
 8009a5e:	9305      	str	r3, [sp, #20]
 8009a60:	4619      	mov	r1, r3
 8009a62:	f04f 0c0a 	mov.w	ip, #10
 8009a66:	4620      	mov	r0, r4
 8009a68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a6c:	3a30      	subs	r2, #48	; 0x30
 8009a6e:	2a09      	cmp	r2, #9
 8009a70:	d903      	bls.n	8009a7a <_vfiprintf_r+0x1ee>
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d0c5      	beq.n	8009a02 <_vfiprintf_r+0x176>
 8009a76:	9105      	str	r1, [sp, #20]
 8009a78:	e7c3      	b.n	8009a02 <_vfiprintf_r+0x176>
 8009a7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a7e:	4604      	mov	r4, r0
 8009a80:	2301      	movs	r3, #1
 8009a82:	e7f0      	b.n	8009a66 <_vfiprintf_r+0x1da>
 8009a84:	ab03      	add	r3, sp, #12
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	462a      	mov	r2, r5
 8009a8a:	4b16      	ldr	r3, [pc, #88]	; (8009ae4 <_vfiprintf_r+0x258>)
 8009a8c:	a904      	add	r1, sp, #16
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f3af 8000 	nop.w
 8009a94:	4607      	mov	r7, r0
 8009a96:	1c78      	adds	r0, r7, #1
 8009a98:	d1d6      	bne.n	8009a48 <_vfiprintf_r+0x1bc>
 8009a9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a9c:	07d9      	lsls	r1, r3, #31
 8009a9e:	d405      	bmi.n	8009aac <_vfiprintf_r+0x220>
 8009aa0:	89ab      	ldrh	r3, [r5, #12]
 8009aa2:	059a      	lsls	r2, r3, #22
 8009aa4:	d402      	bmi.n	8009aac <_vfiprintf_r+0x220>
 8009aa6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aa8:	f000 fc45 	bl	800a336 <__retarget_lock_release_recursive>
 8009aac:	89ab      	ldrh	r3, [r5, #12]
 8009aae:	065b      	lsls	r3, r3, #25
 8009ab0:	f53f af12 	bmi.w	80098d8 <_vfiprintf_r+0x4c>
 8009ab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ab6:	e711      	b.n	80098dc <_vfiprintf_r+0x50>
 8009ab8:	ab03      	add	r3, sp, #12
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	462a      	mov	r2, r5
 8009abe:	4b09      	ldr	r3, [pc, #36]	; (8009ae4 <_vfiprintf_r+0x258>)
 8009ac0:	a904      	add	r1, sp, #16
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f000 f880 	bl	8009bc8 <_printf_i>
 8009ac8:	e7e4      	b.n	8009a94 <_vfiprintf_r+0x208>
 8009aca:	bf00      	nop
 8009acc:	08011840 	.word	0x08011840
 8009ad0:	08011860 	.word	0x08011860
 8009ad4:	08011820 	.word	0x08011820
 8009ad8:	080117ea 	.word	0x080117ea
 8009adc:	080117f4 	.word	0x080117f4
 8009ae0:	00000000 	.word	0x00000000
 8009ae4:	08009867 	.word	0x08009867
 8009ae8:	080117f0 	.word	0x080117f0

08009aec <_printf_common>:
 8009aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009af0:	4616      	mov	r6, r2
 8009af2:	4699      	mov	r9, r3
 8009af4:	688a      	ldr	r2, [r1, #8]
 8009af6:	690b      	ldr	r3, [r1, #16]
 8009af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009afc:	4293      	cmp	r3, r2
 8009afe:	bfb8      	it	lt
 8009b00:	4613      	movlt	r3, r2
 8009b02:	6033      	str	r3, [r6, #0]
 8009b04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b08:	4607      	mov	r7, r0
 8009b0a:	460c      	mov	r4, r1
 8009b0c:	b10a      	cbz	r2, 8009b12 <_printf_common+0x26>
 8009b0e:	3301      	adds	r3, #1
 8009b10:	6033      	str	r3, [r6, #0]
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	0699      	lsls	r1, r3, #26
 8009b16:	bf42      	ittt	mi
 8009b18:	6833      	ldrmi	r3, [r6, #0]
 8009b1a:	3302      	addmi	r3, #2
 8009b1c:	6033      	strmi	r3, [r6, #0]
 8009b1e:	6825      	ldr	r5, [r4, #0]
 8009b20:	f015 0506 	ands.w	r5, r5, #6
 8009b24:	d106      	bne.n	8009b34 <_printf_common+0x48>
 8009b26:	f104 0a19 	add.w	sl, r4, #25
 8009b2a:	68e3      	ldr	r3, [r4, #12]
 8009b2c:	6832      	ldr	r2, [r6, #0]
 8009b2e:	1a9b      	subs	r3, r3, r2
 8009b30:	42ab      	cmp	r3, r5
 8009b32:	dc26      	bgt.n	8009b82 <_printf_common+0x96>
 8009b34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b38:	1e13      	subs	r3, r2, #0
 8009b3a:	6822      	ldr	r2, [r4, #0]
 8009b3c:	bf18      	it	ne
 8009b3e:	2301      	movne	r3, #1
 8009b40:	0692      	lsls	r2, r2, #26
 8009b42:	d42b      	bmi.n	8009b9c <_printf_common+0xb0>
 8009b44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b48:	4649      	mov	r1, r9
 8009b4a:	4638      	mov	r0, r7
 8009b4c:	47c0      	blx	r8
 8009b4e:	3001      	adds	r0, #1
 8009b50:	d01e      	beq.n	8009b90 <_printf_common+0xa4>
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	68e5      	ldr	r5, [r4, #12]
 8009b56:	6832      	ldr	r2, [r6, #0]
 8009b58:	f003 0306 	and.w	r3, r3, #6
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	bf08      	it	eq
 8009b60:	1aad      	subeq	r5, r5, r2
 8009b62:	68a3      	ldr	r3, [r4, #8]
 8009b64:	6922      	ldr	r2, [r4, #16]
 8009b66:	bf0c      	ite	eq
 8009b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b6c:	2500      	movne	r5, #0
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	bfc4      	itt	gt
 8009b72:	1a9b      	subgt	r3, r3, r2
 8009b74:	18ed      	addgt	r5, r5, r3
 8009b76:	2600      	movs	r6, #0
 8009b78:	341a      	adds	r4, #26
 8009b7a:	42b5      	cmp	r5, r6
 8009b7c:	d11a      	bne.n	8009bb4 <_printf_common+0xc8>
 8009b7e:	2000      	movs	r0, #0
 8009b80:	e008      	b.n	8009b94 <_printf_common+0xa8>
 8009b82:	2301      	movs	r3, #1
 8009b84:	4652      	mov	r2, sl
 8009b86:	4649      	mov	r1, r9
 8009b88:	4638      	mov	r0, r7
 8009b8a:	47c0      	blx	r8
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d103      	bne.n	8009b98 <_printf_common+0xac>
 8009b90:	f04f 30ff 	mov.w	r0, #4294967295
 8009b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b98:	3501      	adds	r5, #1
 8009b9a:	e7c6      	b.n	8009b2a <_printf_common+0x3e>
 8009b9c:	18e1      	adds	r1, r4, r3
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	2030      	movs	r0, #48	; 0x30
 8009ba2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ba6:	4422      	add	r2, r4
 8009ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bb0:	3302      	adds	r3, #2
 8009bb2:	e7c7      	b.n	8009b44 <_printf_common+0x58>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	4622      	mov	r2, r4
 8009bb8:	4649      	mov	r1, r9
 8009bba:	4638      	mov	r0, r7
 8009bbc:	47c0      	blx	r8
 8009bbe:	3001      	adds	r0, #1
 8009bc0:	d0e6      	beq.n	8009b90 <_printf_common+0xa4>
 8009bc2:	3601      	adds	r6, #1
 8009bc4:	e7d9      	b.n	8009b7a <_printf_common+0x8e>
	...

08009bc8 <_printf_i>:
 8009bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bcc:	460c      	mov	r4, r1
 8009bce:	4691      	mov	r9, r2
 8009bd0:	7e27      	ldrb	r7, [r4, #24]
 8009bd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009bd4:	2f78      	cmp	r7, #120	; 0x78
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	469a      	mov	sl, r3
 8009bda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bde:	d807      	bhi.n	8009bf0 <_printf_i+0x28>
 8009be0:	2f62      	cmp	r7, #98	; 0x62
 8009be2:	d80a      	bhi.n	8009bfa <_printf_i+0x32>
 8009be4:	2f00      	cmp	r7, #0
 8009be6:	f000 80d8 	beq.w	8009d9a <_printf_i+0x1d2>
 8009bea:	2f58      	cmp	r7, #88	; 0x58
 8009bec:	f000 80a3 	beq.w	8009d36 <_printf_i+0x16e>
 8009bf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009bf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bf8:	e03a      	b.n	8009c70 <_printf_i+0xa8>
 8009bfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bfe:	2b15      	cmp	r3, #21
 8009c00:	d8f6      	bhi.n	8009bf0 <_printf_i+0x28>
 8009c02:	a001      	add	r0, pc, #4	; (adr r0, 8009c08 <_printf_i+0x40>)
 8009c04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009c08:	08009c61 	.word	0x08009c61
 8009c0c:	08009c75 	.word	0x08009c75
 8009c10:	08009bf1 	.word	0x08009bf1
 8009c14:	08009bf1 	.word	0x08009bf1
 8009c18:	08009bf1 	.word	0x08009bf1
 8009c1c:	08009bf1 	.word	0x08009bf1
 8009c20:	08009c75 	.word	0x08009c75
 8009c24:	08009bf1 	.word	0x08009bf1
 8009c28:	08009bf1 	.word	0x08009bf1
 8009c2c:	08009bf1 	.word	0x08009bf1
 8009c30:	08009bf1 	.word	0x08009bf1
 8009c34:	08009d81 	.word	0x08009d81
 8009c38:	08009ca5 	.word	0x08009ca5
 8009c3c:	08009d63 	.word	0x08009d63
 8009c40:	08009bf1 	.word	0x08009bf1
 8009c44:	08009bf1 	.word	0x08009bf1
 8009c48:	08009da3 	.word	0x08009da3
 8009c4c:	08009bf1 	.word	0x08009bf1
 8009c50:	08009ca5 	.word	0x08009ca5
 8009c54:	08009bf1 	.word	0x08009bf1
 8009c58:	08009bf1 	.word	0x08009bf1
 8009c5c:	08009d6b 	.word	0x08009d6b
 8009c60:	680b      	ldr	r3, [r1, #0]
 8009c62:	1d1a      	adds	r2, r3, #4
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	600a      	str	r2, [r1, #0]
 8009c68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c70:	2301      	movs	r3, #1
 8009c72:	e0a3      	b.n	8009dbc <_printf_i+0x1f4>
 8009c74:	6825      	ldr	r5, [r4, #0]
 8009c76:	6808      	ldr	r0, [r1, #0]
 8009c78:	062e      	lsls	r6, r5, #24
 8009c7a:	f100 0304 	add.w	r3, r0, #4
 8009c7e:	d50a      	bpl.n	8009c96 <_printf_i+0xce>
 8009c80:	6805      	ldr	r5, [r0, #0]
 8009c82:	600b      	str	r3, [r1, #0]
 8009c84:	2d00      	cmp	r5, #0
 8009c86:	da03      	bge.n	8009c90 <_printf_i+0xc8>
 8009c88:	232d      	movs	r3, #45	; 0x2d
 8009c8a:	426d      	negs	r5, r5
 8009c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c90:	485e      	ldr	r0, [pc, #376]	; (8009e0c <_printf_i+0x244>)
 8009c92:	230a      	movs	r3, #10
 8009c94:	e019      	b.n	8009cca <_printf_i+0x102>
 8009c96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c9a:	6805      	ldr	r5, [r0, #0]
 8009c9c:	600b      	str	r3, [r1, #0]
 8009c9e:	bf18      	it	ne
 8009ca0:	b22d      	sxthne	r5, r5
 8009ca2:	e7ef      	b.n	8009c84 <_printf_i+0xbc>
 8009ca4:	680b      	ldr	r3, [r1, #0]
 8009ca6:	6825      	ldr	r5, [r4, #0]
 8009ca8:	1d18      	adds	r0, r3, #4
 8009caa:	6008      	str	r0, [r1, #0]
 8009cac:	0628      	lsls	r0, r5, #24
 8009cae:	d501      	bpl.n	8009cb4 <_printf_i+0xec>
 8009cb0:	681d      	ldr	r5, [r3, #0]
 8009cb2:	e002      	b.n	8009cba <_printf_i+0xf2>
 8009cb4:	0669      	lsls	r1, r5, #25
 8009cb6:	d5fb      	bpl.n	8009cb0 <_printf_i+0xe8>
 8009cb8:	881d      	ldrh	r5, [r3, #0]
 8009cba:	4854      	ldr	r0, [pc, #336]	; (8009e0c <_printf_i+0x244>)
 8009cbc:	2f6f      	cmp	r7, #111	; 0x6f
 8009cbe:	bf0c      	ite	eq
 8009cc0:	2308      	moveq	r3, #8
 8009cc2:	230a      	movne	r3, #10
 8009cc4:	2100      	movs	r1, #0
 8009cc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cca:	6866      	ldr	r6, [r4, #4]
 8009ccc:	60a6      	str	r6, [r4, #8]
 8009cce:	2e00      	cmp	r6, #0
 8009cd0:	bfa2      	ittt	ge
 8009cd2:	6821      	ldrge	r1, [r4, #0]
 8009cd4:	f021 0104 	bicge.w	r1, r1, #4
 8009cd8:	6021      	strge	r1, [r4, #0]
 8009cda:	b90d      	cbnz	r5, 8009ce0 <_printf_i+0x118>
 8009cdc:	2e00      	cmp	r6, #0
 8009cde:	d04d      	beq.n	8009d7c <_printf_i+0x1b4>
 8009ce0:	4616      	mov	r6, r2
 8009ce2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ce6:	fb03 5711 	mls	r7, r3, r1, r5
 8009cea:	5dc7      	ldrb	r7, [r0, r7]
 8009cec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cf0:	462f      	mov	r7, r5
 8009cf2:	42bb      	cmp	r3, r7
 8009cf4:	460d      	mov	r5, r1
 8009cf6:	d9f4      	bls.n	8009ce2 <_printf_i+0x11a>
 8009cf8:	2b08      	cmp	r3, #8
 8009cfa:	d10b      	bne.n	8009d14 <_printf_i+0x14c>
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	07df      	lsls	r7, r3, #31
 8009d00:	d508      	bpl.n	8009d14 <_printf_i+0x14c>
 8009d02:	6923      	ldr	r3, [r4, #16]
 8009d04:	6861      	ldr	r1, [r4, #4]
 8009d06:	4299      	cmp	r1, r3
 8009d08:	bfde      	ittt	le
 8009d0a:	2330      	movle	r3, #48	; 0x30
 8009d0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d14:	1b92      	subs	r2, r2, r6
 8009d16:	6122      	str	r2, [r4, #16]
 8009d18:	f8cd a000 	str.w	sl, [sp]
 8009d1c:	464b      	mov	r3, r9
 8009d1e:	aa03      	add	r2, sp, #12
 8009d20:	4621      	mov	r1, r4
 8009d22:	4640      	mov	r0, r8
 8009d24:	f7ff fee2 	bl	8009aec <_printf_common>
 8009d28:	3001      	adds	r0, #1
 8009d2a:	d14c      	bne.n	8009dc6 <_printf_i+0x1fe>
 8009d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d30:	b004      	add	sp, #16
 8009d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d36:	4835      	ldr	r0, [pc, #212]	; (8009e0c <_printf_i+0x244>)
 8009d38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	680e      	ldr	r6, [r1, #0]
 8009d40:	061f      	lsls	r7, r3, #24
 8009d42:	f856 5b04 	ldr.w	r5, [r6], #4
 8009d46:	600e      	str	r6, [r1, #0]
 8009d48:	d514      	bpl.n	8009d74 <_printf_i+0x1ac>
 8009d4a:	07d9      	lsls	r1, r3, #31
 8009d4c:	bf44      	itt	mi
 8009d4e:	f043 0320 	orrmi.w	r3, r3, #32
 8009d52:	6023      	strmi	r3, [r4, #0]
 8009d54:	b91d      	cbnz	r5, 8009d5e <_printf_i+0x196>
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	f023 0320 	bic.w	r3, r3, #32
 8009d5c:	6023      	str	r3, [r4, #0]
 8009d5e:	2310      	movs	r3, #16
 8009d60:	e7b0      	b.n	8009cc4 <_printf_i+0xfc>
 8009d62:	6823      	ldr	r3, [r4, #0]
 8009d64:	f043 0320 	orr.w	r3, r3, #32
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	2378      	movs	r3, #120	; 0x78
 8009d6c:	4828      	ldr	r0, [pc, #160]	; (8009e10 <_printf_i+0x248>)
 8009d6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d72:	e7e3      	b.n	8009d3c <_printf_i+0x174>
 8009d74:	065e      	lsls	r6, r3, #25
 8009d76:	bf48      	it	mi
 8009d78:	b2ad      	uxthmi	r5, r5
 8009d7a:	e7e6      	b.n	8009d4a <_printf_i+0x182>
 8009d7c:	4616      	mov	r6, r2
 8009d7e:	e7bb      	b.n	8009cf8 <_printf_i+0x130>
 8009d80:	680b      	ldr	r3, [r1, #0]
 8009d82:	6826      	ldr	r6, [r4, #0]
 8009d84:	6960      	ldr	r0, [r4, #20]
 8009d86:	1d1d      	adds	r5, r3, #4
 8009d88:	600d      	str	r5, [r1, #0]
 8009d8a:	0635      	lsls	r5, r6, #24
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	d501      	bpl.n	8009d94 <_printf_i+0x1cc>
 8009d90:	6018      	str	r0, [r3, #0]
 8009d92:	e002      	b.n	8009d9a <_printf_i+0x1d2>
 8009d94:	0671      	lsls	r1, r6, #25
 8009d96:	d5fb      	bpl.n	8009d90 <_printf_i+0x1c8>
 8009d98:	8018      	strh	r0, [r3, #0]
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	6123      	str	r3, [r4, #16]
 8009d9e:	4616      	mov	r6, r2
 8009da0:	e7ba      	b.n	8009d18 <_printf_i+0x150>
 8009da2:	680b      	ldr	r3, [r1, #0]
 8009da4:	1d1a      	adds	r2, r3, #4
 8009da6:	600a      	str	r2, [r1, #0]
 8009da8:	681e      	ldr	r6, [r3, #0]
 8009daa:	6862      	ldr	r2, [r4, #4]
 8009dac:	2100      	movs	r1, #0
 8009dae:	4630      	mov	r0, r6
 8009db0:	f7f6 fa16 	bl	80001e0 <memchr>
 8009db4:	b108      	cbz	r0, 8009dba <_printf_i+0x1f2>
 8009db6:	1b80      	subs	r0, r0, r6
 8009db8:	6060      	str	r0, [r4, #4]
 8009dba:	6863      	ldr	r3, [r4, #4]
 8009dbc:	6123      	str	r3, [r4, #16]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dc4:	e7a8      	b.n	8009d18 <_printf_i+0x150>
 8009dc6:	6923      	ldr	r3, [r4, #16]
 8009dc8:	4632      	mov	r2, r6
 8009dca:	4649      	mov	r1, r9
 8009dcc:	4640      	mov	r0, r8
 8009dce:	47d0      	blx	sl
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	d0ab      	beq.n	8009d2c <_printf_i+0x164>
 8009dd4:	6823      	ldr	r3, [r4, #0]
 8009dd6:	079b      	lsls	r3, r3, #30
 8009dd8:	d413      	bmi.n	8009e02 <_printf_i+0x23a>
 8009dda:	68e0      	ldr	r0, [r4, #12]
 8009ddc:	9b03      	ldr	r3, [sp, #12]
 8009dde:	4298      	cmp	r0, r3
 8009de0:	bfb8      	it	lt
 8009de2:	4618      	movlt	r0, r3
 8009de4:	e7a4      	b.n	8009d30 <_printf_i+0x168>
 8009de6:	2301      	movs	r3, #1
 8009de8:	4632      	mov	r2, r6
 8009dea:	4649      	mov	r1, r9
 8009dec:	4640      	mov	r0, r8
 8009dee:	47d0      	blx	sl
 8009df0:	3001      	adds	r0, #1
 8009df2:	d09b      	beq.n	8009d2c <_printf_i+0x164>
 8009df4:	3501      	adds	r5, #1
 8009df6:	68e3      	ldr	r3, [r4, #12]
 8009df8:	9903      	ldr	r1, [sp, #12]
 8009dfa:	1a5b      	subs	r3, r3, r1
 8009dfc:	42ab      	cmp	r3, r5
 8009dfe:	dcf2      	bgt.n	8009de6 <_printf_i+0x21e>
 8009e00:	e7eb      	b.n	8009dda <_printf_i+0x212>
 8009e02:	2500      	movs	r5, #0
 8009e04:	f104 0619 	add.w	r6, r4, #25
 8009e08:	e7f5      	b.n	8009df6 <_printf_i+0x22e>
 8009e0a:	bf00      	nop
 8009e0c:	080117fb 	.word	0x080117fb
 8009e10:	0801180c 	.word	0x0801180c

08009e14 <_sbrk_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4d06      	ldr	r5, [pc, #24]	; (8009e30 <_sbrk_r+0x1c>)
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	602b      	str	r3, [r5, #0]
 8009e20:	f7f9 fefe 	bl	8003c20 <_sbrk>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_sbrk_r+0x1a>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_sbrk_r+0x1a>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	200007d0 	.word	0x200007d0

08009e34 <__swbuf_r>:
 8009e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e36:	460e      	mov	r6, r1
 8009e38:	4614      	mov	r4, r2
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	b118      	cbz	r0, 8009e46 <__swbuf_r+0x12>
 8009e3e:	6983      	ldr	r3, [r0, #24]
 8009e40:	b90b      	cbnz	r3, 8009e46 <__swbuf_r+0x12>
 8009e42:	f000 f9d9 	bl	800a1f8 <__sinit>
 8009e46:	4b21      	ldr	r3, [pc, #132]	; (8009ecc <__swbuf_r+0x98>)
 8009e48:	429c      	cmp	r4, r3
 8009e4a:	d12b      	bne.n	8009ea4 <__swbuf_r+0x70>
 8009e4c:	686c      	ldr	r4, [r5, #4]
 8009e4e:	69a3      	ldr	r3, [r4, #24]
 8009e50:	60a3      	str	r3, [r4, #8]
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	071a      	lsls	r2, r3, #28
 8009e56:	d52f      	bpl.n	8009eb8 <__swbuf_r+0x84>
 8009e58:	6923      	ldr	r3, [r4, #16]
 8009e5a:	b36b      	cbz	r3, 8009eb8 <__swbuf_r+0x84>
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	6820      	ldr	r0, [r4, #0]
 8009e60:	1ac0      	subs	r0, r0, r3
 8009e62:	6963      	ldr	r3, [r4, #20]
 8009e64:	b2f6      	uxtb	r6, r6
 8009e66:	4283      	cmp	r3, r0
 8009e68:	4637      	mov	r7, r6
 8009e6a:	dc04      	bgt.n	8009e76 <__swbuf_r+0x42>
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f000 f92e 	bl	800a0d0 <_fflush_r>
 8009e74:	bb30      	cbnz	r0, 8009ec4 <__swbuf_r+0x90>
 8009e76:	68a3      	ldr	r3, [r4, #8]
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	60a3      	str	r3, [r4, #8]
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	1c5a      	adds	r2, r3, #1
 8009e80:	6022      	str	r2, [r4, #0]
 8009e82:	701e      	strb	r6, [r3, #0]
 8009e84:	6963      	ldr	r3, [r4, #20]
 8009e86:	3001      	adds	r0, #1
 8009e88:	4283      	cmp	r3, r0
 8009e8a:	d004      	beq.n	8009e96 <__swbuf_r+0x62>
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	07db      	lsls	r3, r3, #31
 8009e90:	d506      	bpl.n	8009ea0 <__swbuf_r+0x6c>
 8009e92:	2e0a      	cmp	r6, #10
 8009e94:	d104      	bne.n	8009ea0 <__swbuf_r+0x6c>
 8009e96:	4621      	mov	r1, r4
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f000 f919 	bl	800a0d0 <_fflush_r>
 8009e9e:	b988      	cbnz	r0, 8009ec4 <__swbuf_r+0x90>
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea4:	4b0a      	ldr	r3, [pc, #40]	; (8009ed0 <__swbuf_r+0x9c>)
 8009ea6:	429c      	cmp	r4, r3
 8009ea8:	d101      	bne.n	8009eae <__swbuf_r+0x7a>
 8009eaa:	68ac      	ldr	r4, [r5, #8]
 8009eac:	e7cf      	b.n	8009e4e <__swbuf_r+0x1a>
 8009eae:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <__swbuf_r+0xa0>)
 8009eb0:	429c      	cmp	r4, r3
 8009eb2:	bf08      	it	eq
 8009eb4:	68ec      	ldreq	r4, [r5, #12]
 8009eb6:	e7ca      	b.n	8009e4e <__swbuf_r+0x1a>
 8009eb8:	4621      	mov	r1, r4
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f000 f80c 	bl	8009ed8 <__swsetup_r>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d0cb      	beq.n	8009e5c <__swbuf_r+0x28>
 8009ec4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ec8:	e7ea      	b.n	8009ea0 <__swbuf_r+0x6c>
 8009eca:	bf00      	nop
 8009ecc:	08011840 	.word	0x08011840
 8009ed0:	08011860 	.word	0x08011860
 8009ed4:	08011820 	.word	0x08011820

08009ed8 <__swsetup_r>:
 8009ed8:	4b32      	ldr	r3, [pc, #200]	; (8009fa4 <__swsetup_r+0xcc>)
 8009eda:	b570      	push	{r4, r5, r6, lr}
 8009edc:	681d      	ldr	r5, [r3, #0]
 8009ede:	4606      	mov	r6, r0
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	b125      	cbz	r5, 8009eee <__swsetup_r+0x16>
 8009ee4:	69ab      	ldr	r3, [r5, #24]
 8009ee6:	b913      	cbnz	r3, 8009eee <__swsetup_r+0x16>
 8009ee8:	4628      	mov	r0, r5
 8009eea:	f000 f985 	bl	800a1f8 <__sinit>
 8009eee:	4b2e      	ldr	r3, [pc, #184]	; (8009fa8 <__swsetup_r+0xd0>)
 8009ef0:	429c      	cmp	r4, r3
 8009ef2:	d10f      	bne.n	8009f14 <__swsetup_r+0x3c>
 8009ef4:	686c      	ldr	r4, [r5, #4]
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009efc:	0719      	lsls	r1, r3, #28
 8009efe:	d42c      	bmi.n	8009f5a <__swsetup_r+0x82>
 8009f00:	06dd      	lsls	r5, r3, #27
 8009f02:	d411      	bmi.n	8009f28 <__swsetup_r+0x50>
 8009f04:	2309      	movs	r3, #9
 8009f06:	6033      	str	r3, [r6, #0]
 8009f08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f0c:	81a3      	strh	r3, [r4, #12]
 8009f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f12:	e03e      	b.n	8009f92 <__swsetup_r+0xba>
 8009f14:	4b25      	ldr	r3, [pc, #148]	; (8009fac <__swsetup_r+0xd4>)
 8009f16:	429c      	cmp	r4, r3
 8009f18:	d101      	bne.n	8009f1e <__swsetup_r+0x46>
 8009f1a:	68ac      	ldr	r4, [r5, #8]
 8009f1c:	e7eb      	b.n	8009ef6 <__swsetup_r+0x1e>
 8009f1e:	4b24      	ldr	r3, [pc, #144]	; (8009fb0 <__swsetup_r+0xd8>)
 8009f20:	429c      	cmp	r4, r3
 8009f22:	bf08      	it	eq
 8009f24:	68ec      	ldreq	r4, [r5, #12]
 8009f26:	e7e6      	b.n	8009ef6 <__swsetup_r+0x1e>
 8009f28:	0758      	lsls	r0, r3, #29
 8009f2a:	d512      	bpl.n	8009f52 <__swsetup_r+0x7a>
 8009f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f2e:	b141      	cbz	r1, 8009f42 <__swsetup_r+0x6a>
 8009f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f34:	4299      	cmp	r1, r3
 8009f36:	d002      	beq.n	8009f3e <__swsetup_r+0x66>
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f7ff fa77 	bl	800942c <_free_r>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	6363      	str	r3, [r4, #52]	; 0x34
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f48:	81a3      	strh	r3, [r4, #12]
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	6063      	str	r3, [r4, #4]
 8009f4e:	6923      	ldr	r3, [r4, #16]
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f043 0308 	orr.w	r3, r3, #8
 8009f58:	81a3      	strh	r3, [r4, #12]
 8009f5a:	6923      	ldr	r3, [r4, #16]
 8009f5c:	b94b      	cbnz	r3, 8009f72 <__swsetup_r+0x9a>
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f68:	d003      	beq.n	8009f72 <__swsetup_r+0x9a>
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	f000 fa07 	bl	800a380 <__smakebuf_r>
 8009f72:	89a0      	ldrh	r0, [r4, #12]
 8009f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f78:	f010 0301 	ands.w	r3, r0, #1
 8009f7c:	d00a      	beq.n	8009f94 <__swsetup_r+0xbc>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60a3      	str	r3, [r4, #8]
 8009f82:	6963      	ldr	r3, [r4, #20]
 8009f84:	425b      	negs	r3, r3
 8009f86:	61a3      	str	r3, [r4, #24]
 8009f88:	6923      	ldr	r3, [r4, #16]
 8009f8a:	b943      	cbnz	r3, 8009f9e <__swsetup_r+0xc6>
 8009f8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f90:	d1ba      	bne.n	8009f08 <__swsetup_r+0x30>
 8009f92:	bd70      	pop	{r4, r5, r6, pc}
 8009f94:	0781      	lsls	r1, r0, #30
 8009f96:	bf58      	it	pl
 8009f98:	6963      	ldrpl	r3, [r4, #20]
 8009f9a:	60a3      	str	r3, [r4, #8]
 8009f9c:	e7f4      	b.n	8009f88 <__swsetup_r+0xb0>
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	e7f7      	b.n	8009f92 <__swsetup_r+0xba>
 8009fa2:	bf00      	nop
 8009fa4:	200000c8 	.word	0x200000c8
 8009fa8:	08011840 	.word	0x08011840
 8009fac:	08011860 	.word	0x08011860
 8009fb0:	08011820 	.word	0x08011820

08009fb4 <abort>:
 8009fb4:	b508      	push	{r3, lr}
 8009fb6:	2006      	movs	r0, #6
 8009fb8:	f000 faa4 	bl	800a504 <raise>
 8009fbc:	2001      	movs	r0, #1
 8009fbe:	f7f9 fdb7 	bl	8003b30 <_exit>
	...

08009fc4 <__sflush_r>:
 8009fc4:	898a      	ldrh	r2, [r1, #12]
 8009fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fca:	4605      	mov	r5, r0
 8009fcc:	0710      	lsls	r0, r2, #28
 8009fce:	460c      	mov	r4, r1
 8009fd0:	d458      	bmi.n	800a084 <__sflush_r+0xc0>
 8009fd2:	684b      	ldr	r3, [r1, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	dc05      	bgt.n	8009fe4 <__sflush_r+0x20>
 8009fd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	dc02      	bgt.n	8009fe4 <__sflush_r+0x20>
 8009fde:	2000      	movs	r0, #0
 8009fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fe6:	2e00      	cmp	r6, #0
 8009fe8:	d0f9      	beq.n	8009fde <__sflush_r+0x1a>
 8009fea:	2300      	movs	r3, #0
 8009fec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ff0:	682f      	ldr	r7, [r5, #0]
 8009ff2:	602b      	str	r3, [r5, #0]
 8009ff4:	d032      	beq.n	800a05c <__sflush_r+0x98>
 8009ff6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ff8:	89a3      	ldrh	r3, [r4, #12]
 8009ffa:	075a      	lsls	r2, r3, #29
 8009ffc:	d505      	bpl.n	800a00a <__sflush_r+0x46>
 8009ffe:	6863      	ldr	r3, [r4, #4]
 800a000:	1ac0      	subs	r0, r0, r3
 800a002:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a004:	b10b      	cbz	r3, 800a00a <__sflush_r+0x46>
 800a006:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a008:	1ac0      	subs	r0, r0, r3
 800a00a:	2300      	movs	r3, #0
 800a00c:	4602      	mov	r2, r0
 800a00e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a010:	6a21      	ldr	r1, [r4, #32]
 800a012:	4628      	mov	r0, r5
 800a014:	47b0      	blx	r6
 800a016:	1c43      	adds	r3, r0, #1
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	d106      	bne.n	800a02a <__sflush_r+0x66>
 800a01c:	6829      	ldr	r1, [r5, #0]
 800a01e:	291d      	cmp	r1, #29
 800a020:	d82c      	bhi.n	800a07c <__sflush_r+0xb8>
 800a022:	4a2a      	ldr	r2, [pc, #168]	; (800a0cc <__sflush_r+0x108>)
 800a024:	40ca      	lsrs	r2, r1
 800a026:	07d6      	lsls	r6, r2, #31
 800a028:	d528      	bpl.n	800a07c <__sflush_r+0xb8>
 800a02a:	2200      	movs	r2, #0
 800a02c:	6062      	str	r2, [r4, #4]
 800a02e:	04d9      	lsls	r1, r3, #19
 800a030:	6922      	ldr	r2, [r4, #16]
 800a032:	6022      	str	r2, [r4, #0]
 800a034:	d504      	bpl.n	800a040 <__sflush_r+0x7c>
 800a036:	1c42      	adds	r2, r0, #1
 800a038:	d101      	bne.n	800a03e <__sflush_r+0x7a>
 800a03a:	682b      	ldr	r3, [r5, #0]
 800a03c:	b903      	cbnz	r3, 800a040 <__sflush_r+0x7c>
 800a03e:	6560      	str	r0, [r4, #84]	; 0x54
 800a040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a042:	602f      	str	r7, [r5, #0]
 800a044:	2900      	cmp	r1, #0
 800a046:	d0ca      	beq.n	8009fde <__sflush_r+0x1a>
 800a048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a04c:	4299      	cmp	r1, r3
 800a04e:	d002      	beq.n	800a056 <__sflush_r+0x92>
 800a050:	4628      	mov	r0, r5
 800a052:	f7ff f9eb 	bl	800942c <_free_r>
 800a056:	2000      	movs	r0, #0
 800a058:	6360      	str	r0, [r4, #52]	; 0x34
 800a05a:	e7c1      	b.n	8009fe0 <__sflush_r+0x1c>
 800a05c:	6a21      	ldr	r1, [r4, #32]
 800a05e:	2301      	movs	r3, #1
 800a060:	4628      	mov	r0, r5
 800a062:	47b0      	blx	r6
 800a064:	1c41      	adds	r1, r0, #1
 800a066:	d1c7      	bne.n	8009ff8 <__sflush_r+0x34>
 800a068:	682b      	ldr	r3, [r5, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d0c4      	beq.n	8009ff8 <__sflush_r+0x34>
 800a06e:	2b1d      	cmp	r3, #29
 800a070:	d001      	beq.n	800a076 <__sflush_r+0xb2>
 800a072:	2b16      	cmp	r3, #22
 800a074:	d101      	bne.n	800a07a <__sflush_r+0xb6>
 800a076:	602f      	str	r7, [r5, #0]
 800a078:	e7b1      	b.n	8009fde <__sflush_r+0x1a>
 800a07a:	89a3      	ldrh	r3, [r4, #12]
 800a07c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a080:	81a3      	strh	r3, [r4, #12]
 800a082:	e7ad      	b.n	8009fe0 <__sflush_r+0x1c>
 800a084:	690f      	ldr	r7, [r1, #16]
 800a086:	2f00      	cmp	r7, #0
 800a088:	d0a9      	beq.n	8009fde <__sflush_r+0x1a>
 800a08a:	0793      	lsls	r3, r2, #30
 800a08c:	680e      	ldr	r6, [r1, #0]
 800a08e:	bf08      	it	eq
 800a090:	694b      	ldreq	r3, [r1, #20]
 800a092:	600f      	str	r7, [r1, #0]
 800a094:	bf18      	it	ne
 800a096:	2300      	movne	r3, #0
 800a098:	eba6 0807 	sub.w	r8, r6, r7
 800a09c:	608b      	str	r3, [r1, #8]
 800a09e:	f1b8 0f00 	cmp.w	r8, #0
 800a0a2:	dd9c      	ble.n	8009fde <__sflush_r+0x1a>
 800a0a4:	6a21      	ldr	r1, [r4, #32]
 800a0a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0a8:	4643      	mov	r3, r8
 800a0aa:	463a      	mov	r2, r7
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	47b0      	blx	r6
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	dc06      	bgt.n	800a0c2 <__sflush_r+0xfe>
 800a0b4:	89a3      	ldrh	r3, [r4, #12]
 800a0b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c0:	e78e      	b.n	8009fe0 <__sflush_r+0x1c>
 800a0c2:	4407      	add	r7, r0
 800a0c4:	eba8 0800 	sub.w	r8, r8, r0
 800a0c8:	e7e9      	b.n	800a09e <__sflush_r+0xda>
 800a0ca:	bf00      	nop
 800a0cc:	20400001 	.word	0x20400001

0800a0d0 <_fflush_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	690b      	ldr	r3, [r1, #16]
 800a0d4:	4605      	mov	r5, r0
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	b913      	cbnz	r3, 800a0e0 <_fflush_r+0x10>
 800a0da:	2500      	movs	r5, #0
 800a0dc:	4628      	mov	r0, r5
 800a0de:	bd38      	pop	{r3, r4, r5, pc}
 800a0e0:	b118      	cbz	r0, 800a0ea <_fflush_r+0x1a>
 800a0e2:	6983      	ldr	r3, [r0, #24]
 800a0e4:	b90b      	cbnz	r3, 800a0ea <_fflush_r+0x1a>
 800a0e6:	f000 f887 	bl	800a1f8 <__sinit>
 800a0ea:	4b14      	ldr	r3, [pc, #80]	; (800a13c <_fflush_r+0x6c>)
 800a0ec:	429c      	cmp	r4, r3
 800a0ee:	d11b      	bne.n	800a128 <_fflush_r+0x58>
 800a0f0:	686c      	ldr	r4, [r5, #4]
 800a0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d0ef      	beq.n	800a0da <_fflush_r+0xa>
 800a0fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0fc:	07d0      	lsls	r0, r2, #31
 800a0fe:	d404      	bmi.n	800a10a <_fflush_r+0x3a>
 800a100:	0599      	lsls	r1, r3, #22
 800a102:	d402      	bmi.n	800a10a <_fflush_r+0x3a>
 800a104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a106:	f000 f915 	bl	800a334 <__retarget_lock_acquire_recursive>
 800a10a:	4628      	mov	r0, r5
 800a10c:	4621      	mov	r1, r4
 800a10e:	f7ff ff59 	bl	8009fc4 <__sflush_r>
 800a112:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a114:	07da      	lsls	r2, r3, #31
 800a116:	4605      	mov	r5, r0
 800a118:	d4e0      	bmi.n	800a0dc <_fflush_r+0xc>
 800a11a:	89a3      	ldrh	r3, [r4, #12]
 800a11c:	059b      	lsls	r3, r3, #22
 800a11e:	d4dd      	bmi.n	800a0dc <_fflush_r+0xc>
 800a120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a122:	f000 f908 	bl	800a336 <__retarget_lock_release_recursive>
 800a126:	e7d9      	b.n	800a0dc <_fflush_r+0xc>
 800a128:	4b05      	ldr	r3, [pc, #20]	; (800a140 <_fflush_r+0x70>)
 800a12a:	429c      	cmp	r4, r3
 800a12c:	d101      	bne.n	800a132 <_fflush_r+0x62>
 800a12e:	68ac      	ldr	r4, [r5, #8]
 800a130:	e7df      	b.n	800a0f2 <_fflush_r+0x22>
 800a132:	4b04      	ldr	r3, [pc, #16]	; (800a144 <_fflush_r+0x74>)
 800a134:	429c      	cmp	r4, r3
 800a136:	bf08      	it	eq
 800a138:	68ec      	ldreq	r4, [r5, #12]
 800a13a:	e7da      	b.n	800a0f2 <_fflush_r+0x22>
 800a13c:	08011840 	.word	0x08011840
 800a140:	08011860 	.word	0x08011860
 800a144:	08011820 	.word	0x08011820

0800a148 <std>:
 800a148:	2300      	movs	r3, #0
 800a14a:	b510      	push	{r4, lr}
 800a14c:	4604      	mov	r4, r0
 800a14e:	e9c0 3300 	strd	r3, r3, [r0]
 800a152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a156:	6083      	str	r3, [r0, #8]
 800a158:	8181      	strh	r1, [r0, #12]
 800a15a:	6643      	str	r3, [r0, #100]	; 0x64
 800a15c:	81c2      	strh	r2, [r0, #14]
 800a15e:	6183      	str	r3, [r0, #24]
 800a160:	4619      	mov	r1, r3
 800a162:	2208      	movs	r2, #8
 800a164:	305c      	adds	r0, #92	; 0x5c
 800a166:	f7ff f89d 	bl	80092a4 <memset>
 800a16a:	4b05      	ldr	r3, [pc, #20]	; (800a180 <std+0x38>)
 800a16c:	6263      	str	r3, [r4, #36]	; 0x24
 800a16e:	4b05      	ldr	r3, [pc, #20]	; (800a184 <std+0x3c>)
 800a170:	62a3      	str	r3, [r4, #40]	; 0x28
 800a172:	4b05      	ldr	r3, [pc, #20]	; (800a188 <std+0x40>)
 800a174:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a176:	4b05      	ldr	r3, [pc, #20]	; (800a18c <std+0x44>)
 800a178:	6224      	str	r4, [r4, #32]
 800a17a:	6323      	str	r3, [r4, #48]	; 0x30
 800a17c:	bd10      	pop	{r4, pc}
 800a17e:	bf00      	nop
 800a180:	0800a53d 	.word	0x0800a53d
 800a184:	0800a55f 	.word	0x0800a55f
 800a188:	0800a597 	.word	0x0800a597
 800a18c:	0800a5bb 	.word	0x0800a5bb

0800a190 <_cleanup_r>:
 800a190:	4901      	ldr	r1, [pc, #4]	; (800a198 <_cleanup_r+0x8>)
 800a192:	f000 b8af 	b.w	800a2f4 <_fwalk_reent>
 800a196:	bf00      	nop
 800a198:	0800a0d1 	.word	0x0800a0d1

0800a19c <__sfmoreglue>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	1e4a      	subs	r2, r1, #1
 800a1a0:	2568      	movs	r5, #104	; 0x68
 800a1a2:	4355      	muls	r5, r2
 800a1a4:	460e      	mov	r6, r1
 800a1a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1aa:	f7ff f98f 	bl	80094cc <_malloc_r>
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	b140      	cbz	r0, 800a1c4 <__sfmoreglue+0x28>
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	e9c0 1600 	strd	r1, r6, [r0]
 800a1b8:	300c      	adds	r0, #12
 800a1ba:	60a0      	str	r0, [r4, #8]
 800a1bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1c0:	f7ff f870 	bl	80092a4 <memset>
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	bd70      	pop	{r4, r5, r6, pc}

0800a1c8 <__sfp_lock_acquire>:
 800a1c8:	4801      	ldr	r0, [pc, #4]	; (800a1d0 <__sfp_lock_acquire+0x8>)
 800a1ca:	f000 b8b3 	b.w	800a334 <__retarget_lock_acquire_recursive>
 800a1ce:	bf00      	nop
 800a1d0:	200007cc 	.word	0x200007cc

0800a1d4 <__sfp_lock_release>:
 800a1d4:	4801      	ldr	r0, [pc, #4]	; (800a1dc <__sfp_lock_release+0x8>)
 800a1d6:	f000 b8ae 	b.w	800a336 <__retarget_lock_release_recursive>
 800a1da:	bf00      	nop
 800a1dc:	200007cc 	.word	0x200007cc

0800a1e0 <__sinit_lock_acquire>:
 800a1e0:	4801      	ldr	r0, [pc, #4]	; (800a1e8 <__sinit_lock_acquire+0x8>)
 800a1e2:	f000 b8a7 	b.w	800a334 <__retarget_lock_acquire_recursive>
 800a1e6:	bf00      	nop
 800a1e8:	200007c7 	.word	0x200007c7

0800a1ec <__sinit_lock_release>:
 800a1ec:	4801      	ldr	r0, [pc, #4]	; (800a1f4 <__sinit_lock_release+0x8>)
 800a1ee:	f000 b8a2 	b.w	800a336 <__retarget_lock_release_recursive>
 800a1f2:	bf00      	nop
 800a1f4:	200007c7 	.word	0x200007c7

0800a1f8 <__sinit>:
 800a1f8:	b510      	push	{r4, lr}
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	f7ff fff0 	bl	800a1e0 <__sinit_lock_acquire>
 800a200:	69a3      	ldr	r3, [r4, #24]
 800a202:	b11b      	cbz	r3, 800a20c <__sinit+0x14>
 800a204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a208:	f7ff bff0 	b.w	800a1ec <__sinit_lock_release>
 800a20c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a210:	6523      	str	r3, [r4, #80]	; 0x50
 800a212:	4b13      	ldr	r3, [pc, #76]	; (800a260 <__sinit+0x68>)
 800a214:	4a13      	ldr	r2, [pc, #76]	; (800a264 <__sinit+0x6c>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	62a2      	str	r2, [r4, #40]	; 0x28
 800a21a:	42a3      	cmp	r3, r4
 800a21c:	bf04      	itt	eq
 800a21e:	2301      	moveq	r3, #1
 800a220:	61a3      	streq	r3, [r4, #24]
 800a222:	4620      	mov	r0, r4
 800a224:	f000 f820 	bl	800a268 <__sfp>
 800a228:	6060      	str	r0, [r4, #4]
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 f81c 	bl	800a268 <__sfp>
 800a230:	60a0      	str	r0, [r4, #8]
 800a232:	4620      	mov	r0, r4
 800a234:	f000 f818 	bl	800a268 <__sfp>
 800a238:	2200      	movs	r2, #0
 800a23a:	60e0      	str	r0, [r4, #12]
 800a23c:	2104      	movs	r1, #4
 800a23e:	6860      	ldr	r0, [r4, #4]
 800a240:	f7ff ff82 	bl	800a148 <std>
 800a244:	68a0      	ldr	r0, [r4, #8]
 800a246:	2201      	movs	r2, #1
 800a248:	2109      	movs	r1, #9
 800a24a:	f7ff ff7d 	bl	800a148 <std>
 800a24e:	68e0      	ldr	r0, [r4, #12]
 800a250:	2202      	movs	r2, #2
 800a252:	2112      	movs	r1, #18
 800a254:	f7ff ff78 	bl	800a148 <std>
 800a258:	2301      	movs	r3, #1
 800a25a:	61a3      	str	r3, [r4, #24]
 800a25c:	e7d2      	b.n	800a204 <__sinit+0xc>
 800a25e:	bf00      	nop
 800a260:	08011734 	.word	0x08011734
 800a264:	0800a191 	.word	0x0800a191

0800a268 <__sfp>:
 800a268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26a:	4607      	mov	r7, r0
 800a26c:	f7ff ffac 	bl	800a1c8 <__sfp_lock_acquire>
 800a270:	4b1e      	ldr	r3, [pc, #120]	; (800a2ec <__sfp+0x84>)
 800a272:	681e      	ldr	r6, [r3, #0]
 800a274:	69b3      	ldr	r3, [r6, #24]
 800a276:	b913      	cbnz	r3, 800a27e <__sfp+0x16>
 800a278:	4630      	mov	r0, r6
 800a27a:	f7ff ffbd 	bl	800a1f8 <__sinit>
 800a27e:	3648      	adds	r6, #72	; 0x48
 800a280:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a284:	3b01      	subs	r3, #1
 800a286:	d503      	bpl.n	800a290 <__sfp+0x28>
 800a288:	6833      	ldr	r3, [r6, #0]
 800a28a:	b30b      	cbz	r3, 800a2d0 <__sfp+0x68>
 800a28c:	6836      	ldr	r6, [r6, #0]
 800a28e:	e7f7      	b.n	800a280 <__sfp+0x18>
 800a290:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a294:	b9d5      	cbnz	r5, 800a2cc <__sfp+0x64>
 800a296:	4b16      	ldr	r3, [pc, #88]	; (800a2f0 <__sfp+0x88>)
 800a298:	60e3      	str	r3, [r4, #12]
 800a29a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a29e:	6665      	str	r5, [r4, #100]	; 0x64
 800a2a0:	f000 f847 	bl	800a332 <__retarget_lock_init_recursive>
 800a2a4:	f7ff ff96 	bl	800a1d4 <__sfp_lock_release>
 800a2a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2b0:	6025      	str	r5, [r4, #0]
 800a2b2:	61a5      	str	r5, [r4, #24]
 800a2b4:	2208      	movs	r2, #8
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2bc:	f7fe fff2 	bl	80092a4 <memset>
 800a2c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2cc:	3468      	adds	r4, #104	; 0x68
 800a2ce:	e7d9      	b.n	800a284 <__sfp+0x1c>
 800a2d0:	2104      	movs	r1, #4
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	f7ff ff62 	bl	800a19c <__sfmoreglue>
 800a2d8:	4604      	mov	r4, r0
 800a2da:	6030      	str	r0, [r6, #0]
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d1d5      	bne.n	800a28c <__sfp+0x24>
 800a2e0:	f7ff ff78 	bl	800a1d4 <__sfp_lock_release>
 800a2e4:	230c      	movs	r3, #12
 800a2e6:	603b      	str	r3, [r7, #0]
 800a2e8:	e7ee      	b.n	800a2c8 <__sfp+0x60>
 800a2ea:	bf00      	nop
 800a2ec:	08011734 	.word	0x08011734
 800a2f0:	ffff0001 	.word	0xffff0001

0800a2f4 <_fwalk_reent>:
 800a2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f8:	4606      	mov	r6, r0
 800a2fa:	4688      	mov	r8, r1
 800a2fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a300:	2700      	movs	r7, #0
 800a302:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a306:	f1b9 0901 	subs.w	r9, r9, #1
 800a30a:	d505      	bpl.n	800a318 <_fwalk_reent+0x24>
 800a30c:	6824      	ldr	r4, [r4, #0]
 800a30e:	2c00      	cmp	r4, #0
 800a310:	d1f7      	bne.n	800a302 <_fwalk_reent+0xe>
 800a312:	4638      	mov	r0, r7
 800a314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a318:	89ab      	ldrh	r3, [r5, #12]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d907      	bls.n	800a32e <_fwalk_reent+0x3a>
 800a31e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a322:	3301      	adds	r3, #1
 800a324:	d003      	beq.n	800a32e <_fwalk_reent+0x3a>
 800a326:	4629      	mov	r1, r5
 800a328:	4630      	mov	r0, r6
 800a32a:	47c0      	blx	r8
 800a32c:	4307      	orrs	r7, r0
 800a32e:	3568      	adds	r5, #104	; 0x68
 800a330:	e7e9      	b.n	800a306 <_fwalk_reent+0x12>

0800a332 <__retarget_lock_init_recursive>:
 800a332:	4770      	bx	lr

0800a334 <__retarget_lock_acquire_recursive>:
 800a334:	4770      	bx	lr

0800a336 <__retarget_lock_release_recursive>:
 800a336:	4770      	bx	lr

0800a338 <__swhatbuf_r>:
 800a338:	b570      	push	{r4, r5, r6, lr}
 800a33a:	460e      	mov	r6, r1
 800a33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a340:	2900      	cmp	r1, #0
 800a342:	b096      	sub	sp, #88	; 0x58
 800a344:	4614      	mov	r4, r2
 800a346:	461d      	mov	r5, r3
 800a348:	da07      	bge.n	800a35a <__swhatbuf_r+0x22>
 800a34a:	2300      	movs	r3, #0
 800a34c:	602b      	str	r3, [r5, #0]
 800a34e:	89b3      	ldrh	r3, [r6, #12]
 800a350:	061a      	lsls	r2, r3, #24
 800a352:	d410      	bmi.n	800a376 <__swhatbuf_r+0x3e>
 800a354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a358:	e00e      	b.n	800a378 <__swhatbuf_r+0x40>
 800a35a:	466a      	mov	r2, sp
 800a35c:	f000 f954 	bl	800a608 <_fstat_r>
 800a360:	2800      	cmp	r0, #0
 800a362:	dbf2      	blt.n	800a34a <__swhatbuf_r+0x12>
 800a364:	9a01      	ldr	r2, [sp, #4]
 800a366:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a36a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a36e:	425a      	negs	r2, r3
 800a370:	415a      	adcs	r2, r3
 800a372:	602a      	str	r2, [r5, #0]
 800a374:	e7ee      	b.n	800a354 <__swhatbuf_r+0x1c>
 800a376:	2340      	movs	r3, #64	; 0x40
 800a378:	2000      	movs	r0, #0
 800a37a:	6023      	str	r3, [r4, #0]
 800a37c:	b016      	add	sp, #88	; 0x58
 800a37e:	bd70      	pop	{r4, r5, r6, pc}

0800a380 <__smakebuf_r>:
 800a380:	898b      	ldrh	r3, [r1, #12]
 800a382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a384:	079d      	lsls	r5, r3, #30
 800a386:	4606      	mov	r6, r0
 800a388:	460c      	mov	r4, r1
 800a38a:	d507      	bpl.n	800a39c <__smakebuf_r+0x1c>
 800a38c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	6123      	str	r3, [r4, #16]
 800a394:	2301      	movs	r3, #1
 800a396:	6163      	str	r3, [r4, #20]
 800a398:	b002      	add	sp, #8
 800a39a:	bd70      	pop	{r4, r5, r6, pc}
 800a39c:	ab01      	add	r3, sp, #4
 800a39e:	466a      	mov	r2, sp
 800a3a0:	f7ff ffca 	bl	800a338 <__swhatbuf_r>
 800a3a4:	9900      	ldr	r1, [sp, #0]
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f7ff f88f 	bl	80094cc <_malloc_r>
 800a3ae:	b948      	cbnz	r0, 800a3c4 <__smakebuf_r+0x44>
 800a3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3b4:	059a      	lsls	r2, r3, #22
 800a3b6:	d4ef      	bmi.n	800a398 <__smakebuf_r+0x18>
 800a3b8:	f023 0303 	bic.w	r3, r3, #3
 800a3bc:	f043 0302 	orr.w	r3, r3, #2
 800a3c0:	81a3      	strh	r3, [r4, #12]
 800a3c2:	e7e3      	b.n	800a38c <__smakebuf_r+0xc>
 800a3c4:	4b0d      	ldr	r3, [pc, #52]	; (800a3fc <__smakebuf_r+0x7c>)
 800a3c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	6020      	str	r0, [r4, #0]
 800a3cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3d0:	81a3      	strh	r3, [r4, #12]
 800a3d2:	9b00      	ldr	r3, [sp, #0]
 800a3d4:	6163      	str	r3, [r4, #20]
 800a3d6:	9b01      	ldr	r3, [sp, #4]
 800a3d8:	6120      	str	r0, [r4, #16]
 800a3da:	b15b      	cbz	r3, 800a3f4 <__smakebuf_r+0x74>
 800a3dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f000 f923 	bl	800a62c <_isatty_r>
 800a3e6:	b128      	cbz	r0, 800a3f4 <__smakebuf_r+0x74>
 800a3e8:	89a3      	ldrh	r3, [r4, #12]
 800a3ea:	f023 0303 	bic.w	r3, r3, #3
 800a3ee:	f043 0301 	orr.w	r3, r3, #1
 800a3f2:	81a3      	strh	r3, [r4, #12]
 800a3f4:	89a0      	ldrh	r0, [r4, #12]
 800a3f6:	4305      	orrs	r5, r0
 800a3f8:	81a5      	strh	r5, [r4, #12]
 800a3fa:	e7cd      	b.n	800a398 <__smakebuf_r+0x18>
 800a3fc:	0800a191 	.word	0x0800a191

0800a400 <memcpy>:
 800a400:	440a      	add	r2, r1
 800a402:	4291      	cmp	r1, r2
 800a404:	f100 33ff 	add.w	r3, r0, #4294967295
 800a408:	d100      	bne.n	800a40c <memcpy+0xc>
 800a40a:	4770      	bx	lr
 800a40c:	b510      	push	{r4, lr}
 800a40e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a412:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a416:	4291      	cmp	r1, r2
 800a418:	d1f9      	bne.n	800a40e <memcpy+0xe>
 800a41a:	bd10      	pop	{r4, pc}

0800a41c <memmove>:
 800a41c:	4288      	cmp	r0, r1
 800a41e:	b510      	push	{r4, lr}
 800a420:	eb01 0402 	add.w	r4, r1, r2
 800a424:	d902      	bls.n	800a42c <memmove+0x10>
 800a426:	4284      	cmp	r4, r0
 800a428:	4623      	mov	r3, r4
 800a42a:	d807      	bhi.n	800a43c <memmove+0x20>
 800a42c:	1e43      	subs	r3, r0, #1
 800a42e:	42a1      	cmp	r1, r4
 800a430:	d008      	beq.n	800a444 <memmove+0x28>
 800a432:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a436:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a43a:	e7f8      	b.n	800a42e <memmove+0x12>
 800a43c:	4402      	add	r2, r0
 800a43e:	4601      	mov	r1, r0
 800a440:	428a      	cmp	r2, r1
 800a442:	d100      	bne.n	800a446 <memmove+0x2a>
 800a444:	bd10      	pop	{r4, pc}
 800a446:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a44a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a44e:	e7f7      	b.n	800a440 <memmove+0x24>

0800a450 <__malloc_lock>:
 800a450:	4801      	ldr	r0, [pc, #4]	; (800a458 <__malloc_lock+0x8>)
 800a452:	f7ff bf6f 	b.w	800a334 <__retarget_lock_acquire_recursive>
 800a456:	bf00      	nop
 800a458:	200007c8 	.word	0x200007c8

0800a45c <__malloc_unlock>:
 800a45c:	4801      	ldr	r0, [pc, #4]	; (800a464 <__malloc_unlock+0x8>)
 800a45e:	f7ff bf6a 	b.w	800a336 <__retarget_lock_release_recursive>
 800a462:	bf00      	nop
 800a464:	200007c8 	.word	0x200007c8

0800a468 <_realloc_r>:
 800a468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a46a:	4607      	mov	r7, r0
 800a46c:	4614      	mov	r4, r2
 800a46e:	460e      	mov	r6, r1
 800a470:	b921      	cbnz	r1, 800a47c <_realloc_r+0x14>
 800a472:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a476:	4611      	mov	r1, r2
 800a478:	f7ff b828 	b.w	80094cc <_malloc_r>
 800a47c:	b922      	cbnz	r2, 800a488 <_realloc_r+0x20>
 800a47e:	f7fe ffd5 	bl	800942c <_free_r>
 800a482:	4625      	mov	r5, r4
 800a484:	4628      	mov	r0, r5
 800a486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a488:	f000 f8f2 	bl	800a670 <_malloc_usable_size_r>
 800a48c:	42a0      	cmp	r0, r4
 800a48e:	d20f      	bcs.n	800a4b0 <_realloc_r+0x48>
 800a490:	4621      	mov	r1, r4
 800a492:	4638      	mov	r0, r7
 800a494:	f7ff f81a 	bl	80094cc <_malloc_r>
 800a498:	4605      	mov	r5, r0
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d0f2      	beq.n	800a484 <_realloc_r+0x1c>
 800a49e:	4631      	mov	r1, r6
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	f7ff ffad 	bl	800a400 <memcpy>
 800a4a6:	4631      	mov	r1, r6
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f7fe ffbf 	bl	800942c <_free_r>
 800a4ae:	e7e9      	b.n	800a484 <_realloc_r+0x1c>
 800a4b0:	4635      	mov	r5, r6
 800a4b2:	e7e7      	b.n	800a484 <_realloc_r+0x1c>

0800a4b4 <_raise_r>:
 800a4b4:	291f      	cmp	r1, #31
 800a4b6:	b538      	push	{r3, r4, r5, lr}
 800a4b8:	4604      	mov	r4, r0
 800a4ba:	460d      	mov	r5, r1
 800a4bc:	d904      	bls.n	800a4c8 <_raise_r+0x14>
 800a4be:	2316      	movs	r3, #22
 800a4c0:	6003      	str	r3, [r0, #0]
 800a4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c6:	bd38      	pop	{r3, r4, r5, pc}
 800a4c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4ca:	b112      	cbz	r2, 800a4d2 <_raise_r+0x1e>
 800a4cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4d0:	b94b      	cbnz	r3, 800a4e6 <_raise_r+0x32>
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f000 f830 	bl	800a538 <_getpid_r>
 800a4d8:	462a      	mov	r2, r5
 800a4da:	4601      	mov	r1, r0
 800a4dc:	4620      	mov	r0, r4
 800a4de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4e2:	f000 b817 	b.w	800a514 <_kill_r>
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d00a      	beq.n	800a500 <_raise_r+0x4c>
 800a4ea:	1c59      	adds	r1, r3, #1
 800a4ec:	d103      	bne.n	800a4f6 <_raise_r+0x42>
 800a4ee:	2316      	movs	r3, #22
 800a4f0:	6003      	str	r3, [r0, #0]
 800a4f2:	2001      	movs	r0, #1
 800a4f4:	e7e7      	b.n	800a4c6 <_raise_r+0x12>
 800a4f6:	2400      	movs	r4, #0
 800a4f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	4798      	blx	r3
 800a500:	2000      	movs	r0, #0
 800a502:	e7e0      	b.n	800a4c6 <_raise_r+0x12>

0800a504 <raise>:
 800a504:	4b02      	ldr	r3, [pc, #8]	; (800a510 <raise+0xc>)
 800a506:	4601      	mov	r1, r0
 800a508:	6818      	ldr	r0, [r3, #0]
 800a50a:	f7ff bfd3 	b.w	800a4b4 <_raise_r>
 800a50e:	bf00      	nop
 800a510:	200000c8 	.word	0x200000c8

0800a514 <_kill_r>:
 800a514:	b538      	push	{r3, r4, r5, lr}
 800a516:	4d07      	ldr	r5, [pc, #28]	; (800a534 <_kill_r+0x20>)
 800a518:	2300      	movs	r3, #0
 800a51a:	4604      	mov	r4, r0
 800a51c:	4608      	mov	r0, r1
 800a51e:	4611      	mov	r1, r2
 800a520:	602b      	str	r3, [r5, #0]
 800a522:	f7f9 faf5 	bl	8003b10 <_kill>
 800a526:	1c43      	adds	r3, r0, #1
 800a528:	d102      	bne.n	800a530 <_kill_r+0x1c>
 800a52a:	682b      	ldr	r3, [r5, #0]
 800a52c:	b103      	cbz	r3, 800a530 <_kill_r+0x1c>
 800a52e:	6023      	str	r3, [r4, #0]
 800a530:	bd38      	pop	{r3, r4, r5, pc}
 800a532:	bf00      	nop
 800a534:	200007d0 	.word	0x200007d0

0800a538 <_getpid_r>:
 800a538:	f7f9 bae2 	b.w	8003b00 <_getpid>

0800a53c <__sread>:
 800a53c:	b510      	push	{r4, lr}
 800a53e:	460c      	mov	r4, r1
 800a540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a544:	f000 f89c 	bl	800a680 <_read_r>
 800a548:	2800      	cmp	r0, #0
 800a54a:	bfab      	itete	ge
 800a54c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a54e:	89a3      	ldrhlt	r3, [r4, #12]
 800a550:	181b      	addge	r3, r3, r0
 800a552:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a556:	bfac      	ite	ge
 800a558:	6563      	strge	r3, [r4, #84]	; 0x54
 800a55a:	81a3      	strhlt	r3, [r4, #12]
 800a55c:	bd10      	pop	{r4, pc}

0800a55e <__swrite>:
 800a55e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a562:	461f      	mov	r7, r3
 800a564:	898b      	ldrh	r3, [r1, #12]
 800a566:	05db      	lsls	r3, r3, #23
 800a568:	4605      	mov	r5, r0
 800a56a:	460c      	mov	r4, r1
 800a56c:	4616      	mov	r6, r2
 800a56e:	d505      	bpl.n	800a57c <__swrite+0x1e>
 800a570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a574:	2302      	movs	r3, #2
 800a576:	2200      	movs	r2, #0
 800a578:	f000 f868 	bl	800a64c <_lseek_r>
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	4632      	mov	r2, r6
 800a58a:	463b      	mov	r3, r7
 800a58c:	4628      	mov	r0, r5
 800a58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a592:	f000 b817 	b.w	800a5c4 <_write_r>

0800a596 <__sseek>:
 800a596:	b510      	push	{r4, lr}
 800a598:	460c      	mov	r4, r1
 800a59a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59e:	f000 f855 	bl	800a64c <_lseek_r>
 800a5a2:	1c43      	adds	r3, r0, #1
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	bf15      	itete	ne
 800a5a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5b2:	81a3      	strheq	r3, [r4, #12]
 800a5b4:	bf18      	it	ne
 800a5b6:	81a3      	strhne	r3, [r4, #12]
 800a5b8:	bd10      	pop	{r4, pc}

0800a5ba <__sclose>:
 800a5ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5be:	f000 b813 	b.w	800a5e8 <_close_r>
	...

0800a5c4 <_write_r>:
 800a5c4:	b538      	push	{r3, r4, r5, lr}
 800a5c6:	4d07      	ldr	r5, [pc, #28]	; (800a5e4 <_write_r+0x20>)
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	4608      	mov	r0, r1
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	602a      	str	r2, [r5, #0]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	f7f9 fad3 	bl	8003b7e <_write>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d102      	bne.n	800a5e2 <_write_r+0x1e>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	b103      	cbz	r3, 800a5e2 <_write_r+0x1e>
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	200007d0 	.word	0x200007d0

0800a5e8 <_close_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4d06      	ldr	r5, [pc, #24]	; (800a604 <_close_r+0x1c>)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	4608      	mov	r0, r1
 800a5f2:	602b      	str	r3, [r5, #0]
 800a5f4:	f7f9 fadf 	bl	8003bb6 <_close>
 800a5f8:	1c43      	adds	r3, r0, #1
 800a5fa:	d102      	bne.n	800a602 <_close_r+0x1a>
 800a5fc:	682b      	ldr	r3, [r5, #0]
 800a5fe:	b103      	cbz	r3, 800a602 <_close_r+0x1a>
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	200007d0 	.word	0x200007d0

0800a608 <_fstat_r>:
 800a608:	b538      	push	{r3, r4, r5, lr}
 800a60a:	4d07      	ldr	r5, [pc, #28]	; (800a628 <_fstat_r+0x20>)
 800a60c:	2300      	movs	r3, #0
 800a60e:	4604      	mov	r4, r0
 800a610:	4608      	mov	r0, r1
 800a612:	4611      	mov	r1, r2
 800a614:	602b      	str	r3, [r5, #0]
 800a616:	f7f9 fada 	bl	8003bce <_fstat>
 800a61a:	1c43      	adds	r3, r0, #1
 800a61c:	d102      	bne.n	800a624 <_fstat_r+0x1c>
 800a61e:	682b      	ldr	r3, [r5, #0]
 800a620:	b103      	cbz	r3, 800a624 <_fstat_r+0x1c>
 800a622:	6023      	str	r3, [r4, #0]
 800a624:	bd38      	pop	{r3, r4, r5, pc}
 800a626:	bf00      	nop
 800a628:	200007d0 	.word	0x200007d0

0800a62c <_isatty_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4d06      	ldr	r5, [pc, #24]	; (800a648 <_isatty_r+0x1c>)
 800a630:	2300      	movs	r3, #0
 800a632:	4604      	mov	r4, r0
 800a634:	4608      	mov	r0, r1
 800a636:	602b      	str	r3, [r5, #0]
 800a638:	f7f9 fad9 	bl	8003bee <_isatty>
 800a63c:	1c43      	adds	r3, r0, #1
 800a63e:	d102      	bne.n	800a646 <_isatty_r+0x1a>
 800a640:	682b      	ldr	r3, [r5, #0]
 800a642:	b103      	cbz	r3, 800a646 <_isatty_r+0x1a>
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	bd38      	pop	{r3, r4, r5, pc}
 800a648:	200007d0 	.word	0x200007d0

0800a64c <_lseek_r>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4d07      	ldr	r5, [pc, #28]	; (800a66c <_lseek_r+0x20>)
 800a650:	4604      	mov	r4, r0
 800a652:	4608      	mov	r0, r1
 800a654:	4611      	mov	r1, r2
 800a656:	2200      	movs	r2, #0
 800a658:	602a      	str	r2, [r5, #0]
 800a65a:	461a      	mov	r2, r3
 800a65c:	f7f9 fad2 	bl	8003c04 <_lseek>
 800a660:	1c43      	adds	r3, r0, #1
 800a662:	d102      	bne.n	800a66a <_lseek_r+0x1e>
 800a664:	682b      	ldr	r3, [r5, #0]
 800a666:	b103      	cbz	r3, 800a66a <_lseek_r+0x1e>
 800a668:	6023      	str	r3, [r4, #0]
 800a66a:	bd38      	pop	{r3, r4, r5, pc}
 800a66c:	200007d0 	.word	0x200007d0

0800a670 <_malloc_usable_size_r>:
 800a670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a674:	1f18      	subs	r0, r3, #4
 800a676:	2b00      	cmp	r3, #0
 800a678:	bfbc      	itt	lt
 800a67a:	580b      	ldrlt	r3, [r1, r0]
 800a67c:	18c0      	addlt	r0, r0, r3
 800a67e:	4770      	bx	lr

0800a680 <_read_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	4d07      	ldr	r5, [pc, #28]	; (800a6a0 <_read_r+0x20>)
 800a684:	4604      	mov	r4, r0
 800a686:	4608      	mov	r0, r1
 800a688:	4611      	mov	r1, r2
 800a68a:	2200      	movs	r2, #0
 800a68c:	602a      	str	r2, [r5, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	f7f9 fa58 	bl	8003b44 <_read>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d102      	bne.n	800a69e <_read_r+0x1e>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	b103      	cbz	r3, 800a69e <_read_r+0x1e>
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	bd38      	pop	{r3, r4, r5, pc}
 800a6a0:	200007d0 	.word	0x200007d0

0800a6a4 <_init>:
 800a6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a6:	bf00      	nop
 800a6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6aa:	bc08      	pop	{r3}
 800a6ac:	469e      	mov	lr, r3
 800a6ae:	4770      	bx	lr

0800a6b0 <_fini>:
 800a6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b2:	bf00      	nop
 800a6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6b6:	bc08      	pop	{r3}
 800a6b8:	469e      	mov	lr, r3
 800a6ba:	4770      	bx	lr
