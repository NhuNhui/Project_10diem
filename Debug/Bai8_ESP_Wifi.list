
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030c8  08009a44  08009a44  00019a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb0c  0800cb0c  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb0c  0800cb0c  0001cb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb14  0800cb14  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb14  0800cb14  0001cb14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb18  0800cb18  0001cb18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  0800cb1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020120  2**0
                  CONTENTS
 10 .bss          00000790  20000120  20000120  00020120  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008b0  200008b0  00020120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019982  00000000  00000000  00020193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000044e3  00000000  00000000  00039b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017c0  00000000  00000000  0003dff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001279  00000000  00000000  0003f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000272b0  00000000  00000000  00040a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021792  00000000  00000000  00067ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e1476  00000000  00000000  00089473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006af8  00000000  00000000  0016a8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  001713e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000120 	.word	0x20000120
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a2c 	.word	0x08009a2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000124 	.word	0x20000124
 80001cc:	08009a2c 	.word	0x08009a2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000572:	463b      	mov	r3, r7
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800057e:	4b3d      	ldr	r3, [pc, #244]	; (8000674 <MX_ADC1_Init+0x108>)
 8000580:	4a3d      	ldr	r2, [pc, #244]	; (8000678 <MX_ADC1_Init+0x10c>)
 8000582:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000584:	4b3b      	ldr	r3, [pc, #236]	; (8000674 <MX_ADC1_Init+0x108>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058a:	4b3a      	ldr	r3, [pc, #232]	; (8000674 <MX_ADC1_Init+0x108>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000590:	4b38      	ldr	r3, [pc, #224]	; (8000674 <MX_ADC1_Init+0x108>)
 8000592:	2201      	movs	r2, #1
 8000594:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000596:	4b37      	ldr	r3, [pc, #220]	; (8000674 <MX_ADC1_Init+0x108>)
 8000598:	2200      	movs	r2, #0
 800059a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800059c:	4b35      	ldr	r3, [pc, #212]	; (8000674 <MX_ADC1_Init+0x108>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a4:	4b33      	ldr	r3, [pc, #204]	; (8000674 <MX_ADC1_Init+0x108>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005aa:	4b32      	ldr	r3, [pc, #200]	; (8000674 <MX_ADC1_Init+0x108>)
 80005ac:	4a33      	ldr	r2, [pc, #204]	; (800067c <MX_ADC1_Init+0x110>)
 80005ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b0:	4b30      	ldr	r3, [pc, #192]	; (8000674 <MX_ADC1_Init+0x108>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <MX_ADC1_Init+0x108>)
 80005b8:	2205      	movs	r2, #5
 80005ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <MX_ADC1_Init+0x108>)
 80005be:	2200      	movs	r2, #0
 80005c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c4:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <MX_ADC1_Init+0x108>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ca:	482a      	ldr	r0, [pc, #168]	; (8000674 <MX_ADC1_Init+0x108>)
 80005cc:	f003 fce0 	bl	8003f90 <HAL_ADC_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005d6:	f001 fa8b 	bl	8001af0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005da:	2308      	movs	r3, #8
 80005dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005de:	2301      	movs	r3, #1
 80005e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	4822      	ldr	r0, [pc, #136]	; (8000674 <MX_ADC1_Init+0x108>)
 80005ec:	f003 fd14 	bl	8004018 <HAL_ADC_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80005f6:	f001 fa7b 	bl	8001af0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005fa:	2309      	movs	r3, #9
 80005fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80005fe:	2302      	movs	r3, #2
 8000600:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	4619      	mov	r1, r3
 8000606:	481b      	ldr	r0, [pc, #108]	; (8000674 <MX_ADC1_Init+0x108>)
 8000608:	f003 fd06 	bl	8004018 <HAL_ADC_ConfigChannel>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000612:	f001 fa6d 	bl	8001af0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000616:	230a      	movs	r3, #10
 8000618:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800061a:	2303      	movs	r3, #3
 800061c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061e:	463b      	mov	r3, r7
 8000620:	4619      	mov	r1, r3
 8000622:	4814      	ldr	r0, [pc, #80]	; (8000674 <MX_ADC1_Init+0x108>)
 8000624:	f003 fcf8 	bl	8004018 <HAL_ADC_ConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800062e:	f001 fa5f 	bl	8001af0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000632:	230b      	movs	r3, #11
 8000634:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000636:	2304      	movs	r3, #4
 8000638:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	480d      	ldr	r0, [pc, #52]	; (8000674 <MX_ADC1_Init+0x108>)
 8000640:	f003 fcea 	bl	8004018 <HAL_ADC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800064a:	f001 fa51 	bl	8001af0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800064e:	230c      	movs	r3, #12
 8000650:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000652:	2305      	movs	r3, #5
 8000654:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	4619      	mov	r1, r3
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <MX_ADC1_Init+0x108>)
 800065c:	f003 fcdc 	bl	8004018 <HAL_ADC_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000666:	f001 fa43 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000013c 	.word	0x2000013c
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <HAL_ADC_MspInit+0x110>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d171      	bne.n	8000786 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006aa:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b0:	6453      	str	r3, [r2, #68]	; 0x44
 80006b2:	4b38      	ldr	r3, [pc, #224]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b31      	ldr	r3, [pc, #196]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a2c      	ldr	r2, [pc, #176]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006f6:	2307      	movs	r3, #7
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fa:	2303      	movs	r3, #3
 80006fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4823      	ldr	r0, [pc, #140]	; (8000798 <HAL_ADC_MspInit+0x118>)
 800070a:	f004 fb31 	bl	8004d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800070e:	2303      	movs	r3, #3
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <HAL_ADC_MspInit+0x11c>)
 8000722:	f004 fb25 	bl	8004d70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000728:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <HAL_ADC_MspInit+0x124>)
 800072a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000744:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800074c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000754:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800075c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800076c:	f003 ff84 	bl	8004678 <HAL_DMA_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000776:	f001 f9bb 	bl	8001af0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800077e:	639a      	str	r2, [r3, #56]	; 0x38
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40012000 	.word	0x40012000
 8000794:	40023800 	.word	0x40023800
 8000798:	40020800 	.word	0x40020800
 800079c:	40020400 	.word	0x40020400
 80007a0:	20000184 	.word	0x20000184
 80007a4:	40026410 	.word	0x40026410

080007a8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2108      	movs	r1, #8
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <button_init+0x14>)
 80007b2:	f004 fc79 	bl	80050a8 <HAL_GPIO_WritePin>
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40020c00 	.word	0x40020c00

080007c0 <button_Scan>:

void button_Scan(){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2108      	movs	r1, #8
 80007ca:	482f      	ldr	r0, [pc, #188]	; (8000888 <button_Scan+0xc8>)
 80007cc:	f004 fc6c 	bl	80050a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2108      	movs	r1, #8
 80007d4:	482c      	ldr	r0, [pc, #176]	; (8000888 <button_Scan+0xc8>)
 80007d6:	f004 fc67 	bl	80050a8 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80007da:	230a      	movs	r3, #10
 80007dc:	2202      	movs	r2, #2
 80007de:	492b      	ldr	r1, [pc, #172]	; (800088c <button_Scan+0xcc>)
 80007e0:	482b      	ldr	r0, [pc, #172]	; (8000890 <button_Scan+0xd0>)
 80007e2:	f005 fc1c 	bl	800601e <HAL_SPI_Receive>
	  int button_index = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80007ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007ee:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80007f0:	2300      	movs	r3, #0
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	e03f      	b.n	8000876 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	db06      	blt.n	800080a <button_Scan+0x4a>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b03      	cmp	r3, #3
 8000800:	dc03      	bgt.n	800080a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3304      	adds	r3, #4
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	e018      	b.n	800083c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b03      	cmp	r3, #3
 800080e:	dd07      	ble.n	8000820 <button_Scan+0x60>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b07      	cmp	r3, #7
 8000814:	dc04      	bgt.n	8000820 <button_Scan+0x60>
			  button_index = 7 - i;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f1c3 0307 	rsb	r3, r3, #7
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	e00d      	b.n	800083c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b07      	cmp	r3, #7
 8000824:	dd06      	ble.n	8000834 <button_Scan+0x74>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0b      	cmp	r3, #11
 800082a:	dc03      	bgt.n	8000834 <button_Scan+0x74>
			  button_index = i + 4;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3304      	adds	r3, #4
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	e003      	b.n	800083c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f1c3 0317 	rsb	r3, r3, #23
 800083a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <button_Scan+0xcc>)
 800083e:	881a      	ldrh	r2, [r3, #0]
 8000840:	897b      	ldrh	r3, [r7, #10]
 8000842:	4013      	ands	r3, r2
 8000844:	b29b      	uxth	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	d005      	beq.n	8000856 <button_Scan+0x96>
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <button_Scan+0xd4>)
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	2100      	movs	r1, #0
 8000850:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000854:	e009      	b.n	800086a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000856:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <button_Scan+0xd4>)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800085e:	3301      	adds	r3, #1
 8000860:	b299      	uxth	r1, r3
 8000862:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <button_Scan+0xd4>)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800086a:	897b      	ldrh	r3, [r7, #10]
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3301      	adds	r3, #1
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b0f      	cmp	r3, #15
 800087a:	ddbc      	ble.n	80007f6 <button_Scan+0x36>
	  }
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40020c00 	.word	0x40020c00
 800088c:	20000204 	.word	0x20000204
 8000890:	200005a0 	.word	0x200005a0
 8000894:	200001e4 	.word	0x200001e4

08000898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_DMA_Init+0x3c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a0b      	ldr	r2, [pc, #44]	; (80008d4 <MX_DMA_Init+0x3c>)
 80008a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_DMA_Init+0x3c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2100      	movs	r1, #0
 80008be:	2038      	movs	r0, #56	; 0x38
 80008c0:	f003 fea3 	bl	800460a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008c4:	2038      	movs	r0, #56	; 0x38
 80008c6:	f003 febc 	bl	8004642 <HAL_NVIC_EnableIRQ>

}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800

080008d8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08e      	sub	sp, #56	; 0x38
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
 80008ee:	615a      	str	r2, [r3, #20]
 80008f0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
 8000900:	615a      	str	r2, [r3, #20]
 8000902:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000904:	4b2f      	ldr	r3, [pc, #188]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000906:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800090a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800090c:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <MX_FSMC_Init+0xec>)
 800090e:	4a2e      	ldr	r2, [pc, #184]	; (80009c8 <MX_FSMC_Init+0xf0>)
 8000910:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000912:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000918:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <MX_FSMC_Init+0xec>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800091e:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000924:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000926:	2210      	movs	r2, #16
 8000928:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800092a:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <MX_FSMC_Init+0xec>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000936:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_FSMC_Init+0xec>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000942:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000944:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_FSMC_Init+0xec>)
 800094c:	2200      	movs	r2, #0
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000950:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_FSMC_Init+0xec>)
 800095a:	2200      	movs	r2, #0
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000960:	2200      	movs	r2, #0
 8000962:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_FSMC_Init+0xec>)
 8000966:	2200      	movs	r2, #0
 8000968:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800096a:	230f      	movs	r3, #15
 800096c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800096e:	230f      	movs	r3, #15
 8000970:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000972:	233c      	movs	r3, #60	; 0x3c
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800097a:	2310      	movs	r3, #16
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800097e:	2311      	movs	r3, #17
 8000980:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000982:	2300      	movs	r3, #0
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000986:	2308      	movs	r3, #8
 8000988:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800098a:	230f      	movs	r3, #15
 800098c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800098e:	2309      	movs	r3, #9
 8000990:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000996:	2310      	movs	r3, #16
 8000998:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800099a:	2311      	movs	r3, #17
 800099c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80009a2:	463a      	mov	r2, r7
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	4806      	ldr	r0, [pc, #24]	; (80009c4 <MX_FSMC_Init+0xec>)
 80009ac:	f005 ff1a 	bl	80067e4 <HAL_SRAM_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80009b6:	f001 f89b 	bl	8001af0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80009ba:	bf00      	nop
 80009bc:	3738      	adds	r7, #56	; 0x38
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000208 	.word	0x20000208
 80009c8:	a0000104 	.word	0xa0000104

080009cc <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <HAL_FSMC_MspInit+0x88>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d131      	bne.n	8000a4c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_FSMC_MspInit+0x88>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	603b      	str	r3, [r7, #0]
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <HAL_FSMC_MspInit+0x8c>)
 80009f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009f6:	4a18      	ldr	r2, [pc, #96]	; (8000a58 <HAL_FSMC_MspInit+0x8c>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6393      	str	r3, [r2, #56]	; 0x38
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <HAL_FSMC_MspInit+0x8c>)
 8000a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000a0a:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000a0e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <HAL_FSMC_MspInit+0x90>)
 8000a26:	f004 f9a3 	bl	8004d70 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000a2a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000a2e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	4806      	ldr	r0, [pc, #24]	; (8000a60 <HAL_FSMC_MspInit+0x94>)
 8000a46:	f004 f993 	bl	8004d70 <HAL_GPIO_Init>
 8000a4a:	e000      	b.n	8000a4e <HAL_FSMC_MspInit+0x82>
    return;
 8000a4c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000258 	.word	0x20000258
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40020c00 	.word	0x40020c00

08000a64 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000a6c:	f7ff ffae 	bl	80009cc <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	; 0x38
 8000a7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
 8000a92:	4b8f      	ldr	r3, [pc, #572]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a8e      	ldr	r2, [pc, #568]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b8c      	ldr	r3, [pc, #560]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	623b      	str	r3, [r7, #32]
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	61fb      	str	r3, [r7, #28]
 8000aae:	4b88      	ldr	r3, [pc, #544]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a87      	ldr	r2, [pc, #540]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b85      	ldr	r3, [pc, #532]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	61fb      	str	r3, [r7, #28]
 8000ac4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	4b81      	ldr	r3, [pc, #516]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a80      	ldr	r2, [pc, #512]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000ad0:	f043 0320 	orr.w	r3, r3, #32
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b7e      	ldr	r3, [pc, #504]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0320 	and.w	r3, r3, #32
 8000ade:	61bb      	str	r3, [r7, #24]
 8000ae0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
 8000ae6:	4b7a      	ldr	r3, [pc, #488]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a79      	ldr	r2, [pc, #484]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b77      	ldr	r3, [pc, #476]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b73      	ldr	r3, [pc, #460]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a72      	ldr	r2, [pc, #456]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b70      	ldr	r3, [pc, #448]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b6c      	ldr	r3, [pc, #432]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a6b      	ldr	r2, [pc, #428]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b69      	ldr	r3, [pc, #420]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	4b65      	ldr	r3, [pc, #404]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a64      	ldr	r2, [pc, #400]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b62      	ldr	r3, [pc, #392]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	4b5e      	ldr	r3, [pc, #376]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a5d      	ldr	r2, [pc, #372]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b5b      	ldr	r3, [pc, #364]	; (8000cd0 <MX_GPIO_Init+0x258>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2170      	movs	r1, #112	; 0x70
 8000b72:	4858      	ldr	r0, [pc, #352]	; (8000cd4 <MX_GPIO_Init+0x25c>)
 8000b74:	f004 fa98 	bl	80050a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8000b7e:	4856      	ldr	r0, [pc, #344]	; (8000cd8 <MX_GPIO_Init+0x260>)
 8000b80:	f004 fa92 	bl	80050a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8a:	4854      	ldr	r0, [pc, #336]	; (8000cdc <MX_GPIO_Init+0x264>)
 8000b8c:	f004 fa8c 	bl	80050a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000b96:	4852      	ldr	r0, [pc, #328]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000b98:	f004 fa86 	bl	80050a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba2:	4850      	ldr	r0, [pc, #320]	; (8000ce4 <MX_GPIO_Init+0x26c>)
 8000ba4:	f004 fa80 	bl	80050a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2108      	movs	r1, #8
 8000bac:	484e      	ldr	r0, [pc, #312]	; (8000ce8 <MX_GPIO_Init+0x270>)
 8000bae:	f004 fa7b 	bl	80050a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000bb2:	2370      	movs	r3, #112	; 0x70
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4842      	ldr	r0, [pc, #264]	; (8000cd4 <MX_GPIO_Init+0x25c>)
 8000bca:	f004 f8d1 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000bce:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	483c      	ldr	r0, [pc, #240]	; (8000cd8 <MX_GPIO_Init+0x260>)
 8000be8:	f004 f8c2 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8000bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4836      	ldr	r0, [pc, #216]	; (8000cdc <MX_GPIO_Init+0x264>)
 8000c02:	f004 f8b5 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	482f      	ldr	r0, [pc, #188]	; (8000cdc <MX_GPIO_Init+0x264>)
 8000c20:	f004 f8a6 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000c24:	23c0      	movs	r3, #192	; 0xc0
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	482b      	ldr	r0, [pc, #172]	; (8000ce4 <MX_GPIO_Init+0x26c>)
 8000c38:	f004 f89a 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000c3c:	2330      	movs	r3, #48	; 0x30
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4822      	ldr	r0, [pc, #136]	; (8000cd8 <MX_GPIO_Init+0x260>)
 8000c50:	f004 f88e 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000c54:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	481c      	ldr	r0, [pc, #112]	; (8000ce0 <MX_GPIO_Init+0x268>)
 8000c6e:	f004 f87f 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8000c72:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	4814      	ldr	r0, [pc, #80]	; (8000cd8 <MX_GPIO_Init+0x260>)
 8000c88:	f004 f872 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000c8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <MX_GPIO_Init+0x26c>)
 8000ca6:	f004 f863 	bl	8004d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000caa:	2308      	movs	r3, #8
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <MX_GPIO_Init+0x270>)
 8000cc2:	f004 f855 	bl	8004d70 <HAL_GPIO_Init>

}
 8000cc6:	bf00      	nop
 8000cc8:	3738      	adds	r7, #56	; 0x38
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	40021400 	.word	0x40021400
 8000ce0:	40021800 	.word	0x40021800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	40020c00 	.word	0x40020c00

08000cec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000cf2:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <MX_I2C1_Init+0x54>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000cf8:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <MX_I2C1_Init+0x58>)
 8000cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_I2C1_Init+0x50>)
 8000d2a:	f004 f9d7 	bl	80050dc <HAL_I2C_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d34:	f000 fedc 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000025c 	.word	0x2000025c
 8000d40:	40005400 	.word	0x40005400
 8000d44:	000186a0 	.word	0x000186a0

08000d48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <HAL_I2C_MspInit+0x84>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d12b      	bne.n	8000dc2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d86:	23c0      	movs	r3, #192	; 0xc0
 8000d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8a:	2312      	movs	r3, #18
 8000d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d96:	2304      	movs	r3, #4
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9a:	f107 0314 	add.w	r3, r7, #20
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <HAL_I2C_MspInit+0x8c>)
 8000da2:	f003 ffe5 	bl	8004d70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_I2C_MspInit+0x88>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	; 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40005400 	.word	0x40005400
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40020400 	.word	0x40020400

08000dd8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <LCD_WR_REG+0x1c>)
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	8013      	strh	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	600ffffe 	.word	0x600ffffe

08000df8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <LCD_WR_DATA+0x1c>)
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	8053      	strh	r3, [r2, #2]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	600ffffe 	.word	0x600ffffe

08000e18 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <LCD_RD_DATA+0x20>)
 8000e20:	885b      	ldrh	r3, [r3, #2]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	b29b      	uxth	r3, r3
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	600ffffe 	.word	0x600ffffe

08000e3c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4604      	mov	r4, r0
 8000e44:	4608      	mov	r0, r1
 8000e46:	4611      	mov	r1, r2
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	80fb      	strh	r3, [r7, #6]
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80bb      	strh	r3, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	807b      	strh	r3, [r7, #2]
 8000e56:	4613      	mov	r3, r2
 8000e58:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000e5a:	202a      	movs	r0, #42	; 0x2a
 8000e5c:	f7ff ffbc 	bl	8000dd8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	0a1b      	lsrs	r3, r3, #8
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ffc6 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ffc0 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000e78:	887b      	ldrh	r3, [r7, #2]
 8000e7a:	0a1b      	lsrs	r3, r3, #8
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ffba 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000e84:	887b      	ldrh	r3, [r7, #2]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ffb4 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000e90:	202b      	movs	r0, #43	; 0x2b
 8000e92:	f7ff ffa1 	bl	8000dd8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000e96:	88bb      	ldrh	r3, [r7, #4]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ffab 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000ea2:	88bb      	ldrh	r3, [r7, #4]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ffa5 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000eae:	883b      	ldrh	r3, [r7, #0]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff9f 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000eba:	883b      	ldrh	r3, [r7, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff99 	bl	8000df8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000ec6:	202c      	movs	r0, #44	; 0x2c
 8000ec8:	f7ff ff86 	bl	8000dd8 <LCD_WR_REG>
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd90      	pop	{r4, r7, pc}

08000ed4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <lcd_Clear+0x60>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <lcd_Clear+0x60>)
 8000ee8:	885b      	ldrh	r3, [r3, #2]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f7ff ffa3 	bl	8000e3c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	81fb      	strh	r3, [r7, #14]
 8000efa:	e011      	b.n	8000f20 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	81bb      	strh	r3, [r7, #12]
 8000f00:	e006      	b.n	8000f10 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff77 	bl	8000df8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000f0a:	89bb      	ldrh	r3, [r7, #12]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	81bb      	strh	r3, [r7, #12]
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <lcd_Clear+0x60>)
 8000f12:	885b      	ldrh	r3, [r3, #2]
 8000f14:	89ba      	ldrh	r2, [r7, #12]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d3f3      	bcc.n	8000f02 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000f1a:	89fb      	ldrh	r3, [r7, #14]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	81fb      	strh	r3, [r7, #14]
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <lcd_Clear+0x60>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	89fa      	ldrh	r2, [r7, #14]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d3e8      	bcc.n	8000efc <lcd_Clear+0x28>
		}
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200002b0 	.word	0x200002b0

08000f38 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4604      	mov	r4, r0
 8000f40:	4608      	mov	r0, r1
 8000f42:	4611      	mov	r1, r2
 8000f44:	461a      	mov	r2, r3
 8000f46:	4623      	mov	r3, r4
 8000f48:	80fb      	strh	r3, [r7, #6]
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80bb      	strh	r3, [r7, #4]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	807b      	strh	r3, [r7, #2]
 8000f52:	4613      	mov	r3, r2
 8000f54:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000f56:	887b      	ldrh	r3, [r7, #2]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	883b      	ldrh	r3, [r7, #0]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	88b9      	ldrh	r1, [r7, #4]
 8000f64:	88f8      	ldrh	r0, [r7, #6]
 8000f66:	f7ff ff69 	bl	8000e3c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000f6a:	88bb      	ldrh	r3, [r7, #4]
 8000f6c:	81fb      	strh	r3, [r7, #14]
 8000f6e:	e010      	b.n	8000f92 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	81bb      	strh	r3, [r7, #12]
 8000f74:	e006      	b.n	8000f84 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000f76:	8c3b      	ldrh	r3, [r7, #32]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff3d 	bl	8000df8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000f7e:	89bb      	ldrh	r3, [r7, #12]
 8000f80:	3301      	adds	r3, #1
 8000f82:	81bb      	strh	r3, [r7, #12]
 8000f84:	89ba      	ldrh	r2, [r7, #12]
 8000f86:	887b      	ldrh	r3, [r7, #2]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d3f4      	bcc.n	8000f76 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000f8c:	89fb      	ldrh	r3, [r7, #14]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	81fb      	strh	r3, [r7, #14]
 8000f92:	89fa      	ldrh	r2, [r7, #14]
 8000f94:	883b      	ldrh	r3, [r7, #0]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d3ea      	bcc.n	8000f70 <lcd_Fill+0x38>
		}
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd90      	pop	{r4, r7, pc}

08000fa4 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	80bb      	strh	r3, [r7, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000fb6:	88bb      	ldrh	r3, [r7, #4]
 8000fb8:	88fa      	ldrh	r2, [r7, #6]
 8000fba:	88b9      	ldrh	r1, [r7, #4]
 8000fbc:	88f8      	ldrh	r0, [r7, #6]
 8000fbe:	f7ff ff3d 	bl	8000e3c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff17 	bl	8000df8 <LCD_WR_DATA>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8000fd2:	b590      	push	{r4, r7, lr}
 8000fd4:	b08d      	sub	sp, #52	; 0x34
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4604      	mov	r4, r0
 8000fda:	4608      	mov	r0, r1
 8000fdc:	4611      	mov	r1, r2
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4623      	mov	r3, r4
 8000fe2:	80fb      	strh	r3, [r7, #6]
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	80bb      	strh	r3, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
 8000fec:	4613      	mov	r3, r2
 8000fee:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8000ff8:	887a      	ldrh	r2, [r7, #2]
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001000:	883a      	ldrh	r2, [r7, #0]
 8001002:	88bb      	ldrh	r3, [r7, #4]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	2b00      	cmp	r3, #0
 8001014:	dd02      	ble.n	800101c <lcd_DrawLine+0x4a>
 8001016:	2301      	movs	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e00b      	b.n	8001034 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 800101c:	6a3b      	ldr	r3, [r7, #32]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <lcd_DrawLine+0x56>
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e005      	b.n	8001034 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001028:	f04f 33ff 	mov.w	r3, #4294967295
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	6a3b      	ldr	r3, [r7, #32]
 8001030:	425b      	negs	r3, r3
 8001032:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	2b00      	cmp	r3, #0
 8001038:	dd02      	ble.n	8001040 <lcd_DrawLine+0x6e>
 800103a:	2301      	movs	r3, #1
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	e00b      	b.n	8001058 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <lcd_DrawLine+0x7a>
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	e005      	b.n	8001058 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 800104c:	f04f 33ff 	mov.w	r3, #4294967295
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	425b      	negs	r3, r3
 8001056:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001058:	6a3a      	ldr	r2, [r7, #32]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	429a      	cmp	r2, r3
 800105e:	dd02      	ble.n	8001066 <lcd_DrawLine+0x94>
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	e001      	b.n	800106a <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 800106a:	2300      	movs	r3, #0
 800106c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800106e:	e02b      	b.n	80010c8 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	b29b      	uxth	r3, r3
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	b291      	uxth	r1, r2
 8001078:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff91 	bl	8000fa4 <lcd_DrawPoint>
		xerr+=delta_x;
 8001082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	4413      	add	r3, r2
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 800108a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	4413      	add	r3, r2
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	429a      	cmp	r2, r3
 8001098:	dd07      	ble.n	80010aa <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 800109a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80010aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	dd07      	ble.n	80010c2 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80010b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4413      	add	r3, r2
 80010c0:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80010c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010c4:	3301      	adds	r3, #1
 80010c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80010c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dacf      	bge.n	8001070 <lcd_DrawLine+0x9e>
		}
	}
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3734      	adds	r7, #52	; 0x34
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd90      	pop	{r4, r7, pc}

080010da <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 80010da:	b590      	push	{r4, r7, lr}
 80010dc:	b085      	sub	sp, #20
 80010de:	af02      	add	r7, sp, #8
 80010e0:	4604      	mov	r4, r0
 80010e2:	4608      	mov	r0, r1
 80010e4:	4611      	mov	r1, r2
 80010e6:	461a      	mov	r2, r3
 80010e8:	4623      	mov	r3, r4
 80010ea:	80fb      	strh	r3, [r7, #6]
 80010ec:	4603      	mov	r3, r0
 80010ee:	80bb      	strh	r3, [r7, #4]
 80010f0:	460b      	mov	r3, r1
 80010f2:	807b      	strh	r3, [r7, #2]
 80010f4:	4613      	mov	r3, r2
 80010f6:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 80010f8:	88bc      	ldrh	r4, [r7, #4]
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	88b9      	ldrh	r1, [r7, #4]
 80010fe:	88f8      	ldrh	r0, [r7, #6]
 8001100:	8b3b      	ldrh	r3, [r7, #24]
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	4623      	mov	r3, r4
 8001106:	f7ff ff64 	bl	8000fd2 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 800110a:	883c      	ldrh	r4, [r7, #0]
 800110c:	88fa      	ldrh	r2, [r7, #6]
 800110e:	88b9      	ldrh	r1, [r7, #4]
 8001110:	88f8      	ldrh	r0, [r7, #6]
 8001112:	8b3b      	ldrh	r3, [r7, #24]
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	4623      	mov	r3, r4
 8001118:	f7ff ff5b 	bl	8000fd2 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 800111c:	883c      	ldrh	r4, [r7, #0]
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	8839      	ldrh	r1, [r7, #0]
 8001122:	88f8      	ldrh	r0, [r7, #6]
 8001124:	8b3b      	ldrh	r3, [r7, #24]
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4623      	mov	r3, r4
 800112a:	f7ff ff52 	bl	8000fd2 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 800112e:	883c      	ldrh	r4, [r7, #0]
 8001130:	887a      	ldrh	r2, [r7, #2]
 8001132:	88b9      	ldrh	r1, [r7, #4]
 8001134:	8878      	ldrh	r0, [r7, #2]
 8001136:	8b3b      	ldrh	r3, [r7, #24]
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	4623      	mov	r3, r4
 800113c:	f7ff ff49 	bl	8000fd2 <lcd_DrawLine>
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bd90      	pop	{r4, r7, pc}

08001148 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b087      	sub	sp, #28
 800114c:	af00      	add	r7, sp, #0
 800114e:	4604      	mov	r4, r0
 8001150:	4608      	mov	r0, r1
 8001152:	4611      	mov	r1, r2
 8001154:	461a      	mov	r2, r3
 8001156:	4623      	mov	r3, r4
 8001158:	80fb      	strh	r3, [r7, #6]
 800115a:	4603      	mov	r3, r0
 800115c:	80bb      	strh	r3, [r7, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	70fb      	strb	r3, [r7, #3]
 8001162:	4613      	mov	r3, r2
 8001164:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001166:	2300      	movs	r3, #0
 8001168:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800116e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001172:	085b      	lsrs	r3, r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	08db      	lsrs	r3, r3, #3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	bf14      	ite	ne
 800118a:	2301      	movne	r3, #1
 800118c:	2300      	moveq	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4413      	add	r3, r2
 8001192:	b29a      	uxth	r2, r3
 8001194:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001198:	b29b      	uxth	r3, r3
 800119a:	fb12 f303 	smulbb	r3, r2, r3
 800119e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	3b20      	subs	r3, #32
 80011a4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	4413      	add	r3, r2
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	3b01      	subs	r3, #1
 80011b2:	b29c      	uxth	r4, r3
 80011b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	88bb      	ldrh	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	88b9      	ldrh	r1, [r7, #4]
 80011c6:	88f8      	ldrh	r0, [r7, #6]
 80011c8:	4622      	mov	r2, r4
 80011ca:	f7ff fe37 	bl	8000e3c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	827b      	strh	r3, [r7, #18]
 80011d2:	e07a      	b.n	80012ca <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80011d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011d8:	2b0c      	cmp	r3, #12
 80011da:	d028      	beq.n	800122e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 80011dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011e0:	2b10      	cmp	r3, #16
 80011e2:	d108      	bne.n	80011f6 <lcd_ShowChar+0xae>
 80011e4:	78fa      	ldrb	r2, [r7, #3]
 80011e6:	8a7b      	ldrh	r3, [r7, #18]
 80011e8:	493c      	ldr	r1, [pc, #240]	; (80012dc <lcd_ShowChar+0x194>)
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	440a      	add	r2, r1
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	75fb      	strb	r3, [r7, #23]
 80011f4:	e01b      	b.n	800122e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 80011f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80011fa:	2b18      	cmp	r3, #24
 80011fc:	d10b      	bne.n	8001216 <lcd_ShowChar+0xce>
 80011fe:	78fa      	ldrb	r2, [r7, #3]
 8001200:	8a79      	ldrh	r1, [r7, #18]
 8001202:	4837      	ldr	r0, [pc, #220]	; (80012e0 <lcd_ShowChar+0x198>)
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	4403      	add	r3, r0
 800120e:	440b      	add	r3, r1
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	75fb      	strb	r3, [r7, #23]
 8001214:	e00b      	b.n	800122e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001216:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800121a:	2b20      	cmp	r3, #32
 800121c:	d15a      	bne.n	80012d4 <lcd_ShowChar+0x18c>
 800121e:	78fa      	ldrb	r2, [r7, #3]
 8001220:	8a7b      	ldrh	r3, [r7, #18]
 8001222:	4930      	ldr	r1, [pc, #192]	; (80012e4 <lcd_ShowChar+0x19c>)
 8001224:	0192      	lsls	r2, r2, #6
 8001226:	440a      	add	r2, r1
 8001228:	4413      	add	r3, r2
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800122e:	2300      	movs	r3, #0
 8001230:	75bb      	strb	r3, [r7, #22]
 8001232:	e044      	b.n	80012be <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001234:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001238:	2b00      	cmp	r3, #0
 800123a:	d120      	bne.n	800127e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 800123c:	7dfa      	ldrb	r2, [r7, #23]
 800123e:	7dbb      	ldrb	r3, [r7, #22]
 8001240:	fa42 f303 	asr.w	r3, r2, r3
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d004      	beq.n	8001256 <lcd_ShowChar+0x10e>
 800124c:	883b      	ldrh	r3, [r7, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fdd2 	bl	8000df8 <LCD_WR_DATA>
 8001254:	e003      	b.n	800125e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001256:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fdcd 	bl	8000df8 <LCD_WR_DATA>
				m++;
 800125e:	7d7b      	ldrb	r3, [r7, #21]
 8001260:	3301      	adds	r3, #1
 8001262:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001264:	7d7b      	ldrb	r3, [r7, #21]
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	fbb3 f1f2 	udiv	r1, r3, r2
 800126c:	fb01 f202 	mul.w	r2, r1, r2
 8001270:	1a9b      	subs	r3, r3, r2
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d11f      	bne.n	80012b8 <lcd_ShowChar+0x170>
				{
					m=0;
 8001278:	2300      	movs	r3, #0
 800127a:	757b      	strb	r3, [r7, #21]
					break;
 800127c:	e022      	b.n	80012c4 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 800127e:	7dfa      	ldrb	r2, [r7, #23]
 8001280:	7dbb      	ldrb	r3, [r7, #22]
 8001282:	fa42 f303 	asr.w	r3, r2, r3
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <lcd_ShowChar+0x152>
 800128e:	883a      	ldrh	r2, [r7, #0]
 8001290:	88b9      	ldrh	r1, [r7, #4]
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe85 	bl	8000fa4 <lcd_DrawPoint>
				x++;
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	3301      	adds	r3, #1
 800129e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80012a0:	88fa      	ldrh	r2, [r7, #6]
 80012a2:	8a3b      	ldrh	r3, [r7, #16]
 80012a4:	1ad2      	subs	r2, r2, r3
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d105      	bne.n	80012b8 <lcd_ShowChar+0x170>
				{
					x=x0;
 80012ac:	8a3b      	ldrh	r3, [r7, #16]
 80012ae:	80fb      	strh	r3, [r7, #6]
					y++;
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	3301      	adds	r3, #1
 80012b4:	80bb      	strh	r3, [r7, #4]
					break;
 80012b6:	e005      	b.n	80012c4 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80012b8:	7dbb      	ldrb	r3, [r7, #22]
 80012ba:	3301      	adds	r3, #1
 80012bc:	75bb      	strb	r3, [r7, #22]
 80012be:	7dbb      	ldrb	r3, [r7, #22]
 80012c0:	2b07      	cmp	r3, #7
 80012c2:	d9b7      	bls.n	8001234 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 80012c4:	8a7b      	ldrh	r3, [r7, #18]
 80012c6:	3301      	adds	r3, #1
 80012c8:	827b      	strh	r3, [r7, #18]
 80012ca:	8a7a      	ldrh	r2, [r7, #18]
 80012cc:	89bb      	ldrh	r3, [r7, #12]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d380      	bcc.n	80011d4 <lcd_ShowChar+0x8c>
 80012d2:	e000      	b.n	80012d6 <lcd_ShowChar+0x18e>
		else return;
 80012d4:	bf00      	nop
				}
			}
		}
	}
}
 80012d6:	371c      	adds	r7, #28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd90      	pop	{r4, r7, pc}
 80012dc:	08009a8c 	.word	0x08009a8c
 80012e0:	0800a07c 	.word	0x0800a07c
 80012e4:	0800b24c 	.word	0x0800b24c

080012e8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	71fb      	strb	r3, [r7, #7]
 80012f4:	4613      	mov	r3, r2
 80012f6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80012fc:	e004      	b.n	8001308 <mypow+0x20>
 80012fe:	79fa      	ldrb	r2, [r7, #7]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	fb02 f303 	mul.w	r3, r2, r3
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	1e5a      	subs	r2, r3, #1
 800130c:	71ba      	strb	r2, [r7, #6]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f5      	bne.n	80012fe <mypow+0x16>
	return result;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af04      	add	r7, sp, #16
 8001326:	4604      	mov	r4, r0
 8001328:	4608      	mov	r0, r1
 800132a:	4611      	mov	r1, r2
 800132c:	461a      	mov	r2, r3
 800132e:	4623      	mov	r3, r4
 8001330:	80fb      	strh	r3, [r7, #6]
 8001332:	4603      	mov	r3, r0
 8001334:	80bb      	strh	r3, [r7, #4]
 8001336:	460b      	mov	r3, r1
 8001338:	807b      	strh	r3, [r7, #2]
 800133a:	4613      	mov	r3, r2
 800133c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800133e:	2300      	movs	r3, #0
 8001340:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001342:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001346:	085b      	lsrs	r3, r3, #1
 8001348:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	e059      	b.n	8001404 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001350:	887c      	ldrh	r4, [r7, #2]
 8001352:	787a      	ldrb	r2, [r7, #1]
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	3b01      	subs	r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4619      	mov	r1, r3
 8001360:	200a      	movs	r0, #10
 8001362:	f7ff ffc1 	bl	80012e8 <mypow>
 8001366:	4603      	mov	r3, r0
 8001368:	fbb4 f1f3 	udiv	r1, r4, r3
 800136c:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <lcd_ShowIntNum+0xf8>)
 800136e:	fba3 2301 	umull	r2, r3, r3, r1
 8001372:	08da      	lsrs	r2, r3, #3
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	1aca      	subs	r2, r1, r3
 800137e:	4613      	mov	r3, r2
 8001380:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d121      	bne.n	80013cc <lcd_ShowIntNum+0xac>
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	787b      	ldrb	r3, [r7, #1]
 800138c:	3b01      	subs	r3, #1
 800138e:	429a      	cmp	r2, r3
 8001390:	da1c      	bge.n	80013cc <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001392:	7b3b      	ldrb	r3, [r7, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d117      	bne.n	80013c8 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	b29a      	uxth	r2, r3
 800139c:	7b7b      	ldrb	r3, [r7, #13]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	fb12 f303 	smulbb	r3, r2, r3
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	4413      	add	r3, r2
 80013aa:	b298      	uxth	r0, r3
 80013ac:	8c3a      	ldrh	r2, [r7, #32]
 80013ae:	88b9      	ldrh	r1, [r7, #4]
 80013b0:	2300      	movs	r3, #0
 80013b2:	9302      	str	r3, [sp, #8]
 80013b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	4613      	mov	r3, r2
 80013c0:	2220      	movs	r2, #32
 80013c2:	f7ff fec1 	bl	8001148 <lcd_ShowChar>
				continue;
 80013c6:	e01a      	b.n	80013fe <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	7b7b      	ldrb	r3, [r7, #13]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	fb12 f303 	smulbb	r3, r2, r3
 80013d8:	b29a      	uxth	r2, r3
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	4413      	add	r3, r2
 80013de:	b298      	uxth	r0, r3
 80013e0:	7b3b      	ldrb	r3, [r7, #12]
 80013e2:	3330      	adds	r3, #48	; 0x30
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	8c3c      	ldrh	r4, [r7, #32]
 80013e8:	88b9      	ldrh	r1, [r7, #4]
 80013ea:	2300      	movs	r3, #0
 80013ec:	9302      	str	r3, [sp, #8]
 80013ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	4623      	mov	r3, r4
 80013fa:	f7ff fea5 	bl	8001148 <lcd_ShowChar>
	for(t=0;t<len;t++)
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	3301      	adds	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	787b      	ldrb	r3, [r7, #1]
 8001408:	429a      	cmp	r2, r3
 800140a:	d3a1      	bcc.n	8001350 <lcd_ShowIntNum+0x30>
	}
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	bd90      	pop	{r4, r7, pc}
 8001416:	bf00      	nop
 8001418:	cccccccd 	.word	0xcccccccd

0800141c <lcd_SetDir>:
}



void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d007      	beq.n	8001446 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <lcd_SetDir+0x44>)
 8001438:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800143c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <lcd_SetDir+0x44>)
 8001440:	22f0      	movs	r2, #240	; 0xf0
 8001442:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001444:	e006      	b.n	8001454 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <lcd_SetDir+0x44>)
 8001448:	22f0      	movs	r2, #240	; 0xf0
 800144a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <lcd_SetDir+0x44>)
 800144e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001452:	805a      	strh	r2, [r3, #2]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	200002b0 	.word	0x200002b0

08001464 <lcd_init>:


void lcd_init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146e:	48aa      	ldr	r0, [pc, #680]	; (8001718 <lcd_init+0x2b4>)
 8001470:	f003 fe1a 	bl	80050a8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001474:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001478:	f002 fd66 	bl	8003f48 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	48a5      	ldr	r0, [pc, #660]	; (8001718 <lcd_init+0x2b4>)
 8001484:	f003 fe10 	bl	80050a8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001488:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800148c:	f002 fd5c 	bl	8003f48 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff ffc3 	bl	800141c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001496:	20d3      	movs	r0, #211	; 0xd3
 8001498:	f7ff fc9e 	bl	8000dd8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 800149c:	f7ff fcbc 	bl	8000e18 <LCD_RD_DATA>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b9d      	ldr	r3, [pc, #628]	; (800171c <lcd_init+0x2b8>)
 80014a6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80014a8:	f7ff fcb6 	bl	8000e18 <LCD_RD_DATA>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b9a      	ldr	r3, [pc, #616]	; (800171c <lcd_init+0x2b8>)
 80014b2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80014b4:	f7ff fcb0 	bl	8000e18 <LCD_RD_DATA>
 80014b8:	4603      	mov	r3, r0
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b97      	ldr	r3, [pc, #604]	; (800171c <lcd_init+0x2b8>)
 80014be:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80014c0:	4b96      	ldr	r3, [pc, #600]	; (800171c <lcd_init+0x2b8>)
 80014c2:	889b      	ldrh	r3, [r3, #4]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b94      	ldr	r3, [pc, #592]	; (800171c <lcd_init+0x2b8>)
 80014ca:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80014cc:	f7ff fca4 	bl	8000e18 <LCD_RD_DATA>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b91      	ldr	r3, [pc, #580]	; (800171c <lcd_init+0x2b8>)
 80014d6:	889b      	ldrh	r3, [r3, #4]
 80014d8:	4313      	orrs	r3, r2
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4b8f      	ldr	r3, [pc, #572]	; (800171c <lcd_init+0x2b8>)
 80014de:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80014e0:	20cf      	movs	r0, #207	; 0xcf
 80014e2:	f7ff fc79 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff fc86 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80014ec:	20c1      	movs	r0, #193	; 0xc1
 80014ee:	f7ff fc83 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80014f2:	2030      	movs	r0, #48	; 0x30
 80014f4:	f7ff fc80 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80014f8:	20ed      	movs	r0, #237	; 0xed
 80014fa:	f7ff fc6d 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80014fe:	2064      	movs	r0, #100	; 0x64
 8001500:	f7ff fc7a 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001504:	2003      	movs	r0, #3
 8001506:	f7ff fc77 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800150a:	2012      	movs	r0, #18
 800150c:	f7ff fc74 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001510:	2081      	movs	r0, #129	; 0x81
 8001512:	f7ff fc71 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001516:	20e8      	movs	r0, #232	; 0xe8
 8001518:	f7ff fc5e 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800151c:	2085      	movs	r0, #133	; 0x85
 800151e:	f7ff fc6b 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001522:	2010      	movs	r0, #16
 8001524:	f7ff fc68 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001528:	207a      	movs	r0, #122	; 0x7a
 800152a:	f7ff fc65 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800152e:	20cb      	movs	r0, #203	; 0xcb
 8001530:	f7ff fc52 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001534:	2039      	movs	r0, #57	; 0x39
 8001536:	f7ff fc5f 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800153a:	202c      	movs	r0, #44	; 0x2c
 800153c:	f7ff fc5c 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff fc59 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001546:	2034      	movs	r0, #52	; 0x34
 8001548:	f7ff fc56 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800154c:	2002      	movs	r0, #2
 800154e:	f7ff fc53 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001552:	20f7      	movs	r0, #247	; 0xf7
 8001554:	f7ff fc40 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001558:	2020      	movs	r0, #32
 800155a:	f7ff fc4d 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800155e:	20ea      	movs	r0, #234	; 0xea
 8001560:	f7ff fc3a 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff fc47 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff fc44 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001570:	20c0      	movs	r0, #192	; 0xc0
 8001572:	f7ff fc31 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001576:	201b      	movs	r0, #27
 8001578:	f7ff fc3e 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 800157c:	20c1      	movs	r0, #193	; 0xc1
 800157e:	f7ff fc2b 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff fc38 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001588:	20c5      	movs	r0, #197	; 0xc5
 800158a:	f7ff fc25 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800158e:	2030      	movs	r0, #48	; 0x30
 8001590:	f7ff fc32 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001594:	2030      	movs	r0, #48	; 0x30
 8001596:	f7ff fc2f 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800159a:	20c7      	movs	r0, #199	; 0xc7
 800159c:	f7ff fc1c 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80015a0:	20b7      	movs	r0, #183	; 0xb7
 80015a2:	f7ff fc29 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80015a6:	2036      	movs	r0, #54	; 0x36
 80015a8:	f7ff fc16 	bl	8000dd8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80015ac:	2008      	movs	r0, #8
 80015ae:	f7ff fc23 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80015b2:	203a      	movs	r0, #58	; 0x3a
 80015b4:	f7ff fc10 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80015b8:	2055      	movs	r0, #85	; 0x55
 80015ba:	f7ff fc1d 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80015be:	20b1      	movs	r0, #177	; 0xb1
 80015c0:	f7ff fc0a 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff fc17 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80015ca:	201a      	movs	r0, #26
 80015cc:	f7ff fc14 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80015d0:	20b6      	movs	r0, #182	; 0xb6
 80015d2:	f7ff fc01 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80015d6:	200a      	movs	r0, #10
 80015d8:	f7ff fc0e 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80015dc:	20a2      	movs	r0, #162	; 0xa2
 80015de:	f7ff fc0b 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80015e2:	20f2      	movs	r0, #242	; 0xf2
 80015e4:	f7ff fbf8 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff fc05 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80015ee:	2026      	movs	r0, #38	; 0x26
 80015f0:	f7ff fbf2 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff fbff 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80015fa:	20e0      	movs	r0, #224	; 0xe0
 80015fc:	f7ff fbec 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001600:	200f      	movs	r0, #15
 8001602:	f7ff fbf9 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001606:	202a      	movs	r0, #42	; 0x2a
 8001608:	f7ff fbf6 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800160c:	2028      	movs	r0, #40	; 0x28
 800160e:	f7ff fbf3 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001612:	2008      	movs	r0, #8
 8001614:	f7ff fbf0 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001618:	200e      	movs	r0, #14
 800161a:	f7ff fbed 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800161e:	2008      	movs	r0, #8
 8001620:	f7ff fbea 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001624:	2054      	movs	r0, #84	; 0x54
 8001626:	f7ff fbe7 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800162a:	20a9      	movs	r0, #169	; 0xa9
 800162c:	f7ff fbe4 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001630:	2043      	movs	r0, #67	; 0x43
 8001632:	f7ff fbe1 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001636:	200a      	movs	r0, #10
 8001638:	f7ff fbde 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800163c:	200f      	movs	r0, #15
 800163e:	f7ff fbdb 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001642:	2000      	movs	r0, #0
 8001644:	f7ff fbd8 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff fbd5 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff fbd2 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001654:	2000      	movs	r0, #0
 8001656:	f7ff fbcf 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800165a:	20e1      	movs	r0, #225	; 0xe1
 800165c:	f7ff fbbc 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff fbc9 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001666:	2015      	movs	r0, #21
 8001668:	f7ff fbc6 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800166c:	2017      	movs	r0, #23
 800166e:	f7ff fbc3 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001672:	2007      	movs	r0, #7
 8001674:	f7ff fbc0 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001678:	2011      	movs	r0, #17
 800167a:	f7ff fbbd 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800167e:	2006      	movs	r0, #6
 8001680:	f7ff fbba 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001684:	202b      	movs	r0, #43	; 0x2b
 8001686:	f7ff fbb7 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800168a:	2056      	movs	r0, #86	; 0x56
 800168c:	f7ff fbb4 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001690:	203c      	movs	r0, #60	; 0x3c
 8001692:	f7ff fbb1 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001696:	2005      	movs	r0, #5
 8001698:	f7ff fbae 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800169c:	2010      	movs	r0, #16
 800169e:	f7ff fbab 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80016a2:	200f      	movs	r0, #15
 80016a4:	f7ff fba8 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80016a8:	203f      	movs	r0, #63	; 0x3f
 80016aa:	f7ff fba5 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80016ae:	203f      	movs	r0, #63	; 0x3f
 80016b0:	f7ff fba2 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80016b4:	200f      	movs	r0, #15
 80016b6:	f7ff fb9f 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80016ba:	202b      	movs	r0, #43	; 0x2b
 80016bc:	f7ff fb8c 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016c0:	2000      	movs	r0, #0
 80016c2:	f7ff fb99 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f7ff fb96 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f7ff fb93 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80016d2:	203f      	movs	r0, #63	; 0x3f
 80016d4:	f7ff fb90 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80016d8:	202a      	movs	r0, #42	; 0x2a
 80016da:	f7ff fb7d 	bl	8000dd8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80016de:	2000      	movs	r0, #0
 80016e0:	f7ff fb8a 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff fb87 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff fb84 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80016f0:	20ef      	movs	r0, #239	; 0xef
 80016f2:	f7ff fb81 	bl	8000df8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80016f6:	2011      	movs	r0, #17
 80016f8:	f7ff fb6e 	bl	8000dd8 <LCD_WR_REG>
	HAL_Delay(120);
 80016fc:	2078      	movs	r0, #120	; 0x78
 80016fe:	f002 fc23 	bl	8003f48 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001702:	2029      	movs	r0, #41	; 0x29
 8001704:	f7ff fb68 	bl	8000dd8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170e:	4804      	ldr	r0, [pc, #16]	; (8001720 <lcd_init+0x2bc>)
 8001710:	f003 fcca 	bl	80050a8 <HAL_GPIO_WritePin>
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40020800 	.word	0x40020800
 800171c:	200002b0 	.word	0x200002b0
 8001720:	40020000 	.word	0x40020000

08001724 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b08b      	sub	sp, #44	; 0x2c
 8001728:	af04      	add	r7, sp, #16
 800172a:	60ba      	str	r2, [r7, #8]
 800172c:	461a      	mov	r2, r3
 800172e:	4603      	mov	r3, r0
 8001730:	81fb      	strh	r3, [r7, #14]
 8001732:	460b      	mov	r3, r1
 8001734:	81bb      	strh	r3, [r7, #12]
 8001736:	4613      	mov	r3, r2
 8001738:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800173a:	89fb      	ldrh	r3, [r7, #14]
 800173c:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001742:	e048      	b.n	80017d6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001744:	7dfb      	ldrb	r3, [r7, #23]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d145      	bne.n	80017d6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800174a:	89fa      	ldrh	r2, [r7, #14]
 800174c:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <lcd_ShowStr+0xc4>)
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001756:	085b      	lsrs	r3, r3, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	1acb      	subs	r3, r1, r3
 800175c:	429a      	cmp	r2, r3
 800175e:	dc3f      	bgt.n	80017e0 <lcd_ShowStr+0xbc>
 8001760:	89ba      	ldrh	r2, [r7, #12]
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <lcd_ShowStr+0xc4>)
 8001764:	885b      	ldrh	r3, [r3, #2]
 8001766:	4619      	mov	r1, r3
 8001768:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800176c:	1acb      	subs	r3, r1, r3
 800176e:	429a      	cmp	r2, r3
 8001770:	dc36      	bgt.n	80017e0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b80      	cmp	r3, #128	; 0x80
 8001778:	d902      	bls.n	8001780 <lcd_ShowStr+0x5c>
 800177a:	2301      	movs	r3, #1
 800177c:	75fb      	strb	r3, [r7, #23]
 800177e:	e02a      	b.n	80017d6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b0d      	cmp	r3, #13
 8001786:	d10b      	bne.n	80017a0 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001788:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800178c:	b29a      	uxth	r2, r3
 800178e:	89bb      	ldrh	r3, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001794:	8abb      	ldrh	r3, [r7, #20]
 8001796:	81fb      	strh	r3, [r7, #14]
					str++;
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	3301      	adds	r3, #1
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	e017      	b.n	80017d0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	781a      	ldrb	r2, [r3, #0]
 80017a4:	88fc      	ldrh	r4, [r7, #6]
 80017a6:	89b9      	ldrh	r1, [r7, #12]
 80017a8:	89f8      	ldrh	r0, [r7, #14]
 80017aa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4623      	mov	r3, r4
 80017bc:	f7ff fcc4 	bl	8001148 <lcd_ShowChar>
					x+=sizey/2;
 80017c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	89fb      	ldrh	r3, [r7, #14]
 80017cc:	4413      	add	r3, r2
 80017ce:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3301      	adds	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1b2      	bne.n	8001744 <lcd_ShowStr+0x20>
 80017de:	e000      	b.n	80017e2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80017e0:	bf00      	nop
			}
		}
	}
}
 80017e2:	371c      	adds	r7, #28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	200002b0 	.word	0x200002b0

080017ec <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80017f0:	2201      	movs	r2, #1
 80017f2:	2140      	movs	r1, #64	; 0x40
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <led7_init+0x14>)
 80017f6:	f003 fc57 	bl	80050a8 <HAL_GPIO_WritePin>
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40021800 	.word	0x40021800

08001804 <led7_Scan>:

void led7_Scan(){
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001808:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <led7_Scan+0x104>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <led7_Scan+0x104>)
 8001812:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001814:	4b3d      	ldr	r3, [pc, #244]	; (800190c <led7_Scan+0x108>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a3d      	ldr	r2, [pc, #244]	; (8001910 <led7_Scan+0x10c>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	b21a      	sxth	r2, r3
 8001820:	4b39      	ldr	r3, [pc, #228]	; (8001908 <led7_Scan+0x104>)
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	b21b      	sxth	r3, r3
 8001826:	4313      	orrs	r3, r2
 8001828:	b21b      	sxth	r3, r3
 800182a:	b29a      	uxth	r2, r3
 800182c:	4b36      	ldr	r3, [pc, #216]	; (8001908 <led7_Scan+0x104>)
 800182e:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001830:	4b36      	ldr	r3, [pc, #216]	; (800190c <led7_Scan+0x108>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d847      	bhi.n	80018c8 <led7_Scan+0xc4>
 8001838:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <led7_Scan+0x3c>)
 800183a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183e:	bf00      	nop
 8001840:	08001851 	.word	0x08001851
 8001844:	0800186f 	.word	0x0800186f
 8001848:	0800188d 	.word	0x0800188d
 800184c:	080018ab 	.word	0x080018ab
	case 0:
		spi_buffer |= 0x00b0;
 8001850:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <led7_Scan+0x104>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <led7_Scan+0x104>)
 800185c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <led7_Scan+0x104>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <led7_Scan+0x104>)
 800186a:	801a      	strh	r2, [r3, #0]
		break;
 800186c:	e02d      	b.n	80018ca <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <led7_Scan+0x104>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001876:	b29a      	uxth	r2, r3
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <led7_Scan+0x104>)
 800187a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800187c:	4b22      	ldr	r3, [pc, #136]	; (8001908 <led7_Scan+0x104>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	f023 0320 	bic.w	r3, r3, #32
 8001884:	b29a      	uxth	r2, r3
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <led7_Scan+0x104>)
 8001888:	801a      	strh	r2, [r3, #0]
		break;
 800188a:	e01e      	b.n	80018ca <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <led7_Scan+0x104>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001894:	b29a      	uxth	r2, r3
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <led7_Scan+0x104>)
 8001898:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800189a:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <led7_Scan+0x104>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	f023 0310 	bic.w	r3, r3, #16
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <led7_Scan+0x104>)
 80018a6:	801a      	strh	r2, [r3, #0]
		break;
 80018a8:	e00f      	b.n	80018ca <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80018aa:	4b17      	ldr	r3, [pc, #92]	; (8001908 <led7_Scan+0x104>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <led7_Scan+0x104>)
 80018b6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <led7_Scan+0x104>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <led7_Scan+0x104>)
 80018c4:	801a      	strh	r2, [r3, #0]
		break;
 80018c6:	e000      	b.n	80018ca <led7_Scan+0xc6>
	default:
		break;
 80018c8:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <led7_Scan+0x108>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	425a      	negs	r2, r3
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	f002 0203 	and.w	r2, r2, #3
 80018da:	bf58      	it	pl
 80018dc:	4253      	negpl	r3, r2
 80018de:	4a0b      	ldr	r2, [pc, #44]	; (800190c <led7_Scan+0x108>)
 80018e0:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2140      	movs	r1, #64	; 0x40
 80018e6:	480b      	ldr	r0, [pc, #44]	; (8001914 <led7_Scan+0x110>)
 80018e8:	f003 fbde 	bl	80050a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80018ec:	2301      	movs	r3, #1
 80018ee:	2202      	movs	r2, #2
 80018f0:	4905      	ldr	r1, [pc, #20]	; (8001908 <led7_Scan+0x104>)
 80018f2:	4809      	ldr	r0, [pc, #36]	; (8001918 <led7_Scan+0x114>)
 80018f4:	f004 fa57 	bl	8005da6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	2140      	movs	r1, #64	; 0x40
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <led7_Scan+0x110>)
 80018fe:	f003 fbd3 	bl	80050a8 <HAL_GPIO_WritePin>
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000000e 	.word	0x2000000e
 800190c:	200002b8 	.word	0x200002b8
 8001910:	20000000 	.word	0x20000000
 8001914:	40021800 	.word	0x40021800
 8001918:	200005a0 	.word	0x200005a0

0800191c <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	4613      	mov	r3, r2
 8001928:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	db0e      	blt.n	800194e <led7_SetDigit+0x32>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b09      	cmp	r3, #9
 8001934:	dc0b      	bgt.n	800194e <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <led7_SetDigit+0x40>)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	781a      	ldrb	r2, [r3, #0]
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	b2d9      	uxtb	r1, r3
 8001944:	4a06      	ldr	r2, [pc, #24]	; (8001960 <led7_SetDigit+0x44>)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	4413      	add	r3, r2
 800194a:	460a      	mov	r2, r1
 800194c:	701a      	strb	r2, [r3, #0]
	}
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000004 	.word	0x20000004
 8001960:	20000000 	.word	0x20000000

08001964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001968:	f002 fa7c 	bl	8003e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800196c:	f000 f82e 	bl	80019cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001970:	f7ff f882 	bl	8000a78 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001974:	f001 fffc 	bl	8003970 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001978:	f001 fdda 	bl	8003530 <MX_SPI1_Init>
  MX_FSMC_Init();
 800197c:	f7fe ffac 	bl	80008d8 <MX_FSMC_Init>
  MX_I2C1_Init();
 8001980:	f7ff f9b4 	bl	8000cec <MX_I2C1_Init>
  MX_TIM13_Init();
 8001984:	f002 f840 	bl	8003a08 <MX_TIM13_Init>
  MX_DMA_Init();
 8001988:	f7fe ff86 	bl	8000898 <MX_DMA_Init>
  MX_ADC1_Init();
 800198c:	f7fe fdee 	bl	800056c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001990:	f001 ff9e 	bl	80038d0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001994:	f002 f986 	bl	8003ca4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001998:	f002 f95a 	bl	8003c50 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 800199c:	f000 f880 	bl	8001aa0 <system_init>
  lcd_Clear(WHITE);
 80019a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019a4:	f7ff fa96 	bl	8000ed4 <lcd_Clear>
  snake_init();
 80019a8:	f000 f8dc 	bl	8001b64 <snake_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1)
    {
  	  while(!flag_timer2);
 80019ac:	bf00      	nop
 80019ae:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <main+0x64>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0fb      	beq.n	80019ae <main+0x4a>
	  flag_timer2 = 0;
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <main+0x64>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 80019bc:	f7fe ff00 	bl	80007c0 <button_Scan>
//	  test_button();
//	  test_7seg();
	  test_lcd();
 80019c0:	f000 f88e 	bl	8001ae0 <test_lcd>
  	  while(!flag_timer2);
 80019c4:	e7f2      	b.n	80019ac <main+0x48>
 80019c6:	bf00      	nop
 80019c8:	2000059a 	.word	0x2000059a

080019cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b094      	sub	sp, #80	; 0x50
 80019d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019d2:	f107 0320 	add.w	r3, r7, #32
 80019d6:	2230      	movs	r2, #48	; 0x30
 80019d8:	2100      	movs	r1, #0
 80019da:	4618      	mov	r0, r3
 80019dc:	f007 f983 	bl	8008ce6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <SystemClock_Config+0xcc>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	4a27      	ldr	r2, [pc, #156]	; (8001a98 <SystemClock_Config+0xcc>)
 80019fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <SystemClock_Config+0xcc>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <SystemClock_Config+0xd0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a21      	ldr	r2, [pc, #132]	; (8001a9c <SystemClock_Config+0xd0>)
 8001a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <SystemClock_Config+0xd0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a30:	2310      	movs	r3, #16
 8001a32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a34:	2302      	movs	r3, #2
 8001a36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a40:	23a8      	movs	r3, #168	; 0xa8
 8001a42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4c:	f107 0320 	add.w	r3, r7, #32
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 fc87 	bl	8005364 <HAL_RCC_OscConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a5c:	f000 f848 	bl	8001af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a60:	230f      	movs	r3, #15
 8001a62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a64:	2302      	movs	r3, #2
 8001a66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001a72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	2105      	movs	r1, #5
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 fee8 	bl	8005854 <HAL_RCC_ClockConfig>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a8a:	f000 f831 	bl	8001af0 <Error_Handler>
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3750      	adds	r7, #80	; 0x50
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40007000 	.word	0x40007000

08001aa0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2120      	movs	r1, #32
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <system_init+0x3c>)
 8001aaa:	f003 fafd 	bl	80050a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2140      	movs	r1, #64	; 0x40
 8001ab2:	480a      	ldr	r0, [pc, #40]	; (8001adc <system_init+0x3c>)
 8001ab4:	f003 faf8 	bl	80050a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2110      	movs	r1, #16
 8001abc:	4807      	ldr	r0, [pc, #28]	; (8001adc <system_init+0x3c>)
 8001abe:	f003 faf3 	bl	80050a8 <HAL_GPIO_WritePin>
	  timer_init();
 8001ac2:	f001 fce1 	bl	8003488 <timer_init>
	  led7_init();
 8001ac6:	f7ff fe91 	bl	80017ec <led7_init>
	  button_init();
 8001aca:	f7fe fe6d 	bl	80007a8 <button_init>
	  lcd_init();
 8001ace:	f7ff fcc9 	bl	8001464 <lcd_init>
	  setTimer2(50);
 8001ad2:	2032      	movs	r0, #50	; 0x32
 8001ad4:	f001 fce6 	bl	80034a4 <setTimer2>
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000

08001ae0 <test_lcd>:
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
			//di chuyển
		}
	}
}
void test_lcd(){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
//	snake_init();
	wall();
 8001ae4:	f001 fcb2 	bl	800344c <wall>
	move();
 8001ae8:	f001 fbc2 	bl	8003270 <move>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <Error_Handler+0x8>

08001afa <random_eat>:
uint8_t flag1 = 0;
uint8_t flag2 = 0;
int16_t x1 = 160, y1 = 160, x2 = 170, y2 = 170;
enum state firstState = goDown;
enum state prevState = goRight;
uint16_t random_eat(uint16_t minN, uint16_t maxN) {
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	460a      	mov	r2, r1
 8001b04:	80fb      	strh	r3, [r7, #6]
 8001b06:	4613      	mov	r3, r2
 8001b08:	80bb      	strh	r3, [r7, #4]
	return minN + rand()%(maxN + 1 - minN);
 8001b0a:	f006 ffa9 	bl	8008a60 <rand>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	1c59      	adds	r1, r3, #1
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	1acb      	subs	r3, r1, r3
 8001b18:	fb92 f1f3 	sdiv	r1, r2, r3
 8001b1c:	fb01 f303 	mul.w	r3, r1, r3
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	4413      	add	r3, r2
 8001b28:	b29b      	uxth	r3, r3
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <creatWall>:
        {190, 220, 200, 285},    // Wall 6
        {130, 275, 200, 285},
		{90, 150, 140, 160},
		{115, 150, 125, 200}
    };
void creatWall(int32_t X1, int32_t Y1, int32_t X2, int32_t Y2) {
 8001b32:	b590      	push	{r4, r7, lr}
 8001b34:	b087      	sub	sp, #28
 8001b36:	af02      	add	r7, sp, #8
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	603b      	str	r3, [r7, #0]
    // Replace this with the appropriate function in your graphics library
    lcd_Fill(X1, Y1, X2, Y2, MAGENTA);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	b298      	uxth	r0, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	b299      	uxth	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8001b54:	9400      	str	r4, [sp, #0]
 8001b56:	f7ff f9ef 	bl	8000f38 <lcd_Fill>
}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd90      	pop	{r4, r7, pc}
	...

08001b64 <snake_init>:
void snake_init() {
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af02      	add	r7, sp, #8
	lcd_Fill(x1, y1, x2, y2, BLUE);
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <snake_init+0x88>)
 8001b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b70:	b298      	uxth	r0, r3
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <snake_init+0x8c>)
 8001b74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b78:	b299      	uxth	r1, r3
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <snake_init+0x90>)
 8001b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <snake_init+0x94>)
 8001b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	241f      	movs	r4, #31
 8001b8c:	9400      	str	r4, [sp, #0]
 8001b8e:	f7ff f9d3 	bl	8000f38 <lcd_Fill>
	 //lcd_Fill(55, 75, 56, 150, RED);
	for (int8_t i = 0; i < 9; ++i) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	71fb      	strb	r3, [r7, #7]
 8001b96:	e020      	b.n	8001bda <snake_init+0x76>
	       creatWall(obstacles[i].x1, obstacles[i].y1, obstacles[i].x2, obstacles[i].y2);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4a17      	ldr	r2, [pc, #92]	; (8001bfc <snake_init+0x98>)
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	4413      	add	r3, r2
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <snake_init+0x98>)
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	6819      	ldr	r1, [r3, #0]
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	4a11      	ldr	r2, [pc, #68]	; (8001bfc <snake_init+0x98>)
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	4413      	add	r3, r2
 8001bbc:	3308      	adds	r3, #8
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	4c0d      	ldr	r4, [pc, #52]	; (8001bfc <snake_init+0x98>)
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4423      	add	r3, r4
 8001bca:	330c      	adds	r3, #12
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f7ff ffb0 	bl	8001b32 <creatWall>
	for (int8_t i = 0; i < 9; ++i) {
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	71fb      	strb	r3, [r7, #7]
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	ddda      	ble.n	8001b98 <snake_init+0x34>
	    }
}
 8001be2:	bf00      	nop
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	20000016 	.word	0x20000016
 8001bf0:	20000018 	.word	0x20000018
 8001bf4:	2000001a 	.word	0x2000001a
 8001bf8:	2000001c 	.word	0x2000001c
 8001bfc:	20000028 	.word	0x20000028

08001c00 <display>:
void display() {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af04      	add	r7, sp, #16
	lcd_ShowStr(50,30,"Game Over!!!",WHITE,BLACK,24,0);
 8001c06:	2300      	movs	r3, #0
 8001c08:	9302      	str	r3, [sp, #8]
 8001c0a:	2318      	movs	r3, #24
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c16:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <display+0x50>)
 8001c18:	211e      	movs	r1, #30
 8001c1a:	2032      	movs	r0, #50	; 0x32
 8001c1c:	f7ff fd82 	bl	8001724 <lcd_ShowStr>
	HAL_Delay(1000);
 8001c20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c24:	f002 f990 	bl	8003f48 <HAL_Delay>
	lcd_ShowStr(50,30,"Game Over!!!",BLUE,YELLOW,24,0);
 8001c28:	2300      	movs	r3, #0
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	2318      	movs	r3, #24
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	231f      	movs	r3, #31
 8001c38:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <display+0x50>)
 8001c3a:	211e      	movs	r1, #30
 8001c3c:	2032      	movs	r0, #50	; 0x32
 8001c3e:	f7ff fd71 	bl	8001724 <lcd_ShowStr>
	HAL_Delay(1000);
 8001c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c46:	f002 f97f 	bl	8003f48 <HAL_Delay>
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	08009a44 	.word	0x08009a44

08001c54 <game_over>:
void game_over(){
 8001c54:	b590      	push	{r4, r7, lr}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af04      	add	r7, sp, #16
//	lcd_ShowStr(50,30,"Game Over!!!",WHITE,BLACK,24,0);
//	lcd_ShowStr(50,30,"Game Over!!!",WHITE,YELLOW,24,0);
	lcd_ShowStr(25,120,"NGU!",WHITE,RED,24,0);
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9302      	str	r3, [sp, #8]
 8001c5e:	2318      	movs	r3, #24
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c6c:	4a2f      	ldr	r2, [pc, #188]	; (8001d2c <game_over+0xd8>)
 8001c6e:	2178      	movs	r1, #120	; 0x78
 8001c70:	2019      	movs	r0, #25
 8001c72:	f7ff fd57 	bl	8001724 <lcd_ShowStr>
	lcd_ShowStr(10,200,"DIEM SO CUA BAN LA: ",BLUE,WHITE,24,0);
 8001c76:	2300      	movs	r3, #0
 8001c78:	9302      	str	r3, [sp, #8]
 8001c7a:	2318      	movs	r3, #24
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	231f      	movs	r3, #31
 8001c86:	4a2a      	ldr	r2, [pc, #168]	; (8001d30 <game_over+0xdc>)
 8001c88:	21c8      	movs	r1, #200	; 0xc8
 8001c8a:	200a      	movs	r0, #10
 8001c8c:	f7ff fd4a 	bl	8001724 <lcd_ShowStr>
	if(count < 10)
 8001c90:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <game_over+0xe0>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	2b09      	cmp	r3, #9
 8001c96:	d80e      	bhi.n	8001cb6 <game_over+0x62>
		lcd_ShowIntNum(210,200,count,1,BLUE,WHITE,24);
 8001c98:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <game_over+0xe0>)
 8001c9a:	881a      	ldrh	r2, [r3, #0]
 8001c9c:	2318      	movs	r3, #24
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	231f      	movs	r3, #31
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2301      	movs	r3, #1
 8001cac:	21c8      	movs	r1, #200	; 0xc8
 8001cae:	20d2      	movs	r0, #210	; 0xd2
 8001cb0:	f7ff fb36 	bl	8001320 <lcd_ShowIntNum>
 8001cb4:	e00d      	b.n	8001cd2 <game_over+0x7e>
	else
		lcd_ShowIntNum(210,200,count,2,BLUE,WHITE,24);
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <game_over+0xe0>)
 8001cb8:	881a      	ldrh	r2, [r3, #0]
 8001cba:	2318      	movs	r3, #24
 8001cbc:	9302      	str	r3, [sp, #8]
 8001cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	231f      	movs	r3, #31
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2302      	movs	r3, #2
 8001cca:	21c8      	movs	r1, #200	; 0xc8
 8001ccc:	20d2      	movs	r0, #210	; 0xd2
 8001cce:	f7ff fb27 	bl	8001320 <lcd_ShowIntNum>
	lcd_Fill(x1, y1, x2, y2, WHITE);
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <game_over+0xe4>)
 8001cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd8:	b298      	uxth	r0, r3
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <game_over+0xe8>)
 8001cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce0:	b299      	uxth	r1, r3
 8001ce2:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <game_over+0xec>)
 8001ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <game_over+0xf0>)
 8001cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001cf6:	9400      	str	r4, [sp, #0]
 8001cf8:	f7ff f91e 	bl	8000f38 <lcd_Fill>
	lcd_Fill(x_food, y_food, x_food+5, y_food+5, WHITE);
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <game_over+0xf4>)
 8001cfe:	8818      	ldrh	r0, [r3, #0]
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <game_over+0xf8>)
 8001d02:	8819      	ldrh	r1, [r3, #0]
 8001d04:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <game_over+0xf4>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	3305      	adds	r3, #5
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <game_over+0xf8>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	3305      	adds	r3, #5
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001d18:	9400      	str	r4, [sp, #0]
 8001d1a:	f7ff f90d 	bl	8000f38 <lcd_Fill>
	display();
 8001d1e:	f7ff ff6f 	bl	8001c00 <display>
}
 8001d22:	bf00      	nop
 8001d24:	3704      	adds	r7, #4
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd90      	pop	{r4, r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	08009a54 	.word	0x08009a54
 8001d30:	08009a5c 	.word	0x08009a5c
 8001d34:	20000598 	.word	0x20000598
 8001d38:	20000016 	.word	0x20000016
 8001d3c:	20000018 	.word	0x20000018
 8001d40:	2000001a 	.word	0x2000001a
 8001d44:	2000001c 	.word	0x2000001c
 8001d48:	20000594 	.word	0x20000594
 8001d4c:	20000596 	.word	0x20000596

08001d50 <checkBite>:
void checkBite (int16_t X1 , int16_t Y1, int16_t X2, int16_t Y2,int8_t tail) {
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	4604      	mov	r4, r0
 8001d58:	4608      	mov	r0, r1
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4623      	mov	r3, r4
 8001d60:	80fb      	strh	r3, [r7, #6]
 8001d62:	4603      	mov	r3, r0
 8001d64:	80bb      	strh	r3, [r7, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	807b      	strh	r3, [r7, #2]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	803b      	strh	r3, [r7, #0]
	for (int8_t i = tail; i < currentIndex; i++) {
 8001d6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e0c3      	b.n	8001efe <checkBite+0x1ae>
		if (X1 >= allPath[i].x1 && X1 <= allPath[i].x2) {
 8001d76:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001d7a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001d7e:	4865      	ldr	r0, [pc, #404]	; (8001f14 <checkBite+0x1c4>)
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4403      	add	r3, r0
 8001d8a:	3308      	adds	r3, #8
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4299      	cmp	r1, r3
 8001d90:	db54      	blt.n	8001e3c <checkBite+0xec>
 8001d92:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001d96:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001d9a:	485e      	ldr	r0, [pc, #376]	; (8001f14 <checkBite+0x1c4>)
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4403      	add	r3, r0
 8001da6:	330c      	adds	r3, #12
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4299      	cmp	r1, r3
 8001dac:	dc46      	bgt.n	8001e3c <checkBite+0xec>
			if (Y1 >= allPath[i].y1 && Y1 <= allPath[i].y2) {
 8001dae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001db2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001db6:	4857      	ldr	r0, [pc, #348]	; (8001f14 <checkBite+0x1c4>)
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4403      	add	r3, r0
 8001dc2:	3310      	adds	r3, #16
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4299      	cmp	r1, r3
 8001dc8:	db10      	blt.n	8001dec <checkBite+0x9c>
 8001dca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001dce:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001dd2:	4850      	ldr	r0, [pc, #320]	; (8001f14 <checkBite+0x1c4>)
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4403      	add	r3, r0
 8001dde:	3314      	adds	r3, #20
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4299      	cmp	r1, r3
 8001de4:	dc02      	bgt.n	8001dec <checkBite+0x9c>
				game_over();
 8001de6:	f7ff ff35 	bl	8001c54 <game_over>
				return;
 8001dea:	e08f      	b.n	8001f0c <checkBite+0x1bc>
			} else if (Y2 >= allPath[i].y1 && Y2 <= allPath[i].y2) {
 8001dec:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001df0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001df4:	4847      	ldr	r0, [pc, #284]	; (8001f14 <checkBite+0x1c4>)
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4403      	add	r3, r0
 8001e00:	3310      	adds	r3, #16
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4299      	cmp	r1, r3
 8001e06:	db73      	blt.n	8001ef0 <checkBite+0x1a0>
 8001e08:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001e0c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e10:	4840      	ldr	r0, [pc, #256]	; (8001f14 <checkBite+0x1c4>)
 8001e12:	4613      	mov	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4403      	add	r3, r0
 8001e1c:	3314      	adds	r3, #20
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4299      	cmp	r1, r3
 8001e22:	dc65      	bgt.n	8001ef0 <checkBite+0x1a0>
				lcd_Fill(0, Y1, X2, Y2, RED);
 8001e24:	88b9      	ldrh	r1, [r7, #4]
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	883b      	ldrh	r3, [r7, #0]
 8001e2a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001e2e:	9000      	str	r0, [sp, #0]
 8001e30:	2000      	movs	r0, #0
 8001e32:	f7ff f881 	bl	8000f38 <lcd_Fill>
				game_over();
 8001e36:	f7ff ff0d 	bl	8001c54 <game_over>
				return;
 8001e3a:	e067      	b.n	8001f0c <checkBite+0x1bc>
			}
		} else if (X2 >= allPath[i].x1 && X2 <= allPath[i].x2) {
 8001e3c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001e40:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e44:	4833      	ldr	r0, [pc, #204]	; (8001f14 <checkBite+0x1c4>)
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4403      	add	r3, r0
 8001e50:	3308      	adds	r3, #8
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4299      	cmp	r1, r3
 8001e56:	db4c      	blt.n	8001ef2 <checkBite+0x1a2>
 8001e58:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001e5c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e60:	482c      	ldr	r0, [pc, #176]	; (8001f14 <checkBite+0x1c4>)
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4403      	add	r3, r0
 8001e6c:	330c      	adds	r3, #12
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4299      	cmp	r1, r3
 8001e72:	dc3e      	bgt.n	8001ef2 <checkBite+0x1a2>
			if (Y1 >= allPath[i].y1 && Y1 <= allPath[i].y2) {
 8001e74:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e78:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e7c:	4825      	ldr	r0, [pc, #148]	; (8001f14 <checkBite+0x1c4>)
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4403      	add	r3, r0
 8001e88:	3310      	adds	r3, #16
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4299      	cmp	r1, r3
 8001e8e:	db10      	blt.n	8001eb2 <checkBite+0x162>
 8001e90:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e94:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001e98:	481e      	ldr	r0, [pc, #120]	; (8001f14 <checkBite+0x1c4>)
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4403      	add	r3, r0
 8001ea4:	3314      	adds	r3, #20
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4299      	cmp	r1, r3
 8001eaa:	dc02      	bgt.n	8001eb2 <checkBite+0x162>
				//lcd_Fill(0, Y1, X2, Y2, RED);
				game_over();
 8001eac:	f7ff fed2 	bl	8001c54 <game_over>
				return;
 8001eb0:	e02c      	b.n	8001f0c <checkBite+0x1bc>
			} else if (Y2 >= allPath[i].y1 && Y2 <= allPath[i].y2) {
 8001eb2:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001eb6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001eba:	4816      	ldr	r0, [pc, #88]	; (8001f14 <checkBite+0x1c4>)
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4403      	add	r3, r0
 8001ec6:	3310      	adds	r3, #16
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4299      	cmp	r1, r3
 8001ecc:	db11      	blt.n	8001ef2 <checkBite+0x1a2>
 8001ece:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001ed2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001ed6:	480f      	ldr	r0, [pc, #60]	; (8001f14 <checkBite+0x1c4>)
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4413      	add	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4403      	add	r3, r0
 8001ee2:	3314      	adds	r3, #20
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4299      	cmp	r1, r3
 8001ee8:	dc03      	bgt.n	8001ef2 <checkBite+0x1a2>
				//lcd_Fill(0, Y1, X2, Y2, RED);
				game_over();
 8001eea:	f7ff feb3 	bl	8001c54 <game_over>
				return;
 8001eee:	e00d      	b.n	8001f0c <checkBite+0x1bc>
			if (Y1 >= allPath[i].y1 && Y1 <= allPath[i].y2) {
 8001ef0:	bf00      	nop
	for (int8_t i = tail; i < currentIndex; i++) {
 8001ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	3301      	adds	r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	73fb      	strb	r3, [r7, #15]
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <checkBite+0x1c8>)
 8001f04:	7812      	ldrb	r2, [r2, #0]
 8001f06:	4293      	cmp	r3, r2
 8001f08:	f6ff af35 	blt.w	8001d76 <checkBite+0x26>
			}
		}
	}
}
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd90      	pop	{r4, r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200002c0 	.word	0x200002c0
 8001f18:	200002bd 	.word	0x200002bd

08001f1c <snakeSelfBite>:
void snakeSelfBite (int16_t X1 , int16_t Y1, int16_t X2, int16_t Y2,int8_t flag){
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	4604      	mov	r4, r0
 8001f24:	4608      	mov	r0, r1
 8001f26:	4611      	mov	r1, r2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4623      	mov	r3, r4
 8001f2c:	80fb      	strh	r3, [r7, #6]
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80bb      	strh	r3, [r7, #4]
 8001f32:	460b      	mov	r3, r1
 8001f34:	807b      	strh	r3, [r7, #2]
 8001f36:	4613      	mov	r3, r2
 8001f38:	803b      	strh	r3, [r7, #0]
	if (flag == 1) checkBite(X1, Y1, X2, Y2, 0);
 8001f3a:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d10c      	bne.n	8001f5c <snakeSelfBite+0x40>
 8001f42:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f46:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001f4a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001f4e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001f52:	2400      	movs	r4, #0
 8001f54:	9400      	str	r4, [sp, #0]
 8001f56:	f7ff fefb 	bl	8001d50 <checkBite>
	else {
		if (currentIndex >= 4) checkBite(X1, Y1, X2, Y2, 3);
	}

}
 8001f5a:	e00f      	b.n	8001f7c <snakeSelfBite+0x60>
		if (currentIndex >= 4) checkBite(X1, Y1, X2, Y2, 3);
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <snakeSelfBite+0x68>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d90b      	bls.n	8001f7c <snakeSelfBite+0x60>
 8001f64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f68:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001f6c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001f70:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001f74:	2403      	movs	r4, #3
 8001f76:	9400      	str	r4, [sp, #0]
 8001f78:	f7ff feea 	bl	8001d50 <checkBite>
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd90      	pop	{r4, r7, pc}
 8001f84:	200002bd 	.word	0x200002bd

08001f88 <moveWall>:
void moveWall() {
 8001f88:	b590      	push	{r4, r7, lr}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af02      	add	r7, sp, #8
	if (flag1 == 0) {
 8001f8e:	4b7c      	ldr	r3, [pc, #496]	; (8002180 <moveWall+0x1f8>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d14a      	bne.n	800202c <moveWall+0xa4>
		lcd_Fill(obstacles[7].x2-2, obstacles[7].y1, obstacles[7].x2, obstacles[7].y2, WHITE);
 8001f96:	4b7b      	ldr	r3, [pc, #492]	; (8002184 <moveWall+0x1fc>)
 8001f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b02      	subs	r3, #2
 8001f9e:	b298      	uxth	r0, r3
 8001fa0:	4b78      	ldr	r3, [pc, #480]	; (8002184 <moveWall+0x1fc>)
 8001fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa4:	b299      	uxth	r1, r3
 8001fa6:	4b77      	ldr	r3, [pc, #476]	; (8002184 <moveWall+0x1fc>)
 8001fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b75      	ldr	r3, [pc, #468]	; (8002184 <moveWall+0x1fc>)
 8001fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001fb6:	9400      	str	r4, [sp, #0]
 8001fb8:	f7fe ffbe 	bl	8000f38 <lcd_Fill>
		obstacles[7].x1-=2;
 8001fbc:	4b71      	ldr	r3, [pc, #452]	; (8002184 <moveWall+0x1fc>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	3b02      	subs	r3, #2
 8001fc2:	4a70      	ldr	r2, [pc, #448]	; (8002184 <moveWall+0x1fc>)
 8001fc4:	6713      	str	r3, [r2, #112]	; 0x70
		obstacles[7].x2-=2;
 8001fc6:	4b6f      	ldr	r3, [pc, #444]	; (8002184 <moveWall+0x1fc>)
 8001fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fca:	3b02      	subs	r3, #2
 8001fcc:	4a6d      	ldr	r2, [pc, #436]	; (8002184 <moveWall+0x1fc>)
 8001fce:	6793      	str	r3, [r2, #120]	; 0x78
		lcd_Fill(obstacles[7].x1, obstacles[7].y1, obstacles[7].x1+2, obstacles[7].y2, MAGENTA);
 8001fd0:	4b6c      	ldr	r3, [pc, #432]	; (8002184 <moveWall+0x1fc>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	b298      	uxth	r0, r3
 8001fd6:	4b6b      	ldr	r3, [pc, #428]	; (8002184 <moveWall+0x1fc>)
 8001fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fda:	b299      	uxth	r1, r3
 8001fdc:	4b69      	ldr	r3, [pc, #420]	; (8002184 <moveWall+0x1fc>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	4b67      	ldr	r3, [pc, #412]	; (8002184 <moveWall+0x1fc>)
 8001fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8001ff0:	9400      	str	r4, [sp, #0]
 8001ff2:	f7fe ffa1 	bl	8000f38 <lcd_Fill>

		snakeSelfBite(obstacles[7].x1,obstacles[7].y1,obstacles[7].x1+2,obstacles[7].y2, 1);
 8001ff6:	4b63      	ldr	r3, [pc, #396]	; (8002184 <moveWall+0x1fc>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	b218      	sxth	r0, r3
 8001ffc:	4b61      	ldr	r3, [pc, #388]	; (8002184 <moveWall+0x1fc>)
 8001ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002000:	b219      	sxth	r1, r3
 8002002:	4b60      	ldr	r3, [pc, #384]	; (8002184 <moveWall+0x1fc>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	b29b      	uxth	r3, r3
 8002008:	3302      	adds	r3, #2
 800200a:	b29b      	uxth	r3, r3
 800200c:	b21a      	sxth	r2, r3
 800200e:	4b5d      	ldr	r3, [pc, #372]	; (8002184 <moveWall+0x1fc>)
 8002010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002012:	b21b      	sxth	r3, r3
 8002014:	2401      	movs	r4, #1
 8002016:	9400      	str	r4, [sp, #0]
 8002018:	f7ff ff80 	bl	8001f1c <snakeSelfBite>
		if (obstacles[7].x1 <= 10) flag1 = 1;
 800201c:	4b59      	ldr	r3, [pc, #356]	; (8002184 <moveWall+0x1fc>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002020:	2b0a      	cmp	r3, #10
 8002022:	dc4d      	bgt.n	80020c0 <moveWall+0x138>
 8002024:	4b56      	ldr	r3, [pc, #344]	; (8002180 <moveWall+0x1f8>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	e049      	b.n	80020c0 <moveWall+0x138>
	} else {
		lcd_Fill(obstacles[7].x1, obstacles[7].y1, obstacles[7].x1+2, obstacles[7].y2, WHITE);
 800202c:	4b55      	ldr	r3, [pc, #340]	; (8002184 <moveWall+0x1fc>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	b298      	uxth	r0, r3
 8002032:	4b54      	ldr	r3, [pc, #336]	; (8002184 <moveWall+0x1fc>)
 8002034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002036:	b299      	uxth	r1, r3
 8002038:	4b52      	ldr	r3, [pc, #328]	; (8002184 <moveWall+0x1fc>)
 800203a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203c:	b29b      	uxth	r3, r3
 800203e:	3302      	adds	r3, #2
 8002040:	b29a      	uxth	r2, r3
 8002042:	4b50      	ldr	r3, [pc, #320]	; (8002184 <moveWall+0x1fc>)
 8002044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002046:	b29b      	uxth	r3, r3
 8002048:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800204c:	9400      	str	r4, [sp, #0]
 800204e:	f7fe ff73 	bl	8000f38 <lcd_Fill>
		obstacles[7].x1+=2;
 8002052:	4b4c      	ldr	r3, [pc, #304]	; (8002184 <moveWall+0x1fc>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	3302      	adds	r3, #2
 8002058:	4a4a      	ldr	r2, [pc, #296]	; (8002184 <moveWall+0x1fc>)
 800205a:	6713      	str	r3, [r2, #112]	; 0x70
		obstacles[7].x2+=2;
 800205c:	4b49      	ldr	r3, [pc, #292]	; (8002184 <moveWall+0x1fc>)
 800205e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002060:	3302      	adds	r3, #2
 8002062:	4a48      	ldr	r2, [pc, #288]	; (8002184 <moveWall+0x1fc>)
 8002064:	6793      	str	r3, [r2, #120]	; 0x78
		lcd_Fill(obstacles[7].x2-2, obstacles[7].y1, obstacles[7].x2, obstacles[7].y2, MAGENTA);
 8002066:	4b47      	ldr	r3, [pc, #284]	; (8002184 <moveWall+0x1fc>)
 8002068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b02      	subs	r3, #2
 800206e:	b298      	uxth	r0, r3
 8002070:	4b44      	ldr	r3, [pc, #272]	; (8002184 <moveWall+0x1fc>)
 8002072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002074:	b299      	uxth	r1, r3
 8002076:	4b43      	ldr	r3, [pc, #268]	; (8002184 <moveWall+0x1fc>)
 8002078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800207a:	b29a      	uxth	r2, r3
 800207c:	4b41      	ldr	r3, [pc, #260]	; (8002184 <moveWall+0x1fc>)
 800207e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002080:	b29b      	uxth	r3, r3
 8002082:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8002086:	9400      	str	r4, [sp, #0]
 8002088:	f7fe ff56 	bl	8000f38 <lcd_Fill>
		snakeSelfBite(obstacles[7].x2-10,obstacles[7].y1,obstacles[7].x2,obstacles[7].y2, 1);
 800208c:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <moveWall+0x1fc>)
 800208e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b0a      	subs	r3, #10
 8002094:	b29b      	uxth	r3, r3
 8002096:	b218      	sxth	r0, r3
 8002098:	4b3a      	ldr	r3, [pc, #232]	; (8002184 <moveWall+0x1fc>)
 800209a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800209c:	b219      	sxth	r1, r3
 800209e:	4b39      	ldr	r3, [pc, #228]	; (8002184 <moveWall+0x1fc>)
 80020a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	4b37      	ldr	r3, [pc, #220]	; (8002184 <moveWall+0x1fc>)
 80020a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	2401      	movs	r4, #1
 80020ac:	9400      	str	r4, [sp, #0]
 80020ae:	f7ff ff35 	bl	8001f1c <snakeSelfBite>
		if (obstacles[7].x2 >= 230) flag1 = 0;
 80020b2:	4b34      	ldr	r3, [pc, #208]	; (8002184 <moveWall+0x1fc>)
 80020b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020b6:	2be5      	cmp	r3, #229	; 0xe5
 80020b8:	dd02      	ble.n	80020c0 <moveWall+0x138>
 80020ba:	4b31      	ldr	r3, [pc, #196]	; (8002180 <moveWall+0x1f8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
	}

	if (flag2 == 0) {
 80020c0:	4b31      	ldr	r3, [pc, #196]	; (8002188 <moveWall+0x200>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d163      	bne.n	8002190 <moveWall+0x208>
		lcd_Fill(obstacles[8].x1, obstacles[8].y2-2, obstacles[8].x2, obstacles[8].y2, WHITE);
 80020c8:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <moveWall+0x1fc>)
 80020ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ce:	b298      	uxth	r0, r3
 80020d0:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <moveWall+0x1fc>)
 80020d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3b02      	subs	r3, #2
 80020da:	b299      	uxth	r1, r3
 80020dc:	4b29      	ldr	r3, [pc, #164]	; (8002184 <moveWall+0x1fc>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <moveWall+0x1fc>)
 80020e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80020f0:	9400      	str	r4, [sp, #0]
 80020f2:	f7fe ff21 	bl	8000f38 <lcd_Fill>
		obstacles[8].y1-=2;
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <moveWall+0x1fc>)
 80020f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020fc:	3b02      	subs	r3, #2
 80020fe:	4a21      	ldr	r2, [pc, #132]	; (8002184 <moveWall+0x1fc>)
 8002100:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		obstacles[8].y2-=2;
 8002104:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <moveWall+0x1fc>)
 8002106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800210a:	3b02      	subs	r3, #2
 800210c:	4a1d      	ldr	r2, [pc, #116]	; (8002184 <moveWall+0x1fc>)
 800210e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		lcd_Fill(obstacles[8].x1, obstacles[8].y1, obstacles[8].x2, obstacles[8].y1+2, MAGENTA);
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <moveWall+0x1fc>)
 8002114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002118:	b298      	uxth	r0, r3
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <moveWall+0x1fc>)
 800211c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002120:	b299      	uxth	r1, r3
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <moveWall+0x1fc>)
 8002124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002128:	b29a      	uxth	r2, r3
 800212a:	4b16      	ldr	r3, [pc, #88]	; (8002184 <moveWall+0x1fc>)
 800212c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002130:	b29b      	uxth	r3, r3
 8002132:	3302      	adds	r3, #2
 8002134:	b29b      	uxth	r3, r3
 8002136:	f64f 041f 	movw	r4, #63519	; 0xf81f
 800213a:	9400      	str	r4, [sp, #0]
 800213c:	f7fe fefc 	bl	8000f38 <lcd_Fill>
		snakeSelfBite(obstacles[7].x1,obstacles[7].y1,obstacles[7].x2,obstacles[7].y1+10, 1);
 8002140:	4b10      	ldr	r3, [pc, #64]	; (8002184 <moveWall+0x1fc>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	b218      	sxth	r0, r3
 8002146:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <moveWall+0x1fc>)
 8002148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214a:	b219      	sxth	r1, r3
 800214c:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <moveWall+0x1fc>)
 800214e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002150:	b21a      	sxth	r2, r3
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <moveWall+0x1fc>)
 8002154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002156:	b29b      	uxth	r3, r3
 8002158:	330a      	adds	r3, #10
 800215a:	b29b      	uxth	r3, r3
 800215c:	b21b      	sxth	r3, r3
 800215e:	2401      	movs	r4, #1
 8002160:	9400      	str	r4, [sp, #0]
 8002162:	f7ff fedb 	bl	8001f1c <snakeSelfBite>
		if (obstacles[8].y1 <= y_min) flag2 = 1;
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <moveWall+0x1fc>)
 8002168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800216c:	4a07      	ldr	r2, [pc, #28]	; (800218c <moveWall+0x204>)
 800216e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002172:	4293      	cmp	r3, r2
 8002174:	dc64      	bgt.n	8002240 <moveWall+0x2b8>
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <moveWall+0x200>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
		lcd_Fill(obstacles[8].x1, obstacles[8].y2-2, obstacles[8].x2, obstacles[8].y2, MAGENTA);
		snakeSelfBite(obstacles[7].x1,obstacles[7].y2-10,obstacles[7].x2,obstacles[7].y2, 1);
		if (obstacles[8].y2 >= 310) flag2 = 0;
	}

}
 800217c:	e060      	b.n	8002240 <moveWall+0x2b8>
 800217e:	bf00      	nop
 8002180:	20000591 	.word	0x20000591
 8002184:	20000028 	.word	0x20000028
 8002188:	20000592 	.word	0x20000592
 800218c:	20000014 	.word	0x20000014
		lcd_Fill(obstacles[8].x1, obstacles[8].y1, obstacles[8].x2, obstacles[8].y1+2, WHITE);
 8002190:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <moveWall+0x2c0>)
 8002192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002196:	b298      	uxth	r0, r3
 8002198:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <moveWall+0x2c0>)
 800219a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800219e:	b299      	uxth	r1, r3
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <moveWall+0x2c0>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	4b27      	ldr	r3, [pc, #156]	; (8002248 <moveWall+0x2c0>)
 80021aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3302      	adds	r3, #2
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80021b8:	9400      	str	r4, [sp, #0]
 80021ba:	f7fe febd 	bl	8000f38 <lcd_Fill>
		obstacles[8].y1+=2;
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <moveWall+0x2c0>)
 80021c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021c4:	3302      	adds	r3, #2
 80021c6:	4a20      	ldr	r2, [pc, #128]	; (8002248 <moveWall+0x2c0>)
 80021c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		obstacles[8].y2+=2;
 80021cc:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <moveWall+0x2c0>)
 80021ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d2:	3302      	adds	r3, #2
 80021d4:	4a1c      	ldr	r2, [pc, #112]	; (8002248 <moveWall+0x2c0>)
 80021d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		lcd_Fill(obstacles[8].x1, obstacles[8].y2-2, obstacles[8].x2, obstacles[8].y2, MAGENTA);
 80021da:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <moveWall+0x2c0>)
 80021dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021e0:	b298      	uxth	r0, r3
 80021e2:	4b19      	ldr	r3, [pc, #100]	; (8002248 <moveWall+0x2c0>)
 80021e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	3b02      	subs	r3, #2
 80021ec:	b299      	uxth	r1, r3
 80021ee:	4b16      	ldr	r3, [pc, #88]	; (8002248 <moveWall+0x2c0>)
 80021f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <moveWall+0x2c0>)
 80021f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8002202:	9400      	str	r4, [sp, #0]
 8002204:	f7fe fe98 	bl	8000f38 <lcd_Fill>
		snakeSelfBite(obstacles[7].x1,obstacles[7].y2-10,obstacles[7].x2,obstacles[7].y2, 1);
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <moveWall+0x2c0>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	b218      	sxth	r0, r3
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <moveWall+0x2c0>)
 8002210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002212:	b29b      	uxth	r3, r3
 8002214:	3b0a      	subs	r3, #10
 8002216:	b29b      	uxth	r3, r3
 8002218:	b219      	sxth	r1, r3
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <moveWall+0x2c0>)
 800221c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800221e:	b21a      	sxth	r2, r3
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <moveWall+0x2c0>)
 8002222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002224:	b21b      	sxth	r3, r3
 8002226:	2401      	movs	r4, #1
 8002228:	9400      	str	r4, [sp, #0]
 800222a:	f7ff fe77 	bl	8001f1c <snakeSelfBite>
		if (obstacles[8].y2 >= 310) flag2 = 0;
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <moveWall+0x2c0>)
 8002230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002234:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8002238:	db02      	blt.n	8002240 <moveWall+0x2b8>
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <moveWall+0x2c4>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
}
 8002240:	bf00      	nop
 8002242:	3704      	adds	r7, #4
 8002244:	46bd      	mov	sp, r7
 8002246:	bd90      	pop	{r4, r7, pc}
 8002248:	20000028 	.word	0x20000028
 800224c:	20000592 	.word	0x20000592

08002250 <checkCollision>:

void checkCollision () {
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
	for (int8_t i = 0; i < 9; ++i) {
 8002256:	2300      	movs	r3, #0
 8002258:	71fb      	strb	r3, [r7, #7]
 800225a:	e0aa      	b.n	80023b2 <checkCollision+0x162>
		if (x1 >= obstacles[i].x1 && x1 <= obstacles[i].x2) {
 800225c:	4b59      	ldr	r3, [pc, #356]	; (80023c4 <checkCollision+0x174>)
 800225e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002262:	4619      	mov	r1, r3
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	4a57      	ldr	r2, [pc, #348]	; (80023c8 <checkCollision+0x178>)
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	4413      	add	r3, r2
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4299      	cmp	r1, r3
 8002272:	db46      	blt.n	8002302 <checkCollision+0xb2>
 8002274:	4b53      	ldr	r3, [pc, #332]	; (80023c4 <checkCollision+0x174>)
 8002276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800227a:	4619      	mov	r1, r3
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	4a51      	ldr	r2, [pc, #324]	; (80023c8 <checkCollision+0x178>)
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	4413      	add	r3, r2
 8002286:	3308      	adds	r3, #8
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4299      	cmp	r1, r3
 800228c:	dc39      	bgt.n	8002302 <checkCollision+0xb2>
			if (y1 >= obstacles[i].y1 && y1 <= obstacles[i].y2) {
 800228e:	4b4f      	ldr	r3, [pc, #316]	; (80023cc <checkCollision+0x17c>)
 8002290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002294:	4619      	mov	r1, r3
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	4a4b      	ldr	r2, [pc, #300]	; (80023c8 <checkCollision+0x178>)
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	4413      	add	r3, r2
 80022a0:	3304      	adds	r3, #4
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4299      	cmp	r1, r3
 80022a6:	db0f      	blt.n	80022c8 <checkCollision+0x78>
 80022a8:	4b48      	ldr	r3, [pc, #288]	; (80023cc <checkCollision+0x17c>)
 80022aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ae:	4619      	mov	r1, r3
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	4a44      	ldr	r2, [pc, #272]	; (80023c8 <checkCollision+0x178>)
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	4413      	add	r3, r2
 80022ba:	330c      	adds	r3, #12
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4299      	cmp	r1, r3
 80022c0:	dc02      	bgt.n	80022c8 <checkCollision+0x78>
				game_over();
 80022c2:	f7ff fcc7 	bl	8001c54 <game_over>
				return;
 80022c6:	e079      	b.n	80023bc <checkCollision+0x16c>
			} else if (y2 >= obstacles[i].y1 && y2 <= obstacles[i].y2) {
 80022c8:	4b41      	ldr	r3, [pc, #260]	; (80023d0 <checkCollision+0x180>)
 80022ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ce:	4619      	mov	r1, r3
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	4a3c      	ldr	r2, [pc, #240]	; (80023c8 <checkCollision+0x178>)
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	4413      	add	r3, r2
 80022da:	3304      	adds	r3, #4
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4299      	cmp	r1, r3
 80022e0:	db62      	blt.n	80023a8 <checkCollision+0x158>
 80022e2:	4b3b      	ldr	r3, [pc, #236]	; (80023d0 <checkCollision+0x180>)
 80022e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e8:	4619      	mov	r1, r3
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	4a36      	ldr	r2, [pc, #216]	; (80023c8 <checkCollision+0x178>)
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	4413      	add	r3, r2
 80022f4:	330c      	adds	r3, #12
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4299      	cmp	r1, r3
 80022fa:	dc55      	bgt.n	80023a8 <checkCollision+0x158>
				game_over();
 80022fc:	f7ff fcaa 	bl	8001c54 <game_over>
				return;
 8002300:	e05c      	b.n	80023bc <checkCollision+0x16c>
			}
		} else if (x2 >= obstacles[i].x1 && x2 <= obstacles[i].x2) {
 8002302:	4b34      	ldr	r3, [pc, #208]	; (80023d4 <checkCollision+0x184>)
 8002304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002308:	4619      	mov	r1, r3
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	4a2e      	ldr	r2, [pc, #184]	; (80023c8 <checkCollision+0x178>)
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	4413      	add	r3, r2
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4299      	cmp	r1, r3
 8002318:	db47      	blt.n	80023aa <checkCollision+0x15a>
 800231a:	4b2e      	ldr	r3, [pc, #184]	; (80023d4 <checkCollision+0x184>)
 800231c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002320:	4619      	mov	r1, r3
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	4a28      	ldr	r2, [pc, #160]	; (80023c8 <checkCollision+0x178>)
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	4413      	add	r3, r2
 800232c:	3308      	adds	r3, #8
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4299      	cmp	r1, r3
 8002332:	dc3a      	bgt.n	80023aa <checkCollision+0x15a>
			if (y1 >= obstacles[i].y1 && y1 <= obstacles[i].y2) {
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <checkCollision+0x17c>)
 8002336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800233a:	4619      	mov	r1, r3
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	4a21      	ldr	r2, [pc, #132]	; (80023c8 <checkCollision+0x178>)
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	4413      	add	r3, r2
 8002346:	3304      	adds	r3, #4
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4299      	cmp	r1, r3
 800234c:	db0f      	blt.n	800236e <checkCollision+0x11e>
 800234e:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <checkCollision+0x17c>)
 8002350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002354:	4619      	mov	r1, r3
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <checkCollision+0x178>)
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	4413      	add	r3, r2
 8002360:	330c      	adds	r3, #12
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4299      	cmp	r1, r3
 8002366:	dc02      	bgt.n	800236e <checkCollision+0x11e>
				game_over();
 8002368:	f7ff fc74 	bl	8001c54 <game_over>
				return;
 800236c:	e026      	b.n	80023bc <checkCollision+0x16c>
			} else if (y2 >= obstacles[i].y1 && y2 <= obstacles[i].y2) {
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <checkCollision+0x180>)
 8002370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002374:	4619      	mov	r1, r3
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	4a13      	ldr	r2, [pc, #76]	; (80023c8 <checkCollision+0x178>)
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	4413      	add	r3, r2
 8002380:	3304      	adds	r3, #4
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4299      	cmp	r1, r3
 8002386:	db10      	blt.n	80023aa <checkCollision+0x15a>
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <checkCollision+0x180>)
 800238a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238e:	4619      	mov	r1, r3
 8002390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002394:	4a0c      	ldr	r2, [pc, #48]	; (80023c8 <checkCollision+0x178>)
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	4413      	add	r3, r2
 800239a:	330c      	adds	r3, #12
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4299      	cmp	r1, r3
 80023a0:	dc03      	bgt.n	80023aa <checkCollision+0x15a>
				game_over();
 80023a2:	f7ff fc57 	bl	8001c54 <game_over>
				return;
 80023a6:	e009      	b.n	80023bc <checkCollision+0x16c>
			if (y1 >= obstacles[i].y1 && y1 <= obstacles[i].y2) {
 80023a8:	bf00      	nop
	for (int8_t i = 0; i < 9; ++i) {
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	3301      	adds	r3, #1
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	71fb      	strb	r3, [r7, #7]
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	f77f af50 	ble.w	800225c <checkCollision+0xc>
			}
		}
	}
}
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	20000016 	.word	0x20000016
 80023c8:	20000028 	.word	0x20000028
 80023cc:	20000018 	.word	0x20000018
 80023d0:	2000001c 	.word	0x2000001c
 80023d4:	2000001a 	.word	0x2000001a

080023d8 <delete_path>:
void delete_path() {
 80023d8:	b5b0      	push	{r4, r5, r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af02      	add	r7, sp, #8
    // Assuming lcd_Fill is a function to clear the specified area on the LCD with white color
    	if (allPath[0].isTail == 0) {
 80023de:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <delete_path+0x20c>)
 80023e0:	785b      	ldrb	r3, [r3, #1]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 808d 	bne.w	8002502 <delete_path+0x12a>
    		//if (allPath[0].currentState == goRight) lcd_Fill(x1,0, x2, y2, RED);
    		if (allPath[0].length >= snakeTailLen) {
 80023e8:	4b7e      	ldr	r3, [pc, #504]	; (80025e4 <delete_path+0x20c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a7e      	ldr	r2, [pc, #504]	; (80025e8 <delete_path+0x210>)
 80023ee:	8812      	ldrh	r2, [r2, #0]
 80023f0:	4293      	cmp	r3, r2
 80023f2:	f2c0 815a 	blt.w	80026aa <delete_path+0x2d2>
    			if (allPath[0].currentState == goUp) {
 80023f6:	4b7b      	ldr	r3, [pc, #492]	; (80025e4 <delete_path+0x20c>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d11c      	bne.n	8002438 <delete_path+0x60>
					lcd_Fill(allPath[0].x1, allPath[0].y2-speed, allPath[0].x2, allPath[0].y2, WHITE);
 80023fe:	4b79      	ldr	r3, [pc, #484]	; (80025e4 <delete_path+0x20c>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	b298      	uxth	r0, r3
 8002404:	4b77      	ldr	r3, [pc, #476]	; (80025e4 <delete_path+0x20c>)
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	b29a      	uxth	r2, r3
 800240a:	4b78      	ldr	r3, [pc, #480]	; (80025ec <delete_path+0x214>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	b299      	uxth	r1, r3
 8002412:	4b74      	ldr	r3, [pc, #464]	; (80025e4 <delete_path+0x20c>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	b29a      	uxth	r2, r3
 8002418:	4b72      	ldr	r3, [pc, #456]	; (80025e4 <delete_path+0x20c>)
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	b29b      	uxth	r3, r3
 800241e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002422:	9400      	str	r4, [sp, #0]
 8002424:	f7fe fd88 	bl	8000f38 <lcd_Fill>
					allPath[0].y2 -= speed;
 8002428:	4b6e      	ldr	r3, [pc, #440]	; (80025e4 <delete_path+0x20c>)
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	4a6f      	ldr	r2, [pc, #444]	; (80025ec <delete_path+0x214>)
 800242e:	8812      	ldrh	r2, [r2, #0]
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	4a6c      	ldr	r2, [pc, #432]	; (80025e4 <delete_path+0x20c>)
 8002434:	6153      	str	r3, [r2, #20]



    	}

}
 8002436:	e138      	b.n	80026aa <delete_path+0x2d2>
				} else if (allPath[0].currentState == goDown) {
 8002438:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <delete_path+0x20c>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d11d      	bne.n	800247c <delete_path+0xa4>
					lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x2, allPath[0].y1 + speed, WHITE);
 8002440:	4b68      	ldr	r3, [pc, #416]	; (80025e4 <delete_path+0x20c>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	b298      	uxth	r0, r3
 8002446:	4b67      	ldr	r3, [pc, #412]	; (80025e4 <delete_path+0x20c>)
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	b299      	uxth	r1, r3
 800244c:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <delete_path+0x20c>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	b29c      	uxth	r4, r3
 8002452:	4b64      	ldr	r3, [pc, #400]	; (80025e4 <delete_path+0x20c>)
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	b29a      	uxth	r2, r3
 8002458:	4b64      	ldr	r3, [pc, #400]	; (80025ec <delete_path+0x214>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	4413      	add	r3, r2
 800245e:	b29b      	uxth	r3, r3
 8002460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002464:	9200      	str	r2, [sp, #0]
 8002466:	4622      	mov	r2, r4
 8002468:	f7fe fd66 	bl	8000f38 <lcd_Fill>
					allPath[0].y1 += speed;
 800246c:	4b5d      	ldr	r3, [pc, #372]	; (80025e4 <delete_path+0x20c>)
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	4a5e      	ldr	r2, [pc, #376]	; (80025ec <delete_path+0x214>)
 8002472:	8812      	ldrh	r2, [r2, #0]
 8002474:	4413      	add	r3, r2
 8002476:	4a5b      	ldr	r2, [pc, #364]	; (80025e4 <delete_path+0x20c>)
 8002478:	6113      	str	r3, [r2, #16]
}
 800247a:	e116      	b.n	80026aa <delete_path+0x2d2>
				} else if (allPath[0].currentState == goLeft) {
 800247c:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <delete_path+0x20c>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d11c      	bne.n	80024be <delete_path+0xe6>
					lcd_Fill(allPath[0].x2-speed, allPath[0].y1, allPath[0].x2, allPath[0].y2, WHITE);
 8002484:	4b57      	ldr	r3, [pc, #348]	; (80025e4 <delete_path+0x20c>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	b29a      	uxth	r2, r3
 800248a:	4b58      	ldr	r3, [pc, #352]	; (80025ec <delete_path+0x214>)
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	b298      	uxth	r0, r3
 8002492:	4b54      	ldr	r3, [pc, #336]	; (80025e4 <delete_path+0x20c>)
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	b299      	uxth	r1, r3
 8002498:	4b52      	ldr	r3, [pc, #328]	; (80025e4 <delete_path+0x20c>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	b29a      	uxth	r2, r3
 800249e:	4b51      	ldr	r3, [pc, #324]	; (80025e4 <delete_path+0x20c>)
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80024a8:	9400      	str	r4, [sp, #0]
 80024aa:	f7fe fd45 	bl	8000f38 <lcd_Fill>
					allPath[0].x2 -= speed;
 80024ae:	4b4d      	ldr	r3, [pc, #308]	; (80025e4 <delete_path+0x20c>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	4a4e      	ldr	r2, [pc, #312]	; (80025ec <delete_path+0x214>)
 80024b4:	8812      	ldrh	r2, [r2, #0]
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	4a4a      	ldr	r2, [pc, #296]	; (80025e4 <delete_path+0x20c>)
 80024ba:	60d3      	str	r3, [r2, #12]
}
 80024bc:	e0f5      	b.n	80026aa <delete_path+0x2d2>
				} else if (allPath[0].currentState == goRight) {
 80024be:	4b49      	ldr	r3, [pc, #292]	; (80025e4 <delete_path+0x20c>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	f040 80f1 	bne.w	80026aa <delete_path+0x2d2>
					lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x1+speed, allPath[0].y2, WHITE);
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <delete_path+0x20c>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	b298      	uxth	r0, r3
 80024ce:	4b45      	ldr	r3, [pc, #276]	; (80025e4 <delete_path+0x20c>)
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	b299      	uxth	r1, r3
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <delete_path+0x20c>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	b29a      	uxth	r2, r3
 80024da:	4b44      	ldr	r3, [pc, #272]	; (80025ec <delete_path+0x214>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	4b40      	ldr	r3, [pc, #256]	; (80025e4 <delete_path+0x20c>)
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80024ec:	9400      	str	r4, [sp, #0]
 80024ee:	f7fe fd23 	bl	8000f38 <lcd_Fill>
					allPath[0].x1 += speed;
 80024f2:	4b3c      	ldr	r3, [pc, #240]	; (80025e4 <delete_path+0x20c>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	4a3d      	ldr	r2, [pc, #244]	; (80025ec <delete_path+0x214>)
 80024f8:	8812      	ldrh	r2, [r2, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	4a39      	ldr	r2, [pc, #228]	; (80025e4 <delete_path+0x20c>)
 80024fe:	6093      	str	r3, [r2, #8]
}
 8002500:	e0d3      	b.n	80026aa <delete_path+0x2d2>
    	} else if (allPath[0].isTail == 1) {
 8002502:	4b38      	ldr	r3, [pc, #224]	; (80025e4 <delete_path+0x20c>)
 8002504:	785b      	ldrb	r3, [r3, #1]
 8002506:	2b01      	cmp	r3, #1
 8002508:	f040 80cf 	bne.w	80026aa <delete_path+0x2d2>
    		allPath[0].length -= speed;
 800250c:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <delete_path+0x20c>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	4a36      	ldr	r2, [pc, #216]	; (80025ec <delete_path+0x214>)
 8002512:	8812      	ldrh	r2, [r2, #0]
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	4a33      	ldr	r2, [pc, #204]	; (80025e4 <delete_path+0x20c>)
 8002518:	6053      	str	r3, [r2, #4]
    		if (allPath[0].currentState == goUp) {
 800251a:	4b32      	ldr	r3, [pc, #200]	; (80025e4 <delete_path+0x20c>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d11c      	bne.n	800255c <delete_path+0x184>
				lcd_Fill(allPath[0].x1, allPath[0].y2-speed, allPath[0].x2, allPath[0].y2, WHITE);
 8002522:	4b30      	ldr	r3, [pc, #192]	; (80025e4 <delete_path+0x20c>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	b298      	uxth	r0, r3
 8002528:	4b2e      	ldr	r3, [pc, #184]	; (80025e4 <delete_path+0x20c>)
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	b29a      	uxth	r2, r3
 800252e:	4b2f      	ldr	r3, [pc, #188]	; (80025ec <delete_path+0x214>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	b299      	uxth	r1, r3
 8002536:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <delete_path+0x20c>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	b29a      	uxth	r2, r3
 800253c:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <delete_path+0x20c>)
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	b29b      	uxth	r3, r3
 8002542:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002546:	9400      	str	r4, [sp, #0]
 8002548:	f7fe fcf6 	bl	8000f38 <lcd_Fill>
				allPath[0].y2 -= speed;
 800254c:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <delete_path+0x20c>)
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	4a26      	ldr	r2, [pc, #152]	; (80025ec <delete_path+0x214>)
 8002552:	8812      	ldrh	r2, [r2, #0]
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	4a23      	ldr	r2, [pc, #140]	; (80025e4 <delete_path+0x20c>)
 8002558:	6153      	str	r3, [r2, #20]
 800255a:	e069      	b.n	8002630 <delete_path+0x258>
			} else if (allPath[0].currentState == goDown) {
 800255c:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <delete_path+0x20c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d11d      	bne.n	80025a0 <delete_path+0x1c8>
				lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x2, allPath[0].y1 + speed, WHITE);
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <delete_path+0x20c>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	b298      	uxth	r0, r3
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <delete_path+0x20c>)
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	b299      	uxth	r1, r3
 8002570:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <delete_path+0x20c>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	b29c      	uxth	r4, r3
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <delete_path+0x20c>)
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	b29a      	uxth	r2, r3
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <delete_path+0x214>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	4413      	add	r3, r2
 8002582:	b29b      	uxth	r3, r3
 8002584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002588:	9200      	str	r2, [sp, #0]
 800258a:	4622      	mov	r2, r4
 800258c:	f7fe fcd4 	bl	8000f38 <lcd_Fill>
				allPath[0].y1 += speed;
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <delete_path+0x20c>)
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	4a15      	ldr	r2, [pc, #84]	; (80025ec <delete_path+0x214>)
 8002596:	8812      	ldrh	r2, [r2, #0]
 8002598:	4413      	add	r3, r2
 800259a:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <delete_path+0x20c>)
 800259c:	6113      	str	r3, [r2, #16]
 800259e:	e047      	b.n	8002630 <delete_path+0x258>
			} else if (allPath[0].currentState == goLeft) {
 80025a0:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <delete_path+0x20c>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d123      	bne.n	80025f0 <delete_path+0x218>
				lcd_Fill(allPath[0].x2-speed, allPath[0].y1, allPath[0].x2, allPath[0].y2, WHITE);
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <delete_path+0x20c>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	4b0f      	ldr	r3, [pc, #60]	; (80025ec <delete_path+0x214>)
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	b298      	uxth	r0, r3
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <delete_path+0x20c>)
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	b299      	uxth	r1, r3
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <delete_path+0x20c>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <delete_path+0x20c>)
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80025cc:	9400      	str	r4, [sp, #0]
 80025ce:	f7fe fcb3 	bl	8000f38 <lcd_Fill>
				allPath[0].x2 -= speed;
 80025d2:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <delete_path+0x20c>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	4a05      	ldr	r2, [pc, #20]	; (80025ec <delete_path+0x214>)
 80025d8:	8812      	ldrh	r2, [r2, #0]
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	4a01      	ldr	r2, [pc, #4]	; (80025e4 <delete_path+0x20c>)
 80025de:	60d3      	str	r3, [r2, #12]
 80025e0:	e026      	b.n	8002630 <delete_path+0x258>
 80025e2:	bf00      	nop
 80025e4:	200002c0 	.word	0x200002c0
 80025e8:	20000022 	.word	0x20000022
 80025ec:	20000024 	.word	0x20000024
			} else if (allPath[0].currentState == goRight) {
 80025f0:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <delete_path+0x2dc>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d11b      	bne.n	8002630 <delete_path+0x258>
				lcd_Fill(allPath[0].x1, allPath[0].y1, allPath[0].x1+speed, allPath[0].y2, WHITE);
 80025f8:	4b2e      	ldr	r3, [pc, #184]	; (80026b4 <delete_path+0x2dc>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	b298      	uxth	r0, r3
 80025fe:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <delete_path+0x2dc>)
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	b299      	uxth	r1, r3
 8002604:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <delete_path+0x2dc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	b29a      	uxth	r2, r3
 800260a:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <delete_path+0x2e0>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	4413      	add	r3, r2
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <delete_path+0x2dc>)
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800261c:	9400      	str	r4, [sp, #0]
 800261e:	f7fe fc8b 	bl	8000f38 <lcd_Fill>
				allPath[0].x1 += speed;
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <delete_path+0x2dc>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	4a24      	ldr	r2, [pc, #144]	; (80026b8 <delete_path+0x2e0>)
 8002628:	8812      	ldrh	r2, [r2, #0]
 800262a:	4413      	add	r3, r2
 800262c:	4a21      	ldr	r2, [pc, #132]	; (80026b4 <delete_path+0x2dc>)
 800262e:	6093      	str	r3, [r2, #8]
    		if (flag == 0) {
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <delete_path+0x2e4>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d138      	bne.n	80026aa <delete_path+0x2d2>
				if (allPath[0].length == 0 || allPath[0].length < 0) {
 8002638:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <delete_path+0x2dc>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <delete_path+0x270>
 8002640:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <delete_path+0x2dc>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	da30      	bge.n	80026aa <delete_path+0x2d2>
						flag = 1;
 8002648:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <delete_path+0x2e4>)
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
						delete_path();
 800264e:	f7ff fec3 	bl	80023d8 <delete_path>
						flag = 0;
 8002652:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <delete_path+0x2e4>)
 8002654:	2200      	movs	r2, #0
 8002656:	701a      	strb	r2, [r3, #0]
					for (uint8_t i = 0; i < currentIndex - 1; i++) {
 8002658:	2300      	movs	r3, #0
 800265a:	71fb      	strb	r3, [r7, #7]
 800265c:	e019      	b.n	8002692 <delete_path+0x2ba>
						allPath[i] = allPath[i + 1];
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	79f9      	ldrb	r1, [r7, #7]
 8002664:	4813      	ldr	r0, [pc, #76]	; (80026b4 <delete_path+0x2dc>)
 8002666:	460b      	mov	r3, r1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	440b      	add	r3, r1
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4418      	add	r0, r3
 8002670:	4910      	ldr	r1, [pc, #64]	; (80026b4 <delete_path+0x2dc>)
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	440b      	add	r3, r1
 800267c:	4604      	mov	r4, r0
 800267e:	461d      	mov	r5, r3
 8002680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002684:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002688:	e884 0003 	stmia.w	r4, {r0, r1}
					for (uint8_t i = 0; i < currentIndex - 1; i++) {
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	3301      	adds	r3, #1
 8002690:	71fb      	strb	r3, [r7, #7]
 8002692:	79fa      	ldrb	r2, [r7, #7]
 8002694:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <delete_path+0x2e8>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	3b01      	subs	r3, #1
 800269a:	429a      	cmp	r2, r3
 800269c:	dbdf      	blt.n	800265e <delete_path+0x286>
					currentIndex--;
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <delete_path+0x2e8>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <delete_path+0x2e8>)
 80026a8:	701a      	strb	r2, [r3, #0]
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bdb0      	pop	{r4, r5, r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200002c0 	.word	0x200002c0
 80026b8:	20000024 	.word	0x20000024
 80026bc:	20000590 	.word	0x20000590
 80026c0:	200002bd 	.word	0x200002bd

080026c4 <right>:
void right() {
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af02      	add	r7, sp, #8

	if (prevState == goRight) {
 80026ca:	4b7f      	ldr	r3, [pc, #508]	; (80028c8 <right+0x204>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b03      	cmp	r3, #3
 80026d0:	d138      	bne.n	8002744 <right+0x80>
				if (allPath[currentIndex-1].length <= snakeTailLen) {
 80026d2:	4b7e      	ldr	r3, [pc, #504]	; (80028cc <right+0x208>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	1e5a      	subs	r2, r3, #1
 80026d8:	497d      	ldr	r1, [pc, #500]	; (80028d0 <right+0x20c>)
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	440b      	add	r3, r1
 80026e4:	3304      	adds	r3, #4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a7a      	ldr	r2, [pc, #488]	; (80028d4 <right+0x210>)
 80026ea:	8812      	ldrh	r2, [r2, #0]
 80026ec:	4293      	cmp	r3, r2
 80026ee:	dc19      	bgt.n	8002724 <right+0x60>
					allPath[currentIndex-1].length +=speed;
 80026f0:	4b76      	ldr	r3, [pc, #472]	; (80028cc <right+0x208>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	1e5a      	subs	r2, r3, #1
 80026f6:	4976      	ldr	r1, [pc, #472]	; (80028d0 <right+0x20c>)
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	440b      	add	r3, r1
 8002702:	3304      	adds	r3, #4
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a74      	ldr	r2, [pc, #464]	; (80028d8 <right+0x214>)
 8002708:	8812      	ldrh	r2, [r2, #0]
 800270a:	4611      	mov	r1, r2
 800270c:	4a6f      	ldr	r2, [pc, #444]	; (80028cc <right+0x208>)
 800270e:	7812      	ldrb	r2, [r2, #0]
 8002710:	3a01      	subs	r2, #1
 8002712:	4419      	add	r1, r3
 8002714:	486e      	ldr	r0, [pc, #440]	; (80028d0 <right+0x20c>)
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4403      	add	r3, r0
 8002720:	3304      	adds	r3, #4
 8002722:	6019      	str	r1, [r3, #0]
				}
				allPath[currentIndex-1].x2 = x2;
 8002724:	4b6d      	ldr	r3, [pc, #436]	; (80028dc <right+0x218>)
 8002726:	f9b3 1000 	ldrsh.w	r1, [r3]
 800272a:	4b68      	ldr	r3, [pc, #416]	; (80028cc <right+0x208>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	1e5a      	subs	r2, r3, #1
 8002730:	4608      	mov	r0, r1
 8002732:	4967      	ldr	r1, [pc, #412]	; (80028d0 <right+0x20c>)
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	330c      	adds	r3, #12
 8002740:	6018      	str	r0, [r3, #0]
 8002742:	e08d      	b.n	8002860 <right+0x19c>
			} else {
				if (currentIndex == 0) allPath[0].isTail = 0;
 8002744:	4b61      	ldr	r3, [pc, #388]	; (80028cc <right+0x208>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d103      	bne.n	8002754 <right+0x90>
 800274c:	4b60      	ldr	r3, [pc, #384]	; (80028d0 <right+0x20c>)
 800274e:	2200      	movs	r2, #0
 8002750:	705a      	strb	r2, [r3, #1]
 8002752:	e00b      	b.n	800276c <right+0xa8>
				else allPath[currentIndex-1].isTail = 1;
 8002754:	4b5d      	ldr	r3, [pc, #372]	; (80028cc <right+0x208>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	1e5a      	subs	r2, r3, #1
 800275a:	495d      	ldr	r1, [pc, #372]	; (80028d0 <right+0x20c>)
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	440b      	add	r3, r1
 8002766:	3301      	adds	r3, #1
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
				allPath[currentIndex].isTail = 0;
 800276c:	4b57      	ldr	r3, [pc, #348]	; (80028cc <right+0x208>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	4619      	mov	r1, r3
 8002772:	4a57      	ldr	r2, [pc, #348]	; (80028d0 <right+0x20c>)
 8002774:	460b      	mov	r3, r1
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	440b      	add	r3, r1
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	4413      	add	r3, r2
 800277e:	3301      	adds	r3, #1
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
				if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 8002784:	4b53      	ldr	r3, [pc, #332]	; (80028d4 <right+0x210>)
 8002786:	881a      	ldrh	r2, [r3, #0]
 8002788:	4b55      	ldr	r3, [pc, #340]	; (80028e0 <right+0x21c>)
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d10e      	bne.n	80027ae <right+0xea>
 8002790:	4b50      	ldr	r3, [pc, #320]	; (80028d4 <right+0x210>)
 8002792:	881a      	ldrh	r2, [r3, #0]
 8002794:	4b4d      	ldr	r3, [pc, #308]	; (80028cc <right+0x208>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4619      	mov	r1, r3
 800279a:	4610      	mov	r0, r2
 800279c:	4a4c      	ldr	r2, [pc, #304]	; (80028d0 <right+0x20c>)
 800279e:	460b      	mov	r3, r1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	440b      	add	r3, r1
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	3304      	adds	r3, #4
 80027aa:	6018      	str	r0, [r3, #0]
 80027ac:	e00b      	b.n	80027c6 <right+0x102>
				else allPath[currentIndex].length = 0;
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <right+0x208>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	4619      	mov	r1, r3
 80027b4:	4a46      	ldr	r2, [pc, #280]	; (80028d0 <right+0x20c>)
 80027b6:	460b      	mov	r3, r1
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	440b      	add	r3, r1
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	3304      	adds	r3, #4
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
				allPath[currentIndex].currentState = goRight;
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <right+0x208>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	4619      	mov	r1, r3
 80027cc:	4a40      	ldr	r2, [pc, #256]	; (80028d0 <right+0x20c>)
 80027ce:	460b      	mov	r3, r1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	440b      	add	r3, r1
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	2203      	movs	r2, #3
 80027da:	701a      	strb	r2, [r3, #0]
				allPath[currentIndex].x1 = x1;
 80027dc:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <right+0x220>)
 80027de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027e2:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <right+0x208>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	4619      	mov	r1, r3
 80027e8:	4610      	mov	r0, r2
 80027ea:	4a39      	ldr	r2, [pc, #228]	; (80028d0 <right+0x20c>)
 80027ec:	460b      	mov	r3, r1
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	440b      	add	r3, r1
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	3308      	adds	r3, #8
 80027f8:	6018      	str	r0, [r3, #0]
				allPath[currentIndex].x2 = x2;
 80027fa:	4b38      	ldr	r3, [pc, #224]	; (80028dc <right+0x218>)
 80027fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002800:	4b32      	ldr	r3, [pc, #200]	; (80028cc <right+0x208>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	4619      	mov	r1, r3
 8002806:	4610      	mov	r0, r2
 8002808:	4a31      	ldr	r2, [pc, #196]	; (80028d0 <right+0x20c>)
 800280a:	460b      	mov	r3, r1
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	440b      	add	r3, r1
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	330c      	adds	r3, #12
 8002816:	6018      	str	r0, [r3, #0]
				allPath[currentIndex].y1 = y1;
 8002818:	4b33      	ldr	r3, [pc, #204]	; (80028e8 <right+0x224>)
 800281a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800281e:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <right+0x208>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	4619      	mov	r1, r3
 8002824:	4610      	mov	r0, r2
 8002826:	4a2a      	ldr	r2, [pc, #168]	; (80028d0 <right+0x20c>)
 8002828:	460b      	mov	r3, r1
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	440b      	add	r3, r1
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	3310      	adds	r3, #16
 8002834:	6018      	str	r0, [r3, #0]
				allPath[currentIndex].y2 = y2;
 8002836:	4b2d      	ldr	r3, [pc, #180]	; (80028ec <right+0x228>)
 8002838:	f9b3 2000 	ldrsh.w	r2, [r3]
 800283c:	4b23      	ldr	r3, [pc, #140]	; (80028cc <right+0x208>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	4610      	mov	r0, r2
 8002844:	4a22      	ldr	r2, [pc, #136]	; (80028d0 <right+0x20c>)
 8002846:	460b      	mov	r3, r1
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	440b      	add	r3, r1
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	3314      	adds	r3, #20
 8002852:	6018      	str	r0, [r3, #0]

				currentIndex++;
 8002854:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <right+0x208>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	3301      	adds	r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <right+0x208>)
 800285e:	701a      	strb	r2, [r3, #0]
			}
			prevState = goRight;
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <right+0x204>)
 8002862:	2203      	movs	r2, #3
 8002864:	701a      	strb	r2, [r3, #0]
			//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;
			x1 += speed;
 8002866:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <right+0x220>)
 8002868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286c:	b29a      	uxth	r2, r3
 800286e:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <right+0x214>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	4413      	add	r3, r2
 8002874:	b29b      	uxth	r3, r3
 8002876:	b21a      	sxth	r2, r3
 8002878:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <right+0x220>)
 800287a:	801a      	strh	r2, [r3, #0]
			x2 += speed;
 800287c:	4b17      	ldr	r3, [pc, #92]	; (80028dc <right+0x218>)
 800287e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002882:	b29a      	uxth	r2, r3
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <right+0x214>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	4413      	add	r3, r2
 800288a:	b29b      	uxth	r3, r3
 800288c:	b21a      	sxth	r2, r3
 800288e:	4b13      	ldr	r3, [pc, #76]	; (80028dc <right+0x218>)
 8002890:	801a      	strh	r2, [r3, #0]


			lcd_Fill(x1, y1, x2, y2, BLUE);
 8002892:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <right+0x220>)
 8002894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002898:	b298      	uxth	r0, r3
 800289a:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <right+0x224>)
 800289c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a0:	b299      	uxth	r1, r3
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <right+0x218>)
 80028a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <right+0x228>)
 80028ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	241f      	movs	r4, #31
 80028b4:	9400      	str	r4, [sp, #0]
 80028b6:	f7fe fb3f 	bl	8000f38 <lcd_Fill>
			delete_path();
 80028ba:	f7ff fd8d 	bl	80023d8 <delete_path>
}
 80028be:	bf00      	nop
 80028c0:	3704      	adds	r7, #4
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd90      	pop	{r4, r7, pc}
 80028c6:	bf00      	nop
 80028c8:	2000001f 	.word	0x2000001f
 80028cc:	200002bd 	.word	0x200002bd
 80028d0:	200002c0 	.word	0x200002c0
 80028d4:	20000022 	.word	0x20000022
 80028d8:	20000024 	.word	0x20000024
 80028dc:	2000001a 	.word	0x2000001a
 80028e0:	20000020 	.word	0x20000020
 80028e4:	20000016 	.word	0x20000016
 80028e8:	20000018 	.word	0x20000018
 80028ec:	2000001c 	.word	0x2000001c

080028f0 <left>:
void left() {
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af02      	add	r7, sp, #8
	if (prevState == goLeft) {
 80028f6:	4b7f      	ldr	r3, [pc, #508]	; (8002af4 <left+0x204>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d138      	bne.n	8002970 <left+0x80>
		if (allPath[currentIndex-1].length <= snakeTailLen) {
 80028fe:	4b7e      	ldr	r3, [pc, #504]	; (8002af8 <left+0x208>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	1e5a      	subs	r2, r3, #1
 8002904:	497d      	ldr	r1, [pc, #500]	; (8002afc <left+0x20c>)
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	440b      	add	r3, r1
 8002910:	3304      	adds	r3, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a7a      	ldr	r2, [pc, #488]	; (8002b00 <left+0x210>)
 8002916:	8812      	ldrh	r2, [r2, #0]
 8002918:	4293      	cmp	r3, r2
 800291a:	dc19      	bgt.n	8002950 <left+0x60>

							allPath[currentIndex-1].length +=speed;
 800291c:	4b76      	ldr	r3, [pc, #472]	; (8002af8 <left+0x208>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	1e5a      	subs	r2, r3, #1
 8002922:	4976      	ldr	r1, [pc, #472]	; (8002afc <left+0x20c>)
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	440b      	add	r3, r1
 800292e:	3304      	adds	r3, #4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a74      	ldr	r2, [pc, #464]	; (8002b04 <left+0x214>)
 8002934:	8812      	ldrh	r2, [r2, #0]
 8002936:	4611      	mov	r1, r2
 8002938:	4a6f      	ldr	r2, [pc, #444]	; (8002af8 <left+0x208>)
 800293a:	7812      	ldrb	r2, [r2, #0]
 800293c:	3a01      	subs	r2, #1
 800293e:	4419      	add	r1, r3
 8002940:	486e      	ldr	r0, [pc, #440]	; (8002afc <left+0x20c>)
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4403      	add	r3, r0
 800294c:	3304      	adds	r3, #4
 800294e:	6019      	str	r1, [r3, #0]
						}

			allPath[currentIndex-1].x1 = x1;
 8002950:	4b6d      	ldr	r3, [pc, #436]	; (8002b08 <left+0x218>)
 8002952:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002956:	4b68      	ldr	r3, [pc, #416]	; (8002af8 <left+0x208>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	1e5a      	subs	r2, r3, #1
 800295c:	4608      	mov	r0, r1
 800295e:	4967      	ldr	r1, [pc, #412]	; (8002afc <left+0x20c>)
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	3308      	adds	r3, #8
 800296c:	6018      	str	r0, [r3, #0]
 800296e:	e08d      	b.n	8002a8c <left+0x19c>

		} else {
			if (currentIndex == 0) allPath[0].isTail = 0;
 8002970:	4b61      	ldr	r3, [pc, #388]	; (8002af8 <left+0x208>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d103      	bne.n	8002980 <left+0x90>
 8002978:	4b60      	ldr	r3, [pc, #384]	; (8002afc <left+0x20c>)
 800297a:	2200      	movs	r2, #0
 800297c:	705a      	strb	r2, [r3, #1]
 800297e:	e00b      	b.n	8002998 <left+0xa8>
			else allPath[currentIndex-1].isTail = 1;
 8002980:	4b5d      	ldr	r3, [pc, #372]	; (8002af8 <left+0x208>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	1e5a      	subs	r2, r3, #1
 8002986:	495d      	ldr	r1, [pc, #372]	; (8002afc <left+0x20c>)
 8002988:	4613      	mov	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	3301      	adds	r3, #1
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
			allPath[currentIndex].isTail = 0;
 8002998:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <left+0x208>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4619      	mov	r1, r3
 800299e:	4a57      	ldr	r2, [pc, #348]	; (8002afc <left+0x20c>)
 80029a0:	460b      	mov	r3, r1
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	440b      	add	r3, r1
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	3301      	adds	r3, #1
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
			if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 80029b0:	4b53      	ldr	r3, [pc, #332]	; (8002b00 <left+0x210>)
 80029b2:	881a      	ldrh	r2, [r3, #0]
 80029b4:	4b55      	ldr	r3, [pc, #340]	; (8002b0c <left+0x21c>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d10e      	bne.n	80029da <left+0xea>
 80029bc:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <left+0x210>)
 80029be:	881a      	ldrh	r2, [r3, #0]
 80029c0:	4b4d      	ldr	r3, [pc, #308]	; (8002af8 <left+0x208>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	4a4c      	ldr	r2, [pc, #304]	; (8002afc <left+0x20c>)
 80029ca:	460b      	mov	r3, r1
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	440b      	add	r3, r1
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	3304      	adds	r3, #4
 80029d6:	6018      	str	r0, [r3, #0]
 80029d8:	e00b      	b.n	80029f2 <left+0x102>
			else allPath[currentIndex].length = 0;
 80029da:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <left+0x208>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	4619      	mov	r1, r3
 80029e0:	4a46      	ldr	r2, [pc, #280]	; (8002afc <left+0x20c>)
 80029e2:	460b      	mov	r3, r1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	440b      	add	r3, r1
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	3304      	adds	r3, #4
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
			allPath[currentIndex].currentState = goLeft;
 80029f2:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <left+0x208>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	4619      	mov	r1, r3
 80029f8:	4a40      	ldr	r2, [pc, #256]	; (8002afc <left+0x20c>)
 80029fa:	460b      	mov	r3, r1
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	440b      	add	r3, r1
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	2202      	movs	r2, #2
 8002a06:	701a      	strb	r2, [r3, #0]
			allPath[currentIndex].x1 = x1;
 8002a08:	4b3f      	ldr	r3, [pc, #252]	; (8002b08 <left+0x218>)
 8002a0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a0e:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <left+0x208>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	4619      	mov	r1, r3
 8002a14:	4610      	mov	r0, r2
 8002a16:	4a39      	ldr	r2, [pc, #228]	; (8002afc <left+0x20c>)
 8002a18:	460b      	mov	r3, r1
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	440b      	add	r3, r1
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4413      	add	r3, r2
 8002a22:	3308      	adds	r3, #8
 8002a24:	6018      	str	r0, [r3, #0]
			allPath[currentIndex].x2 = x2;
 8002a26:	4b3a      	ldr	r3, [pc, #232]	; (8002b10 <left+0x220>)
 8002a28:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a2c:	4b32      	ldr	r3, [pc, #200]	; (8002af8 <left+0x208>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	4619      	mov	r1, r3
 8002a32:	4610      	mov	r0, r2
 8002a34:	4a31      	ldr	r2, [pc, #196]	; (8002afc <left+0x20c>)
 8002a36:	460b      	mov	r3, r1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	440b      	add	r3, r1
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4413      	add	r3, r2
 8002a40:	330c      	adds	r3, #12
 8002a42:	6018      	str	r0, [r3, #0]
			allPath[currentIndex].y1 = y1;
 8002a44:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <left+0x224>)
 8002a46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a4a:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <left+0x208>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	4a2a      	ldr	r2, [pc, #168]	; (8002afc <left+0x20c>)
 8002a54:	460b      	mov	r3, r1
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	440b      	add	r3, r1
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3310      	adds	r3, #16
 8002a60:	6018      	str	r0, [r3, #0]
			allPath[currentIndex].y2 = y2;
 8002a62:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <left+0x228>)
 8002a64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a68:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <left+0x208>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	4a22      	ldr	r2, [pc, #136]	; (8002afc <left+0x20c>)
 8002a72:	460b      	mov	r3, r1
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	440b      	add	r3, r1
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3314      	adds	r3, #20
 8002a7e:	6018      	str	r0, [r3, #0]
			currentIndex++;
 8002a80:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <left+0x208>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	3301      	adds	r3, #1
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <left+0x208>)
 8002a8a:	701a      	strb	r2, [r3, #0]
		}
		prevState = goLeft;
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <left+0x204>)
 8002a8e:	2202      	movs	r2, #2
 8002a90:	701a      	strb	r2, [r3, #0]
		//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;
		x1 -= speed;
 8002a92:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <left+0x218>)
 8002a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <left+0x214>)
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	b21a      	sxth	r2, r3
 8002aa4:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <left+0x218>)
 8002aa6:	801a      	strh	r2, [r3, #0]
		x2 -= speed;
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <left+0x220>)
 8002aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <left+0x214>)
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	b21a      	sxth	r2, r3
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <left+0x220>)
 8002abc:	801a      	strh	r2, [r3, #0]


		lcd_Fill(x1, y1, x2, y2, BLUE);
 8002abe:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <left+0x218>)
 8002ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ac4:	b298      	uxth	r0, r3
 8002ac6:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <left+0x224>)
 8002ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002acc:	b299      	uxth	r1, r3
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <left+0x220>)
 8002ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <left+0x228>)
 8002ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	241f      	movs	r4, #31
 8002ae0:	9400      	str	r4, [sp, #0]
 8002ae2:	f7fe fa29 	bl	8000f38 <lcd_Fill>
		delete_path();
 8002ae6:	f7ff fc77 	bl	80023d8 <delete_path>

}
 8002aea:	bf00      	nop
 8002aec:	3704      	adds	r7, #4
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd90      	pop	{r4, r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2000001f 	.word	0x2000001f
 8002af8:	200002bd 	.word	0x200002bd
 8002afc:	200002c0 	.word	0x200002c0
 8002b00:	20000022 	.word	0x20000022
 8002b04:	20000024 	.word	0x20000024
 8002b08:	20000016 	.word	0x20000016
 8002b0c:	20000020 	.word	0x20000020
 8002b10:	2000001a 	.word	0x2000001a
 8002b14:	20000018 	.word	0x20000018
 8002b18:	2000001c 	.word	0x2000001c

08002b1c <up>:


void up() {
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af02      	add	r7, sp, #8

	if (prevState == goUp) {
 8002b22:	4b85      	ldr	r3, [pc, #532]	; (8002d38 <up+0x21c>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d144      	bne.n	8002bb4 <up+0x98>
		if (allPath[currentIndex-1].length <= snakeTailLen) {
 8002b2a:	4b84      	ldr	r3, [pc, #528]	; (8002d3c <up+0x220>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	1e5a      	subs	r2, r3, #1
 8002b30:	4983      	ldr	r1, [pc, #524]	; (8002d40 <up+0x224>)
 8002b32:	4613      	mov	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	4413      	add	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a80      	ldr	r2, [pc, #512]	; (8002d44 <up+0x228>)
 8002b42:	8812      	ldrh	r2, [r2, #0]
 8002b44:	4293      	cmp	r3, r2
 8002b46:	dc19      	bgt.n	8002b7c <up+0x60>

					allPath[currentIndex-1].length += speed;
 8002b48:	4b7c      	ldr	r3, [pc, #496]	; (8002d3c <up+0x220>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	1e5a      	subs	r2, r3, #1
 8002b4e:	497c      	ldr	r1, [pc, #496]	; (8002d40 <up+0x224>)
 8002b50:	4613      	mov	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	440b      	add	r3, r1
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a7a      	ldr	r2, [pc, #488]	; (8002d48 <up+0x22c>)
 8002b60:	8812      	ldrh	r2, [r2, #0]
 8002b62:	4611      	mov	r1, r2
 8002b64:	4a75      	ldr	r2, [pc, #468]	; (8002d3c <up+0x220>)
 8002b66:	7812      	ldrb	r2, [r2, #0]
 8002b68:	3a01      	subs	r2, #1
 8002b6a:	4419      	add	r1, r3
 8002b6c:	4874      	ldr	r0, [pc, #464]	; (8002d40 <up+0x224>)
 8002b6e:	4613      	mov	r3, r2
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4403      	add	r3, r0
 8002b78:	3304      	adds	r3, #4
 8002b7a:	6019      	str	r1, [r3, #0]
				}

		allPath[currentIndex-1].y1 -= y1 ;
 8002b7c:	4b6f      	ldr	r3, [pc, #444]	; (8002d3c <up+0x220>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	1e5a      	subs	r2, r3, #1
 8002b82:	496f      	ldr	r1, [pc, #444]	; (8002d40 <up+0x224>)
 8002b84:	4613      	mov	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3310      	adds	r3, #16
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a6e      	ldr	r2, [pc, #440]	; (8002d4c <up+0x230>)
 8002b94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4a68      	ldr	r2, [pc, #416]	; (8002d3c <up+0x220>)
 8002b9c:	7812      	ldrb	r2, [r2, #0]
 8002b9e:	3a01      	subs	r2, #1
 8002ba0:	1a59      	subs	r1, r3, r1
 8002ba2:	4867      	ldr	r0, [pc, #412]	; (8002d40 <up+0x224>)
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4403      	add	r3, r0
 8002bae:	3310      	adds	r3, #16
 8002bb0:	6019      	str	r1, [r3, #0]
 8002bb2:	e08d      	b.n	8002cd0 <up+0x1b4>


	} else {
		if (currentIndex == 0) allPath[0].isTail = 0;
 8002bb4:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <up+0x220>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d103      	bne.n	8002bc4 <up+0xa8>
 8002bbc:	4b60      	ldr	r3, [pc, #384]	; (8002d40 <up+0x224>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	705a      	strb	r2, [r3, #1]
 8002bc2:	e00b      	b.n	8002bdc <up+0xc0>
		else allPath[currentIndex-1].isTail = 1;
 8002bc4:	4b5d      	ldr	r3, [pc, #372]	; (8002d3c <up+0x220>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	1e5a      	subs	r2, r3, #1
 8002bca:	495d      	ldr	r1, [pc, #372]	; (8002d40 <up+0x224>)
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].isTail = 0;
 8002bdc:	4b57      	ldr	r3, [pc, #348]	; (8002d3c <up+0x220>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	4619      	mov	r1, r3
 8002be2:	4a57      	ldr	r2, [pc, #348]	; (8002d40 <up+0x224>)
 8002be4:	460b      	mov	r3, r1
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	440b      	add	r3, r1
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	3301      	adds	r3, #1
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
		if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 8002bf4:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <up+0x228>)
 8002bf6:	881a      	ldrh	r2, [r3, #0]
 8002bf8:	4b55      	ldr	r3, [pc, #340]	; (8002d50 <up+0x234>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d10e      	bne.n	8002c1e <up+0x102>
 8002c00:	4b50      	ldr	r3, [pc, #320]	; (8002d44 <up+0x228>)
 8002c02:	881a      	ldrh	r2, [r3, #0]
 8002c04:	4b4d      	ldr	r3, [pc, #308]	; (8002d3c <up+0x220>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4a4c      	ldr	r2, [pc, #304]	; (8002d40 <up+0x224>)
 8002c0e:	460b      	mov	r3, r1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	440b      	add	r3, r1
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	3304      	adds	r3, #4
 8002c1a:	6018      	str	r0, [r3, #0]
 8002c1c:	e00b      	b.n	8002c36 <up+0x11a>
		else allPath[currentIndex].length = 0;
 8002c1e:	4b47      	ldr	r3, [pc, #284]	; (8002d3c <up+0x220>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	4619      	mov	r1, r3
 8002c24:	4a46      	ldr	r2, [pc, #280]	; (8002d40 <up+0x224>)
 8002c26:	460b      	mov	r3, r1
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	440b      	add	r3, r1
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3304      	adds	r3, #4
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
		allPath[currentIndex].currentState = goUp;
 8002c36:	4b41      	ldr	r3, [pc, #260]	; (8002d3c <up+0x220>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4a40      	ldr	r2, [pc, #256]	; (8002d40 <up+0x224>)
 8002c3e:	460b      	mov	r3, r1
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	440b      	add	r3, r1
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].x1 = x1;
 8002c4c:	4b41      	ldr	r3, [pc, #260]	; (8002d54 <up+0x238>)
 8002c4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c52:	4b3a      	ldr	r3, [pc, #232]	; (8002d3c <up+0x220>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	4619      	mov	r1, r3
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4a39      	ldr	r2, [pc, #228]	; (8002d40 <up+0x224>)
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	440b      	add	r3, r1
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	3308      	adds	r3, #8
 8002c68:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].x2 = x2;
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	; (8002d58 <up+0x23c>)
 8002c6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c70:	4b32      	ldr	r3, [pc, #200]	; (8002d3c <up+0x220>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	4619      	mov	r1, r3
 8002c76:	4610      	mov	r0, r2
 8002c78:	4a31      	ldr	r2, [pc, #196]	; (8002d40 <up+0x224>)
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	440b      	add	r3, r1
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	330c      	adds	r3, #12
 8002c86:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y1 = y1;
 8002c88:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <up+0x230>)
 8002c8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c8e:	4b2b      	ldr	r3, [pc, #172]	; (8002d3c <up+0x220>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	4619      	mov	r1, r3
 8002c94:	4610      	mov	r0, r2
 8002c96:	4a2a      	ldr	r2, [pc, #168]	; (8002d40 <up+0x224>)
 8002c98:	460b      	mov	r3, r1
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	440b      	add	r3, r1
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3310      	adds	r3, #16
 8002ca4:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y2 = y2;
 8002ca6:	4b2d      	ldr	r3, [pc, #180]	; (8002d5c <up+0x240>)
 8002ca8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002cac:	4b23      	ldr	r3, [pc, #140]	; (8002d3c <up+0x220>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4a22      	ldr	r2, [pc, #136]	; (8002d40 <up+0x224>)
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	440b      	add	r3, r1
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3314      	adds	r3, #20
 8002cc2:	6018      	str	r0, [r3, #0]
		currentIndex++;
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <up+0x220>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <up+0x220>)
 8002cce:	701a      	strb	r2, [r3, #0]
	}
	prevState = goUp;
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <up+0x21c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
	//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;

	y1 -= speed;
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <up+0x230>)
 8002cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	4b1a      	ldr	r3, [pc, #104]	; (8002d48 <up+0x22c>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	b21a      	sxth	r2, r3
 8002ce8:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <up+0x230>)
 8002cea:	801a      	strh	r2, [r3, #0]
	y2 -= speed;
 8002cec:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <up+0x240>)
 8002cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	4b14      	ldr	r3, [pc, #80]	; (8002d48 <up+0x22c>)
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	b21a      	sxth	r2, r3
 8002cfe:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <up+0x240>)
 8002d00:	801a      	strh	r2, [r3, #0]


	lcd_Fill(x1, y1, x2, y2, BLUE);
 8002d02:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <up+0x238>)
 8002d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d08:	b298      	uxth	r0, r3
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <up+0x230>)
 8002d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d10:	b299      	uxth	r1, r3
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <up+0x23c>)
 8002d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <up+0x240>)
 8002d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	241f      	movs	r4, #31
 8002d24:	9400      	str	r4, [sp, #0]
 8002d26:	f7fe f907 	bl	8000f38 <lcd_Fill>
	delete_path();
 8002d2a:	f7ff fb55 	bl	80023d8 <delete_path>
}
 8002d2e:	bf00      	nop
 8002d30:	3704      	adds	r7, #4
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd90      	pop	{r4, r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000001f 	.word	0x2000001f
 8002d3c:	200002bd 	.word	0x200002bd
 8002d40:	200002c0 	.word	0x200002c0
 8002d44:	20000022 	.word	0x20000022
 8002d48:	20000024 	.word	0x20000024
 8002d4c:	20000018 	.word	0x20000018
 8002d50:	20000020 	.word	0x20000020
 8002d54:	20000016 	.word	0x20000016
 8002d58:	2000001a 	.word	0x2000001a
 8002d5c:	2000001c 	.word	0x2000001c

08002d60 <down>:


void down() {
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af02      	add	r7, sp, #8

	if (prevState == goDown) {
 8002d66:	4b7f      	ldr	r3, [pc, #508]	; (8002f64 <down+0x204>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d138      	bne.n	8002de0 <down+0x80>
		if (allPath[currentIndex-1].length <= snakeTailLen) {
 8002d6e:	4b7e      	ldr	r3, [pc, #504]	; (8002f68 <down+0x208>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	1e5a      	subs	r2, r3, #1
 8002d74:	497d      	ldr	r1, [pc, #500]	; (8002f6c <down+0x20c>)
 8002d76:	4613      	mov	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	440b      	add	r3, r1
 8002d80:	3304      	adds	r3, #4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a7a      	ldr	r2, [pc, #488]	; (8002f70 <down+0x210>)
 8002d86:	8812      	ldrh	r2, [r2, #0]
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	dc19      	bgt.n	8002dc0 <down+0x60>

			allPath[currentIndex-1].length += speed;
 8002d8c:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <down+0x208>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	1e5a      	subs	r2, r3, #1
 8002d92:	4976      	ldr	r1, [pc, #472]	; (8002f6c <down+0x20c>)
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3304      	adds	r3, #4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a74      	ldr	r2, [pc, #464]	; (8002f74 <down+0x214>)
 8002da4:	8812      	ldrh	r2, [r2, #0]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4a6f      	ldr	r2, [pc, #444]	; (8002f68 <down+0x208>)
 8002daa:	7812      	ldrb	r2, [r2, #0]
 8002dac:	3a01      	subs	r2, #1
 8002dae:	4419      	add	r1, r3
 8002db0:	486e      	ldr	r0, [pc, #440]	; (8002f6c <down+0x20c>)
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4403      	add	r3, r0
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	6019      	str	r1, [r3, #0]
		}

		allPath[currentIndex-1].y2 = y2;
 8002dc0:	4b6d      	ldr	r3, [pc, #436]	; (8002f78 <down+0x218>)
 8002dc2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002dc6:	4b68      	ldr	r3, [pc, #416]	; (8002f68 <down+0x208>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	1e5a      	subs	r2, r3, #1
 8002dcc:	4608      	mov	r0, r1
 8002dce:	4967      	ldr	r1, [pc, #412]	; (8002f6c <down+0x20c>)
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	440b      	add	r3, r1
 8002dda:	3314      	adds	r3, #20
 8002ddc:	6018      	str	r0, [r3, #0]
 8002dde:	e08d      	b.n	8002efc <down+0x19c>
	} else {
		if (currentIndex == 0) allPath[0].isTail = 0;
 8002de0:	4b61      	ldr	r3, [pc, #388]	; (8002f68 <down+0x208>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d103      	bne.n	8002df0 <down+0x90>
 8002de8:	4b60      	ldr	r3, [pc, #384]	; (8002f6c <down+0x20c>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	705a      	strb	r2, [r3, #1]
 8002dee:	e00b      	b.n	8002e08 <down+0xa8>
		else allPath[currentIndex-1].isTail = 1;
 8002df0:	4b5d      	ldr	r3, [pc, #372]	; (8002f68 <down+0x208>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	1e5a      	subs	r2, r3, #1
 8002df6:	495d      	ldr	r1, [pc, #372]	; (8002f6c <down+0x20c>)
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	440b      	add	r3, r1
 8002e02:	3301      	adds	r3, #1
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].isTail = 0;
 8002e08:	4b57      	ldr	r3, [pc, #348]	; (8002f68 <down+0x208>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4a57      	ldr	r2, [pc, #348]	; (8002f6c <down+0x20c>)
 8002e10:	460b      	mov	r3, r1
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	440b      	add	r3, r1
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
		if (snakeTailLen == init_len) allPath[currentIndex].length = snakeTailLen;
 8002e20:	4b53      	ldr	r3, [pc, #332]	; (8002f70 <down+0x210>)
 8002e22:	881a      	ldrh	r2, [r3, #0]
 8002e24:	4b55      	ldr	r3, [pc, #340]	; (8002f7c <down+0x21c>)
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d10e      	bne.n	8002e4a <down+0xea>
 8002e2c:	4b50      	ldr	r3, [pc, #320]	; (8002f70 <down+0x210>)
 8002e2e:	881a      	ldrh	r2, [r3, #0]
 8002e30:	4b4d      	ldr	r3, [pc, #308]	; (8002f68 <down+0x208>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	4619      	mov	r1, r3
 8002e36:	4610      	mov	r0, r2
 8002e38:	4a4c      	ldr	r2, [pc, #304]	; (8002f6c <down+0x20c>)
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	440b      	add	r3, r1
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	3304      	adds	r3, #4
 8002e46:	6018      	str	r0, [r3, #0]
 8002e48:	e00b      	b.n	8002e62 <down+0x102>
		else allPath[currentIndex].length = 0;
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <down+0x208>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4a46      	ldr	r2, [pc, #280]	; (8002f6c <down+0x20c>)
 8002e52:	460b      	mov	r3, r1
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	440b      	add	r3, r1
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
		allPath[currentIndex].currentState = goDown;
 8002e62:	4b41      	ldr	r3, [pc, #260]	; (8002f68 <down+0x208>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	4619      	mov	r1, r3
 8002e68:	4a40      	ldr	r2, [pc, #256]	; (8002f6c <down+0x20c>)
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	440b      	add	r3, r1
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
		allPath[currentIndex].x1 = x1;
 8002e78:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <down+0x220>)
 8002e7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e7e:	4b3a      	ldr	r3, [pc, #232]	; (8002f68 <down+0x208>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	4a39      	ldr	r2, [pc, #228]	; (8002f6c <down+0x20c>)
 8002e88:	460b      	mov	r3, r1
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	440b      	add	r3, r1
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	3308      	adds	r3, #8
 8002e94:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].x2 = x2;
 8002e96:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <down+0x224>)
 8002e98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e9c:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <down+0x208>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4a31      	ldr	r2, [pc, #196]	; (8002f6c <down+0x20c>)
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	440b      	add	r3, r1
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	330c      	adds	r3, #12
 8002eb2:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y1 = y1;
 8002eb4:	4b34      	ldr	r3, [pc, #208]	; (8002f88 <down+0x228>)
 8002eb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002eba:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <down+0x208>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4a2a      	ldr	r2, [pc, #168]	; (8002f6c <down+0x20c>)
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	440b      	add	r3, r1
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4413      	add	r3, r2
 8002ece:	3310      	adds	r3, #16
 8002ed0:	6018      	str	r0, [r3, #0]
		allPath[currentIndex].y2 = y2;
 8002ed2:	4b29      	ldr	r3, [pc, #164]	; (8002f78 <down+0x218>)
 8002ed4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002ed8:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <down+0x208>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	4619      	mov	r1, r3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	4a22      	ldr	r2, [pc, #136]	; (8002f6c <down+0x20c>)
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	440b      	add	r3, r1
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4413      	add	r3, r2
 8002eec:	3314      	adds	r3, #20
 8002eee:	6018      	str	r0, [r3, #0]
		currentIndex++;
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <down+0x208>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	4b1b      	ldr	r3, [pc, #108]	; (8002f68 <down+0x208>)
 8002efa:	701a      	strb	r2, [r3, #0]
	}
	prevState = goDown;
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <down+0x204>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	701a      	strb	r2, [r3, #0]
	//if (snakeTailLen - allPath[currentIndex-1].length == init_len) allPath[currentIndex-1].length+=speed;
		y1 += speed;
 8002f02:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <down+0x228>)
 8002f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <down+0x214>)
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	4413      	add	r3, r2
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	b21a      	sxth	r2, r3
 8002f14:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <down+0x228>)
 8002f16:	801a      	strh	r2, [r3, #0]
		y2 += speed;
 8002f18:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <down+0x218>)
 8002f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <down+0x214>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	4413      	add	r3, r2
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	b21a      	sxth	r2, r3
 8002f2a:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <down+0x218>)
 8002f2c:	801a      	strh	r2, [r3, #0]

		lcd_Fill(x1, y1, x2, y2, BLUE);
 8002f2e:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <down+0x220>)
 8002f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f34:	b298      	uxth	r0, r3
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <down+0x228>)
 8002f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f3c:	b299      	uxth	r1, r3
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <down+0x224>)
 8002f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <down+0x218>)
 8002f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	241f      	movs	r4, #31
 8002f50:	9400      	str	r4, [sp, #0]
 8002f52:	f7fd fff1 	bl	8000f38 <lcd_Fill>
		delete_path();
 8002f56:	f7ff fa3f 	bl	80023d8 <delete_path>
}
 8002f5a:	bf00      	nop
 8002f5c:	3704      	adds	r7, #4
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd90      	pop	{r4, r7, pc}
 8002f62:	bf00      	nop
 8002f64:	2000001f 	.word	0x2000001f
 8002f68:	200002bd 	.word	0x200002bd
 8002f6c:	200002c0 	.word	0x200002c0
 8002f70:	20000022 	.word	0x20000022
 8002f74:	20000024 	.word	0x20000024
 8002f78:	2000001c 	.word	0x2000001c
 8002f7c:	20000020 	.word	0x20000020
 8002f80:	20000016 	.word	0x20000016
 8002f84:	2000001a 	.word	0x2000001a
 8002f88:	20000018 	.word	0x20000018

08002f8c <eat_food_success>:

void eat_food_success() {
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af02      	add	r7, sp, #8
	CREATE_FOOD = 1; //QUAY LAI HÀM TẠO FRUIT
 8002f92:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <eat_food_success+0x50>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	801a      	strh	r2, [r3, #0]
	count++; //tăng số điểm
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <eat_food_success+0x54>)
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <eat_food_success+0x54>)
 8002fa2:	801a      	strh	r2, [r3, #0]
	snakeTailLen += 10;
 8002fa4:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <eat_food_success+0x58>)
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	330a      	adds	r3, #10
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <eat_food_success+0x58>)
 8002fae:	801a      	strh	r2, [r3, #0]

	lcd_Fill(x_food, y_food, x_food+5, y_food+5, WHITE);
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <eat_food_success+0x5c>)
 8002fb2:	8818      	ldrh	r0, [r3, #0]
 8002fb4:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <eat_food_success+0x60>)
 8002fb6:	8819      	ldrh	r1, [r3, #0]
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <eat_food_success+0x5c>)
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	3305      	adds	r3, #5
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <eat_food_success+0x60>)
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	3305      	adds	r3, #5
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002fcc:	9400      	str	r4, [sp, #0]
 8002fce:	f7fd ffb3 	bl	8000f38 <lcd_Fill>
}
 8002fd2:	bf00      	nop
 8002fd4:	3704      	adds	r7, #4
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd90      	pop	{r4, r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000026 	.word	0x20000026
 8002fe0:	20000598 	.word	0x20000598
 8002fe4:	20000022 	.word	0x20000022
 8002fe8:	20000594 	.word	0x20000594
 8002fec:	20000596 	.word	0x20000596

08002ff0 <food>:

void food() {
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af02      	add	r7, sp, #8
	if(CREATE_FOOD == 1) { // Tạo mồi nhậu lần đầu tiên
 8002ff6:	4b95      	ldr	r3, [pc, #596]	; (800324c <food+0x25c>)
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d130      	bne.n	8003060 <food+0x70>
		x_food = random_eat(0,x_max-5);
 8002ffe:	4b94      	ldr	r3, [pc, #592]	; (8003250 <food+0x260>)
 8003000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b05      	subs	r3, #5
 8003008:	b29b      	uxth	r3, r3
 800300a:	4619      	mov	r1, r3
 800300c:	2000      	movs	r0, #0
 800300e:	f7fe fd74 	bl	8001afa <random_eat>
 8003012:	4603      	mov	r3, r0
 8003014:	461a      	mov	r2, r3
 8003016:	4b8f      	ldr	r3, [pc, #572]	; (8003254 <food+0x264>)
 8003018:	801a      	strh	r2, [r3, #0]
		y_food = random_eat(0,y_max-5);
 800301a:	4b8f      	ldr	r3, [pc, #572]	; (8003258 <food+0x268>)
 800301c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b05      	subs	r3, #5
 8003024:	b29b      	uxth	r3, r3
 8003026:	4619      	mov	r1, r3
 8003028:	2000      	movs	r0, #0
 800302a:	f7fe fd66 	bl	8001afa <random_eat>
 800302e:	4603      	mov	r3, r0
 8003030:	461a      	mov	r2, r3
 8003032:	4b8a      	ldr	r3, [pc, #552]	; (800325c <food+0x26c>)
 8003034:	801a      	strh	r2, [r3, #0]
		lcd_Fill(x_food, y_food, x_food+5, y_food+5, RED);
 8003036:	4b87      	ldr	r3, [pc, #540]	; (8003254 <food+0x264>)
 8003038:	8818      	ldrh	r0, [r3, #0]
 800303a:	4b88      	ldr	r3, [pc, #544]	; (800325c <food+0x26c>)
 800303c:	8819      	ldrh	r1, [r3, #0]
 800303e:	4b85      	ldr	r3, [pc, #532]	; (8003254 <food+0x264>)
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	3305      	adds	r3, #5
 8003044:	b29a      	uxth	r2, r3
 8003046:	4b85      	ldr	r3, [pc, #532]	; (800325c <food+0x26c>)
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	3305      	adds	r3, #5
 800304c:	b29b      	uxth	r3, r3
 800304e:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8003052:	9400      	str	r4, [sp, #0]
 8003054:	f7fd ff70 	bl	8000f38 <lcd_Fill>
		CREATE_FOOD = 0; // tránh tạo liên tục mồi nhậu
 8003058:	4b7c      	ldr	r3, [pc, #496]	; (800324c <food+0x25c>)
 800305a:	2200      	movs	r2, #0
 800305c:	801a      	strh	r2, [r3, #0]
			)
			) {
			eat_food_success();
		}
	}
}
 800305e:	e0f1      	b.n	8003244 <food+0x254>
		if((x2 == x_food) && (
 8003060:	4b7f      	ldr	r3, [pc, #508]	; (8003260 <food+0x270>)
 8003062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003066:	461a      	mov	r2, r3
 8003068:	4b7a      	ldr	r3, [pc, #488]	; (8003254 <food+0x264>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d133      	bne.n	80030d8 <food+0xe8>
				(y1 >= y_food && y1 <= y_food+5)
 8003070:	4b7c      	ldr	r3, [pc, #496]	; (8003264 <food+0x274>)
 8003072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003076:	461a      	mov	r2, r3
 8003078:	4b78      	ldr	r3, [pc, #480]	; (800325c <food+0x26c>)
 800307a:	881b      	ldrh	r3, [r3, #0]
		if((x2 == x_food) && (
 800307c:	429a      	cmp	r2, r3
 800307e:	db08      	blt.n	8003092 <food+0xa2>
				(y1 >= y_food && y1 <= y_food+5)
 8003080:	4b78      	ldr	r3, [pc, #480]	; (8003264 <food+0x274>)
 8003082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003086:	461a      	mov	r2, r3
 8003088:	4b74      	ldr	r3, [pc, #464]	; (800325c <food+0x26c>)
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	3305      	adds	r3, #5
 800308e:	429a      	cmp	r2, r3
 8003090:	dd20      	ble.n	80030d4 <food+0xe4>
			||	(y2 >= y_food && y2 <= y_food+5)
 8003092:	4b75      	ldr	r3, [pc, #468]	; (8003268 <food+0x278>)
 8003094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003098:	461a      	mov	r2, r3
 800309a:	4b70      	ldr	r3, [pc, #448]	; (800325c <food+0x26c>)
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	db08      	blt.n	80030b4 <food+0xc4>
 80030a2:	4b71      	ldr	r3, [pc, #452]	; (8003268 <food+0x278>)
 80030a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b6c      	ldr	r3, [pc, #432]	; (800325c <food+0x26c>)
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	3305      	adds	r3, #5
 80030b0:	429a      	cmp	r2, r3
 80030b2:	dd0f      	ble.n	80030d4 <food+0xe4>
			||  (y1 <= y_food && y2 >= y_food+5)
 80030b4:	4b6b      	ldr	r3, [pc, #428]	; (8003264 <food+0x274>)
 80030b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b67      	ldr	r3, [pc, #412]	; (800325c <food+0x26c>)
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	dc09      	bgt.n	80030d8 <food+0xe8>
 80030c4:	4b65      	ldr	r3, [pc, #404]	; (800325c <food+0x26c>)
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	3304      	adds	r3, #4
 80030ca:	4a67      	ldr	r2, [pc, #412]	; (8003268 <food+0x278>)
 80030cc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80030d0:	4293      	cmp	r3, r2
 80030d2:	da01      	bge.n	80030d8 <food+0xe8>
			eat_food_success();
 80030d4:	f7ff ff5a 	bl	8002f8c <eat_food_success>
		if((x1 == x_food+5) && (
 80030d8:	4b64      	ldr	r3, [pc, #400]	; (800326c <food+0x27c>)
 80030da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030de:	461a      	mov	r2, r3
 80030e0:	4b5c      	ldr	r3, [pc, #368]	; (8003254 <food+0x264>)
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	3305      	adds	r3, #5
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d133      	bne.n	8003152 <food+0x162>
				(y1 >= y_food && y1 <= y_food+5)
 80030ea:	4b5e      	ldr	r3, [pc, #376]	; (8003264 <food+0x274>)
 80030ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b5a      	ldr	r3, [pc, #360]	; (800325c <food+0x26c>)
 80030f4:	881b      	ldrh	r3, [r3, #0]
		if((x1 == x_food+5) && (
 80030f6:	429a      	cmp	r2, r3
 80030f8:	db08      	blt.n	800310c <food+0x11c>
				(y1 >= y_food && y1 <= y_food+5)
 80030fa:	4b5a      	ldr	r3, [pc, #360]	; (8003264 <food+0x274>)
 80030fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003100:	461a      	mov	r2, r3
 8003102:	4b56      	ldr	r3, [pc, #344]	; (800325c <food+0x26c>)
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	3305      	adds	r3, #5
 8003108:	429a      	cmp	r2, r3
 800310a:	dd20      	ble.n	800314e <food+0x15e>
			||	(y2 >= y_food && y2 <= y_food+5)
 800310c:	4b56      	ldr	r3, [pc, #344]	; (8003268 <food+0x278>)
 800310e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003112:	461a      	mov	r2, r3
 8003114:	4b51      	ldr	r3, [pc, #324]	; (800325c <food+0x26c>)
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	db08      	blt.n	800312e <food+0x13e>
 800311c:	4b52      	ldr	r3, [pc, #328]	; (8003268 <food+0x278>)
 800311e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003122:	461a      	mov	r2, r3
 8003124:	4b4d      	ldr	r3, [pc, #308]	; (800325c <food+0x26c>)
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	3305      	adds	r3, #5
 800312a:	429a      	cmp	r2, r3
 800312c:	dd0f      	ble.n	800314e <food+0x15e>
			||  (y1 <= y_food && y2 >= y_food+5)
 800312e:	4b4d      	ldr	r3, [pc, #308]	; (8003264 <food+0x274>)
 8003130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003134:	461a      	mov	r2, r3
 8003136:	4b49      	ldr	r3, [pc, #292]	; (800325c <food+0x26c>)
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	dc09      	bgt.n	8003152 <food+0x162>
 800313e:	4b47      	ldr	r3, [pc, #284]	; (800325c <food+0x26c>)
 8003140:	881b      	ldrh	r3, [r3, #0]
 8003142:	3304      	adds	r3, #4
 8003144:	4a48      	ldr	r2, [pc, #288]	; (8003268 <food+0x278>)
 8003146:	f9b2 2000 	ldrsh.w	r2, [r2]
 800314a:	4293      	cmp	r3, r2
 800314c:	da01      	bge.n	8003152 <food+0x162>
			eat_food_success();
 800314e:	f7ff ff1d 	bl	8002f8c <eat_food_success>
		if((y2 == y_food) && (
 8003152:	4b45      	ldr	r3, [pc, #276]	; (8003268 <food+0x278>)
 8003154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003158:	461a      	mov	r2, r3
 800315a:	4b40      	ldr	r3, [pc, #256]	; (800325c <food+0x26c>)
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d133      	bne.n	80031ca <food+0x1da>
				(x1 >= x_food && x1 <= x_food+5)
 8003162:	4b42      	ldr	r3, [pc, #264]	; (800326c <food+0x27c>)
 8003164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003168:	461a      	mov	r2, r3
 800316a:	4b3a      	ldr	r3, [pc, #232]	; (8003254 <food+0x264>)
 800316c:	881b      	ldrh	r3, [r3, #0]
		if((y2 == y_food) && (
 800316e:	429a      	cmp	r2, r3
 8003170:	db08      	blt.n	8003184 <food+0x194>
				(x1 >= x_food && x1 <= x_food+5)
 8003172:	4b3e      	ldr	r3, [pc, #248]	; (800326c <food+0x27c>)
 8003174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003178:	461a      	mov	r2, r3
 800317a:	4b36      	ldr	r3, [pc, #216]	; (8003254 <food+0x264>)
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	3305      	adds	r3, #5
 8003180:	429a      	cmp	r2, r3
 8003182:	dd20      	ble.n	80031c6 <food+0x1d6>
			||	(x2 >= x_food && x2 <= x_food+5)
 8003184:	4b36      	ldr	r3, [pc, #216]	; (8003260 <food+0x270>)
 8003186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800318a:	461a      	mov	r2, r3
 800318c:	4b31      	ldr	r3, [pc, #196]	; (8003254 <food+0x264>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	db08      	blt.n	80031a6 <food+0x1b6>
 8003194:	4b32      	ldr	r3, [pc, #200]	; (8003260 <food+0x270>)
 8003196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800319a:	461a      	mov	r2, r3
 800319c:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <food+0x264>)
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	3305      	adds	r3, #5
 80031a2:	429a      	cmp	r2, r3
 80031a4:	dd0f      	ble.n	80031c6 <food+0x1d6>
			||  (x1 <= x_food && x2 >= x_food+5)
 80031a6:	4b31      	ldr	r3, [pc, #196]	; (800326c <food+0x27c>)
 80031a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b29      	ldr	r3, [pc, #164]	; (8003254 <food+0x264>)
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	dc09      	bgt.n	80031ca <food+0x1da>
 80031b6:	4b27      	ldr	r3, [pc, #156]	; (8003254 <food+0x264>)
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4a28      	ldr	r2, [pc, #160]	; (8003260 <food+0x270>)
 80031be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80031c2:	4293      	cmp	r3, r2
 80031c4:	da01      	bge.n	80031ca <food+0x1da>
			eat_food_success();
 80031c6:	f7ff fee1 	bl	8002f8c <eat_food_success>
		if((y1 == y_food+5) && (
 80031ca:	4b26      	ldr	r3, [pc, #152]	; (8003264 <food+0x274>)
 80031cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <food+0x26c>)
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	3305      	adds	r3, #5
 80031d8:	429a      	cmp	r2, r3
 80031da:	d133      	bne.n	8003244 <food+0x254>
				(x1 >= x_food && x1 <= x_food+5)
 80031dc:	4b23      	ldr	r3, [pc, #140]	; (800326c <food+0x27c>)
 80031de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031e2:	461a      	mov	r2, r3
 80031e4:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <food+0x264>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
		if((y1 == y_food+5) && (
 80031e8:	429a      	cmp	r2, r3
 80031ea:	db08      	blt.n	80031fe <food+0x20e>
				(x1 >= x_food && x1 <= x_food+5)
 80031ec:	4b1f      	ldr	r3, [pc, #124]	; (800326c <food+0x27c>)
 80031ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b17      	ldr	r3, [pc, #92]	; (8003254 <food+0x264>)
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	3305      	adds	r3, #5
 80031fa:	429a      	cmp	r2, r3
 80031fc:	dd20      	ble.n	8003240 <food+0x250>
			||	(x2 >= x_food && x2 <= x_food+5)
 80031fe:	4b18      	ldr	r3, [pc, #96]	; (8003260 <food+0x270>)
 8003200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003204:	461a      	mov	r2, r3
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <food+0x264>)
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	db08      	blt.n	8003220 <food+0x230>
 800320e:	4b14      	ldr	r3, [pc, #80]	; (8003260 <food+0x270>)
 8003210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003214:	461a      	mov	r2, r3
 8003216:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <food+0x264>)
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	3305      	adds	r3, #5
 800321c:	429a      	cmp	r2, r3
 800321e:	dd0f      	ble.n	8003240 <food+0x250>
			||  (x1 <= x_food && x2 >= x_food+5)
 8003220:	4b12      	ldr	r3, [pc, #72]	; (800326c <food+0x27c>)
 8003222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003226:	461a      	mov	r2, r3
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <food+0x264>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	dc09      	bgt.n	8003244 <food+0x254>
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <food+0x264>)
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	3304      	adds	r3, #4
 8003236:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <food+0x270>)
 8003238:	f9b2 2000 	ldrsh.w	r2, [r2]
 800323c:	4293      	cmp	r3, r2
 800323e:	da01      	bge.n	8003244 <food+0x254>
			eat_food_success();
 8003240:	f7ff fea4 	bl	8002f8c <eat_food_success>
}
 8003244:	bf00      	nop
 8003246:	3704      	adds	r7, #4
 8003248:	46bd      	mov	sp, r7
 800324a:	bd90      	pop	{r4, r7, pc}
 800324c:	20000026 	.word	0x20000026
 8003250:	20000010 	.word	0x20000010
 8003254:	20000594 	.word	0x20000594
 8003258:	20000012 	.word	0x20000012
 800325c:	20000596 	.word	0x20000596
 8003260:	2000001a 	.word	0x2000001a
 8003264:	20000018 	.word	0x20000018
 8003268:	2000001c 	.word	0x2000001c
 800326c:	20000016 	.word	0x20000016

08003270 <move>:


void move() {
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b083      	sub	sp, #12
 8003274:	af02      	add	r7, sp, #8
	if(x1 <= 5 || x1 >= x_max || x2 <= 5 || x2 >= x_max
 8003276:	4b69      	ldr	r3, [pc, #420]	; (800341c <move+0x1ac>)
 8003278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800327c:	2b05      	cmp	r3, #5
 800327e:	dd34      	ble.n	80032ea <move+0x7a>
 8003280:	4b66      	ldr	r3, [pc, #408]	; (800341c <move+0x1ac>)
 8003282:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003286:	4b66      	ldr	r3, [pc, #408]	; (8003420 <move+0x1b0>)
 8003288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800328c:	429a      	cmp	r2, r3
 800328e:	da2c      	bge.n	80032ea <move+0x7a>
 8003290:	4b64      	ldr	r3, [pc, #400]	; (8003424 <move+0x1b4>)
 8003292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003296:	2b05      	cmp	r3, #5
 8003298:	dd27      	ble.n	80032ea <move+0x7a>
 800329a:	4b62      	ldr	r3, [pc, #392]	; (8003424 <move+0x1b4>)
 800329c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80032a0:	4b5f      	ldr	r3, [pc, #380]	; (8003420 <move+0x1b0>)
 80032a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	da1f      	bge.n	80032ea <move+0x7a>
	|| y1 <= y_min || y1 >= y_max || y2 <= y_min || y2 >= y_max) { //đụng tường
 80032aa:	4b5f      	ldr	r3, [pc, #380]	; (8003428 <move+0x1b8>)
 80032ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80032b0:	4b5e      	ldr	r3, [pc, #376]	; (800342c <move+0x1bc>)
 80032b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	dd17      	ble.n	80032ea <move+0x7a>
 80032ba:	4b5b      	ldr	r3, [pc, #364]	; (8003428 <move+0x1b8>)
 80032bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80032c0:	4b5b      	ldr	r3, [pc, #364]	; (8003430 <move+0x1c0>)
 80032c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	da0f      	bge.n	80032ea <move+0x7a>
 80032ca:	4b5a      	ldr	r3, [pc, #360]	; (8003434 <move+0x1c4>)
 80032cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80032d0:	4b56      	ldr	r3, [pc, #344]	; (800342c <move+0x1bc>)
 80032d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	dd07      	ble.n	80032ea <move+0x7a>
 80032da:	4b56      	ldr	r3, [pc, #344]	; (8003434 <move+0x1c4>)
 80032dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80032e0:	4b53      	ldr	r3, [pc, #332]	; (8003430 <move+0x1c0>)
 80032e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	db02      	blt.n	80032f0 <move+0x80>
			game_over();
 80032ea:	f7fe fcb3 	bl	8001c54 <game_over>
			return;
 80032ee:	e092      	b.n	8003416 <move+0x1a6>
	}
	led7_SetDigit(0, 0, 0);
 80032f0:	2200      	movs	r2, #0
 80032f2:	2100      	movs	r1, #0
 80032f4:	2000      	movs	r0, #0
 80032f6:	f7fe fb11 	bl	800191c <led7_SetDigit>
	led7_SetDigit(0, 1, 0);
 80032fa:	2200      	movs	r2, #0
 80032fc:	2101      	movs	r1, #1
 80032fe:	2000      	movs	r0, #0
 8003300:	f7fe fb0c 	bl	800191c <led7_SetDigit>
	led7_SetDigit(count/10, 2, 0);
 8003304:	4b4c      	ldr	r3, [pc, #304]	; (8003438 <move+0x1c8>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	4a4c      	ldr	r2, [pc, #304]	; (800343c <move+0x1cc>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	08db      	lsrs	r3, r3, #3
 8003310:	b29b      	uxth	r3, r3
 8003312:	2200      	movs	r2, #0
 8003314:	2102      	movs	r1, #2
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fb00 	bl	800191c <led7_SetDigit>
	led7_SetDigit(count%10, 3, 0); //hiển thị điểm số
 800331c:	4b46      	ldr	r3, [pc, #280]	; (8003438 <move+0x1c8>)
 800331e:	881a      	ldrh	r2, [r3, #0]
 8003320:	4b46      	ldr	r3, [pc, #280]	; (800343c <move+0x1cc>)
 8003322:	fba3 1302 	umull	r1, r3, r3, r2
 8003326:	08d9      	lsrs	r1, r3, #3
 8003328:	460b      	mov	r3, r1
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	b29b      	uxth	r3, r3
 8003334:	2200      	movs	r2, #0
 8003336:	2103      	movs	r1, #3
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe faef 	bl	800191c <led7_SetDigit>
//	count++;

	food();
 800333e:	f7ff fe57 	bl	8002ff0 <food>
	//snake move with button
	if (button_count[6] == 1) {
 8003342:	4b3f      	ldr	r3, [pc, #252]	; (8003440 <move+0x1d0>)
 8003344:	899b      	ldrh	r3, [r3, #12]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d10b      	bne.n	8003362 <move+0xf2>
		if (firstState != goDown) {
 800334a:	4b3e      	ldr	r3, [pc, #248]	; (8003444 <move+0x1d4>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d036      	beq.n	80033c0 <move+0x150>
			prevState = firstState;
 8003352:	4b3c      	ldr	r3, [pc, #240]	; (8003444 <move+0x1d4>)
 8003354:	781a      	ldrb	r2, [r3, #0]
 8003356:	4b3c      	ldr	r3, [pc, #240]	; (8003448 <move+0x1d8>)
 8003358:	701a      	strb	r2, [r3, #0]
			firstState = goUp;
 800335a:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <move+0x1d4>)
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
 8003360:	e02e      	b.n	80033c0 <move+0x150>
		}

	}
	else if (button_count[14] == 1) {
 8003362:	4b37      	ldr	r3, [pc, #220]	; (8003440 <move+0x1d0>)
 8003364:	8b9b      	ldrh	r3, [r3, #28]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d10b      	bne.n	8003382 <move+0x112>
		if (firstState != goUp) {
 800336a:	4b36      	ldr	r3, [pc, #216]	; (8003444 <move+0x1d4>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d026      	beq.n	80033c0 <move+0x150>
			prevState = firstState;
 8003372:	4b34      	ldr	r3, [pc, #208]	; (8003444 <move+0x1d4>)
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	4b34      	ldr	r3, [pc, #208]	; (8003448 <move+0x1d8>)
 8003378:	701a      	strb	r2, [r3, #0]
			firstState = goDown;
 800337a:	4b32      	ldr	r3, [pc, #200]	; (8003444 <move+0x1d4>)
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
 8003380:	e01e      	b.n	80033c0 <move+0x150>
		}

	}
	else if (button_count[11] == 1) {
 8003382:	4b2f      	ldr	r3, [pc, #188]	; (8003440 <move+0x1d0>)
 8003384:	8adb      	ldrh	r3, [r3, #22]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d10b      	bne.n	80033a2 <move+0x132>
		if (firstState != goLeft) {
 800338a:	4b2e      	ldr	r3, [pc, #184]	; (8003444 <move+0x1d4>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d016      	beq.n	80033c0 <move+0x150>
			prevState = firstState;
 8003392:	4b2c      	ldr	r3, [pc, #176]	; (8003444 <move+0x1d4>)
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <move+0x1d8>)
 8003398:	701a      	strb	r2, [r3, #0]
			firstState = goRight;
 800339a:	4b2a      	ldr	r3, [pc, #168]	; (8003444 <move+0x1d4>)
 800339c:	2203      	movs	r2, #3
 800339e:	701a      	strb	r2, [r3, #0]
 80033a0:	e00e      	b.n	80033c0 <move+0x150>
		}

	}
	else if (button_count[9] == 1) {
 80033a2:	4b27      	ldr	r3, [pc, #156]	; (8003440 <move+0x1d0>)
 80033a4:	8a5b      	ldrh	r3, [r3, #18]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d10a      	bne.n	80033c0 <move+0x150>
		if (firstState != goRight) {
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <move+0x1d4>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d006      	beq.n	80033c0 <move+0x150>
			prevState = firstState;
 80033b2:	4b24      	ldr	r3, [pc, #144]	; (8003444 <move+0x1d4>)
 80033b4:	781a      	ldrb	r2, [r3, #0]
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <move+0x1d8>)
 80033b8:	701a      	strb	r2, [r3, #0]
			firstState = goLeft;
 80033ba:	4b22      	ldr	r3, [pc, #136]	; (8003444 <move+0x1d4>)
 80033bc:	2202      	movs	r2, #2
 80033be:	701a      	strb	r2, [r3, #0]
		}

	}
	switch (firstState) {
 80033c0:	4b20      	ldr	r3, [pc, #128]	; (8003444 <move+0x1d4>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d00c      	beq.n	80033e2 <move+0x172>
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	dc0d      	bgt.n	80033e8 <move+0x178>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <move+0x166>
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d003      	beq.n	80033dc <move+0x16c>
 80033d4:	e008      	b.n	80033e8 <move+0x178>
		case goUp:
			up();
 80033d6:	f7ff fba1 	bl	8002b1c <up>
			break;
 80033da:	e008      	b.n	80033ee <move+0x17e>
		case goDown:
			down();
 80033dc:	f7ff fcc0 	bl	8002d60 <down>
			break;
 80033e0:	e005      	b.n	80033ee <move+0x17e>
		case goRight:
			right();
 80033e2:	f7ff f96f 	bl	80026c4 <right>
			break;
 80033e6:	e002      	b.n	80033ee <move+0x17e>
		default:
			left();
 80033e8:	f7ff fa82 	bl	80028f0 <left>
			break;
 80033ec:	bf00      	nop
	}
	snakeSelfBite (x1,y1,x2,y2, 0);
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <move+0x1ac>)
 80033f0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <move+0x1b8>)
 80033f6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80033fa:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <move+0x1b4>)
 80033fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <move+0x1c4>)
 8003402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003406:	2400      	movs	r4, #0
 8003408:	9400      	str	r4, [sp, #0]
 800340a:	f7fe fd87 	bl	8001f1c <snakeSelfBite>
	moveWall(); // mode 3
 800340e:	f7fe fdbb 	bl	8001f88 <moveWall>
	checkCollision(); //m
 8003412:	f7fe ff1d 	bl	8002250 <checkCollision>
}
 8003416:	3704      	adds	r7, #4
 8003418:	46bd      	mov	sp, r7
 800341a:	bd90      	pop	{r4, r7, pc}
 800341c:	20000016 	.word	0x20000016
 8003420:	20000010 	.word	0x20000010
 8003424:	2000001a 	.word	0x2000001a
 8003428:	20000018 	.word	0x20000018
 800342c:	20000014 	.word	0x20000014
 8003430:	20000012 	.word	0x20000012
 8003434:	2000001c 	.word	0x2000001c
 8003438:	20000598 	.word	0x20000598
 800343c:	cccccccd 	.word	0xcccccccd
 8003440:	200001e4 	.word	0x200001e4
 8003444:	2000001e 	.word	0x2000001e
 8003448:	2000001f 	.word	0x2000001f

0800344c <wall>:

void wall() {
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af02      	add	r7, sp, #8
	lcd_DrawRectangle(5, y_min, x_max, y_max, RED); //TẠO TƯỜNG
 8003452:	4b0a      	ldr	r3, [pc, #40]	; (800347c <wall+0x30>)
 8003454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003458:	b299      	uxth	r1, r3
 800345a:	4b09      	ldr	r3, [pc, #36]	; (8003480 <wall+0x34>)
 800345c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003460:	b29a      	uxth	r2, r3
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <wall+0x38>)
 8003464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003468:	b29b      	uxth	r3, r3
 800346a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800346e:	9000      	str	r0, [sp, #0]
 8003470:	2005      	movs	r0, #5
 8003472:	f7fd fe32 	bl	80010da <lcd_DrawRectangle>
}
 8003476:	bf00      	nop
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	20000014 	.word	0x20000014
 8003480:	20000010 	.word	0x20000010
 8003484:	20000012 	.word	0x20000012

08003488 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800348c:	4803      	ldr	r0, [pc, #12]	; (800349c <timer_init+0x14>)
 800348e:	f003 faa5 	bl	80069dc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8003492:	4803      	ldr	r0, [pc, #12]	; (80034a0 <timer_init+0x18>)
 8003494:	f003 fa3a 	bl	800690c <HAL_TIM_Base_Start>
}
 8003498:	bf00      	nop
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000644 	.word	0x20000644
 80034a0:	200005fc 	.word	0x200005fc

080034a4 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 80034ae:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <setTimer2+0x2c>)
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <setTimer2+0x2c>)
 80034b6:	881a      	ldrh	r2, [r3, #0]
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <setTimer2+0x30>)
 80034ba:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <setTimer2+0x34>)
 80034be:	2200      	movs	r2, #0
 80034c0:	801a      	strh	r2, [r3, #0]
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	2000059e 	.word	0x2000059e
 80034d4:	2000059c 	.word	0x2000059c
 80034d8:	2000059a 	.word	0x2000059a

080034dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ec:	d116      	bne.n	800351c <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d010      	beq.n	8003518 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003500:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8003502:	4b08      	ldr	r3, [pc, #32]	; (8003524 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800350a:	4b07      	ldr	r3, [pc, #28]	; (8003528 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800350c:	2201      	movs	r2, #1
 800350e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003512:	881a      	ldrh	r2, [r3, #0]
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003516:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8003518:	f7fe f974 	bl	8001804 <led7_Scan>
	}
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	2000059c 	.word	0x2000059c
 8003528:	2000059a 	.word	0x2000059a
 800352c:	2000059e 	.word	0x2000059e

08003530 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003534:	4b17      	ldr	r3, [pc, #92]	; (8003594 <MX_SPI1_Init+0x64>)
 8003536:	4a18      	ldr	r2, [pc, #96]	; (8003598 <MX_SPI1_Init+0x68>)
 8003538:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800353a:	4b16      	ldr	r3, [pc, #88]	; (8003594 <MX_SPI1_Init+0x64>)
 800353c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003540:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003542:	4b14      	ldr	r3, [pc, #80]	; (8003594 <MX_SPI1_Init+0x64>)
 8003544:	2200      	movs	r2, #0
 8003546:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003548:	4b12      	ldr	r3, [pc, #72]	; (8003594 <MX_SPI1_Init+0x64>)
 800354a:	2200      	movs	r2, #0
 800354c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800354e:	4b11      	ldr	r3, [pc, #68]	; (8003594 <MX_SPI1_Init+0x64>)
 8003550:	2200      	movs	r2, #0
 8003552:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <MX_SPI1_Init+0x64>)
 8003556:	2200      	movs	r2, #0
 8003558:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <MX_SPI1_Init+0x64>)
 800355c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003560:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003562:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <MX_SPI1_Init+0x64>)
 8003564:	2200      	movs	r2, #0
 8003566:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003568:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <MX_SPI1_Init+0x64>)
 800356a:	2200      	movs	r2, #0
 800356c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <MX_SPI1_Init+0x64>)
 8003570:	2200      	movs	r2, #0
 8003572:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003574:	4b07      	ldr	r3, [pc, #28]	; (8003594 <MX_SPI1_Init+0x64>)
 8003576:	2200      	movs	r2, #0
 8003578:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800357a:	4b06      	ldr	r3, [pc, #24]	; (8003594 <MX_SPI1_Init+0x64>)
 800357c:	220a      	movs	r2, #10
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003580:	4804      	ldr	r0, [pc, #16]	; (8003594 <MX_SPI1_Init+0x64>)
 8003582:	f002 fb87 	bl	8005c94 <HAL_SPI_Init>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800358c:	f7fe fab0 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003590:	bf00      	nop
 8003592:	bd80      	pop	{r7, pc}
 8003594:	200005a0 	.word	0x200005a0
 8003598:	40013000 	.word	0x40013000

0800359c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a4:	f107 0314 	add.w	r3, r7, #20
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a19      	ldr	r2, [pc, #100]	; (8003620 <HAL_SPI_MspInit+0x84>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d12b      	bne.n	8003616 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	4b18      	ldr	r3, [pc, #96]	; (8003624 <HAL_SPI_MspInit+0x88>)
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	4a17      	ldr	r2, [pc, #92]	; (8003624 <HAL_SPI_MspInit+0x88>)
 80035c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035cc:	6453      	str	r3, [r2, #68]	; 0x44
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <HAL_SPI_MspInit+0x88>)
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_SPI_MspInit+0x88>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	4a10      	ldr	r2, [pc, #64]	; (8003624 <HAL_SPI_MspInit+0x88>)
 80035e4:	f043 0302 	orr.w	r3, r3, #2
 80035e8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ea:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <HAL_SPI_MspInit+0x88>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80035f6:	2338      	movs	r3, #56	; 0x38
 80035f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fa:	2302      	movs	r3, #2
 80035fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003602:	2303      	movs	r3, #3
 8003604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003606:	2305      	movs	r3, #5
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360a:	f107 0314 	add.w	r3, r7, #20
 800360e:	4619      	mov	r1, r3
 8003610:	4805      	ldr	r0, [pc, #20]	; (8003628 <HAL_SPI_MspInit+0x8c>)
 8003612:	f001 fbad 	bl	8004d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003616:	bf00      	nop
 8003618:	3728      	adds	r7, #40	; 0x28
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40013000 	.word	0x40013000
 8003624:	40023800 	.word	0x40023800
 8003628:	40020400 	.word	0x40020400

0800362c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	4b10      	ldr	r3, [pc, #64]	; (8003678 <HAL_MspInit+0x4c>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	4a0f      	ldr	r2, [pc, #60]	; (8003678 <HAL_MspInit+0x4c>)
 800363c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003640:	6453      	str	r3, [r2, #68]	; 0x44
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <HAL_MspInit+0x4c>)
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364a:	607b      	str	r3, [r7, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <HAL_MspInit+0x4c>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	4a08      	ldr	r2, [pc, #32]	; (8003678 <HAL_MspInit+0x4c>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800365c:	6413      	str	r3, [r2, #64]	; 0x40
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_MspInit+0x4c>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	603b      	str	r3, [r7, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800

0800367c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003680:	e7fe      	b.n	8003680 <NMI_Handler+0x4>

08003682 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003682:	b480      	push	{r7}
 8003684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003686:	e7fe      	b.n	8003686 <HardFault_Handler+0x4>

08003688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800368c:	e7fe      	b.n	800368c <MemManage_Handler+0x4>

0800368e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800368e:	b480      	push	{r7}
 8003690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003692:	e7fe      	b.n	8003692 <BusFault_Handler+0x4>

08003694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003698:	e7fe      	b.n	8003698 <UsageFault_Handler+0x4>

0800369a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800369a:	b480      	push	{r7}
 800369c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036b6:	b480      	push	{r7}
 80036b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036ba:	bf00      	nop
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036c8:	f000 fc1e 	bl	8003f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036cc:	bf00      	nop
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80036d4:	4802      	ldr	r0, [pc, #8]	; (80036e0 <TIM2_IRQHandler+0x10>)
 80036d6:	f003 fa4a 	bl	8006b6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000644 	.word	0x20000644

080036e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036e8:	4802      	ldr	r0, [pc, #8]	; (80036f4 <USART1_IRQHandler+0x10>)
 80036ea:	f004 f985 	bl	80079f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200006d8 	.word	0x200006d8

080036f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036fc:	4802      	ldr	r0, [pc, #8]	; (8003708 <USART2_IRQHandler+0x10>)
 80036fe:	f004 f97b 	bl	80079f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	2000071c 	.word	0x2000071c

0800370c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003710:	4802      	ldr	r0, [pc, #8]	; (800371c <DMA2_Stream0_IRQHandler+0x10>)
 8003712:	f001 f8f1 	bl	80048f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000184 	.word	0x20000184

08003720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
	return 1;
 8003724:	2301      	movs	r3, #1
}
 8003726:	4618      	mov	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <_kill>:

int _kill(int pid, int sig)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800373a:	f005 fb23 	bl	8008d84 <__errno>
 800373e:	4603      	mov	r3, r0
 8003740:	2216      	movs	r2, #22
 8003742:	601a      	str	r2, [r3, #0]
	return -1;
 8003744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <_exit>:

void _exit (int status)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003758:	f04f 31ff 	mov.w	r1, #4294967295
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff ffe7 	bl	8003730 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003762:	e7fe      	b.n	8003762 <_exit+0x12>

08003764 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	e00a      	b.n	800378c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003776:	f3af 8000 	nop.w
 800377a:	4601      	mov	r1, r0
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	60ba      	str	r2, [r7, #8]
 8003782:	b2ca      	uxtb	r2, r1
 8003784:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	3301      	adds	r3, #1
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	429a      	cmp	r2, r3
 8003792:	dbf0      	blt.n	8003776 <_read+0x12>
	}

return len;
 8003794:	687b      	ldr	r3, [r7, #4]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b086      	sub	sp, #24
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	e009      	b.n	80037c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	60ba      	str	r2, [r7, #8]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	3301      	adds	r3, #1
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	dbf1      	blt.n	80037b0 <_write+0x12>
	}
	return len;
 80037cc:	687b      	ldr	r3, [r7, #4]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <_close>:

int _close(int file)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
	return -1;
 80037de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037fe:	605a      	str	r2, [r3, #4]
	return 0;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <_isatty>:

int _isatty(int file)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
	return 1;
 8003816:	2301      	movs	r3, #1
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
	return 0;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003848:	4a14      	ldr	r2, [pc, #80]	; (800389c <_sbrk+0x5c>)
 800384a:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <_sbrk+0x60>)
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003854:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <_sbrk+0x64>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d102      	bne.n	8003862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800385c:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <_sbrk+0x64>)
 800385e:	4a12      	ldr	r2, [pc, #72]	; (80038a8 <_sbrk+0x68>)
 8003860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <_sbrk+0x64>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	429a      	cmp	r2, r3
 800386e:	d207      	bcs.n	8003880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003870:	f005 fa88 	bl	8008d84 <__errno>
 8003874:	4603      	mov	r3, r0
 8003876:	220c      	movs	r2, #12
 8003878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800387a:	f04f 33ff 	mov.w	r3, #4294967295
 800387e:	e009      	b.n	8003894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003880:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <_sbrk+0x64>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003886:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <_sbrk+0x64>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4413      	add	r3, r2
 800388e:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <_sbrk+0x64>)
 8003890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003892:	68fb      	ldr	r3, [r7, #12]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20020000 	.word	0x20020000
 80038a0:	00000400 	.word	0x00000400
 80038a4:	200005f8 	.word	0x200005f8
 80038a8:	200008b0 	.word	0x200008b0

080038ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <SystemInit+0x20>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	4a05      	ldr	r2, [pc, #20]	; (80038cc <SystemInit+0x20>)
 80038b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038d6:	f107 0308 	add.w	r3, r7, #8
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	605a      	str	r2, [r3, #4]
 80038e0:	609a      	str	r2, [r3, #8]
 80038e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038e4:	463b      	mov	r3, r7
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038ec:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <MX_TIM1_Init+0x98>)
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <MX_TIM1_Init+0x9c>)
 80038f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80038f2:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <MX_TIM1_Init+0x98>)
 80038f4:	2253      	movs	r2, #83	; 0x53
 80038f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <MX_TIM1_Init+0x98>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80038fe:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <MX_TIM1_Init+0x98>)
 8003900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003904:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003906:	4b18      	ldr	r3, [pc, #96]	; (8003968 <MX_TIM1_Init+0x98>)
 8003908:	2200      	movs	r2, #0
 800390a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800390c:	4b16      	ldr	r3, [pc, #88]	; (8003968 <MX_TIM1_Init+0x98>)
 800390e:	2200      	movs	r2, #0
 8003910:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003912:	4b15      	ldr	r3, [pc, #84]	; (8003968 <MX_TIM1_Init+0x98>)
 8003914:	2200      	movs	r2, #0
 8003916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003918:	4813      	ldr	r0, [pc, #76]	; (8003968 <MX_TIM1_Init+0x98>)
 800391a:	f002 ffa7 	bl	800686c <HAL_TIM_Base_Init>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003924:	f7fe f8e4 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800392c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800392e:	f107 0308 	add.w	r3, r7, #8
 8003932:	4619      	mov	r1, r3
 8003934:	480c      	ldr	r0, [pc, #48]	; (8003968 <MX_TIM1_Init+0x98>)
 8003936:	f003 fae5 	bl	8006f04 <HAL_TIM_ConfigClockSource>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003940:	f7fe f8d6 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003944:	2300      	movs	r3, #0
 8003946:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003948:	2300      	movs	r3, #0
 800394a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800394c:	463b      	mov	r3, r7
 800394e:	4619      	mov	r1, r3
 8003950:	4805      	ldr	r0, [pc, #20]	; (8003968 <MX_TIM1_Init+0x98>)
 8003952:	f003 feb1 	bl	80076b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800395c:	f7fe f8c8 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003960:	bf00      	nop
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	200005fc 	.word	0x200005fc
 800396c:	40010000 	.word	0x40010000

08003970 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003976:	f107 0308 	add.w	r3, r7, #8
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003984:	463b      	mov	r3, r7
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800398c:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <MX_TIM2_Init+0x94>)
 800398e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003992:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003994:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <MX_TIM2_Init+0x94>)
 8003996:	f240 3247 	movw	r2, #839	; 0x347
 800399a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800399c:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <MX_TIM2_Init+0x94>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80039a2:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <MX_TIM2_Init+0x94>)
 80039a4:	2263      	movs	r2, #99	; 0x63
 80039a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <MX_TIM2_Init+0x94>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039ae:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <MX_TIM2_Init+0x94>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80039b4:	4813      	ldr	r0, [pc, #76]	; (8003a04 <MX_TIM2_Init+0x94>)
 80039b6:	f002 ff59 	bl	800686c <HAL_TIM_Base_Init>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80039c0:	f7fe f896 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	4619      	mov	r1, r3
 80039d0:	480c      	ldr	r0, [pc, #48]	; (8003a04 <MX_TIM2_Init+0x94>)
 80039d2:	f003 fa97 	bl	8006f04 <HAL_TIM_ConfigClockSource>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80039dc:	f7fe f888 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039e0:	2300      	movs	r3, #0
 80039e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039e8:	463b      	mov	r3, r7
 80039ea:	4619      	mov	r1, r3
 80039ec:	4805      	ldr	r0, [pc, #20]	; (8003a04 <MX_TIM2_Init+0x94>)
 80039ee:	f003 fe63 	bl	80076b8 <HAL_TIMEx_MasterConfigSynchronization>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80039f8:	f7fe f87a 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80039fc:	bf00      	nop
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000644 	.word	0x20000644

08003a08 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	611a      	str	r2, [r3, #16]
 8003a1c:	615a      	str	r2, [r3, #20]
 8003a1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003a20:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <MX_TIM13_Init+0x94>)
 8003a22:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <MX_TIM13_Init+0x98>)
 8003a24:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8003a26:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <MX_TIM13_Init+0x94>)
 8003a28:	f240 3247 	movw	r2, #839	; 0x347
 8003a2c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a2e:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <MX_TIM13_Init+0x94>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8003a34:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <MX_TIM13_Init+0x94>)
 8003a36:	2263      	movs	r2, #99	; 0x63
 8003a38:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a3a:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <MX_TIM13_Init+0x94>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a40:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <MX_TIM13_Init+0x94>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003a46:	4815      	ldr	r0, [pc, #84]	; (8003a9c <MX_TIM13_Init+0x94>)
 8003a48:	f002 ff10 	bl	800686c <HAL_TIM_Base_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8003a52:	f7fe f84d 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003a56:	4811      	ldr	r0, [pc, #68]	; (8003a9c <MX_TIM13_Init+0x94>)
 8003a58:	f003 f830 	bl	8006abc <HAL_TIM_PWM_Init>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8003a62:	f7fe f845 	bl	8001af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a66:	2360      	movs	r3, #96	; 0x60
 8003a68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	2200      	movs	r2, #0
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4807      	ldr	r0, [pc, #28]	; (8003a9c <MX_TIM13_Init+0x94>)
 8003a7e:	f003 f97f 	bl	8006d80 <HAL_TIM_PWM_ConfigChannel>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003a88:	f7fe f832 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003a8c:	4803      	ldr	r0, [pc, #12]	; (8003a9c <MX_TIM13_Init+0x94>)
 8003a8e:	f000 f85b 	bl	8003b48 <HAL_TIM_MspPostInit>

}
 8003a92:	bf00      	nop
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	2000068c 	.word	0x2000068c
 8003aa0:	40001c00 	.word	0x40001c00

08003aa4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a22      	ldr	r2, [pc, #136]	; (8003b3c <HAL_TIM_Base_MspInit+0x98>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <HAL_TIM_Base_MspInit+0x9c>)
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	4a20      	ldr	r2, [pc, #128]	; (8003b40 <HAL_TIM_Base_MspInit+0x9c>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ac6:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <HAL_TIM_Base_MspInit+0x9c>)
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8003ad2:	e02e      	b.n	8003b32 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003adc:	d116      	bne.n	8003b0c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <HAL_TIM_Base_MspInit+0x9c>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a16      	ldr	r2, [pc, #88]	; (8003b40 <HAL_TIM_Base_MspInit+0x9c>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
 8003aee:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <HAL_TIM_Base_MspInit+0x9c>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003afa:	2200      	movs	r2, #0
 8003afc:	2100      	movs	r1, #0
 8003afe:	201c      	movs	r0, #28
 8003b00:	f000 fd83 	bl	800460a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b04:	201c      	movs	r0, #28
 8003b06:	f000 fd9c 	bl	8004642 <HAL_NVIC_EnableIRQ>
}
 8003b0a:	e012      	b.n	8003b32 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0c      	ldr	r2, [pc, #48]	; (8003b44 <HAL_TIM_Base_MspInit+0xa0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d10d      	bne.n	8003b32 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_TIM_Base_MspInit+0x9c>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	4a08      	ldr	r2, [pc, #32]	; (8003b40 <HAL_TIM_Base_MspInit+0x9c>)
 8003b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b24:	6413      	str	r3, [r2, #64]	; 0x40
 8003b26:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_TIM_Base_MspInit+0x9c>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
}
 8003b32:	bf00      	nop
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40001c00 	.word	0x40001c00

08003b48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b50:	f107 030c 	add.w	r3, r7, #12
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	60da      	str	r2, [r3, #12]
 8003b5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <HAL_TIM_MspPostInit+0x68>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d11e      	bne.n	8003ba8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <HAL_TIM_MspPostInit+0x6c>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <HAL_TIM_MspPostInit+0x6c>)
 8003b74:	f043 0320 	orr.w	r3, r3, #32
 8003b78:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <HAL_TIM_MspPostInit+0x6c>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003b98:	2309      	movs	r3, #9
 8003b9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b9c:	f107 030c 	add.w	r3, r7, #12
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4805      	ldr	r0, [pc, #20]	; (8003bb8 <HAL_TIM_MspPostInit+0x70>)
 8003ba4:	f001 f8e4 	bl	8004d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003ba8:	bf00      	nop
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40001c00 	.word	0x40001c00
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40021400 	.word	0x40021400

08003bbc <HAL_UART_RxCpltCallback>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart2, bytes, size, 10);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <HAL_UART_RxCpltCallback+0x74>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d10a      	bne.n	8003be4 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8003bce:	230a      	movs	r3, #10
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4918      	ldr	r1, [pc, #96]	; (8003c34 <HAL_UART_RxCpltCallback+0x78>)
 8003bd4:	4818      	ldr	r0, [pc, #96]	; (8003c38 <HAL_UART_RxCpltCallback+0x7c>)
 8003bd6:	f003 fe4c 	bl	8007872 <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8003bda:	2201      	movs	r2, #1
 8003bdc:	4915      	ldr	r1, [pc, #84]	; (8003c34 <HAL_UART_RxCpltCallback+0x78>)
 8003bde:	4816      	ldr	r0, [pc, #88]	; (8003c38 <HAL_UART_RxCpltCallback+0x7c>)
 8003be0:	f003 fed9 	bl	8007996 <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a14      	ldr	r2, [pc, #80]	; (8003c3c <HAL_UART_RxCpltCallback+0x80>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d11b      	bne.n	8003c26 <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8003bee:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <HAL_UART_RxCpltCallback+0x84>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b4f      	cmp	r3, #79	; 0x4f
 8003bf4:	d103      	bne.n	8003bfe <HAL_UART_RxCpltCallback+0x42>
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <HAL_UART_RxCpltCallback+0x88>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]
 8003bfc:	e00e      	b.n	8003c1c <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <HAL_UART_RxCpltCallback+0x84>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b61      	cmp	r3, #97	; 0x61
 8003c04:	d103      	bne.n	8003c0e <HAL_UART_RxCpltCallback+0x52>
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <HAL_UART_RxCpltCallback+0x8c>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
 8003c0c:	e006      	b.n	8003c1c <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <HAL_UART_RxCpltCallback+0x84>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b41      	cmp	r3, #65	; 0x41
 8003c14:	d102      	bne.n	8003c1c <HAL_UART_RxCpltCallback+0x60>
 8003c16:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <HAL_UART_RxCpltCallback+0x8c>)
 8003c18:	2201      	movs	r2, #1
 8003c1a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	4908      	ldr	r1, [pc, #32]	; (8003c40 <HAL_UART_RxCpltCallback+0x84>)
 8003c20:	480a      	ldr	r0, [pc, #40]	; (8003c4c <HAL_UART_RxCpltCallback+0x90>)
 8003c22:	f003 feb8 	bl	8007996 <HAL_UART_Receive_IT>
	}
}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40011000 	.word	0x40011000
 8003c34:	200006d4 	.word	0x200006d4
 8003c38:	200006d8 	.word	0x200006d8
 8003c3c:	40004400 	.word	0x40004400
 8003c40:	200006d5 	.word	0x200006d5
 8003c44:	200006d6 	.word	0x200006d6
 8003c48:	200002bc 	.word	0x200002bc
 8003c4c:	2000071c 	.word	0x2000071c

08003c50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c54:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <MX_USART1_UART_Init+0x4c>)
 8003c56:	4a12      	ldr	r2, [pc, #72]	; (8003ca0 <MX_USART1_UART_Init+0x50>)
 8003c58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <MX_USART1_UART_Init+0x4c>)
 8003c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <MX_USART1_UART_Init+0x4c>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <MX_USART1_UART_Init+0x4c>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <MX_USART1_UART_Init+0x4c>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <MX_USART1_UART_Init+0x4c>)
 8003c76:	220c      	movs	r2, #12
 8003c78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <MX_USART1_UART_Init+0x4c>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <MX_USART1_UART_Init+0x4c>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c86:	4805      	ldr	r0, [pc, #20]	; (8003c9c <MX_USART1_UART_Init+0x4c>)
 8003c88:	f003 fda6 	bl	80077d8 <HAL_UART_Init>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c92:	f7fd ff2d 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	200006d8 	.word	0x200006d8
 8003ca0:	40011000 	.word	0x40011000

08003ca4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ca8:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <MX_USART2_UART_Init+0x4c>)
 8003caa:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <MX_USART2_UART_Init+0x50>)
 8003cac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <MX_USART2_UART_Init+0x4c>)
 8003cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003cb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cb6:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <MX_USART2_UART_Init+0x4c>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <MX_USART2_UART_Init+0x4c>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003cc2:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <MX_USART2_UART_Init+0x4c>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003cc8:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <MX_USART2_UART_Init+0x4c>)
 8003cca:	220c      	movs	r2, #12
 8003ccc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <MX_USART2_UART_Init+0x4c>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <MX_USART2_UART_Init+0x4c>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003cda:	4805      	ldr	r0, [pc, #20]	; (8003cf0 <MX_USART2_UART_Init+0x4c>)
 8003cdc:	f003 fd7c 	bl	80077d8 <HAL_UART_Init>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003ce6:	f7fd ff03 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	2000071c 	.word	0x2000071c
 8003cf4:	40004400 	.word	0x40004400

08003cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08c      	sub	sp, #48	; 0x30
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d00:	f107 031c 	add.w	r3, r7, #28
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	609a      	str	r2, [r3, #8]
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a3a      	ldr	r2, [pc, #232]	; (8003e00 <HAL_UART_MspInit+0x108>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d135      	bne.n	8003d86 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <HAL_UART_MspInit+0x10c>)
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	4a38      	ldr	r2, [pc, #224]	; (8003e04 <HAL_UART_MspInit+0x10c>)
 8003d24:	f043 0310 	orr.w	r3, r3, #16
 8003d28:	6453      	str	r3, [r2, #68]	; 0x44
 8003d2a:	4b36      	ldr	r3, [pc, #216]	; (8003e04 <HAL_UART_MspInit+0x10c>)
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	4b32      	ldr	r3, [pc, #200]	; (8003e04 <HAL_UART_MspInit+0x10c>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	4a31      	ldr	r2, [pc, #196]	; (8003e04 <HAL_UART_MspInit+0x10c>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	6313      	str	r3, [r2, #48]	; 0x30
 8003d46:	4b2f      	ldr	r3, [pc, #188]	; (8003e04 <HAL_UART_MspInit+0x10c>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d60:	2303      	movs	r3, #3
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d64:	2307      	movs	r3, #7
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d68:	f107 031c 	add.w	r3, r7, #28
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4826      	ldr	r0, [pc, #152]	; (8003e08 <HAL_UART_MspInit+0x110>)
 8003d70:	f000 fffe 	bl	8004d70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003d74:	2200      	movs	r2, #0
 8003d76:	2100      	movs	r1, #0
 8003d78:	2025      	movs	r0, #37	; 0x25
 8003d7a:	f000 fc46 	bl	800460a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d7e:	2025      	movs	r0, #37	; 0x25
 8003d80:	f000 fc5f 	bl	8004642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003d84:	e038      	b.n	8003df8 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a20      	ldr	r2, [pc, #128]	; (8003e0c <HAL_UART_MspInit+0x114>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d133      	bne.n	8003df8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	4b1b      	ldr	r3, [pc, #108]	; (8003e04 <HAL_UART_MspInit+0x10c>)
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	4a1a      	ldr	r2, [pc, #104]	; (8003e04 <HAL_UART_MspInit+0x10c>)
 8003d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8003da0:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <HAL_UART_MspInit+0x10c>)
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <HAL_UART_MspInit+0x10c>)
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	4a13      	ldr	r2, [pc, #76]	; (8003e04 <HAL_UART_MspInit+0x10c>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6313      	str	r3, [r2, #48]	; 0x30
 8003dbc:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <HAL_UART_MspInit+0x10c>)
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003dc8:	230c      	movs	r3, #12
 8003dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003dd8:	2307      	movs	r3, #7
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ddc:	f107 031c 	add.w	r3, r7, #28
 8003de0:	4619      	mov	r1, r3
 8003de2:	4809      	ldr	r0, [pc, #36]	; (8003e08 <HAL_UART_MspInit+0x110>)
 8003de4:	f000 ffc4 	bl	8004d70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003de8:	2200      	movs	r2, #0
 8003dea:	2100      	movs	r1, #0
 8003dec:	2026      	movs	r0, #38	; 0x26
 8003dee:	f000 fc0c 	bl	800460a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003df2:	2026      	movs	r0, #38	; 0x26
 8003df4:	f000 fc25 	bl	8004642 <HAL_NVIC_EnableIRQ>
}
 8003df8:	bf00      	nop
 8003dfa:	3730      	adds	r7, #48	; 0x30
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40011000 	.word	0x40011000
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40020000 	.word	0x40020000
 8003e0c:	40004400 	.word	0x40004400

08003e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e14:	480d      	ldr	r0, [pc, #52]	; (8003e4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e16:	490e      	ldr	r1, [pc, #56]	; (8003e50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e18:	4a0e      	ldr	r2, [pc, #56]	; (8003e54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e1c:	e002      	b.n	8003e24 <LoopCopyDataInit>

08003e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e22:	3304      	adds	r3, #4

08003e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e28:	d3f9      	bcc.n	8003e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e2a:	4a0b      	ldr	r2, [pc, #44]	; (8003e58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e2c:	4c0b      	ldr	r4, [pc, #44]	; (8003e5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e30:	e001      	b.n	8003e36 <LoopFillZerobss>

08003e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e34:	3204      	adds	r2, #4

08003e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e38:	d3fb      	bcc.n	8003e32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e3a:	f7ff fd37 	bl	80038ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e3e:	f004 ffa7 	bl	8008d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e42:	f7fd fd8f 	bl	8001964 <main>
  bx  lr    
 8003e46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003e48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e50:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8003e54:	0800cb1c 	.word	0x0800cb1c
  ldr r2, =_sbss
 8003e58:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8003e5c:	200008b0 	.word	0x200008b0

08003e60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e60:	e7fe      	b.n	8003e60 <ADC_IRQHandler>
	...

08003e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e68:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <HAL_Init+0x40>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ea4 <HAL_Init+0x40>)
 8003e6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_Init+0x40>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a0a      	ldr	r2, [pc, #40]	; (8003ea4 <HAL_Init+0x40>)
 8003e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e80:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <HAL_Init+0x40>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a07      	ldr	r2, [pc, #28]	; (8003ea4 <HAL_Init+0x40>)
 8003e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e8c:	2003      	movs	r0, #3
 8003e8e:	f000 fbb1 	bl	80045f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e92:	200f      	movs	r0, #15
 8003e94:	f000 f808 	bl	8003ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e98:	f7ff fbc8 	bl	800362c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023c00 	.word	0x40023c00

08003ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003eb0:	4b12      	ldr	r3, [pc, #72]	; (8003efc <HAL_InitTick+0x54>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <HAL_InitTick+0x58>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fbc9 	bl	800465e <HAL_SYSTICK_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e00e      	b.n	8003ef4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b0f      	cmp	r3, #15
 8003eda:	d80a      	bhi.n	8003ef2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003edc:	2200      	movs	r2, #0
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee4:	f000 fb91 	bl	800460a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ee8:	4a06      	ldr	r2, [pc, #24]	; (8003f04 <HAL_InitTick+0x5c>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e000      	b.n	8003ef4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	200000b8 	.word	0x200000b8
 8003f00:	200000c0 	.word	0x200000c0
 8003f04:	200000bc 	.word	0x200000bc

08003f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f0c:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_IncTick+0x20>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_IncTick+0x24>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4413      	add	r3, r2
 8003f18:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <HAL_IncTick+0x24>)
 8003f1a:	6013      	str	r3, [r2, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	200000c0 	.word	0x200000c0
 8003f2c:	20000760 	.word	0x20000760

08003f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return uwTick;
 8003f34:	4b03      	ldr	r3, [pc, #12]	; (8003f44 <HAL_GetTick+0x14>)
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000760 	.word	0x20000760

08003f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f50:	f7ff ffee 	bl	8003f30 <HAL_GetTick>
 8003f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d005      	beq.n	8003f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f62:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <HAL_Delay+0x44>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f6e:	bf00      	nop
 8003f70:	f7ff ffde 	bl	8003f30 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d8f7      	bhi.n	8003f70 <HAL_Delay+0x28>
  {
  }
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200000c0 	.word	0x200000c0

08003f90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e033      	b.n	800400e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d109      	bne.n	8003fc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fc fb66 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d118      	bne.n	8004000 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fd6:	f023 0302 	bic.w	r3, r3, #2
 8003fda:	f043 0202 	orr.w	r2, r3, #2
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f93a 	bl	800425c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f023 0303 	bic.w	r3, r3, #3
 8003ff6:	f043 0201 	orr.w	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
 8003ffe:	e001      	b.n	8004004 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800400c:	7bfb      	ldrb	r3, [r7, #15]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_ADC_ConfigChannel+0x1c>
 8004030:	2302      	movs	r3, #2
 8004032:	e105      	b.n	8004240 <HAL_ADC_ConfigChannel+0x228>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b09      	cmp	r3, #9
 8004042:	d925      	bls.n	8004090 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68d9      	ldr	r1, [r3, #12]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	b29b      	uxth	r3, r3
 8004050:	461a      	mov	r2, r3
 8004052:	4613      	mov	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4413      	add	r3, r2
 8004058:	3b1e      	subs	r3, #30
 800405a:	2207      	movs	r2, #7
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43da      	mvns	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	400a      	ands	r2, r1
 8004068:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68d9      	ldr	r1, [r3, #12]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689a      	ldr	r2, [r3, #8]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	b29b      	uxth	r3, r3
 800407a:	4618      	mov	r0, r3
 800407c:	4603      	mov	r3, r0
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	4403      	add	r3, r0
 8004082:	3b1e      	subs	r3, #30
 8004084:	409a      	lsls	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	e022      	b.n	80040d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6919      	ldr	r1, [r3, #16]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	b29b      	uxth	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	4613      	mov	r3, r2
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	4413      	add	r3, r2
 80040a4:	2207      	movs	r2, #7
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43da      	mvns	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	400a      	ands	r2, r1
 80040b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6919      	ldr	r1, [r3, #16]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	4618      	mov	r0, r3
 80040c6:	4603      	mov	r3, r0
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4403      	add	r3, r0
 80040cc:	409a      	lsls	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b06      	cmp	r3, #6
 80040dc:	d824      	bhi.n	8004128 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	4613      	mov	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	3b05      	subs	r3, #5
 80040f0:	221f      	movs	r2, #31
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43da      	mvns	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	400a      	ands	r2, r1
 80040fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	4618      	mov	r0, r3
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	3b05      	subs	r3, #5
 800411a:	fa00 f203 	lsl.w	r2, r0, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	635a      	str	r2, [r3, #52]	; 0x34
 8004126:	e04c      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b0c      	cmp	r3, #12
 800412e:	d824      	bhi.n	800417a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	3b23      	subs	r3, #35	; 0x23
 8004142:	221f      	movs	r2, #31
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43da      	mvns	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	400a      	ands	r2, r1
 8004150:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	4618      	mov	r0, r3
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	3b23      	subs	r3, #35	; 0x23
 800416c:	fa00 f203 	lsl.w	r2, r0, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
 8004178:	e023      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	3b41      	subs	r3, #65	; 0x41
 800418c:	221f      	movs	r2, #31
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	43da      	mvns	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	400a      	ands	r2, r1
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	4618      	mov	r0, r3
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	3b41      	subs	r3, #65	; 0x41
 80041b6:	fa00 f203 	lsl.w	r2, r0, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041c2:	4b22      	ldr	r3, [pc, #136]	; (800424c <HAL_ADC_ConfigChannel+0x234>)
 80041c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a21      	ldr	r2, [pc, #132]	; (8004250 <HAL_ADC_ConfigChannel+0x238>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d109      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x1cc>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b12      	cmp	r3, #18
 80041d6:	d105      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a19      	ldr	r2, [pc, #100]	; (8004250 <HAL_ADC_ConfigChannel+0x238>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d123      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x21e>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b10      	cmp	r3, #16
 80041f4:	d003      	beq.n	80041fe <HAL_ADC_ConfigChannel+0x1e6>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b11      	cmp	r3, #17
 80041fc:	d11b      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b10      	cmp	r3, #16
 8004210:	d111      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <HAL_ADC_ConfigChannel+0x23c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a10      	ldr	r2, [pc, #64]	; (8004258 <HAL_ADC_ConfigChannel+0x240>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	0c9a      	lsrs	r2, r3, #18
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004228:	e002      	b.n	8004230 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	3b01      	subs	r3, #1
 800422e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f9      	bne.n	800422a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40012300 	.word	0x40012300
 8004250:	40012000 	.word	0x40012000
 8004254:	200000b8 	.word	0x200000b8
 8004258:	431bde83 	.word	0x431bde83

0800425c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004264:	4b79      	ldr	r3, [pc, #484]	; (800444c <ADC_Init+0x1f0>)
 8004266:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6859      	ldr	r1, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	021a      	lsls	r2, r3, #8
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6899      	ldr	r1, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	4a58      	ldr	r2, [pc, #352]	; (8004450 <ADC_Init+0x1f4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d022      	beq.n	800433a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004302:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6899      	ldr	r1, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6899      	ldr	r1, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	e00f      	b.n	800435a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004358:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0202 	bic.w	r2, r2, #2
 8004368:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6899      	ldr	r1, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	7e1b      	ldrb	r3, [r3, #24]
 8004374:	005a      	lsls	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d01b      	beq.n	80043c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004396:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6859      	ldr	r1, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	3b01      	subs	r3, #1
 80043b4:	035a      	lsls	r2, r3, #13
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	605a      	str	r2, [r3, #4]
 80043be:	e007      	b.n	80043d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	051a      	lsls	r2, r3, #20
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004404:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6899      	ldr	r1, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004412:	025a      	lsls	r2, r3, #9
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6899      	ldr	r1, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	029a      	lsls	r2, r3, #10
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	609a      	str	r2, [r3, #8]
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	40012300 	.word	0x40012300
 8004450:	0f000001 	.word	0x0f000001

08004454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <__NVIC_SetPriorityGrouping+0x44>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004470:	4013      	ands	r3, r2
 8004472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800447c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004486:	4a04      	ldr	r2, [pc, #16]	; (8004498 <__NVIC_SetPriorityGrouping+0x44>)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	60d3      	str	r3, [r2, #12]
}
 800448c:	bf00      	nop
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	e000ed00 	.word	0xe000ed00

0800449c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044a0:	4b04      	ldr	r3, [pc, #16]	; (80044b4 <__NVIC_GetPriorityGrouping+0x18>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	0a1b      	lsrs	r3, r3, #8
 80044a6:	f003 0307 	and.w	r3, r3, #7
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	e000ed00 	.word	0xe000ed00

080044b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	db0b      	blt.n	80044e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	f003 021f 	and.w	r2, r3, #31
 80044d0:	4907      	ldr	r1, [pc, #28]	; (80044f0 <__NVIC_EnableIRQ+0x38>)
 80044d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	2001      	movs	r0, #1
 80044da:	fa00 f202 	lsl.w	r2, r0, r2
 80044de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	e000e100 	.word	0xe000e100

080044f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	6039      	str	r1, [r7, #0]
 80044fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004504:	2b00      	cmp	r3, #0
 8004506:	db0a      	blt.n	800451e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	b2da      	uxtb	r2, r3
 800450c:	490c      	ldr	r1, [pc, #48]	; (8004540 <__NVIC_SetPriority+0x4c>)
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	0112      	lsls	r2, r2, #4
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	440b      	add	r3, r1
 8004518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800451c:	e00a      	b.n	8004534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	b2da      	uxtb	r2, r3
 8004522:	4908      	ldr	r1, [pc, #32]	; (8004544 <__NVIC_SetPriority+0x50>)
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	3b04      	subs	r3, #4
 800452c:	0112      	lsls	r2, r2, #4
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	440b      	add	r3, r1
 8004532:	761a      	strb	r2, [r3, #24]
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	e000e100 	.word	0xe000e100
 8004544:	e000ed00 	.word	0xe000ed00

08004548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004548:	b480      	push	{r7}
 800454a:	b089      	sub	sp, #36	; 0x24
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f1c3 0307 	rsb	r3, r3, #7
 8004562:	2b04      	cmp	r3, #4
 8004564:	bf28      	it	cs
 8004566:	2304      	movcs	r3, #4
 8004568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	3304      	adds	r3, #4
 800456e:	2b06      	cmp	r3, #6
 8004570:	d902      	bls.n	8004578 <NVIC_EncodePriority+0x30>
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	3b03      	subs	r3, #3
 8004576:	e000      	b.n	800457a <NVIC_EncodePriority+0x32>
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800457c:	f04f 32ff 	mov.w	r2, #4294967295
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43da      	mvns	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	401a      	ands	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004590:	f04f 31ff 	mov.w	r1, #4294967295
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	fa01 f303 	lsl.w	r3, r1, r3
 800459a:	43d9      	mvns	r1, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a0:	4313      	orrs	r3, r2
         );
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3724      	adds	r7, #36	; 0x24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045c0:	d301      	bcc.n	80045c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045c2:	2301      	movs	r3, #1
 80045c4:	e00f      	b.n	80045e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045c6:	4a0a      	ldr	r2, [pc, #40]	; (80045f0 <SysTick_Config+0x40>)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ce:	210f      	movs	r1, #15
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	f7ff ff8e 	bl	80044f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <SysTick_Config+0x40>)
 80045da:	2200      	movs	r2, #0
 80045dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045de:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <SysTick_Config+0x40>)
 80045e0:	2207      	movs	r2, #7
 80045e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	e000e010 	.word	0xe000e010

080045f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ff29 	bl	8004454 <__NVIC_SetPriorityGrouping>
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800460a:	b580      	push	{r7, lr}
 800460c:	b086      	sub	sp, #24
 800460e:	af00      	add	r7, sp, #0
 8004610:	4603      	mov	r3, r0
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	607a      	str	r2, [r7, #4]
 8004616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800461c:	f7ff ff3e 	bl	800449c <__NVIC_GetPriorityGrouping>
 8004620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	6978      	ldr	r0, [r7, #20]
 8004628:	f7ff ff8e 	bl	8004548 <NVIC_EncodePriority>
 800462c:	4602      	mov	r2, r0
 800462e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff5d 	bl	80044f4 <__NVIC_SetPriority>
}
 800463a:	bf00      	nop
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	4603      	mov	r3, r0
 800464a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800464c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff ff31 	bl	80044b8 <__NVIC_EnableIRQ>
}
 8004656:	bf00      	nop
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff ffa2 	bl	80045b0 <SysTick_Config>
 800466c:	4603      	mov	r3, r0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004684:	f7ff fc54 	bl	8003f30 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e099      	b.n	80047c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0201 	bic.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046b4:	e00f      	b.n	80046d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046b6:	f7ff fc3b 	bl	8003f30 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b05      	cmp	r3, #5
 80046c2:	d908      	bls.n	80046d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2203      	movs	r2, #3
 80046ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e078      	b.n	80047c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e8      	bne.n	80046b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4b38      	ldr	r3, [pc, #224]	; (80047d0 <HAL_DMA_Init+0x158>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004702:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800470e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800471a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	2b04      	cmp	r3, #4
 800472e:	d107      	bne.n	8004740 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	4313      	orrs	r3, r2
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 0307 	bic.w	r3, r3, #7
 8004756:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	2b04      	cmp	r3, #4
 8004768:	d117      	bne.n	800479a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00e      	beq.n	800479a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fa7b 	bl	8004c78 <DMA_CheckFifoParam>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2240      	movs	r2, #64	; 0x40
 800478c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004796:	2301      	movs	r3, #1
 8004798:	e016      	b.n	80047c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fa32 	bl	8004c0c <DMA_CalcBaseAndBitshift>
 80047a8:	4603      	mov	r3, r0
 80047aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b0:	223f      	movs	r2, #63	; 0x3f
 80047b2:	409a      	lsls	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	f010803f 	.word	0xf010803f

080047d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047e2:	f7ff fba5 	bl	8003f30 <HAL_GetTick>
 80047e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d008      	beq.n	8004806 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2280      	movs	r2, #128	; 0x80
 80047f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e052      	b.n	80048ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0216 	bic.w	r2, r2, #22
 8004814:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695a      	ldr	r2, [r3, #20]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004824:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <HAL_DMA_Abort+0x62>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004832:	2b00      	cmp	r3, #0
 8004834:	d007      	beq.n	8004846 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0208 	bic.w	r2, r2, #8
 8004844:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004856:	e013      	b.n	8004880 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004858:	f7ff fb6a 	bl	8003f30 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b05      	cmp	r3, #5
 8004864:	d90c      	bls.n	8004880 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2203      	movs	r2, #3
 8004870:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e015      	b.n	80048ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e4      	bne.n	8004858 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004892:	223f      	movs	r2, #63	; 0x3f
 8004894:	409a      	lsls	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d004      	beq.n	80048d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2280      	movs	r2, #128	; 0x80
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e00c      	b.n	80048ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2205      	movs	r2, #5
 80048d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004904:	4b8e      	ldr	r3, [pc, #568]	; (8004b40 <HAL_DMA_IRQHandler+0x248>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a8e      	ldr	r2, [pc, #568]	; (8004b44 <HAL_DMA_IRQHandler+0x24c>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	0a9b      	lsrs	r3, r3, #10
 8004910:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004916:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004922:	2208      	movs	r2, #8
 8004924:	409a      	lsls	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4013      	ands	r3, r2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d01a      	beq.n	8004964 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b00      	cmp	r3, #0
 800493a:	d013      	beq.n	8004964 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0204 	bic.w	r2, r2, #4
 800494a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	2208      	movs	r2, #8
 8004952:	409a      	lsls	r2, r3
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495c:	f043 0201 	orr.w	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004968:	2201      	movs	r2, #1
 800496a:	409a      	lsls	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4013      	ands	r3, r2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d012      	beq.n	800499a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004986:	2201      	movs	r2, #1
 8004988:	409a      	lsls	r2, r3
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	f043 0202 	orr.w	r2, r3, #2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499e:	2204      	movs	r2, #4
 80049a0:	409a      	lsls	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d012      	beq.n	80049d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00b      	beq.n	80049d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049bc:	2204      	movs	r2, #4
 80049be:	409a      	lsls	r2, r3
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c8:	f043 0204 	orr.w	r2, r3, #4
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d4:	2210      	movs	r2, #16
 80049d6:	409a      	lsls	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d043      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d03c      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f2:	2210      	movs	r2, #16
 80049f4:	409a      	lsls	r2, r3
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d018      	beq.n	8004a3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d024      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
 8004a26:	e01f      	b.n	8004a68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01b      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	4798      	blx	r3
 8004a38:	e016      	b.n	8004a68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d107      	bne.n	8004a58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0208 	bic.w	r2, r2, #8
 8004a56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4013      	ands	r3, r2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 808f 	beq.w	8004b98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8087 	beq.w	8004b98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	2220      	movs	r2, #32
 8004a90:	409a      	lsls	r2, r3
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d136      	bne.n	8004b10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0216 	bic.w	r2, r2, #22
 8004ab0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ac0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <HAL_DMA_IRQHandler+0x1da>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0208 	bic.w	r2, r2, #8
 8004ae0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae6:	223f      	movs	r2, #63	; 0x3f
 8004ae8:	409a      	lsls	r2, r3
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d07e      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	4798      	blx	r3
        }
        return;
 8004b0e:	e079      	b.n	8004c04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d01d      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10d      	bne.n	8004b48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d031      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3
 8004b3c:	e02c      	b.n	8004b98 <HAL_DMA_IRQHandler+0x2a0>
 8004b3e:	bf00      	nop
 8004b40:	200000b8 	.word	0x200000b8
 8004b44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d023      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
 8004b58:	e01e      	b.n	8004b98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10f      	bne.n	8004b88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0210 	bic.w	r2, r2, #16
 8004b76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d032      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d022      	beq.n	8004bf2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2205      	movs	r2, #5
 8004bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d307      	bcc.n	8004be0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f2      	bne.n	8004bc4 <HAL_DMA_IRQHandler+0x2cc>
 8004bde:	e000      	b.n	8004be2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004be0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	4798      	blx	r3
 8004c02:	e000      	b.n	8004c06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c04:	bf00      	nop
    }
  }
}
 8004c06:	3718      	adds	r7, #24
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	3b10      	subs	r3, #16
 8004c1c:	4a14      	ldr	r2, [pc, #80]	; (8004c70 <DMA_CalcBaseAndBitshift+0x64>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c26:	4a13      	ldr	r2, [pc, #76]	; (8004c74 <DMA_CalcBaseAndBitshift+0x68>)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d909      	bls.n	8004c4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c42:	f023 0303 	bic.w	r3, r3, #3
 8004c46:	1d1a      	adds	r2, r3, #4
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	659a      	str	r2, [r3, #88]	; 0x58
 8004c4c:	e007      	b.n	8004c5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c56:	f023 0303 	bic.w	r3, r3, #3
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	aaaaaaab 	.word	0xaaaaaaab
 8004c74:	0800ca24 	.word	0x0800ca24

08004c78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d11f      	bne.n	8004cd2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d856      	bhi.n	8004d46 <DMA_CheckFifoParam+0xce>
 8004c98:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <DMA_CheckFifoParam+0x28>)
 8004c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08004cb1 	.word	0x08004cb1
 8004ca4:	08004cc3 	.word	0x08004cc3
 8004ca8:	08004cb1 	.word	0x08004cb1
 8004cac:	08004d47 	.word	0x08004d47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d046      	beq.n	8004d4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc0:	e043      	b.n	8004d4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cca:	d140      	bne.n	8004d4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cd0:	e03d      	b.n	8004d4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cda:	d121      	bne.n	8004d20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d837      	bhi.n	8004d52 <DMA_CheckFifoParam+0xda>
 8004ce2:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <DMA_CheckFifoParam+0x70>)
 8004ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce8:	08004cf9 	.word	0x08004cf9
 8004cec:	08004cff 	.word	0x08004cff
 8004cf0:	08004cf9 	.word	0x08004cf9
 8004cf4:	08004d11 	.word	0x08004d11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004cfc:	e030      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d025      	beq.n	8004d56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d0e:	e022      	b.n	8004d56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d18:	d11f      	bne.n	8004d5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d1e:	e01c      	b.n	8004d5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d903      	bls.n	8004d2e <DMA_CheckFifoParam+0xb6>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d003      	beq.n	8004d34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d2c:	e018      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	73fb      	strb	r3, [r7, #15]
      break;
 8004d32:	e015      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00e      	beq.n	8004d5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
      break;
 8004d44:	e00b      	b.n	8004d5e <DMA_CheckFifoParam+0xe6>
      break;
 8004d46:	bf00      	nop
 8004d48:	e00a      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      break;
 8004d4a:	bf00      	nop
 8004d4c:	e008      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      break;
 8004d4e:	bf00      	nop
 8004d50:	e006      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      break;
 8004d52:	bf00      	nop
 8004d54:	e004      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      break;
 8004d56:	bf00      	nop
 8004d58:	e002      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d5a:	bf00      	nop
 8004d5c:	e000      	b.n	8004d60 <DMA_CheckFifoParam+0xe8>
      break;
 8004d5e:	bf00      	nop
    }
  } 
  
  return status; 
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop

08004d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b089      	sub	sp, #36	; 0x24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d86:	2300      	movs	r3, #0
 8004d88:	61fb      	str	r3, [r7, #28]
 8004d8a:	e16b      	b.n	8005064 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	f040 815a 	bne.w	800505e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d005      	beq.n	8004dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d130      	bne.n	8004e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	2203      	movs	r2, #3
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004df8:	2201      	movs	r2, #1
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4013      	ands	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	091b      	lsrs	r3, r3, #4
 8004e0e:	f003 0201 	and.w	r2, r3, #1
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d017      	beq.n	8004e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	43db      	mvns	r3, r3
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	4013      	ands	r3, r2
 8004e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d123      	bne.n	8004eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	08da      	lsrs	r2, r3, #3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3208      	adds	r2, #8
 8004e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	220f      	movs	r2, #15
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	43db      	mvns	r3, r3
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	691a      	ldr	r2, [r3, #16]
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	08da      	lsrs	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3208      	adds	r2, #8
 8004eae:	69b9      	ldr	r1, [r7, #24]
 8004eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	2203      	movs	r2, #3
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 0203 	and.w	r2, r3, #3
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80b4 	beq.w	800505e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	4b60      	ldr	r3, [pc, #384]	; (800507c <HAL_GPIO_Init+0x30c>)
 8004efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efe:	4a5f      	ldr	r2, [pc, #380]	; (800507c <HAL_GPIO_Init+0x30c>)
 8004f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f04:	6453      	str	r3, [r2, #68]	; 0x44
 8004f06:	4b5d      	ldr	r3, [pc, #372]	; (800507c <HAL_GPIO_Init+0x30c>)
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f12:	4a5b      	ldr	r2, [pc, #364]	; (8005080 <HAL_GPIO_Init+0x310>)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	089b      	lsrs	r3, r3, #2
 8004f18:	3302      	adds	r3, #2
 8004f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	220f      	movs	r2, #15
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	4013      	ands	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a52      	ldr	r2, [pc, #328]	; (8005084 <HAL_GPIO_Init+0x314>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d02b      	beq.n	8004f96 <HAL_GPIO_Init+0x226>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a51      	ldr	r2, [pc, #324]	; (8005088 <HAL_GPIO_Init+0x318>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d025      	beq.n	8004f92 <HAL_GPIO_Init+0x222>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a50      	ldr	r2, [pc, #320]	; (800508c <HAL_GPIO_Init+0x31c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d01f      	beq.n	8004f8e <HAL_GPIO_Init+0x21e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a4f      	ldr	r2, [pc, #316]	; (8005090 <HAL_GPIO_Init+0x320>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d019      	beq.n	8004f8a <HAL_GPIO_Init+0x21a>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a4e      	ldr	r2, [pc, #312]	; (8005094 <HAL_GPIO_Init+0x324>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d013      	beq.n	8004f86 <HAL_GPIO_Init+0x216>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a4d      	ldr	r2, [pc, #308]	; (8005098 <HAL_GPIO_Init+0x328>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00d      	beq.n	8004f82 <HAL_GPIO_Init+0x212>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a4c      	ldr	r2, [pc, #304]	; (800509c <HAL_GPIO_Init+0x32c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d007      	beq.n	8004f7e <HAL_GPIO_Init+0x20e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a4b      	ldr	r2, [pc, #300]	; (80050a0 <HAL_GPIO_Init+0x330>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d101      	bne.n	8004f7a <HAL_GPIO_Init+0x20a>
 8004f76:	2307      	movs	r3, #7
 8004f78:	e00e      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	e00c      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f7e:	2306      	movs	r3, #6
 8004f80:	e00a      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f82:	2305      	movs	r3, #5
 8004f84:	e008      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f86:	2304      	movs	r3, #4
 8004f88:	e006      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e004      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e002      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <HAL_GPIO_Init+0x228>
 8004f96:	2300      	movs	r3, #0
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	f002 0203 	and.w	r2, r2, #3
 8004f9e:	0092      	lsls	r2, r2, #2
 8004fa0:	4093      	lsls	r3, r2
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fa8:	4935      	ldr	r1, [pc, #212]	; (8005080 <HAL_GPIO_Init+0x310>)
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	089b      	lsrs	r3, r3, #2
 8004fae:	3302      	adds	r3, #2
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fb6:	4b3b      	ldr	r3, [pc, #236]	; (80050a4 <HAL_GPIO_Init+0x334>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fda:	4a32      	ldr	r2, [pc, #200]	; (80050a4 <HAL_GPIO_Init+0x334>)
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004fe0:	4b30      	ldr	r3, [pc, #192]	; (80050a4 <HAL_GPIO_Init+0x334>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4013      	ands	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005004:	4a27      	ldr	r2, [pc, #156]	; (80050a4 <HAL_GPIO_Init+0x334>)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800500a:	4b26      	ldr	r3, [pc, #152]	; (80050a4 <HAL_GPIO_Init+0x334>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800502e:	4a1d      	ldr	r2, [pc, #116]	; (80050a4 <HAL_GPIO_Init+0x334>)
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005034:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <HAL_GPIO_Init+0x334>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	43db      	mvns	r3, r3
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4013      	ands	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005058:	4a12      	ldr	r2, [pc, #72]	; (80050a4 <HAL_GPIO_Init+0x334>)
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	3301      	adds	r3, #1
 8005062:	61fb      	str	r3, [r7, #28]
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	2b0f      	cmp	r3, #15
 8005068:	f67f ae90 	bls.w	8004d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800506c:	bf00      	nop
 800506e:	bf00      	nop
 8005070:	3724      	adds	r7, #36	; 0x24
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800
 8005080:	40013800 	.word	0x40013800
 8005084:	40020000 	.word	0x40020000
 8005088:	40020400 	.word	0x40020400
 800508c:	40020800 	.word	0x40020800
 8005090:	40020c00 	.word	0x40020c00
 8005094:	40021000 	.word	0x40021000
 8005098:	40021400 	.word	0x40021400
 800509c:	40021800 	.word	0x40021800
 80050a0:	40021c00 	.word	0x40021c00
 80050a4:	40013c00 	.word	0x40013c00

080050a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	807b      	strh	r3, [r7, #2]
 80050b4:	4613      	mov	r3, r2
 80050b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050b8:	787b      	ldrb	r3, [r7, #1]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050be:	887a      	ldrh	r2, [r7, #2]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050c4:	e003      	b.n	80050ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050c6:	887b      	ldrh	r3, [r7, #2]
 80050c8:	041a      	lsls	r2, r3, #16
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	619a      	str	r2, [r3, #24]
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e12b      	b.n	8005346 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fb fe20 	bl	8000d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2224      	movs	r2, #36	; 0x24
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0201 	bic.w	r2, r2, #1
 800511e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800512e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800513e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005140:	f000 fd80 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 8005144:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	4a81      	ldr	r2, [pc, #516]	; (8005350 <HAL_I2C_Init+0x274>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d807      	bhi.n	8005160 <HAL_I2C_Init+0x84>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4a80      	ldr	r2, [pc, #512]	; (8005354 <HAL_I2C_Init+0x278>)
 8005154:	4293      	cmp	r3, r2
 8005156:	bf94      	ite	ls
 8005158:	2301      	movls	r3, #1
 800515a:	2300      	movhi	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	e006      	b.n	800516e <HAL_I2C_Init+0x92>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4a7d      	ldr	r2, [pc, #500]	; (8005358 <HAL_I2C_Init+0x27c>)
 8005164:	4293      	cmp	r3, r2
 8005166:	bf94      	ite	ls
 8005168:	2301      	movls	r3, #1
 800516a:	2300      	movhi	r3, #0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e0e7      	b.n	8005346 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4a78      	ldr	r2, [pc, #480]	; (800535c <HAL_I2C_Init+0x280>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	0c9b      	lsrs	r3, r3, #18
 8005180:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	4a6a      	ldr	r2, [pc, #424]	; (8005350 <HAL_I2C_Init+0x274>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d802      	bhi.n	80051b0 <HAL_I2C_Init+0xd4>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	3301      	adds	r3, #1
 80051ae:	e009      	b.n	80051c4 <HAL_I2C_Init+0xe8>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	4a69      	ldr	r2, [pc, #420]	; (8005360 <HAL_I2C_Init+0x284>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	099b      	lsrs	r3, r3, #6
 80051c2:	3301      	adds	r3, #1
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	430b      	orrs	r3, r1
 80051ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80051d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	495c      	ldr	r1, [pc, #368]	; (8005350 <HAL_I2C_Init+0x274>)
 80051e0:	428b      	cmp	r3, r1
 80051e2:	d819      	bhi.n	8005218 <HAL_I2C_Init+0x13c>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	1e59      	subs	r1, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80051f2:	1c59      	adds	r1, r3, #1
 80051f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80051f8:	400b      	ands	r3, r1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_I2C_Init+0x138>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1e59      	subs	r1, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	fbb1 f3f3 	udiv	r3, r1, r3
 800520c:	3301      	adds	r3, #1
 800520e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005212:	e051      	b.n	80052b8 <HAL_I2C_Init+0x1dc>
 8005214:	2304      	movs	r3, #4
 8005216:	e04f      	b.n	80052b8 <HAL_I2C_Init+0x1dc>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d111      	bne.n	8005244 <HAL_I2C_Init+0x168>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	1e58      	subs	r0, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6859      	ldr	r1, [r3, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	440b      	add	r3, r1
 800522e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005232:	3301      	adds	r3, #1
 8005234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005238:	2b00      	cmp	r3, #0
 800523a:	bf0c      	ite	eq
 800523c:	2301      	moveq	r3, #1
 800523e:	2300      	movne	r3, #0
 8005240:	b2db      	uxtb	r3, r3
 8005242:	e012      	b.n	800526a <HAL_I2C_Init+0x18e>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	1e58      	subs	r0, r3, #1
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6859      	ldr	r1, [r3, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	0099      	lsls	r1, r3, #2
 8005254:	440b      	add	r3, r1
 8005256:	fbb0 f3f3 	udiv	r3, r0, r3
 800525a:	3301      	adds	r3, #1
 800525c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005260:	2b00      	cmp	r3, #0
 8005262:	bf0c      	ite	eq
 8005264:	2301      	moveq	r3, #1
 8005266:	2300      	movne	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_I2C_Init+0x196>
 800526e:	2301      	movs	r3, #1
 8005270:	e022      	b.n	80052b8 <HAL_I2C_Init+0x1dc>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10e      	bne.n	8005298 <HAL_I2C_Init+0x1bc>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1e58      	subs	r0, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6859      	ldr	r1, [r3, #4]
 8005282:	460b      	mov	r3, r1
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	440b      	add	r3, r1
 8005288:	fbb0 f3f3 	udiv	r3, r0, r3
 800528c:	3301      	adds	r3, #1
 800528e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005296:	e00f      	b.n	80052b8 <HAL_I2C_Init+0x1dc>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	1e58      	subs	r0, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6859      	ldr	r1, [r3, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	0099      	lsls	r1, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ae:	3301      	adds	r3, #1
 80052b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	6809      	ldr	r1, [r1, #0]
 80052bc:	4313      	orrs	r3, r2
 80052be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69da      	ldr	r2, [r3, #28]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80052e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6911      	ldr	r1, [r2, #16]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	68d2      	ldr	r2, [r2, #12]
 80052f2:	4311      	orrs	r1, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695a      	ldr	r2, [r3, #20]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	431a      	orrs	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	000186a0 	.word	0x000186a0
 8005354:	001e847f 	.word	0x001e847f
 8005358:	003d08ff 	.word	0x003d08ff
 800535c:	431bde83 	.word	0x431bde83
 8005360:	10624dd3 	.word	0x10624dd3

08005364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e267      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d075      	beq.n	800546e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005382:	4b88      	ldr	r3, [pc, #544]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 030c 	and.w	r3, r3, #12
 800538a:	2b04      	cmp	r3, #4
 800538c:	d00c      	beq.n	80053a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800538e:	4b85      	ldr	r3, [pc, #532]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005396:	2b08      	cmp	r3, #8
 8005398:	d112      	bne.n	80053c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800539a:	4b82      	ldr	r3, [pc, #520]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053a6:	d10b      	bne.n	80053c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a8:	4b7e      	ldr	r3, [pc, #504]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d05b      	beq.n	800546c <HAL_RCC_OscConfig+0x108>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d157      	bne.n	800546c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e242      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c8:	d106      	bne.n	80053d8 <HAL_RCC_OscConfig+0x74>
 80053ca:	4b76      	ldr	r3, [pc, #472]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a75      	ldr	r2, [pc, #468]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	e01d      	b.n	8005414 <HAL_RCC_OscConfig+0xb0>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053e0:	d10c      	bne.n	80053fc <HAL_RCC_OscConfig+0x98>
 80053e2:	4b70      	ldr	r3, [pc, #448]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a6f      	ldr	r2, [pc, #444]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	4b6d      	ldr	r3, [pc, #436]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a6c      	ldr	r2, [pc, #432]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	e00b      	b.n	8005414 <HAL_RCC_OscConfig+0xb0>
 80053fc:	4b69      	ldr	r3, [pc, #420]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a68      	ldr	r2, [pc, #416]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005406:	6013      	str	r3, [r2, #0]
 8005408:	4b66      	ldr	r3, [pc, #408]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a65      	ldr	r2, [pc, #404]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 800540e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d013      	beq.n	8005444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541c:	f7fe fd88 	bl	8003f30 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005424:	f7fe fd84 	bl	8003f30 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b64      	cmp	r3, #100	; 0x64
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e207      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005436:	4b5b      	ldr	r3, [pc, #364]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0xc0>
 8005442:	e014      	b.n	800546e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005444:	f7fe fd74 	bl	8003f30 <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800544c:	f7fe fd70 	bl	8003f30 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b64      	cmp	r3, #100	; 0x64
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e1f3      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545e:	4b51      	ldr	r3, [pc, #324]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1f0      	bne.n	800544c <HAL_RCC_OscConfig+0xe8>
 800546a:	e000      	b.n	800546e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800546c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d063      	beq.n	8005542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800547a:	4b4a      	ldr	r3, [pc, #296]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00b      	beq.n	800549e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005486:	4b47      	ldr	r3, [pc, #284]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800548e:	2b08      	cmp	r3, #8
 8005490:	d11c      	bne.n	80054cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005492:	4b44      	ldr	r3, [pc, #272]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d116      	bne.n	80054cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800549e:	4b41      	ldr	r3, [pc, #260]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <HAL_RCC_OscConfig+0x152>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d001      	beq.n	80054b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e1c7      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b6:	4b3b      	ldr	r3, [pc, #236]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4937      	ldr	r1, [pc, #220]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ca:	e03a      	b.n	8005542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d020      	beq.n	8005516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054d4:	4b34      	ldr	r3, [pc, #208]	; (80055a8 <HAL_RCC_OscConfig+0x244>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054da:	f7fe fd29 	bl	8003f30 <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054e2:	f7fe fd25 	bl	8003f30 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e1a8      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f4:	4b2b      	ldr	r3, [pc, #172]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005500:	4b28      	ldr	r3, [pc, #160]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	4925      	ldr	r1, [pc, #148]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005510:	4313      	orrs	r3, r2
 8005512:	600b      	str	r3, [r1, #0]
 8005514:	e015      	b.n	8005542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005516:	4b24      	ldr	r3, [pc, #144]	; (80055a8 <HAL_RCC_OscConfig+0x244>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551c:	f7fe fd08 	bl	8003f30 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005524:	f7fe fd04 	bl	8003f30 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e187      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005536:	4b1b      	ldr	r3, [pc, #108]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	2b00      	cmp	r3, #0
 800554c:	d036      	beq.n	80055bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d016      	beq.n	8005584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005556:	4b15      	ldr	r3, [pc, #84]	; (80055ac <HAL_RCC_OscConfig+0x248>)
 8005558:	2201      	movs	r2, #1
 800555a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555c:	f7fe fce8 	bl	8003f30 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005564:	f7fe fce4 	bl	8003f30 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e167      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005576:	4b0b      	ldr	r3, [pc, #44]	; (80055a4 <HAL_RCC_OscConfig+0x240>)
 8005578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0f0      	beq.n	8005564 <HAL_RCC_OscConfig+0x200>
 8005582:	e01b      	b.n	80055bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005584:	4b09      	ldr	r3, [pc, #36]	; (80055ac <HAL_RCC_OscConfig+0x248>)
 8005586:	2200      	movs	r2, #0
 8005588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800558a:	f7fe fcd1 	bl	8003f30 <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005590:	e00e      	b.n	80055b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005592:	f7fe fccd 	bl	8003f30 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d907      	bls.n	80055b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e150      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
 80055a4:	40023800 	.word	0x40023800
 80055a8:	42470000 	.word	0x42470000
 80055ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b0:	4b88      	ldr	r3, [pc, #544]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 80055b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1ea      	bne.n	8005592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 8097 	beq.w	80056f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ca:	2300      	movs	r3, #0
 80055cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ce:	4b81      	ldr	r3, [pc, #516]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10f      	bne.n	80055fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055da:	2300      	movs	r3, #0
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	4b7d      	ldr	r3, [pc, #500]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	4a7c      	ldr	r2, [pc, #496]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 80055e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e8:	6413      	str	r3, [r2, #64]	; 0x40
 80055ea:	4b7a      	ldr	r3, [pc, #488]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f2:	60bb      	str	r3, [r7, #8]
 80055f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fa:	4b77      	ldr	r3, [pc, #476]	; (80057d8 <HAL_RCC_OscConfig+0x474>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d118      	bne.n	8005638 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005606:	4b74      	ldr	r3, [pc, #464]	; (80057d8 <HAL_RCC_OscConfig+0x474>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a73      	ldr	r2, [pc, #460]	; (80057d8 <HAL_RCC_OscConfig+0x474>)
 800560c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005612:	f7fe fc8d 	bl	8003f30 <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561a:	f7fe fc89 	bl	8003f30 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e10c      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562c:	4b6a      	ldr	r3, [pc, #424]	; (80057d8 <HAL_RCC_OscConfig+0x474>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f0      	beq.n	800561a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d106      	bne.n	800564e <HAL_RCC_OscConfig+0x2ea>
 8005640:	4b64      	ldr	r3, [pc, #400]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005644:	4a63      	ldr	r2, [pc, #396]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	6713      	str	r3, [r2, #112]	; 0x70
 800564c:	e01c      	b.n	8005688 <HAL_RCC_OscConfig+0x324>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	2b05      	cmp	r3, #5
 8005654:	d10c      	bne.n	8005670 <HAL_RCC_OscConfig+0x30c>
 8005656:	4b5f      	ldr	r3, [pc, #380]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565a:	4a5e      	ldr	r2, [pc, #376]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 800565c:	f043 0304 	orr.w	r3, r3, #4
 8005660:	6713      	str	r3, [r2, #112]	; 0x70
 8005662:	4b5c      	ldr	r3, [pc, #368]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005666:	4a5b      	ldr	r2, [pc, #364]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005668:	f043 0301 	orr.w	r3, r3, #1
 800566c:	6713      	str	r3, [r2, #112]	; 0x70
 800566e:	e00b      	b.n	8005688 <HAL_RCC_OscConfig+0x324>
 8005670:	4b58      	ldr	r3, [pc, #352]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005674:	4a57      	ldr	r2, [pc, #348]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005676:	f023 0301 	bic.w	r3, r3, #1
 800567a:	6713      	str	r3, [r2, #112]	; 0x70
 800567c:	4b55      	ldr	r3, [pc, #340]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 800567e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005680:	4a54      	ldr	r2, [pc, #336]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005682:	f023 0304 	bic.w	r3, r3, #4
 8005686:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d015      	beq.n	80056bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005690:	f7fe fc4e 	bl	8003f30 <HAL_GetTick>
 8005694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005696:	e00a      	b.n	80056ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005698:	f7fe fc4a 	bl	8003f30 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e0cb      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ae:	4b49      	ldr	r3, [pc, #292]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0ee      	beq.n	8005698 <HAL_RCC_OscConfig+0x334>
 80056ba:	e014      	b.n	80056e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056bc:	f7fe fc38 	bl	8003f30 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056c2:	e00a      	b.n	80056da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c4:	f7fe fc34 	bl	8003f30 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e0b5      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056da:	4b3e      	ldr	r3, [pc, #248]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1ee      	bne.n	80056c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056e6:	7dfb      	ldrb	r3, [r7, #23]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d105      	bne.n	80056f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ec:	4b39      	ldr	r3, [pc, #228]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	4a38      	ldr	r2, [pc, #224]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 80056f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80a1 	beq.w	8005844 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005702:	4b34      	ldr	r3, [pc, #208]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 030c 	and.w	r3, r3, #12
 800570a:	2b08      	cmp	r3, #8
 800570c:	d05c      	beq.n	80057c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d141      	bne.n	800579a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005716:	4b31      	ldr	r3, [pc, #196]	; (80057dc <HAL_RCC_OscConfig+0x478>)
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571c:	f7fe fc08 	bl	8003f30 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005724:	f7fe fc04 	bl	8003f30 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e087      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005736:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69da      	ldr	r2, [r3, #28]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	431a      	orrs	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	019b      	lsls	r3, r3, #6
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005758:	085b      	lsrs	r3, r3, #1
 800575a:	3b01      	subs	r3, #1
 800575c:	041b      	lsls	r3, r3, #16
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005764:	061b      	lsls	r3, r3, #24
 8005766:	491b      	ldr	r1, [pc, #108]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 8005768:	4313      	orrs	r3, r2
 800576a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800576c:	4b1b      	ldr	r3, [pc, #108]	; (80057dc <HAL_RCC_OscConfig+0x478>)
 800576e:	2201      	movs	r2, #1
 8005770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005772:	f7fe fbdd 	bl	8003f30 <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800577a:	f7fe fbd9 	bl	8003f30 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e05c      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800578c:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <HAL_RCC_OscConfig+0x416>
 8005798:	e054      	b.n	8005844 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800579a:	4b10      	ldr	r3, [pc, #64]	; (80057dc <HAL_RCC_OscConfig+0x478>)
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a0:	f7fe fbc6 	bl	8003f30 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a8:	f7fe fbc2 	bl	8003f30 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e045      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ba:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <HAL_RCC_OscConfig+0x470>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x444>
 80057c6:	e03d      	b.n	8005844 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d107      	bne.n	80057e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e038      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
 80057d4:	40023800 	.word	0x40023800
 80057d8:	40007000 	.word	0x40007000
 80057dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057e0:	4b1b      	ldr	r3, [pc, #108]	; (8005850 <HAL_RCC_OscConfig+0x4ec>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d028      	beq.n	8005840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d121      	bne.n	8005840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005806:	429a      	cmp	r2, r3
 8005808:	d11a      	bne.n	8005840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005810:	4013      	ands	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005818:	4293      	cmp	r3, r2
 800581a:	d111      	bne.n	8005840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	3b01      	subs	r3, #1
 800582a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800582c:	429a      	cmp	r2, r3
 800582e:	d107      	bne.n	8005840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800583c:	429a      	cmp	r2, r3
 800583e:	d001      	beq.n	8005844 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40023800 	.word	0x40023800

08005854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e0cc      	b.n	8005a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005868:	4b68      	ldr	r3, [pc, #416]	; (8005a0c <HAL_RCC_ClockConfig+0x1b8>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d90c      	bls.n	8005890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005876:	4b65      	ldr	r3, [pc, #404]	; (8005a0c <HAL_RCC_ClockConfig+0x1b8>)
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800587e:	4b63      	ldr	r3, [pc, #396]	; (8005a0c <HAL_RCC_ClockConfig+0x1b8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d001      	beq.n	8005890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e0b8      	b.n	8005a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0302 	and.w	r3, r3, #2
 8005898:	2b00      	cmp	r3, #0
 800589a:	d020      	beq.n	80058de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058a8:	4b59      	ldr	r3, [pc, #356]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	4a58      	ldr	r2, [pc, #352]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80058ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058c0:	4b53      	ldr	r3, [pc, #332]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	4a52      	ldr	r2, [pc, #328]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058cc:	4b50      	ldr	r3, [pc, #320]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	494d      	ldr	r1, [pc, #308]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d044      	beq.n	8005974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d107      	bne.n	8005902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058f2:	4b47      	ldr	r3, [pc, #284]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d119      	bne.n	8005932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e07f      	b.n	8005a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d003      	beq.n	8005912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800590e:	2b03      	cmp	r3, #3
 8005910:	d107      	bne.n	8005922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005912:	4b3f      	ldr	r3, [pc, #252]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e06f      	b.n	8005a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005922:	4b3b      	ldr	r3, [pc, #236]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e067      	b.n	8005a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005932:	4b37      	ldr	r3, [pc, #220]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f023 0203 	bic.w	r2, r3, #3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	4934      	ldr	r1, [pc, #208]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	4313      	orrs	r3, r2
 8005942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005944:	f7fe faf4 	bl	8003f30 <HAL_GetTick>
 8005948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594a:	e00a      	b.n	8005962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800594c:	f7fe faf0 	bl	8003f30 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	f241 3288 	movw	r2, #5000	; 0x1388
 800595a:	4293      	cmp	r3, r2
 800595c:	d901      	bls.n	8005962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e04f      	b.n	8005a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005962:	4b2b      	ldr	r3, [pc, #172]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 020c 	and.w	r2, r3, #12
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	429a      	cmp	r2, r3
 8005972:	d1eb      	bne.n	800594c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005974:	4b25      	ldr	r3, [pc, #148]	; (8005a0c <HAL_RCC_ClockConfig+0x1b8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d20c      	bcs.n	800599c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005982:	4b22      	ldr	r3, [pc, #136]	; (8005a0c <HAL_RCC_ClockConfig+0x1b8>)
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800598a:	4b20      	ldr	r3, [pc, #128]	; (8005a0c <HAL_RCC_ClockConfig+0x1b8>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d001      	beq.n	800599c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e032      	b.n	8005a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059a8:	4b19      	ldr	r3, [pc, #100]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	4916      	ldr	r1, [pc, #88]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d009      	beq.n	80059da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059c6:	4b12      	ldr	r3, [pc, #72]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	490e      	ldr	r1, [pc, #56]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059da:	f000 f821 	bl	8005a20 <HAL_RCC_GetSysClockFreq>
 80059de:	4602      	mov	r2, r0
 80059e0:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <HAL_RCC_ClockConfig+0x1bc>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	490a      	ldr	r1, [pc, #40]	; (8005a14 <HAL_RCC_ClockConfig+0x1c0>)
 80059ec:	5ccb      	ldrb	r3, [r1, r3]
 80059ee:	fa22 f303 	lsr.w	r3, r2, r3
 80059f2:	4a09      	ldr	r2, [pc, #36]	; (8005a18 <HAL_RCC_ClockConfig+0x1c4>)
 80059f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059f6:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <HAL_RCC_ClockConfig+0x1c8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fe fa54 	bl	8003ea8 <HAL_InitTick>

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	40023c00 	.word	0x40023c00
 8005a10:	40023800 	.word	0x40023800
 8005a14:	0800ca0c 	.word	0x0800ca0c
 8005a18:	200000b8 	.word	0x200000b8
 8005a1c:	200000bc 	.word	0x200000bc

08005a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a24:	b094      	sub	sp, #80	; 0x50
 8005a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a30:	2300      	movs	r3, #0
 8005a32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a38:	4b79      	ldr	r3, [pc, #484]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 030c 	and.w	r3, r3, #12
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d00d      	beq.n	8005a60 <HAL_RCC_GetSysClockFreq+0x40>
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	f200 80e1 	bhi.w	8005c0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_RCC_GetSysClockFreq+0x34>
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d003      	beq.n	8005a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a52:	e0db      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a54:	4b73      	ldr	r3, [pc, #460]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a58:	e0db      	b.n	8005c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a5a:	4b73      	ldr	r3, [pc, #460]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a5e:	e0d8      	b.n	8005c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a60:	4b6f      	ldr	r3, [pc, #444]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a6a:	4b6d      	ldr	r3, [pc, #436]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d063      	beq.n	8005b3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a76:	4b6a      	ldr	r3, [pc, #424]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	099b      	lsrs	r3, r3, #6
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a88:	633b      	str	r3, [r7, #48]	; 0x30
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a92:	4622      	mov	r2, r4
 8005a94:	462b      	mov	r3, r5
 8005a96:	f04f 0000 	mov.w	r0, #0
 8005a9a:	f04f 0100 	mov.w	r1, #0
 8005a9e:	0159      	lsls	r1, r3, #5
 8005aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aa4:	0150      	lsls	r0, r2, #5
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4621      	mov	r1, r4
 8005aac:	1a51      	subs	r1, r2, r1
 8005aae:	6139      	str	r1, [r7, #16]
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	f04f 0300 	mov.w	r3, #0
 8005ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ac4:	4659      	mov	r1, fp
 8005ac6:	018b      	lsls	r3, r1, #6
 8005ac8:	4651      	mov	r1, sl
 8005aca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ace:	4651      	mov	r1, sl
 8005ad0:	018a      	lsls	r2, r1, #6
 8005ad2:	4651      	mov	r1, sl
 8005ad4:	ebb2 0801 	subs.w	r8, r2, r1
 8005ad8:	4659      	mov	r1, fp
 8005ada:	eb63 0901 	sbc.w	r9, r3, r1
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005af2:	4690      	mov	r8, r2
 8005af4:	4699      	mov	r9, r3
 8005af6:	4623      	mov	r3, r4
 8005af8:	eb18 0303 	adds.w	r3, r8, r3
 8005afc:	60bb      	str	r3, [r7, #8]
 8005afe:	462b      	mov	r3, r5
 8005b00:	eb49 0303 	adc.w	r3, r9, r3
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b12:	4629      	mov	r1, r5
 8005b14:	024b      	lsls	r3, r1, #9
 8005b16:	4621      	mov	r1, r4
 8005b18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	024a      	lsls	r2, r1, #9
 8005b20:	4610      	mov	r0, r2
 8005b22:	4619      	mov	r1, r3
 8005b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b26:	2200      	movs	r2, #0
 8005b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b30:	f7fa fb9e 	bl	8000270 <__aeabi_uldivmod>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	4613      	mov	r3, r2
 8005b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b3c:	e058      	b.n	8005bf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b3e:	4b38      	ldr	r3, [pc, #224]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	099b      	lsrs	r3, r3, #6
 8005b44:	2200      	movs	r2, #0
 8005b46:	4618      	mov	r0, r3
 8005b48:	4611      	mov	r1, r2
 8005b4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b4e:	623b      	str	r3, [r7, #32]
 8005b50:	2300      	movs	r3, #0
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
 8005b54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b58:	4642      	mov	r2, r8
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	f04f 0000 	mov.w	r0, #0
 8005b60:	f04f 0100 	mov.w	r1, #0
 8005b64:	0159      	lsls	r1, r3, #5
 8005b66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b6a:	0150      	lsls	r0, r2, #5
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4641      	mov	r1, r8
 8005b72:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b76:	4649      	mov	r1, r9
 8005b78:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	f04f 0300 	mov.w	r3, #0
 8005b84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b90:	ebb2 040a 	subs.w	r4, r2, sl
 8005b94:	eb63 050b 	sbc.w	r5, r3, fp
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	00eb      	lsls	r3, r5, #3
 8005ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ba6:	00e2      	lsls	r2, r4, #3
 8005ba8:	4614      	mov	r4, r2
 8005baa:	461d      	mov	r5, r3
 8005bac:	4643      	mov	r3, r8
 8005bae:	18e3      	adds	r3, r4, r3
 8005bb0:	603b      	str	r3, [r7, #0]
 8005bb2:	464b      	mov	r3, r9
 8005bb4:	eb45 0303 	adc.w	r3, r5, r3
 8005bb8:	607b      	str	r3, [r7, #4]
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	f04f 0300 	mov.w	r3, #0
 8005bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	028b      	lsls	r3, r1, #10
 8005bca:	4621      	mov	r1, r4
 8005bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	028a      	lsls	r2, r1, #10
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bda:	2200      	movs	r2, #0
 8005bdc:	61bb      	str	r3, [r7, #24]
 8005bde:	61fa      	str	r2, [r7, #28]
 8005be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005be4:	f7fa fb44 	bl	8000270 <__aeabi_uldivmod>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4613      	mov	r3, r2
 8005bee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bf0:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	0c1b      	lsrs	r3, r3, #16
 8005bf6:	f003 0303 	and.w	r3, r3, #3
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c0a:	e002      	b.n	8005c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3750      	adds	r7, #80	; 0x50
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c1e:	bf00      	nop
 8005c20:	40023800 	.word	0x40023800
 8005c24:	00f42400 	.word	0x00f42400
 8005c28:	007a1200 	.word	0x007a1200

08005c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c30:	4b03      	ldr	r3, [pc, #12]	; (8005c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c32:	681b      	ldr	r3, [r3, #0]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	200000b8 	.word	0x200000b8

08005c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c48:	f7ff fff0 	bl	8005c2c <HAL_RCC_GetHCLKFreq>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	0a9b      	lsrs	r3, r3, #10
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	4903      	ldr	r1, [pc, #12]	; (8005c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c5a:	5ccb      	ldrb	r3, [r1, r3]
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40023800 	.word	0x40023800
 8005c68:	0800ca1c 	.word	0x0800ca1c

08005c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c70:	f7ff ffdc 	bl	8005c2c <HAL_RCC_GetHCLKFreq>
 8005c74:	4602      	mov	r2, r0
 8005c76:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	0b5b      	lsrs	r3, r3, #13
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	4903      	ldr	r1, [pc, #12]	; (8005c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c82:	5ccb      	ldrb	r3, [r1, r3]
 8005c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40023800 	.word	0x40023800
 8005c90:	0800ca1c 	.word	0x0800ca1c

08005c94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e07b      	b.n	8005d9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d108      	bne.n	8005cc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cb6:	d009      	beq.n	8005ccc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	61da      	str	r2, [r3, #28]
 8005cbe:	e005      	b.n	8005ccc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fd fc58 	bl	800359c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d50:	ea42 0103 	orr.w	r1, r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	0c1b      	lsrs	r3, r3, #16
 8005d6a:	f003 0104 	and.w	r1, r3, #4
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	f003 0210 	and.w	r2, r3, #16
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b088      	sub	sp, #32
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	603b      	str	r3, [r7, #0]
 8005db2:	4613      	mov	r3, r2
 8005db4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <HAL_SPI_Transmit+0x22>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e126      	b.n	8006016 <HAL_SPI_Transmit+0x270>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dd0:	f7fe f8ae 	bl	8003f30 <HAL_GetTick>
 8005dd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dd6:	88fb      	ldrh	r3, [r7, #6]
 8005dd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d002      	beq.n	8005dec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005de6:	2302      	movs	r3, #2
 8005de8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dea:	e10b      	b.n	8006004 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_SPI_Transmit+0x52>
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d102      	bne.n	8005dfe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dfc:	e102      	b.n	8006004 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2203      	movs	r2, #3
 8005e02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	88fa      	ldrh	r2, [r7, #6]
 8005e16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	88fa      	ldrh	r2, [r7, #6]
 8005e1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e44:	d10f      	bne.n	8005e66 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e70:	2b40      	cmp	r3, #64	; 0x40
 8005e72:	d007      	beq.n	8005e84 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8c:	d14b      	bne.n	8005f26 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_SPI_Transmit+0xf6>
 8005e96:	8afb      	ldrh	r3, [r7, #22]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d13e      	bne.n	8005f1a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea0:	881a      	ldrh	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eac:	1c9a      	adds	r2, r3, #2
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ec0:	e02b      	b.n	8005f1a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d112      	bne.n	8005ef6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed4:	881a      	ldrh	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	1c9a      	adds	r2, r3, #2
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ef4:	e011      	b.n	8005f1a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ef6:	f7fe f81b 	bl	8003f30 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d803      	bhi.n	8005f0e <HAL_SPI_Transmit+0x168>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0c:	d102      	bne.n	8005f14 <HAL_SPI_Transmit+0x16e>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d102      	bne.n	8005f1a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f18:	e074      	b.n	8006004 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1ce      	bne.n	8005ec2 <HAL_SPI_Transmit+0x11c>
 8005f24:	e04c      	b.n	8005fc0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d002      	beq.n	8005f34 <HAL_SPI_Transmit+0x18e>
 8005f2e:	8afb      	ldrh	r3, [r7, #22]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d140      	bne.n	8005fb6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	7812      	ldrb	r2, [r2, #0]
 8005f40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f5a:	e02c      	b.n	8005fb6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d113      	bne.n	8005f92 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	330c      	adds	r3, #12
 8005f74:	7812      	ldrb	r2, [r2, #0]
 8005f76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f90:	e011      	b.n	8005fb6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f92:	f7fd ffcd 	bl	8003f30 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d803      	bhi.n	8005faa <HAL_SPI_Transmit+0x204>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa8:	d102      	bne.n	8005fb0 <HAL_SPI_Transmit+0x20a>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fb4:	e026      	b.n	8006004 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1cd      	bne.n	8005f5c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fbcb 	bl	8006760 <SPI_EndRxTxTransaction>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10a      	bne.n	8005ff4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	613b      	str	r3, [r7, #16]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d002      	beq.n	8006002 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	77fb      	strb	r3, [r7, #31]
 8006000:	e000      	b.n	8006004 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006002:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006014:	7ffb      	ldrb	r3, [r7, #31]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3720      	adds	r7, #32
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b088      	sub	sp, #32
 8006022:	af02      	add	r7, sp, #8
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	603b      	str	r3, [r7, #0]
 800602a:	4613      	mov	r3, r2
 800602c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800603a:	d112      	bne.n	8006062 <HAL_SPI_Receive+0x44>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10e      	bne.n	8006062 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2204      	movs	r2, #4
 8006048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800604c:	88fa      	ldrh	r2, [r7, #6]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	4613      	mov	r3, r2
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 f8f1 	bl	8006240 <HAL_SPI_TransmitReceive>
 800605e:	4603      	mov	r3, r0
 8006060:	e0ea      	b.n	8006238 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006068:	2b01      	cmp	r3, #1
 800606a:	d101      	bne.n	8006070 <HAL_SPI_Receive+0x52>
 800606c:	2302      	movs	r3, #2
 800606e:	e0e3      	b.n	8006238 <HAL_SPI_Receive+0x21a>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006078:	f7fd ff5a 	bl	8003f30 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b01      	cmp	r3, #1
 8006088:	d002      	beq.n	8006090 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800608a:	2302      	movs	r3, #2
 800608c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800608e:	e0ca      	b.n	8006226 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <HAL_SPI_Receive+0x7e>
 8006096:	88fb      	ldrh	r3, [r7, #6]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d102      	bne.n	80060a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060a0:	e0c1      	b.n	8006226 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2204      	movs	r2, #4
 80060a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	88fa      	ldrh	r2, [r7, #6]
 80060ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	88fa      	ldrh	r2, [r7, #6]
 80060c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e8:	d10f      	bne.n	800610a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006108:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006114:	2b40      	cmp	r3, #64	; 0x40
 8006116:	d007      	beq.n	8006128 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006126:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d162      	bne.n	80061f6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006130:	e02e      	b.n	8006190 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b01      	cmp	r3, #1
 800613e:	d115      	bne.n	800616c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f103 020c 	add.w	r2, r3, #12
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	7812      	ldrb	r2, [r2, #0]
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b01      	subs	r3, #1
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	87da      	strh	r2, [r3, #62]	; 0x3e
 800616a:	e011      	b.n	8006190 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800616c:	f7fd fee0 	bl	8003f30 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d803      	bhi.n	8006184 <HAL_SPI_Receive+0x166>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006182:	d102      	bne.n	800618a <HAL_SPI_Receive+0x16c>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d102      	bne.n	8006190 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800618e:	e04a      	b.n	8006226 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006194:	b29b      	uxth	r3, r3
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1cb      	bne.n	8006132 <HAL_SPI_Receive+0x114>
 800619a:	e031      	b.n	8006200 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d113      	bne.n	80061d2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b4:	b292      	uxth	r2, r2
 80061b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	1c9a      	adds	r2, r3, #2
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	3b01      	subs	r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061d0:	e011      	b.n	80061f6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061d2:	f7fd fead 	bl	8003f30 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d803      	bhi.n	80061ea <HAL_SPI_Receive+0x1cc>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e8:	d102      	bne.n	80061f0 <HAL_SPI_Receive+0x1d2>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d102      	bne.n	80061f6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061f4:	e017      	b.n	8006226 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1cd      	bne.n	800619c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 fa45 	bl	8006694 <SPI_EndRxTransaction>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2220      	movs	r2, #32
 8006214:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	75fb      	strb	r3, [r7, #23]
 8006222:	e000      	b.n	8006226 <HAL_SPI_Receive+0x208>
  }

error :
 8006224:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006236:	7dfb      	ldrb	r3, [r7, #23]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08c      	sub	sp, #48	; 0x30
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800624e:	2301      	movs	r3, #1
 8006250:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800625e:	2b01      	cmp	r3, #1
 8006260:	d101      	bne.n	8006266 <HAL_SPI_TransmitReceive+0x26>
 8006262:	2302      	movs	r3, #2
 8006264:	e18a      	b.n	800657c <HAL_SPI_TransmitReceive+0x33c>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800626e:	f7fd fe5f 	bl	8003f30 <HAL_GetTick>
 8006272:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800627a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006284:	887b      	ldrh	r3, [r7, #2]
 8006286:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006288:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800628c:	2b01      	cmp	r3, #1
 800628e:	d00f      	beq.n	80062b0 <HAL_SPI_TransmitReceive+0x70>
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006296:	d107      	bne.n	80062a8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d103      	bne.n	80062a8 <HAL_SPI_TransmitReceive+0x68>
 80062a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062a4:	2b04      	cmp	r3, #4
 80062a6:	d003      	beq.n	80062b0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80062a8:	2302      	movs	r3, #2
 80062aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062ae:	e15b      	b.n	8006568 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d005      	beq.n	80062c2 <HAL_SPI_TransmitReceive+0x82>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_SPI_TransmitReceive+0x82>
 80062bc:	887b      	ldrh	r3, [r7, #2]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d103      	bne.n	80062ca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062c8:	e14e      	b.n	8006568 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d003      	beq.n	80062de <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2205      	movs	r2, #5
 80062da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	887a      	ldrh	r2, [r7, #2]
 80062ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	887a      	ldrh	r2, [r7, #2]
 80062f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	887a      	ldrh	r2, [r7, #2]
 8006300:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	887a      	ldrh	r2, [r7, #2]
 8006306:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631e:	2b40      	cmp	r3, #64	; 0x40
 8006320:	d007      	beq.n	8006332 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006330:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800633a:	d178      	bne.n	800642e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <HAL_SPI_TransmitReceive+0x10a>
 8006344:	8b7b      	ldrh	r3, [r7, #26]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d166      	bne.n	8006418 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634e:	881a      	ldrh	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	1c9a      	adds	r2, r3, #2
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006364:	b29b      	uxth	r3, r3
 8006366:	3b01      	subs	r3, #1
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800636e:	e053      	b.n	8006418 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b02      	cmp	r3, #2
 800637c:	d11b      	bne.n	80063b6 <HAL_SPI_TransmitReceive+0x176>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d016      	beq.n	80063b6 <HAL_SPI_TransmitReceive+0x176>
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	2b01      	cmp	r3, #1
 800638c:	d113      	bne.n	80063b6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006392:	881a      	ldrh	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639e:	1c9a      	adds	r2, r3, #2
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d119      	bne.n	80063f8 <HAL_SPI_TransmitReceive+0x1b8>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d014      	beq.n	80063f8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68da      	ldr	r2, [r3, #12]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	b292      	uxth	r2, r2
 80063da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	1c9a      	adds	r2, r3, #2
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063f4:	2301      	movs	r3, #1
 80063f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063f8:	f7fd fd9a 	bl	8003f30 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006404:	429a      	cmp	r2, r3
 8006406:	d807      	bhi.n	8006418 <HAL_SPI_TransmitReceive+0x1d8>
 8006408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640e:	d003      	beq.n	8006418 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006416:	e0a7      	b.n	8006568 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d1a6      	bne.n	8006370 <HAL_SPI_TransmitReceive+0x130>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1a1      	bne.n	8006370 <HAL_SPI_TransmitReceive+0x130>
 800642c:	e07c      	b.n	8006528 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <HAL_SPI_TransmitReceive+0x1fc>
 8006436:	8b7b      	ldrh	r3, [r7, #26]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d16b      	bne.n	8006514 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	330c      	adds	r3, #12
 8006446:	7812      	ldrb	r2, [r2, #0]
 8006448:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006458:	b29b      	uxth	r3, r3
 800645a:	3b01      	subs	r3, #1
 800645c:	b29a      	uxth	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006462:	e057      	b.n	8006514 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b02      	cmp	r3, #2
 8006470:	d11c      	bne.n	80064ac <HAL_SPI_TransmitReceive+0x26c>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006476:	b29b      	uxth	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d017      	beq.n	80064ac <HAL_SPI_TransmitReceive+0x26c>
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	2b01      	cmp	r3, #1
 8006480:	d114      	bne.n	80064ac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	330c      	adds	r3, #12
 800648c:	7812      	ldrb	r2, [r2, #0]
 800648e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d119      	bne.n	80064ee <HAL_SPI_TransmitReceive+0x2ae>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064be:	b29b      	uxth	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d014      	beq.n	80064ee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	3b01      	subs	r3, #1
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064ea:	2301      	movs	r3, #1
 80064ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064ee:	f7fd fd1f 	bl	8003f30 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d803      	bhi.n	8006506 <HAL_SPI_TransmitReceive+0x2c6>
 80064fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006504:	d102      	bne.n	800650c <HAL_SPI_TransmitReceive+0x2cc>
 8006506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006508:	2b00      	cmp	r3, #0
 800650a:	d103      	bne.n	8006514 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006512:	e029      	b.n	8006568 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1a2      	bne.n	8006464 <HAL_SPI_TransmitReceive+0x224>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006522:	b29b      	uxth	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d19d      	bne.n	8006464 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f917 	bl	8006760 <SPI_EndRxTxTransaction>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d006      	beq.n	8006546 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006544:	e010      	b.n	8006568 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10b      	bne.n	8006566 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	e000      	b.n	8006568 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006566:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006578:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800657c:	4618      	mov	r0, r3
 800657e:	3730      	adds	r7, #48	; 0x30
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	4613      	mov	r3, r2
 8006592:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006594:	f7fd fccc 	bl	8003f30 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	1a9b      	subs	r3, r3, r2
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	4413      	add	r3, r2
 80065a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065a4:	f7fd fcc4 	bl	8003f30 <HAL_GetTick>
 80065a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065aa:	4b39      	ldr	r3, [pc, #228]	; (8006690 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	015b      	lsls	r3, r3, #5
 80065b0:	0d1b      	lsrs	r3, r3, #20
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	fb02 f303 	mul.w	r3, r2, r3
 80065b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ba:	e054      	b.n	8006666 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c2:	d050      	beq.n	8006666 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065c4:	f7fd fcb4 	bl	8003f30 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d902      	bls.n	80065da <SPI_WaitFlagStateUntilTimeout+0x56>
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d13d      	bne.n	8006656 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065f2:	d111      	bne.n	8006618 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065fc:	d004      	beq.n	8006608 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006606:	d107      	bne.n	8006618 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006616:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006620:	d10f      	bne.n	8006642 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006640:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e017      	b.n	8006686 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	3b01      	subs	r3, #1
 8006664:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	4013      	ands	r3, r2
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	429a      	cmp	r2, r3
 8006674:	bf0c      	ite	eq
 8006676:	2301      	moveq	r3, #1
 8006678:	2300      	movne	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	429a      	cmp	r2, r3
 8006682:	d19b      	bne.n	80065bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3720      	adds	r7, #32
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	200000b8 	.word	0x200000b8

08006694 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066a8:	d111      	bne.n	80066ce <SPI_EndRxTransaction+0x3a>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b2:	d004      	beq.n	80066be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066bc:	d107      	bne.n	80066ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066d6:	d12a      	bne.n	800672e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066e0:	d012      	beq.n	8006708 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	2200      	movs	r2, #0
 80066ea:	2180      	movs	r1, #128	; 0x80
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff ff49 	bl	8006584 <SPI_WaitFlagStateUntilTimeout>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d02d      	beq.n	8006754 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fc:	f043 0220 	orr.w	r2, r3, #32
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e026      	b.n	8006756 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2200      	movs	r2, #0
 8006710:	2101      	movs	r1, #1
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f7ff ff36 	bl	8006584 <SPI_WaitFlagStateUntilTimeout>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d01a      	beq.n	8006754 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006722:	f043 0220 	orr.w	r2, r3, #32
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e013      	b.n	8006756 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2200      	movs	r2, #0
 8006736:	2101      	movs	r1, #1
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7ff ff23 	bl	8006584 <SPI_WaitFlagStateUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006748:	f043 0220 	orr.w	r2, r3, #32
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e000      	b.n	8006756 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af02      	add	r7, sp, #8
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800676c:	4b1b      	ldr	r3, [pc, #108]	; (80067dc <SPI_EndRxTxTransaction+0x7c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a1b      	ldr	r2, [pc, #108]	; (80067e0 <SPI_EndRxTxTransaction+0x80>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	0d5b      	lsrs	r3, r3, #21
 8006778:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800677c:	fb02 f303 	mul.w	r3, r2, r3
 8006780:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800678a:	d112      	bne.n	80067b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2200      	movs	r2, #0
 8006794:	2180      	movs	r1, #128	; 0x80
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f7ff fef4 	bl	8006584 <SPI_WaitFlagStateUntilTimeout>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d016      	beq.n	80067d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	f043 0220 	orr.w	r2, r3, #32
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e00f      	b.n	80067d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00a      	beq.n	80067ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	3b01      	subs	r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c8:	2b80      	cmp	r3, #128	; 0x80
 80067ca:	d0f2      	beq.n	80067b2 <SPI_EndRxTxTransaction+0x52>
 80067cc:	e000      	b.n	80067d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80067ce:	bf00      	nop
  }

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	200000b8 	.word	0x200000b8
 80067e0:	165e9f81 	.word	0x165e9f81

080067e4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e034      	b.n	8006864 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d106      	bne.n	8006814 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f7fa f928 	bl	8000a64 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3308      	adds	r3, #8
 800681c:	4619      	mov	r1, r3
 800681e:	4610      	mov	r0, r2
 8006820:	f002 f84e 	bl	80088c0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	461a      	mov	r2, r3
 800682e:	68b9      	ldr	r1, [r7, #8]
 8006830:	f002 f898 	bl	8008964 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6858      	ldr	r0, [r3, #4]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	6879      	ldr	r1, [r7, #4]
 8006842:	f002 f8cd 	bl	80089e0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	6892      	ldr	r2, [r2, #8]
 800684e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	6892      	ldr	r2, [r2, #8]
 800685a:	f041 0101 	orr.w	r1, r1, #1
 800685e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e041      	b.n	8006902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d106      	bne.n	8006898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7fd f906 	bl	8003aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2202      	movs	r2, #2
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	3304      	adds	r3, #4
 80068a8:	4619      	mov	r1, r3
 80068aa:	4610      	mov	r0, r2
 80068ac:	f000 fc1a 	bl	80070e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	d001      	beq.n	8006924 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e046      	b.n	80069b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a23      	ldr	r2, [pc, #140]	; (80069c0 <HAL_TIM_Base_Start+0xb4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d022      	beq.n	800697c <HAL_TIM_Base_Start+0x70>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693e:	d01d      	beq.n	800697c <HAL_TIM_Base_Start+0x70>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1f      	ldr	r2, [pc, #124]	; (80069c4 <HAL_TIM_Base_Start+0xb8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d018      	beq.n	800697c <HAL_TIM_Base_Start+0x70>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1e      	ldr	r2, [pc, #120]	; (80069c8 <HAL_TIM_Base_Start+0xbc>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d013      	beq.n	800697c <HAL_TIM_Base_Start+0x70>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a1c      	ldr	r2, [pc, #112]	; (80069cc <HAL_TIM_Base_Start+0xc0>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00e      	beq.n	800697c <HAL_TIM_Base_Start+0x70>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a1b      	ldr	r2, [pc, #108]	; (80069d0 <HAL_TIM_Base_Start+0xc4>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d009      	beq.n	800697c <HAL_TIM_Base_Start+0x70>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a19      	ldr	r2, [pc, #100]	; (80069d4 <HAL_TIM_Base_Start+0xc8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d004      	beq.n	800697c <HAL_TIM_Base_Start+0x70>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a18      	ldr	r2, [pc, #96]	; (80069d8 <HAL_TIM_Base_Start+0xcc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d111      	bne.n	80069a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 0307 	and.w	r3, r3, #7
 8006986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b06      	cmp	r3, #6
 800698c:	d010      	beq.n	80069b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f042 0201 	orr.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800699e:	e007      	b.n	80069b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0201 	orr.w	r2, r2, #1
 80069ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	40010000 	.word	0x40010000
 80069c4:	40000400 	.word	0x40000400
 80069c8:	40000800 	.word	0x40000800
 80069cc:	40000c00 	.word	0x40000c00
 80069d0:	40010400 	.word	0x40010400
 80069d4:	40014000 	.word	0x40014000
 80069d8:	40001800 	.word	0x40001800

080069dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d001      	beq.n	80069f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e04e      	b.n	8006a92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0201 	orr.w	r2, r2, #1
 8006a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a23      	ldr	r2, [pc, #140]	; (8006aa0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d022      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0x80>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1e:	d01d      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0x80>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a1f      	ldr	r2, [pc, #124]	; (8006aa4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d018      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0x80>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a1e      	ldr	r2, [pc, #120]	; (8006aa8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d013      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0x80>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a1c      	ldr	r2, [pc, #112]	; (8006aac <HAL_TIM_Base_Start_IT+0xd0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00e      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0x80>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1b      	ldr	r2, [pc, #108]	; (8006ab0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d009      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0x80>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a19      	ldr	r2, [pc, #100]	; (8006ab4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d004      	beq.n	8006a5c <HAL_TIM_Base_Start_IT+0x80>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a18      	ldr	r2, [pc, #96]	; (8006ab8 <HAL_TIM_Base_Start_IT+0xdc>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d111      	bne.n	8006a80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2b06      	cmp	r3, #6
 8006a6c:	d010      	beq.n	8006a90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f042 0201 	orr.w	r2, r2, #1
 8006a7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a7e:	e007      	b.n	8006a90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0201 	orr.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	40010000 	.word	0x40010000
 8006aa4:	40000400 	.word	0x40000400
 8006aa8:	40000800 	.word	0x40000800
 8006aac:	40000c00 	.word	0x40000c00
 8006ab0:	40010400 	.word	0x40010400
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	40001800 	.word	0x40001800

08006abc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e041      	b.n	8006b52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d106      	bne.n	8006ae8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f839 	bl	8006b5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3304      	adds	r3, #4
 8006af8:	4619      	mov	r1, r3
 8006afa:	4610      	mov	r0, r2
 8006afc:	f000 faf2 	bl	80070e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b082      	sub	sp, #8
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d122      	bne.n	8006bca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d11b      	bne.n	8006bca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f06f 0202 	mvn.w	r2, #2
 8006b9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	f003 0303 	and.w	r3, r3, #3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fa78 	bl	80070a6 <HAL_TIM_IC_CaptureCallback>
 8006bb6:	e005      	b.n	8006bc4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fa6a 	bl	8007092 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fa7b 	bl	80070ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d122      	bne.n	8006c1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f003 0304 	and.w	r3, r3, #4
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d11b      	bne.n	8006c1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f06f 0204 	mvn.w	r2, #4
 8006bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fa4e 	bl	80070a6 <HAL_TIM_IC_CaptureCallback>
 8006c0a:	e005      	b.n	8006c18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fa40 	bl	8007092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 fa51 	bl	80070ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d122      	bne.n	8006c72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	d11b      	bne.n	8006c72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f06f 0208 	mvn.w	r2, #8
 8006c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2204      	movs	r2, #4
 8006c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	f003 0303 	and.w	r3, r3, #3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fa24 	bl	80070a6 <HAL_TIM_IC_CaptureCallback>
 8006c5e:	e005      	b.n	8006c6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fa16 	bl	8007092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fa27 	bl	80070ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f003 0310 	and.w	r3, r3, #16
 8006c7c:	2b10      	cmp	r3, #16
 8006c7e:	d122      	bne.n	8006cc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f003 0310 	and.w	r3, r3, #16
 8006c8a:	2b10      	cmp	r3, #16
 8006c8c:	d11b      	bne.n	8006cc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f06f 0210 	mvn.w	r2, #16
 8006c96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2208      	movs	r2, #8
 8006c9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f9fa 	bl	80070a6 <HAL_TIM_IC_CaptureCallback>
 8006cb2:	e005      	b.n	8006cc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f9ec 	bl	8007092 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f9fd 	bl	80070ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d10e      	bne.n	8006cf2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d107      	bne.n	8006cf2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f06f 0201 	mvn.w	r2, #1
 8006cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7fc fbf5 	bl	80034dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfc:	2b80      	cmp	r3, #128	; 0x80
 8006cfe:	d10e      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d107      	bne.n	8006d1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fd53 	bl	80077c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d28:	2b40      	cmp	r3, #64	; 0x40
 8006d2a:	d10e      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b40      	cmp	r3, #64	; 0x40
 8006d38:	d107      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f9c2 	bl	80070ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0320 	and.w	r3, r3, #32
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	d10e      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d107      	bne.n	8006d76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f06f 0220 	mvn.w	r2, #32
 8006d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fd1d 	bl	80077b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d76:	bf00      	nop
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d101      	bne.n	8006d9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e0ae      	b.n	8006efc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b0c      	cmp	r3, #12
 8006daa:	f200 809f 	bhi.w	8006eec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006dae:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006de9 	.word	0x08006de9
 8006db8:	08006eed 	.word	0x08006eed
 8006dbc:	08006eed 	.word	0x08006eed
 8006dc0:	08006eed 	.word	0x08006eed
 8006dc4:	08006e29 	.word	0x08006e29
 8006dc8:	08006eed 	.word	0x08006eed
 8006dcc:	08006eed 	.word	0x08006eed
 8006dd0:	08006eed 	.word	0x08006eed
 8006dd4:	08006e6b 	.word	0x08006e6b
 8006dd8:	08006eed 	.word	0x08006eed
 8006ddc:	08006eed 	.word	0x08006eed
 8006de0:	08006eed 	.word	0x08006eed
 8006de4:	08006eab 	.word	0x08006eab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68b9      	ldr	r1, [r7, #8]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fa18 	bl	8007224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	699a      	ldr	r2, [r3, #24]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0208 	orr.w	r2, r2, #8
 8006e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699a      	ldr	r2, [r3, #24]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0204 	bic.w	r2, r2, #4
 8006e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6999      	ldr	r1, [r3, #24]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	691a      	ldr	r2, [r3, #16]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	619a      	str	r2, [r3, #24]
      break;
 8006e26:	e064      	b.n	8006ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fa68 	bl	8007304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699a      	ldr	r2, [r3, #24]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6999      	ldr	r1, [r3, #24]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	021a      	lsls	r2, r3, #8
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	619a      	str	r2, [r3, #24]
      break;
 8006e68:	e043      	b.n	8006ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68b9      	ldr	r1, [r7, #8]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fabd 	bl	80073f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69da      	ldr	r2, [r3, #28]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 0208 	orr.w	r2, r2, #8
 8006e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69da      	ldr	r2, [r3, #28]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 0204 	bic.w	r2, r2, #4
 8006e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69d9      	ldr	r1, [r3, #28]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	691a      	ldr	r2, [r3, #16]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	61da      	str	r2, [r3, #28]
      break;
 8006ea8:	e023      	b.n	8006ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fb11 	bl	80074d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69da      	ldr	r2, [r3, #28]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69da      	ldr	r2, [r3, #28]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69d9      	ldr	r1, [r3, #28]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	021a      	lsls	r2, r3, #8
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	61da      	str	r2, [r3, #28]
      break;
 8006eea:	e002      	b.n	8006ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_TIM_ConfigClockSource+0x1c>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e0b4      	b.n	800708a <HAL_TIM_ConfigClockSource+0x186>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f58:	d03e      	beq.n	8006fd8 <HAL_TIM_ConfigClockSource+0xd4>
 8006f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f5e:	f200 8087 	bhi.w	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f66:	f000 8086 	beq.w	8007076 <HAL_TIM_ConfigClockSource+0x172>
 8006f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6e:	d87f      	bhi.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006f70:	2b70      	cmp	r3, #112	; 0x70
 8006f72:	d01a      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0xa6>
 8006f74:	2b70      	cmp	r3, #112	; 0x70
 8006f76:	d87b      	bhi.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006f78:	2b60      	cmp	r3, #96	; 0x60
 8006f7a:	d050      	beq.n	800701e <HAL_TIM_ConfigClockSource+0x11a>
 8006f7c:	2b60      	cmp	r3, #96	; 0x60
 8006f7e:	d877      	bhi.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006f80:	2b50      	cmp	r3, #80	; 0x50
 8006f82:	d03c      	beq.n	8006ffe <HAL_TIM_ConfigClockSource+0xfa>
 8006f84:	2b50      	cmp	r3, #80	; 0x50
 8006f86:	d873      	bhi.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006f88:	2b40      	cmp	r3, #64	; 0x40
 8006f8a:	d058      	beq.n	800703e <HAL_TIM_ConfigClockSource+0x13a>
 8006f8c:	2b40      	cmp	r3, #64	; 0x40
 8006f8e:	d86f      	bhi.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006f90:	2b30      	cmp	r3, #48	; 0x30
 8006f92:	d064      	beq.n	800705e <HAL_TIM_ConfigClockSource+0x15a>
 8006f94:	2b30      	cmp	r3, #48	; 0x30
 8006f96:	d86b      	bhi.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d060      	beq.n	800705e <HAL_TIM_ConfigClockSource+0x15a>
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	d867      	bhi.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d05c      	beq.n	800705e <HAL_TIM_ConfigClockSource+0x15a>
 8006fa4:	2b10      	cmp	r3, #16
 8006fa6:	d05a      	beq.n	800705e <HAL_TIM_ConfigClockSource+0x15a>
 8006fa8:	e062      	b.n	8007070 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6818      	ldr	r0, [r3, #0]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	6899      	ldr	r1, [r3, #8]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f000 fb5d 	bl	8007678 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	609a      	str	r2, [r3, #8]
      break;
 8006fd6:	e04f      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6818      	ldr	r0, [r3, #0]
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	6899      	ldr	r1, [r3, #8]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685a      	ldr	r2, [r3, #4]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f000 fb46 	bl	8007678 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689a      	ldr	r2, [r3, #8]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ffa:	609a      	str	r2, [r3, #8]
      break;
 8006ffc:	e03c      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	6859      	ldr	r1, [r3, #4]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	461a      	mov	r2, r3
 800700c:	f000 faba 	bl	8007584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2150      	movs	r1, #80	; 0x50
 8007016:	4618      	mov	r0, r3
 8007018:	f000 fb13 	bl	8007642 <TIM_ITRx_SetConfig>
      break;
 800701c:	e02c      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	6859      	ldr	r1, [r3, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	461a      	mov	r2, r3
 800702c:	f000 fad9 	bl	80075e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2160      	movs	r1, #96	; 0x60
 8007036:	4618      	mov	r0, r3
 8007038:	f000 fb03 	bl	8007642 <TIM_ITRx_SetConfig>
      break;
 800703c:	e01c      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	6859      	ldr	r1, [r3, #4]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	461a      	mov	r2, r3
 800704c:	f000 fa9a 	bl	8007584 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2140      	movs	r1, #64	; 0x40
 8007056:	4618      	mov	r0, r3
 8007058:	f000 faf3 	bl	8007642 <TIM_ITRx_SetConfig>
      break;
 800705c:	e00c      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4619      	mov	r1, r3
 8007068:	4610      	mov	r0, r2
 800706a:	f000 faea 	bl	8007642 <TIM_ITRx_SetConfig>
      break;
 800706e:	e003      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	73fb      	strb	r3, [r7, #15]
      break;
 8007074:	e000      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007088:	7bfb      	ldrb	r3, [r7, #15]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070c2:	bf00      	nop
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr

080070ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b083      	sub	sp, #12
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
	...

080070e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a40      	ldr	r2, [pc, #256]	; (80071f8 <TIM_Base_SetConfig+0x114>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d013      	beq.n	8007124 <TIM_Base_SetConfig+0x40>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007102:	d00f      	beq.n	8007124 <TIM_Base_SetConfig+0x40>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a3d      	ldr	r2, [pc, #244]	; (80071fc <TIM_Base_SetConfig+0x118>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00b      	beq.n	8007124 <TIM_Base_SetConfig+0x40>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a3c      	ldr	r2, [pc, #240]	; (8007200 <TIM_Base_SetConfig+0x11c>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d007      	beq.n	8007124 <TIM_Base_SetConfig+0x40>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a3b      	ldr	r2, [pc, #236]	; (8007204 <TIM_Base_SetConfig+0x120>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d003      	beq.n	8007124 <TIM_Base_SetConfig+0x40>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a3a      	ldr	r2, [pc, #232]	; (8007208 <TIM_Base_SetConfig+0x124>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d108      	bne.n	8007136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	4313      	orrs	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a2f      	ldr	r2, [pc, #188]	; (80071f8 <TIM_Base_SetConfig+0x114>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d02b      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007144:	d027      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a2c      	ldr	r2, [pc, #176]	; (80071fc <TIM_Base_SetConfig+0x118>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d023      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a2b      	ldr	r2, [pc, #172]	; (8007200 <TIM_Base_SetConfig+0x11c>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d01f      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a2a      	ldr	r2, [pc, #168]	; (8007204 <TIM_Base_SetConfig+0x120>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d01b      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a29      	ldr	r2, [pc, #164]	; (8007208 <TIM_Base_SetConfig+0x124>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d017      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a28      	ldr	r2, [pc, #160]	; (800720c <TIM_Base_SetConfig+0x128>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d013      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a27      	ldr	r2, [pc, #156]	; (8007210 <TIM_Base_SetConfig+0x12c>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00f      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a26      	ldr	r2, [pc, #152]	; (8007214 <TIM_Base_SetConfig+0x130>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d00b      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a25      	ldr	r2, [pc, #148]	; (8007218 <TIM_Base_SetConfig+0x134>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d007      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a24      	ldr	r2, [pc, #144]	; (800721c <TIM_Base_SetConfig+0x138>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d003      	beq.n	8007196 <TIM_Base_SetConfig+0xb2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a23      	ldr	r2, [pc, #140]	; (8007220 <TIM_Base_SetConfig+0x13c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d108      	bne.n	80071a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800719c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a0a      	ldr	r2, [pc, #40]	; (80071f8 <TIM_Base_SetConfig+0x114>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d003      	beq.n	80071dc <TIM_Base_SetConfig+0xf8>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a0c      	ldr	r2, [pc, #48]	; (8007208 <TIM_Base_SetConfig+0x124>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d103      	bne.n	80071e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	691a      	ldr	r2, [r3, #16]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	615a      	str	r2, [r3, #20]
}
 80071ea:	bf00      	nop
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	40010000 	.word	0x40010000
 80071fc:	40000400 	.word	0x40000400
 8007200:	40000800 	.word	0x40000800
 8007204:	40000c00 	.word	0x40000c00
 8007208:	40010400 	.word	0x40010400
 800720c:	40014000 	.word	0x40014000
 8007210:	40014400 	.word	0x40014400
 8007214:	40014800 	.word	0x40014800
 8007218:	40001800 	.word	0x40001800
 800721c:	40001c00 	.word	0x40001c00
 8007220:	40002000 	.word	0x40002000

08007224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	f023 0201 	bic.w	r2, r3, #1
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f023 0303 	bic.w	r3, r3, #3
 800725a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f023 0302 	bic.w	r3, r3, #2
 800726c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	4313      	orrs	r3, r2
 8007276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a20      	ldr	r2, [pc, #128]	; (80072fc <TIM_OC1_SetConfig+0xd8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d003      	beq.n	8007288 <TIM_OC1_SetConfig+0x64>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a1f      	ldr	r2, [pc, #124]	; (8007300 <TIM_OC1_SetConfig+0xdc>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d10c      	bne.n	80072a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f023 0308 	bic.w	r3, r3, #8
 800728e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	4313      	orrs	r3, r2
 8007298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f023 0304 	bic.w	r3, r3, #4
 80072a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a15      	ldr	r2, [pc, #84]	; (80072fc <TIM_OC1_SetConfig+0xd8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d003      	beq.n	80072b2 <TIM_OC1_SetConfig+0x8e>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a14      	ldr	r2, [pc, #80]	; (8007300 <TIM_OC1_SetConfig+0xdc>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d111      	bne.n	80072d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	621a      	str	r2, [r3, #32]
}
 80072f0:	bf00      	nop
 80072f2:	371c      	adds	r7, #28
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	40010000 	.word	0x40010000
 8007300:	40010400 	.word	0x40010400

08007304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	f023 0210 	bic.w	r2, r3, #16
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800733a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	021b      	lsls	r3, r3, #8
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	4313      	orrs	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f023 0320 	bic.w	r3, r3, #32
 800734e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	011b      	lsls	r3, r3, #4
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4313      	orrs	r3, r2
 800735a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a22      	ldr	r2, [pc, #136]	; (80073e8 <TIM_OC2_SetConfig+0xe4>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d003      	beq.n	800736c <TIM_OC2_SetConfig+0x68>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a21      	ldr	r2, [pc, #132]	; (80073ec <TIM_OC2_SetConfig+0xe8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d10d      	bne.n	8007388 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	4313      	orrs	r3, r2
 800737e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007386:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a17      	ldr	r2, [pc, #92]	; (80073e8 <TIM_OC2_SetConfig+0xe4>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d003      	beq.n	8007398 <TIM_OC2_SetConfig+0x94>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a16      	ldr	r2, [pc, #88]	; (80073ec <TIM_OC2_SetConfig+0xe8>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d113      	bne.n	80073c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800739e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	4313      	orrs	r3, r2
 80073be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	621a      	str	r2, [r3, #32]
}
 80073da:	bf00      	nop
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	40010000 	.word	0x40010000
 80073ec:	40010400 	.word	0x40010400

080073f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800741e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f023 0303 	bic.w	r3, r3, #3
 8007426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	021b      	lsls	r3, r3, #8
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	4313      	orrs	r3, r2
 8007444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a21      	ldr	r2, [pc, #132]	; (80074d0 <TIM_OC3_SetConfig+0xe0>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d003      	beq.n	8007456 <TIM_OC3_SetConfig+0x66>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a20      	ldr	r2, [pc, #128]	; (80074d4 <TIM_OC3_SetConfig+0xe4>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d10d      	bne.n	8007472 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800745c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	021b      	lsls	r3, r3, #8
 8007464:	697a      	ldr	r2, [r7, #20]
 8007466:	4313      	orrs	r3, r2
 8007468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a16      	ldr	r2, [pc, #88]	; (80074d0 <TIM_OC3_SetConfig+0xe0>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d003      	beq.n	8007482 <TIM_OC3_SetConfig+0x92>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a15      	ldr	r2, [pc, #84]	; (80074d4 <TIM_OC3_SetConfig+0xe4>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d113      	bne.n	80074aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	011b      	lsls	r3, r3, #4
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	4313      	orrs	r3, r2
 800749c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	699b      	ldr	r3, [r3, #24]
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	621a      	str	r2, [r3, #32]
}
 80074c4:	bf00      	nop
 80074c6:	371c      	adds	r7, #28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	40010000 	.word	0x40010000
 80074d4:	40010400 	.word	0x40010400

080074d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800750e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	021b      	lsls	r3, r3, #8
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	4313      	orrs	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	031b      	lsls	r3, r3, #12
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	4313      	orrs	r3, r2
 800752e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a12      	ldr	r2, [pc, #72]	; (800757c <TIM_OC4_SetConfig+0xa4>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d003      	beq.n	8007540 <TIM_OC4_SetConfig+0x68>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a11      	ldr	r2, [pc, #68]	; (8007580 <TIM_OC4_SetConfig+0xa8>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d109      	bne.n	8007554 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007546:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	019b      	lsls	r3, r3, #6
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	4313      	orrs	r3, r2
 8007552:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	621a      	str	r2, [r3, #32]
}
 800756e:	bf00      	nop
 8007570:	371c      	adds	r7, #28
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	40010000 	.word	0x40010000
 8007580:	40010400 	.word	0x40010400

08007584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6a1b      	ldr	r3, [r3, #32]
 800759a:	f023 0201 	bic.w	r2, r3, #1
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	011b      	lsls	r3, r3, #4
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f023 030a 	bic.w	r3, r3, #10
 80075c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	621a      	str	r2, [r3, #32]
}
 80075d6:	bf00      	nop
 80075d8:	371c      	adds	r7, #28
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b087      	sub	sp, #28
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	f023 0210 	bic.w	r2, r3, #16
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800760c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	031b      	lsls	r3, r3, #12
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	4313      	orrs	r3, r2
 8007616:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800761e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	4313      	orrs	r3, r2
 8007628:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	621a      	str	r2, [r3, #32]
}
 8007636:	bf00      	nop
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007642:	b480      	push	{r7}
 8007644:	b085      	sub	sp, #20
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	f043 0307 	orr.w	r3, r3, #7
 8007664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	609a      	str	r2, [r3, #8]
}
 800766c:	bf00      	nop
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007678:	b480      	push	{r7}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	021a      	lsls	r2, r3, #8
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	431a      	orrs	r2, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	4313      	orrs	r3, r2
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	609a      	str	r2, [r3, #8]
}
 80076ac:	bf00      	nop
 80076ae:	371c      	adds	r7, #28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076cc:	2302      	movs	r3, #2
 80076ce:	e05a      	b.n	8007786 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a21      	ldr	r2, [pc, #132]	; (8007794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d022      	beq.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800771c:	d01d      	beq.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a1d      	ldr	r2, [pc, #116]	; (8007798 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d018      	beq.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a1b      	ldr	r2, [pc, #108]	; (800779c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d013      	beq.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a1a      	ldr	r2, [pc, #104]	; (80077a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d00e      	beq.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a18      	ldr	r2, [pc, #96]	; (80077a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d009      	beq.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a17      	ldr	r2, [pc, #92]	; (80077a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d004      	beq.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a15      	ldr	r2, [pc, #84]	; (80077ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d10c      	bne.n	8007774 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007760:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	4313      	orrs	r3, r2
 800776a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	40010000 	.word	0x40010000
 8007798:	40000400 	.word	0x40000400
 800779c:	40000800 	.word	0x40000800
 80077a0:	40000c00 	.word	0x40000c00
 80077a4:	40010400 	.word	0x40010400
 80077a8:	40014000 	.word	0x40014000
 80077ac:	40001800 	.word	0x40001800

080077b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d101      	bne.n	80077ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e03f      	b.n	800786a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d106      	bne.n	8007804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7fc fa7a 	bl	8003cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2224      	movs	r2, #36	; 0x24
 8007808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800781a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fddb 	bl	80083d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	695a      	ldr	r2, [r3, #20]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2220      	movs	r2, #32
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b08a      	sub	sp, #40	; 0x28
 8007876:	af02      	add	r7, sp, #8
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	603b      	str	r3, [r7, #0]
 800787e:	4613      	mov	r3, r2
 8007880:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2b20      	cmp	r3, #32
 8007890:	d17c      	bne.n	800798c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <HAL_UART_Transmit+0x2c>
 8007898:	88fb      	ldrh	r3, [r7, #6]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e075      	b.n	800798e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d101      	bne.n	80078b0 <HAL_UART_Transmit+0x3e>
 80078ac:	2302      	movs	r3, #2
 80078ae:	e06e      	b.n	800798e <HAL_UART_Transmit+0x11c>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2221      	movs	r2, #33	; 0x21
 80078c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078c6:	f7fc fb33 	bl	8003f30 <HAL_GetTick>
 80078ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	88fa      	ldrh	r2, [r7, #6]
 80078d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	88fa      	ldrh	r2, [r7, #6]
 80078d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e0:	d108      	bne.n	80078f4 <HAL_UART_Transmit+0x82>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d104      	bne.n	80078f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	61bb      	str	r3, [r7, #24]
 80078f2:	e003      	b.n	80078fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078f8:	2300      	movs	r3, #0
 80078fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007904:	e02a      	b.n	800795c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2200      	movs	r2, #0
 800790e:	2180      	movs	r1, #128	; 0x80
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 fb1f 	bl	8007f54 <UART_WaitOnFlagUntilTimeout>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e036      	b.n	800798e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10b      	bne.n	800793e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007934:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	3302      	adds	r3, #2
 800793a:	61bb      	str	r3, [r7, #24]
 800793c:	e007      	b.n	800794e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	781a      	ldrb	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	3301      	adds	r3, #1
 800794c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007952:	b29b      	uxth	r3, r3
 8007954:	3b01      	subs	r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007960:	b29b      	uxth	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1cf      	bne.n	8007906 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2200      	movs	r2, #0
 800796e:	2140      	movs	r1, #64	; 0x40
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 faef 	bl	8007f54 <UART_WaitOnFlagUntilTimeout>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d001      	beq.n	8007980 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e006      	b.n	800798e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2220      	movs	r2, #32
 8007984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	e000      	b.n	800798e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800798c:	2302      	movs	r3, #2
  }
}
 800798e:	4618      	mov	r0, r3
 8007990:	3720      	adds	r7, #32
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	60f8      	str	r0, [r7, #12]
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	4613      	mov	r3, r2
 80079a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b20      	cmp	r3, #32
 80079ae:	d11d      	bne.n	80079ec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <HAL_UART_Receive_IT+0x26>
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d101      	bne.n	80079c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e016      	b.n	80079ee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_UART_Receive_IT+0x38>
 80079ca:	2302      	movs	r3, #2
 80079cc:	e00f      	b.n	80079ee <HAL_UART_Receive_IT+0x58>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80079dc:	88fb      	ldrh	r3, [r7, #6]
 80079de:	461a      	mov	r2, r3
 80079e0:	68b9      	ldr	r1, [r7, #8]
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 fb24 	bl	8008030 <UART_Start_Receive_IT>
 80079e8:	4603      	mov	r3, r0
 80079ea:	e000      	b.n	80079ee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80079ec:	2302      	movs	r3, #2
  }
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b0ba      	sub	sp, #232	; 0xe8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2e:	f003 030f 	and.w	r3, r3, #15
 8007a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10f      	bne.n	8007a5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a42:	f003 0320 	and.w	r3, r3, #32
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d009      	beq.n	8007a5e <HAL_UART_IRQHandler+0x66>
 8007a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fc03 	bl	8008262 <UART_Receive_IT>
      return;
 8007a5c:	e256      	b.n	8007f0c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 80de 	beq.w	8007c24 <HAL_UART_IRQHandler+0x22c>
 8007a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d106      	bne.n	8007a82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 80d1 	beq.w	8007c24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00b      	beq.n	8007aa6 <HAL_UART_IRQHandler+0xae>
 8007a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d005      	beq.n	8007aa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9e:	f043 0201 	orr.w	r2, r3, #1
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aaa:	f003 0304 	and.w	r3, r3, #4
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00b      	beq.n	8007aca <HAL_UART_IRQHandler+0xd2>
 8007ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d005      	beq.n	8007aca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	f043 0202 	orr.w	r2, r3, #2
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00b      	beq.n	8007aee <HAL_UART_IRQHandler+0xf6>
 8007ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d005      	beq.n	8007aee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	f043 0204 	orr.w	r2, r3, #4
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af2:	f003 0308 	and.w	r3, r3, #8
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d011      	beq.n	8007b1e <HAL_UART_IRQHandler+0x126>
 8007afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007afe:	f003 0320 	and.w	r3, r3, #32
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d105      	bne.n	8007b12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d005      	beq.n	8007b1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b16:	f043 0208 	orr.w	r2, r3, #8
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 81ed 	beq.w	8007f02 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d008      	beq.n	8007b46 <HAL_UART_IRQHandler+0x14e>
 8007b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d002      	beq.n	8007b46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fb8e 	bl	8008262 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b50:	2b40      	cmp	r3, #64	; 0x40
 8007b52:	bf0c      	ite	eq
 8007b54:	2301      	moveq	r3, #1
 8007b56:	2300      	movne	r3, #0
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	f003 0308 	and.w	r3, r3, #8
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d103      	bne.n	8007b72 <HAL_UART_IRQHandler+0x17a>
 8007b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d04f      	beq.n	8007c12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa96 	bl	80080a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b82:	2b40      	cmp	r3, #64	; 0x40
 8007b84:	d141      	bne.n	8007c0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3314      	adds	r3, #20
 8007b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3314      	adds	r3, #20
 8007bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1d9      	bne.n	8007b86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d013      	beq.n	8007c02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bde:	4a7d      	ldr	r2, [pc, #500]	; (8007dd4 <HAL_UART_IRQHandler+0x3dc>)
 8007be0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fc fe64 	bl	80048b4 <HAL_DMA_Abort_IT>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d016      	beq.n	8007c20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c00:	e00e      	b.n	8007c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f990 	bl	8007f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c08:	e00a      	b.n	8007c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f98c 	bl	8007f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c10:	e006      	b.n	8007c20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f988 	bl	8007f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c1e:	e170      	b.n	8007f02 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c20:	bf00      	nop
    return;
 8007c22:	e16e      	b.n	8007f02 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	f040 814a 	bne.w	8007ec2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c32:	f003 0310 	and.w	r3, r3, #16
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 8143 	beq.w	8007ec2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 813c 	beq.w	8007ec2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60bb      	str	r3, [r7, #8]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	60bb      	str	r3, [r7, #8]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	60bb      	str	r3, [r7, #8]
 8007c5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6a:	2b40      	cmp	r3, #64	; 0x40
 8007c6c:	f040 80b4 	bne.w	8007dd8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 8140 	beq.w	8007f06 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	f080 8139 	bcs.w	8007f06 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ca6:	f000 8088 	beq.w	8007dba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	330c      	adds	r3, #12
 8007cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007cd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ce2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1d9      	bne.n	8007caa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3314      	adds	r3, #20
 8007cfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d08:	f023 0301 	bic.w	r3, r3, #1
 8007d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3314      	adds	r3, #20
 8007d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e1      	bne.n	8007cf6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3314      	adds	r3, #20
 8007d38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d3c:	e853 3f00 	ldrex	r3, [r3]
 8007d40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3314      	adds	r3, #20
 8007d52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e3      	bne.n	8007d32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	330c      	adds	r3, #12
 8007d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d8a:	f023 0310 	bic.w	r3, r3, #16
 8007d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	330c      	adds	r3, #12
 8007d98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007da2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e3      	bne.n	8007d78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fc fd0d 	bl	80047d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f8b6 	bl	8007f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dd0:	e099      	b.n	8007f06 <HAL_UART_IRQHandler+0x50e>
 8007dd2:	bf00      	nop
 8007dd4:	0800816b 	.word	0x0800816b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 808b 	beq.w	8007f0a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007df4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 8086 	beq.w	8007f0a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	330c      	adds	r3, #12
 8007e04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	330c      	adds	r3, #12
 8007e1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e22:	647a      	str	r2, [r7, #68]	; 0x44
 8007e24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e3      	bne.n	8007dfe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3314      	adds	r3, #20
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e40:	e853 3f00 	ldrex	r3, [r3]
 8007e44:	623b      	str	r3, [r7, #32]
   return(result);
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	f023 0301 	bic.w	r3, r3, #1
 8007e4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3314      	adds	r3, #20
 8007e56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e5a:	633a      	str	r2, [r7, #48]	; 0x30
 8007e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e3      	bne.n	8007e36 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	330c      	adds	r3, #12
 8007e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	e853 3f00 	ldrex	r3, [r3]
 8007e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 0310 	bic.w	r3, r3, #16
 8007e92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	330c      	adds	r3, #12
 8007e9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ea0:	61fa      	str	r2, [r7, #28]
 8007ea2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea4:	69b9      	ldr	r1, [r7, #24]
 8007ea6:	69fa      	ldr	r2, [r7, #28]
 8007ea8:	e841 2300 	strex	r3, r2, [r1]
 8007eac:	617b      	str	r3, [r7, #20]
   return(result);
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1e3      	bne.n	8007e7c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007eb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f83e 	bl	8007f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ec0:	e023      	b.n	8007f0a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d009      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x4ea>
 8007ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f959 	bl	8008192 <UART_Transmit_IT>
    return;
 8007ee0:	e014      	b.n	8007f0c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00e      	beq.n	8007f0c <HAL_UART_IRQHandler+0x514>
 8007eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d008      	beq.n	8007f0c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f999 	bl	8008232 <UART_EndTransmit_IT>
    return;
 8007f00:	e004      	b.n	8007f0c <HAL_UART_IRQHandler+0x514>
    return;
 8007f02:	bf00      	nop
 8007f04:	e002      	b.n	8007f0c <HAL_UART_IRQHandler+0x514>
      return;
 8007f06:	bf00      	nop
 8007f08:	e000      	b.n	8007f0c <HAL_UART_IRQHandler+0x514>
      return;
 8007f0a:	bf00      	nop
  }
}
 8007f0c:	37e8      	adds	r7, #232	; 0xe8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop

08007f14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b090      	sub	sp, #64	; 0x40
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	603b      	str	r3, [r7, #0]
 8007f60:	4613      	mov	r3, r2
 8007f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f64:	e050      	b.n	8008008 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6c:	d04c      	beq.n	8008008 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d007      	beq.n	8007f84 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f74:	f7fb ffdc 	bl	8003f30 <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d241      	bcs.n	8008008 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	330c      	adds	r3, #12
 8007f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	e853 3f00 	ldrex	r3, [r3]
 8007f92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	330c      	adds	r3, #12
 8007fa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fa4:	637a      	str	r2, [r7, #52]	; 0x34
 8007fa6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007faa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e5      	bne.n	8007f84 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3314      	adds	r3, #20
 8007fbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	e853 3f00 	ldrex	r3, [r3]
 8007fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f023 0301 	bic.w	r3, r3, #1
 8007fce:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3314      	adds	r3, #20
 8007fd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fd8:	623a      	str	r2, [r7, #32]
 8007fda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fdc:	69f9      	ldr	r1, [r7, #28]
 8007fde:	6a3a      	ldr	r2, [r7, #32]
 8007fe0:	e841 2300 	strex	r3, r2, [r1]
 8007fe4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1e5      	bne.n	8007fb8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e00f      	b.n	8008028 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	4013      	ands	r3, r2
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	429a      	cmp	r2, r3
 8008016:	bf0c      	ite	eq
 8008018:	2301      	moveq	r3, #1
 800801a:	2300      	movne	r3, #0
 800801c:	b2db      	uxtb	r3, r3
 800801e:	461a      	mov	r2, r3
 8008020:	79fb      	ldrb	r3, [r7, #7]
 8008022:	429a      	cmp	r2, r3
 8008024:	d09f      	beq.n	8007f66 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3740      	adds	r7, #64	; 0x40
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	4613      	mov	r3, r2
 800803c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	88fa      	ldrh	r2, [r7, #6]
 8008048:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	88fa      	ldrh	r2, [r7, #6]
 800804e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2222      	movs	r2, #34	; 0x22
 800805a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68da      	ldr	r2, [r3, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008074:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	695a      	ldr	r2, [r3, #20]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f042 0201 	orr.w	r2, r2, #1
 8008084:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68da      	ldr	r2, [r3, #12]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f042 0220 	orr.w	r2, r2, #32
 8008094:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b095      	sub	sp, #84	; 0x54
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	330c      	adds	r3, #12
 80080b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b6:	e853 3f00 	ldrex	r3, [r3]
 80080ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	330c      	adds	r3, #12
 80080ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080cc:	643a      	str	r2, [r7, #64]	; 0x40
 80080ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080d4:	e841 2300 	strex	r3, r2, [r1]
 80080d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1e5      	bne.n	80080ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3314      	adds	r3, #20
 80080e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	e853 3f00 	ldrex	r3, [r3]
 80080ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	f023 0301 	bic.w	r3, r3, #1
 80080f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3314      	adds	r3, #20
 80080fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008100:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008108:	e841 2300 	strex	r3, r2, [r1]
 800810c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1e5      	bne.n	80080e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008118:	2b01      	cmp	r3, #1
 800811a:	d119      	bne.n	8008150 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	330c      	adds	r3, #12
 8008122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	e853 3f00 	ldrex	r3, [r3]
 800812a:	60bb      	str	r3, [r7, #8]
   return(result);
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f023 0310 	bic.w	r3, r3, #16
 8008132:	647b      	str	r3, [r7, #68]	; 0x44
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	330c      	adds	r3, #12
 800813a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800813c:	61ba      	str	r2, [r7, #24]
 800813e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	6979      	ldr	r1, [r7, #20]
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	e841 2300 	strex	r3, r2, [r1]
 8008148:	613b      	str	r3, [r7, #16]
   return(result);
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e5      	bne.n	800811c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2220      	movs	r2, #32
 8008154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800815e:	bf00      	nop
 8008160:	3754      	adds	r7, #84	; 0x54
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008176:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2200      	movs	r2, #0
 800817c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f7ff fecf 	bl	8007f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800818a:	bf00      	nop
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008192:	b480      	push	{r7}
 8008194:	b085      	sub	sp, #20
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b21      	cmp	r3, #33	; 0x21
 80081a4:	d13e      	bne.n	8008224 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ae:	d114      	bne.n	80081da <UART_Transmit_IT+0x48>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d110      	bne.n	80081da <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a1b      	ldr	r3, [r3, #32]
 80081bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	1c9a      	adds	r2, r3, #2
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	621a      	str	r2, [r3, #32]
 80081d8:	e008      	b.n	80081ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	1c59      	adds	r1, r3, #1
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	6211      	str	r1, [r2, #32]
 80081e4:	781a      	ldrb	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	4619      	mov	r1, r3
 80081fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10f      	bne.n	8008220 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800820e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800821e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008220:	2300      	movs	r3, #0
 8008222:	e000      	b.n	8008226 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008224:	2302      	movs	r3, #2
  }
}
 8008226:	4618      	mov	r0, r3
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68da      	ldr	r2, [r3, #12]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008248:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2220      	movs	r2, #32
 800824e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f7ff fe5e 	bl	8007f14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3708      	adds	r7, #8
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b08c      	sub	sp, #48	; 0x30
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008270:	b2db      	uxtb	r3, r3
 8008272:	2b22      	cmp	r3, #34	; 0x22
 8008274:	f040 80ab 	bne.w	80083ce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008280:	d117      	bne.n	80082b2 <UART_Receive_IT+0x50>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d113      	bne.n	80082b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800828a:	2300      	movs	r3, #0
 800828c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008292:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	b29b      	uxth	r3, r3
 800829c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082aa:	1c9a      	adds	r2, r3, #2
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	629a      	str	r2, [r3, #40]	; 0x28
 80082b0:	e026      	b.n	8008300 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80082b8:	2300      	movs	r3, #0
 80082ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c4:	d007      	beq.n	80082d6 <UART_Receive_IT+0x74>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <UART_Receive_IT+0x82>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d106      	bne.n	80082e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	e008      	b.n	80082f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008304:	b29b      	uxth	r3, r3
 8008306:	3b01      	subs	r3, #1
 8008308:	b29b      	uxth	r3, r3
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	4619      	mov	r1, r3
 800830e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008310:	2b00      	cmp	r3, #0
 8008312:	d15a      	bne.n	80083ca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0220 	bic.w	r2, r2, #32
 8008322:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68da      	ldr	r2, [r3, #12]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008332:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	695a      	ldr	r2, [r3, #20]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 0201 	bic.w	r2, r2, #1
 8008342:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2220      	movs	r2, #32
 8008348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008350:	2b01      	cmp	r3, #1
 8008352:	d135      	bne.n	80083c0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	330c      	adds	r3, #12
 8008360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	e853 3f00 	ldrex	r3, [r3]
 8008368:	613b      	str	r3, [r7, #16]
   return(result);
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f023 0310 	bic.w	r3, r3, #16
 8008370:	627b      	str	r3, [r7, #36]	; 0x24
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	330c      	adds	r3, #12
 8008378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800837a:	623a      	str	r2, [r7, #32]
 800837c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	69f9      	ldr	r1, [r7, #28]
 8008380:	6a3a      	ldr	r2, [r7, #32]
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	61bb      	str	r3, [r7, #24]
   return(result);
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e5      	bne.n	800835a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0310 	and.w	r3, r3, #16
 8008398:	2b10      	cmp	r3, #16
 800839a:	d10a      	bne.n	80083b2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800839c:	2300      	movs	r3, #0
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff fdbf 	bl	8007f3c <HAL_UARTEx_RxEventCallback>
 80083be:	e002      	b.n	80083c6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7fb fbfb 	bl	8003bbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	e002      	b.n	80083d0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	e000      	b.n	80083d0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80083ce:	2302      	movs	r3, #2
  }
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3730      	adds	r7, #48	; 0x30
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083dc:	b0c0      	sub	sp, #256	; 0x100
 80083de:	af00      	add	r7, sp, #0
 80083e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80083f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083f4:	68d9      	ldr	r1, [r3, #12]
 80083f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	ea40 0301 	orr.w	r3, r0, r1
 8008400:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008406:	689a      	ldr	r2, [r3, #8]
 8008408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	431a      	orrs	r2, r3
 8008410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	431a      	orrs	r2, r3
 8008418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	4313      	orrs	r3, r2
 8008420:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008430:	f021 010c 	bic.w	r1, r1, #12
 8008434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800843e:	430b      	orrs	r3, r1
 8008440:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800844e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008452:	6999      	ldr	r1, [r3, #24]
 8008454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	ea40 0301 	orr.w	r3, r0, r1
 800845e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	4b8f      	ldr	r3, [pc, #572]	; (80086a4 <UART_SetConfig+0x2cc>)
 8008468:	429a      	cmp	r2, r3
 800846a:	d005      	beq.n	8008478 <UART_SetConfig+0xa0>
 800846c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	4b8d      	ldr	r3, [pc, #564]	; (80086a8 <UART_SetConfig+0x2d0>)
 8008474:	429a      	cmp	r2, r3
 8008476:	d104      	bne.n	8008482 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008478:	f7fd fbf8 	bl	8005c6c <HAL_RCC_GetPCLK2Freq>
 800847c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008480:	e003      	b.n	800848a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008482:	f7fd fbdf 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 8008486:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800848a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008494:	f040 810c 	bne.w	80086b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800849c:	2200      	movs	r2, #0
 800849e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80084a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80084aa:	4622      	mov	r2, r4
 80084ac:	462b      	mov	r3, r5
 80084ae:	1891      	adds	r1, r2, r2
 80084b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80084b2:	415b      	adcs	r3, r3
 80084b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80084ba:	4621      	mov	r1, r4
 80084bc:	eb12 0801 	adds.w	r8, r2, r1
 80084c0:	4629      	mov	r1, r5
 80084c2:	eb43 0901 	adc.w	r9, r3, r1
 80084c6:	f04f 0200 	mov.w	r2, #0
 80084ca:	f04f 0300 	mov.w	r3, #0
 80084ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084da:	4690      	mov	r8, r2
 80084dc:	4699      	mov	r9, r3
 80084de:	4623      	mov	r3, r4
 80084e0:	eb18 0303 	adds.w	r3, r8, r3
 80084e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084e8:	462b      	mov	r3, r5
 80084ea:	eb49 0303 	adc.w	r3, r9, r3
 80084ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80084fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008502:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008506:	460b      	mov	r3, r1
 8008508:	18db      	adds	r3, r3, r3
 800850a:	653b      	str	r3, [r7, #80]	; 0x50
 800850c:	4613      	mov	r3, r2
 800850e:	eb42 0303 	adc.w	r3, r2, r3
 8008512:	657b      	str	r3, [r7, #84]	; 0x54
 8008514:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008518:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800851c:	f7f7 fea8 	bl	8000270 <__aeabi_uldivmod>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4b61      	ldr	r3, [pc, #388]	; (80086ac <UART_SetConfig+0x2d4>)
 8008526:	fba3 2302 	umull	r2, r3, r3, r2
 800852a:	095b      	lsrs	r3, r3, #5
 800852c:	011c      	lsls	r4, r3, #4
 800852e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008532:	2200      	movs	r2, #0
 8008534:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008538:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800853c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008540:	4642      	mov	r2, r8
 8008542:	464b      	mov	r3, r9
 8008544:	1891      	adds	r1, r2, r2
 8008546:	64b9      	str	r1, [r7, #72]	; 0x48
 8008548:	415b      	adcs	r3, r3
 800854a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800854c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008550:	4641      	mov	r1, r8
 8008552:	eb12 0a01 	adds.w	sl, r2, r1
 8008556:	4649      	mov	r1, r9
 8008558:	eb43 0b01 	adc.w	fp, r3, r1
 800855c:	f04f 0200 	mov.w	r2, #0
 8008560:	f04f 0300 	mov.w	r3, #0
 8008564:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008568:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800856c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008570:	4692      	mov	sl, r2
 8008572:	469b      	mov	fp, r3
 8008574:	4643      	mov	r3, r8
 8008576:	eb1a 0303 	adds.w	r3, sl, r3
 800857a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800857e:	464b      	mov	r3, r9
 8008580:	eb4b 0303 	adc.w	r3, fp, r3
 8008584:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008594:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008598:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800859c:	460b      	mov	r3, r1
 800859e:	18db      	adds	r3, r3, r3
 80085a0:	643b      	str	r3, [r7, #64]	; 0x40
 80085a2:	4613      	mov	r3, r2
 80085a4:	eb42 0303 	adc.w	r3, r2, r3
 80085a8:	647b      	str	r3, [r7, #68]	; 0x44
 80085aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80085ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80085b2:	f7f7 fe5d 	bl	8000270 <__aeabi_uldivmod>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4611      	mov	r1, r2
 80085bc:	4b3b      	ldr	r3, [pc, #236]	; (80086ac <UART_SetConfig+0x2d4>)
 80085be:	fba3 2301 	umull	r2, r3, r3, r1
 80085c2:	095b      	lsrs	r3, r3, #5
 80085c4:	2264      	movs	r2, #100	; 0x64
 80085c6:	fb02 f303 	mul.w	r3, r2, r3
 80085ca:	1acb      	subs	r3, r1, r3
 80085cc:	00db      	lsls	r3, r3, #3
 80085ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80085d2:	4b36      	ldr	r3, [pc, #216]	; (80086ac <UART_SetConfig+0x2d4>)
 80085d4:	fba3 2302 	umull	r2, r3, r3, r2
 80085d8:	095b      	lsrs	r3, r3, #5
 80085da:	005b      	lsls	r3, r3, #1
 80085dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085e0:	441c      	add	r4, r3
 80085e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80085f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80085f4:	4642      	mov	r2, r8
 80085f6:	464b      	mov	r3, r9
 80085f8:	1891      	adds	r1, r2, r2
 80085fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80085fc:	415b      	adcs	r3, r3
 80085fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008604:	4641      	mov	r1, r8
 8008606:	1851      	adds	r1, r2, r1
 8008608:	6339      	str	r1, [r7, #48]	; 0x30
 800860a:	4649      	mov	r1, r9
 800860c:	414b      	adcs	r3, r1
 800860e:	637b      	str	r3, [r7, #52]	; 0x34
 8008610:	f04f 0200 	mov.w	r2, #0
 8008614:	f04f 0300 	mov.w	r3, #0
 8008618:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800861c:	4659      	mov	r1, fp
 800861e:	00cb      	lsls	r3, r1, #3
 8008620:	4651      	mov	r1, sl
 8008622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008626:	4651      	mov	r1, sl
 8008628:	00ca      	lsls	r2, r1, #3
 800862a:	4610      	mov	r0, r2
 800862c:	4619      	mov	r1, r3
 800862e:	4603      	mov	r3, r0
 8008630:	4642      	mov	r2, r8
 8008632:	189b      	adds	r3, r3, r2
 8008634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008638:	464b      	mov	r3, r9
 800863a:	460a      	mov	r2, r1
 800863c:	eb42 0303 	adc.w	r3, r2, r3
 8008640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008650:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008654:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008658:	460b      	mov	r3, r1
 800865a:	18db      	adds	r3, r3, r3
 800865c:	62bb      	str	r3, [r7, #40]	; 0x28
 800865e:	4613      	mov	r3, r2
 8008660:	eb42 0303 	adc.w	r3, r2, r3
 8008664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800866a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800866e:	f7f7 fdff 	bl	8000270 <__aeabi_uldivmod>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4b0d      	ldr	r3, [pc, #52]	; (80086ac <UART_SetConfig+0x2d4>)
 8008678:	fba3 1302 	umull	r1, r3, r3, r2
 800867c:	095b      	lsrs	r3, r3, #5
 800867e:	2164      	movs	r1, #100	; 0x64
 8008680:	fb01 f303 	mul.w	r3, r1, r3
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	00db      	lsls	r3, r3, #3
 8008688:	3332      	adds	r3, #50	; 0x32
 800868a:	4a08      	ldr	r2, [pc, #32]	; (80086ac <UART_SetConfig+0x2d4>)
 800868c:	fba2 2303 	umull	r2, r3, r2, r3
 8008690:	095b      	lsrs	r3, r3, #5
 8008692:	f003 0207 	and.w	r2, r3, #7
 8008696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4422      	add	r2, r4
 800869e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80086a0:	e106      	b.n	80088b0 <UART_SetConfig+0x4d8>
 80086a2:	bf00      	nop
 80086a4:	40011000 	.word	0x40011000
 80086a8:	40011400 	.word	0x40011400
 80086ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086b4:	2200      	movs	r2, #0
 80086b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80086ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80086be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80086c2:	4642      	mov	r2, r8
 80086c4:	464b      	mov	r3, r9
 80086c6:	1891      	adds	r1, r2, r2
 80086c8:	6239      	str	r1, [r7, #32]
 80086ca:	415b      	adcs	r3, r3
 80086cc:	627b      	str	r3, [r7, #36]	; 0x24
 80086ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086d2:	4641      	mov	r1, r8
 80086d4:	1854      	adds	r4, r2, r1
 80086d6:	4649      	mov	r1, r9
 80086d8:	eb43 0501 	adc.w	r5, r3, r1
 80086dc:	f04f 0200 	mov.w	r2, #0
 80086e0:	f04f 0300 	mov.w	r3, #0
 80086e4:	00eb      	lsls	r3, r5, #3
 80086e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80086ea:	00e2      	lsls	r2, r4, #3
 80086ec:	4614      	mov	r4, r2
 80086ee:	461d      	mov	r5, r3
 80086f0:	4643      	mov	r3, r8
 80086f2:	18e3      	adds	r3, r4, r3
 80086f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80086f8:	464b      	mov	r3, r9
 80086fa:	eb45 0303 	adc.w	r3, r5, r3
 80086fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800870e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008712:	f04f 0200 	mov.w	r2, #0
 8008716:	f04f 0300 	mov.w	r3, #0
 800871a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800871e:	4629      	mov	r1, r5
 8008720:	008b      	lsls	r3, r1, #2
 8008722:	4621      	mov	r1, r4
 8008724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008728:	4621      	mov	r1, r4
 800872a:	008a      	lsls	r2, r1, #2
 800872c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008730:	f7f7 fd9e 	bl	8000270 <__aeabi_uldivmod>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4b60      	ldr	r3, [pc, #384]	; (80088bc <UART_SetConfig+0x4e4>)
 800873a:	fba3 2302 	umull	r2, r3, r3, r2
 800873e:	095b      	lsrs	r3, r3, #5
 8008740:	011c      	lsls	r4, r3, #4
 8008742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008746:	2200      	movs	r2, #0
 8008748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800874c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008750:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008754:	4642      	mov	r2, r8
 8008756:	464b      	mov	r3, r9
 8008758:	1891      	adds	r1, r2, r2
 800875a:	61b9      	str	r1, [r7, #24]
 800875c:	415b      	adcs	r3, r3
 800875e:	61fb      	str	r3, [r7, #28]
 8008760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008764:	4641      	mov	r1, r8
 8008766:	1851      	adds	r1, r2, r1
 8008768:	6139      	str	r1, [r7, #16]
 800876a:	4649      	mov	r1, r9
 800876c:	414b      	adcs	r3, r1
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	f04f 0300 	mov.w	r3, #0
 8008778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800877c:	4659      	mov	r1, fp
 800877e:	00cb      	lsls	r3, r1, #3
 8008780:	4651      	mov	r1, sl
 8008782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008786:	4651      	mov	r1, sl
 8008788:	00ca      	lsls	r2, r1, #3
 800878a:	4610      	mov	r0, r2
 800878c:	4619      	mov	r1, r3
 800878e:	4603      	mov	r3, r0
 8008790:	4642      	mov	r2, r8
 8008792:	189b      	adds	r3, r3, r2
 8008794:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008798:	464b      	mov	r3, r9
 800879a:	460a      	mov	r2, r1
 800879c:	eb42 0303 	adc.w	r3, r2, r3
 80087a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80087a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80087ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80087b0:	f04f 0200 	mov.w	r2, #0
 80087b4:	f04f 0300 	mov.w	r3, #0
 80087b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80087bc:	4649      	mov	r1, r9
 80087be:	008b      	lsls	r3, r1, #2
 80087c0:	4641      	mov	r1, r8
 80087c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087c6:	4641      	mov	r1, r8
 80087c8:	008a      	lsls	r2, r1, #2
 80087ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80087ce:	f7f7 fd4f 	bl	8000270 <__aeabi_uldivmod>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4611      	mov	r1, r2
 80087d8:	4b38      	ldr	r3, [pc, #224]	; (80088bc <UART_SetConfig+0x4e4>)
 80087da:	fba3 2301 	umull	r2, r3, r3, r1
 80087de:	095b      	lsrs	r3, r3, #5
 80087e0:	2264      	movs	r2, #100	; 0x64
 80087e2:	fb02 f303 	mul.w	r3, r2, r3
 80087e6:	1acb      	subs	r3, r1, r3
 80087e8:	011b      	lsls	r3, r3, #4
 80087ea:	3332      	adds	r3, #50	; 0x32
 80087ec:	4a33      	ldr	r2, [pc, #204]	; (80088bc <UART_SetConfig+0x4e4>)
 80087ee:	fba2 2303 	umull	r2, r3, r2, r3
 80087f2:	095b      	lsrs	r3, r3, #5
 80087f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80087f8:	441c      	add	r4, r3
 80087fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087fe:	2200      	movs	r2, #0
 8008800:	673b      	str	r3, [r7, #112]	; 0x70
 8008802:	677a      	str	r2, [r7, #116]	; 0x74
 8008804:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008808:	4642      	mov	r2, r8
 800880a:	464b      	mov	r3, r9
 800880c:	1891      	adds	r1, r2, r2
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	415b      	adcs	r3, r3
 8008812:	60fb      	str	r3, [r7, #12]
 8008814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008818:	4641      	mov	r1, r8
 800881a:	1851      	adds	r1, r2, r1
 800881c:	6039      	str	r1, [r7, #0]
 800881e:	4649      	mov	r1, r9
 8008820:	414b      	adcs	r3, r1
 8008822:	607b      	str	r3, [r7, #4]
 8008824:	f04f 0200 	mov.w	r2, #0
 8008828:	f04f 0300 	mov.w	r3, #0
 800882c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008830:	4659      	mov	r1, fp
 8008832:	00cb      	lsls	r3, r1, #3
 8008834:	4651      	mov	r1, sl
 8008836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800883a:	4651      	mov	r1, sl
 800883c:	00ca      	lsls	r2, r1, #3
 800883e:	4610      	mov	r0, r2
 8008840:	4619      	mov	r1, r3
 8008842:	4603      	mov	r3, r0
 8008844:	4642      	mov	r2, r8
 8008846:	189b      	adds	r3, r3, r2
 8008848:	66bb      	str	r3, [r7, #104]	; 0x68
 800884a:	464b      	mov	r3, r9
 800884c:	460a      	mov	r2, r1
 800884e:	eb42 0303 	adc.w	r3, r2, r3
 8008852:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	663b      	str	r3, [r7, #96]	; 0x60
 800885e:	667a      	str	r2, [r7, #100]	; 0x64
 8008860:	f04f 0200 	mov.w	r2, #0
 8008864:	f04f 0300 	mov.w	r3, #0
 8008868:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800886c:	4649      	mov	r1, r9
 800886e:	008b      	lsls	r3, r1, #2
 8008870:	4641      	mov	r1, r8
 8008872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008876:	4641      	mov	r1, r8
 8008878:	008a      	lsls	r2, r1, #2
 800887a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800887e:	f7f7 fcf7 	bl	8000270 <__aeabi_uldivmod>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4b0d      	ldr	r3, [pc, #52]	; (80088bc <UART_SetConfig+0x4e4>)
 8008888:	fba3 1302 	umull	r1, r3, r3, r2
 800888c:	095b      	lsrs	r3, r3, #5
 800888e:	2164      	movs	r1, #100	; 0x64
 8008890:	fb01 f303 	mul.w	r3, r1, r3
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	011b      	lsls	r3, r3, #4
 8008898:	3332      	adds	r3, #50	; 0x32
 800889a:	4a08      	ldr	r2, [pc, #32]	; (80088bc <UART_SetConfig+0x4e4>)
 800889c:	fba2 2303 	umull	r2, r3, r2, r3
 80088a0:	095b      	lsrs	r3, r3, #5
 80088a2:	f003 020f 	and.w	r2, r3, #15
 80088a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4422      	add	r2, r4
 80088ae:	609a      	str	r2, [r3, #8]
}
 80088b0:	bf00      	nop
 80088b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80088b6:	46bd      	mov	sp, r7
 80088b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088bc:	51eb851f 	.word	0x51eb851f

080088c0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	4b20      	ldr	r3, [pc, #128]	; (8008960 <FSMC_NORSRAM_Init+0xa0>)
 80088de:	4013      	ands	r3, r2
 80088e0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80088ea:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80088f0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80088f6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80088fc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8008902:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8008908:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800890e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008914:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800891a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008920:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8008926:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800892c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	4313      	orrs	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	2b08      	cmp	r3, #8
 800893a:	d103      	bne.n	8008944 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008942:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68f9      	ldr	r1, [r7, #12]
 800894c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	fff00080 	.word	0xfff00080

08008964 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008964:	b480      	push	{r7}
 8008966:	b087      	sub	sp, #28
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008986:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008992:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800899a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80089a2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80089ac:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	3b02      	subs	r3, #2
 80089b4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80089b6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80089bc:	4313      	orrs	r3, r2
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	1c5a      	adds	r2, r3, #1
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6979      	ldr	r1, [r7, #20]
 80089cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
	...

080089e0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
 80089ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089f8:	d122      	bne.n	8008a40 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a02:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	4b15      	ldr	r3, [pc, #84]	; (8008a5c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008a08:	4013      	ands	r3, r2
 8008a0a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008a16:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008a1e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008a26:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008a2c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6979      	ldr	r1, [r7, #20]
 8008a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008a3e:	e005      	b.n	8008a4c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	371c      	adds	r7, #28
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	cff00000 	.word	0xcff00000

08008a60 <rand>:
 8008a60:	4b16      	ldr	r3, [pc, #88]	; (8008abc <rand+0x5c>)
 8008a62:	b510      	push	{r4, lr}
 8008a64:	681c      	ldr	r4, [r3, #0]
 8008a66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008a68:	b9b3      	cbnz	r3, 8008a98 <rand+0x38>
 8008a6a:	2018      	movs	r0, #24
 8008a6c:	f000 fa22 	bl	8008eb4 <malloc>
 8008a70:	4602      	mov	r2, r0
 8008a72:	6320      	str	r0, [r4, #48]	; 0x30
 8008a74:	b920      	cbnz	r0, 8008a80 <rand+0x20>
 8008a76:	4b12      	ldr	r3, [pc, #72]	; (8008ac0 <rand+0x60>)
 8008a78:	4812      	ldr	r0, [pc, #72]	; (8008ac4 <rand+0x64>)
 8008a7a:	2152      	movs	r1, #82	; 0x52
 8008a7c:	f000 f9b0 	bl	8008de0 <__assert_func>
 8008a80:	4911      	ldr	r1, [pc, #68]	; (8008ac8 <rand+0x68>)
 8008a82:	4b12      	ldr	r3, [pc, #72]	; (8008acc <rand+0x6c>)
 8008a84:	e9c0 1300 	strd	r1, r3, [r0]
 8008a88:	4b11      	ldr	r3, [pc, #68]	; (8008ad0 <rand+0x70>)
 8008a8a:	6083      	str	r3, [r0, #8]
 8008a8c:	230b      	movs	r3, #11
 8008a8e:	8183      	strh	r3, [r0, #12]
 8008a90:	2100      	movs	r1, #0
 8008a92:	2001      	movs	r0, #1
 8008a94:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008a98:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008a9a:	480e      	ldr	r0, [pc, #56]	; (8008ad4 <rand+0x74>)
 8008a9c:	690b      	ldr	r3, [r1, #16]
 8008a9e:	694c      	ldr	r4, [r1, #20]
 8008aa0:	4a0d      	ldr	r2, [pc, #52]	; (8008ad8 <rand+0x78>)
 8008aa2:	4358      	muls	r0, r3
 8008aa4:	fb02 0004 	mla	r0, r2, r4, r0
 8008aa8:	fba3 3202 	umull	r3, r2, r3, r2
 8008aac:	3301      	adds	r3, #1
 8008aae:	eb40 0002 	adc.w	r0, r0, r2
 8008ab2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008ab6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008aba:	bd10      	pop	{r4, pc}
 8008abc:	2000011c 	.word	0x2000011c
 8008ac0:	0800ca2c 	.word	0x0800ca2c
 8008ac4:	0800ca43 	.word	0x0800ca43
 8008ac8:	abcd330e 	.word	0xabcd330e
 8008acc:	e66d1234 	.word	0xe66d1234
 8008ad0:	0005deec 	.word	0x0005deec
 8008ad4:	5851f42d 	.word	0x5851f42d
 8008ad8:	4c957f2d 	.word	0x4c957f2d

08008adc <std>:
 8008adc:	2300      	movs	r3, #0
 8008ade:	b510      	push	{r4, lr}
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aea:	6083      	str	r3, [r0, #8]
 8008aec:	8181      	strh	r1, [r0, #12]
 8008aee:	6643      	str	r3, [r0, #100]	; 0x64
 8008af0:	81c2      	strh	r2, [r0, #14]
 8008af2:	6183      	str	r3, [r0, #24]
 8008af4:	4619      	mov	r1, r3
 8008af6:	2208      	movs	r2, #8
 8008af8:	305c      	adds	r0, #92	; 0x5c
 8008afa:	f000 f8f4 	bl	8008ce6 <memset>
 8008afe:	4b0d      	ldr	r3, [pc, #52]	; (8008b34 <std+0x58>)
 8008b00:	6263      	str	r3, [r4, #36]	; 0x24
 8008b02:	4b0d      	ldr	r3, [pc, #52]	; (8008b38 <std+0x5c>)
 8008b04:	62a3      	str	r3, [r4, #40]	; 0x28
 8008b06:	4b0d      	ldr	r3, [pc, #52]	; (8008b3c <std+0x60>)
 8008b08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008b0a:	4b0d      	ldr	r3, [pc, #52]	; (8008b40 <std+0x64>)
 8008b0c:	6323      	str	r3, [r4, #48]	; 0x30
 8008b0e:	4b0d      	ldr	r3, [pc, #52]	; (8008b44 <std+0x68>)
 8008b10:	6224      	str	r4, [r4, #32]
 8008b12:	429c      	cmp	r4, r3
 8008b14:	d006      	beq.n	8008b24 <std+0x48>
 8008b16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008b1a:	4294      	cmp	r4, r2
 8008b1c:	d002      	beq.n	8008b24 <std+0x48>
 8008b1e:	33d0      	adds	r3, #208	; 0xd0
 8008b20:	429c      	cmp	r4, r3
 8008b22:	d105      	bne.n	8008b30 <std+0x54>
 8008b24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b2c:	f000 b954 	b.w	8008dd8 <__retarget_lock_init_recursive>
 8008b30:	bd10      	pop	{r4, pc}
 8008b32:	bf00      	nop
 8008b34:	08008c61 	.word	0x08008c61
 8008b38:	08008c83 	.word	0x08008c83
 8008b3c:	08008cbb 	.word	0x08008cbb
 8008b40:	08008cdf 	.word	0x08008cdf
 8008b44:	20000764 	.word	0x20000764

08008b48 <stdio_exit_handler>:
 8008b48:	4a02      	ldr	r2, [pc, #8]	; (8008b54 <stdio_exit_handler+0xc>)
 8008b4a:	4903      	ldr	r1, [pc, #12]	; (8008b58 <stdio_exit_handler+0x10>)
 8008b4c:	4803      	ldr	r0, [pc, #12]	; (8008b5c <stdio_exit_handler+0x14>)
 8008b4e:	f000 b869 	b.w	8008c24 <_fwalk_sglue>
 8008b52:	bf00      	nop
 8008b54:	200000c4 	.word	0x200000c4
 8008b58:	08009449 	.word	0x08009449
 8008b5c:	200000d0 	.word	0x200000d0

08008b60 <cleanup_stdio>:
 8008b60:	6841      	ldr	r1, [r0, #4]
 8008b62:	4b0c      	ldr	r3, [pc, #48]	; (8008b94 <cleanup_stdio+0x34>)
 8008b64:	4299      	cmp	r1, r3
 8008b66:	b510      	push	{r4, lr}
 8008b68:	4604      	mov	r4, r0
 8008b6a:	d001      	beq.n	8008b70 <cleanup_stdio+0x10>
 8008b6c:	f000 fc6c 	bl	8009448 <_fflush_r>
 8008b70:	68a1      	ldr	r1, [r4, #8]
 8008b72:	4b09      	ldr	r3, [pc, #36]	; (8008b98 <cleanup_stdio+0x38>)
 8008b74:	4299      	cmp	r1, r3
 8008b76:	d002      	beq.n	8008b7e <cleanup_stdio+0x1e>
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f000 fc65 	bl	8009448 <_fflush_r>
 8008b7e:	68e1      	ldr	r1, [r4, #12]
 8008b80:	4b06      	ldr	r3, [pc, #24]	; (8008b9c <cleanup_stdio+0x3c>)
 8008b82:	4299      	cmp	r1, r3
 8008b84:	d004      	beq.n	8008b90 <cleanup_stdio+0x30>
 8008b86:	4620      	mov	r0, r4
 8008b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b8c:	f000 bc5c 	b.w	8009448 <_fflush_r>
 8008b90:	bd10      	pop	{r4, pc}
 8008b92:	bf00      	nop
 8008b94:	20000764 	.word	0x20000764
 8008b98:	200007cc 	.word	0x200007cc
 8008b9c:	20000834 	.word	0x20000834

08008ba0 <global_stdio_init.part.0>:
 8008ba0:	b510      	push	{r4, lr}
 8008ba2:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <global_stdio_init.part.0+0x30>)
 8008ba4:	4c0b      	ldr	r4, [pc, #44]	; (8008bd4 <global_stdio_init.part.0+0x34>)
 8008ba6:	4a0c      	ldr	r2, [pc, #48]	; (8008bd8 <global_stdio_init.part.0+0x38>)
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	4620      	mov	r0, r4
 8008bac:	2200      	movs	r2, #0
 8008bae:	2104      	movs	r1, #4
 8008bb0:	f7ff ff94 	bl	8008adc <std>
 8008bb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008bb8:	2201      	movs	r2, #1
 8008bba:	2109      	movs	r1, #9
 8008bbc:	f7ff ff8e 	bl	8008adc <std>
 8008bc0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bca:	2112      	movs	r1, #18
 8008bcc:	f7ff bf86 	b.w	8008adc <std>
 8008bd0:	2000089c 	.word	0x2000089c
 8008bd4:	20000764 	.word	0x20000764
 8008bd8:	08008b49 	.word	0x08008b49

08008bdc <__sfp_lock_acquire>:
 8008bdc:	4801      	ldr	r0, [pc, #4]	; (8008be4 <__sfp_lock_acquire+0x8>)
 8008bde:	f000 b8fc 	b.w	8008dda <__retarget_lock_acquire_recursive>
 8008be2:	bf00      	nop
 8008be4:	200008a5 	.word	0x200008a5

08008be8 <__sfp_lock_release>:
 8008be8:	4801      	ldr	r0, [pc, #4]	; (8008bf0 <__sfp_lock_release+0x8>)
 8008bea:	f000 b8f7 	b.w	8008ddc <__retarget_lock_release_recursive>
 8008bee:	bf00      	nop
 8008bf0:	200008a5 	.word	0x200008a5

08008bf4 <__sinit>:
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	f7ff fff0 	bl	8008bdc <__sfp_lock_acquire>
 8008bfc:	6a23      	ldr	r3, [r4, #32]
 8008bfe:	b11b      	cbz	r3, 8008c08 <__sinit+0x14>
 8008c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c04:	f7ff bff0 	b.w	8008be8 <__sfp_lock_release>
 8008c08:	4b04      	ldr	r3, [pc, #16]	; (8008c1c <__sinit+0x28>)
 8008c0a:	6223      	str	r3, [r4, #32]
 8008c0c:	4b04      	ldr	r3, [pc, #16]	; (8008c20 <__sinit+0x2c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1f5      	bne.n	8008c00 <__sinit+0xc>
 8008c14:	f7ff ffc4 	bl	8008ba0 <global_stdio_init.part.0>
 8008c18:	e7f2      	b.n	8008c00 <__sinit+0xc>
 8008c1a:	bf00      	nop
 8008c1c:	08008b61 	.word	0x08008b61
 8008c20:	2000089c 	.word	0x2000089c

08008c24 <_fwalk_sglue>:
 8008c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c28:	4607      	mov	r7, r0
 8008c2a:	4688      	mov	r8, r1
 8008c2c:	4614      	mov	r4, r2
 8008c2e:	2600      	movs	r6, #0
 8008c30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c34:	f1b9 0901 	subs.w	r9, r9, #1
 8008c38:	d505      	bpl.n	8008c46 <_fwalk_sglue+0x22>
 8008c3a:	6824      	ldr	r4, [r4, #0]
 8008c3c:	2c00      	cmp	r4, #0
 8008c3e:	d1f7      	bne.n	8008c30 <_fwalk_sglue+0xc>
 8008c40:	4630      	mov	r0, r6
 8008c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c46:	89ab      	ldrh	r3, [r5, #12]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d907      	bls.n	8008c5c <_fwalk_sglue+0x38>
 8008c4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c50:	3301      	adds	r3, #1
 8008c52:	d003      	beq.n	8008c5c <_fwalk_sglue+0x38>
 8008c54:	4629      	mov	r1, r5
 8008c56:	4638      	mov	r0, r7
 8008c58:	47c0      	blx	r8
 8008c5a:	4306      	orrs	r6, r0
 8008c5c:	3568      	adds	r5, #104	; 0x68
 8008c5e:	e7e9      	b.n	8008c34 <_fwalk_sglue+0x10>

08008c60 <__sread>:
 8008c60:	b510      	push	{r4, lr}
 8008c62:	460c      	mov	r4, r1
 8008c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c68:	f000 f868 	bl	8008d3c <_read_r>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	bfab      	itete	ge
 8008c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c72:	89a3      	ldrhlt	r3, [r4, #12]
 8008c74:	181b      	addge	r3, r3, r0
 8008c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c7a:	bfac      	ite	ge
 8008c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c7e:	81a3      	strhlt	r3, [r4, #12]
 8008c80:	bd10      	pop	{r4, pc}

08008c82 <__swrite>:
 8008c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c86:	461f      	mov	r7, r3
 8008c88:	898b      	ldrh	r3, [r1, #12]
 8008c8a:	05db      	lsls	r3, r3, #23
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	460c      	mov	r4, r1
 8008c90:	4616      	mov	r6, r2
 8008c92:	d505      	bpl.n	8008ca0 <__swrite+0x1e>
 8008c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c98:	2302      	movs	r3, #2
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f000 f83c 	bl	8008d18 <_lseek_r>
 8008ca0:	89a3      	ldrh	r3, [r4, #12]
 8008ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008caa:	81a3      	strh	r3, [r4, #12]
 8008cac:	4632      	mov	r2, r6
 8008cae:	463b      	mov	r3, r7
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb6:	f000 b853 	b.w	8008d60 <_write_r>

08008cba <__sseek>:
 8008cba:	b510      	push	{r4, lr}
 8008cbc:	460c      	mov	r4, r1
 8008cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc2:	f000 f829 	bl	8008d18 <_lseek_r>
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	89a3      	ldrh	r3, [r4, #12]
 8008cca:	bf15      	itete	ne
 8008ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cd6:	81a3      	strheq	r3, [r4, #12]
 8008cd8:	bf18      	it	ne
 8008cda:	81a3      	strhne	r3, [r4, #12]
 8008cdc:	bd10      	pop	{r4, pc}

08008cde <__sclose>:
 8008cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce2:	f000 b809 	b.w	8008cf8 <_close_r>

08008ce6 <memset>:
 8008ce6:	4402      	add	r2, r0
 8008ce8:	4603      	mov	r3, r0
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d100      	bne.n	8008cf0 <memset+0xa>
 8008cee:	4770      	bx	lr
 8008cf0:	f803 1b01 	strb.w	r1, [r3], #1
 8008cf4:	e7f9      	b.n	8008cea <memset+0x4>
	...

08008cf8 <_close_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	4d06      	ldr	r5, [pc, #24]	; (8008d14 <_close_r+0x1c>)
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4604      	mov	r4, r0
 8008d00:	4608      	mov	r0, r1
 8008d02:	602b      	str	r3, [r5, #0]
 8008d04:	f7fa fd67 	bl	80037d6 <_close>
 8008d08:	1c43      	adds	r3, r0, #1
 8008d0a:	d102      	bne.n	8008d12 <_close_r+0x1a>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	b103      	cbz	r3, 8008d12 <_close_r+0x1a>
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	bd38      	pop	{r3, r4, r5, pc}
 8008d14:	200008a0 	.word	0x200008a0

08008d18 <_lseek_r>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	4d07      	ldr	r5, [pc, #28]	; (8008d38 <_lseek_r+0x20>)
 8008d1c:	4604      	mov	r4, r0
 8008d1e:	4608      	mov	r0, r1
 8008d20:	4611      	mov	r1, r2
 8008d22:	2200      	movs	r2, #0
 8008d24:	602a      	str	r2, [r5, #0]
 8008d26:	461a      	mov	r2, r3
 8008d28:	f7fa fd7c 	bl	8003824 <_lseek>
 8008d2c:	1c43      	adds	r3, r0, #1
 8008d2e:	d102      	bne.n	8008d36 <_lseek_r+0x1e>
 8008d30:	682b      	ldr	r3, [r5, #0]
 8008d32:	b103      	cbz	r3, 8008d36 <_lseek_r+0x1e>
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	bd38      	pop	{r3, r4, r5, pc}
 8008d38:	200008a0 	.word	0x200008a0

08008d3c <_read_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	4d07      	ldr	r5, [pc, #28]	; (8008d5c <_read_r+0x20>)
 8008d40:	4604      	mov	r4, r0
 8008d42:	4608      	mov	r0, r1
 8008d44:	4611      	mov	r1, r2
 8008d46:	2200      	movs	r2, #0
 8008d48:	602a      	str	r2, [r5, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f7fa fd0a 	bl	8003764 <_read>
 8008d50:	1c43      	adds	r3, r0, #1
 8008d52:	d102      	bne.n	8008d5a <_read_r+0x1e>
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	b103      	cbz	r3, 8008d5a <_read_r+0x1e>
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	200008a0 	.word	0x200008a0

08008d60 <_write_r>:
 8008d60:	b538      	push	{r3, r4, r5, lr}
 8008d62:	4d07      	ldr	r5, [pc, #28]	; (8008d80 <_write_r+0x20>)
 8008d64:	4604      	mov	r4, r0
 8008d66:	4608      	mov	r0, r1
 8008d68:	4611      	mov	r1, r2
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	602a      	str	r2, [r5, #0]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	f7fa fd15 	bl	800379e <_write>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d102      	bne.n	8008d7e <_write_r+0x1e>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	b103      	cbz	r3, 8008d7e <_write_r+0x1e>
 8008d7c:	6023      	str	r3, [r4, #0]
 8008d7e:	bd38      	pop	{r3, r4, r5, pc}
 8008d80:	200008a0 	.word	0x200008a0

08008d84 <__errno>:
 8008d84:	4b01      	ldr	r3, [pc, #4]	; (8008d8c <__errno+0x8>)
 8008d86:	6818      	ldr	r0, [r3, #0]
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	2000011c 	.word	0x2000011c

08008d90 <__libc_init_array>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	4d0d      	ldr	r5, [pc, #52]	; (8008dc8 <__libc_init_array+0x38>)
 8008d94:	4c0d      	ldr	r4, [pc, #52]	; (8008dcc <__libc_init_array+0x3c>)
 8008d96:	1b64      	subs	r4, r4, r5
 8008d98:	10a4      	asrs	r4, r4, #2
 8008d9a:	2600      	movs	r6, #0
 8008d9c:	42a6      	cmp	r6, r4
 8008d9e:	d109      	bne.n	8008db4 <__libc_init_array+0x24>
 8008da0:	4d0b      	ldr	r5, [pc, #44]	; (8008dd0 <__libc_init_array+0x40>)
 8008da2:	4c0c      	ldr	r4, [pc, #48]	; (8008dd4 <__libc_init_array+0x44>)
 8008da4:	f000 fe42 	bl	8009a2c <_init>
 8008da8:	1b64      	subs	r4, r4, r5
 8008daa:	10a4      	asrs	r4, r4, #2
 8008dac:	2600      	movs	r6, #0
 8008dae:	42a6      	cmp	r6, r4
 8008db0:	d105      	bne.n	8008dbe <__libc_init_array+0x2e>
 8008db2:	bd70      	pop	{r4, r5, r6, pc}
 8008db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db8:	4798      	blx	r3
 8008dba:	3601      	adds	r6, #1
 8008dbc:	e7ee      	b.n	8008d9c <__libc_init_array+0xc>
 8008dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc2:	4798      	blx	r3
 8008dc4:	3601      	adds	r6, #1
 8008dc6:	e7f2      	b.n	8008dae <__libc_init_array+0x1e>
 8008dc8:	0800cb14 	.word	0x0800cb14
 8008dcc:	0800cb14 	.word	0x0800cb14
 8008dd0:	0800cb14 	.word	0x0800cb14
 8008dd4:	0800cb18 	.word	0x0800cb18

08008dd8 <__retarget_lock_init_recursive>:
 8008dd8:	4770      	bx	lr

08008dda <__retarget_lock_acquire_recursive>:
 8008dda:	4770      	bx	lr

08008ddc <__retarget_lock_release_recursive>:
 8008ddc:	4770      	bx	lr
	...

08008de0 <__assert_func>:
 8008de0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008de2:	4614      	mov	r4, r2
 8008de4:	461a      	mov	r2, r3
 8008de6:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <__assert_func+0x2c>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4605      	mov	r5, r0
 8008dec:	68d8      	ldr	r0, [r3, #12]
 8008dee:	b14c      	cbz	r4, 8008e04 <__assert_func+0x24>
 8008df0:	4b07      	ldr	r3, [pc, #28]	; (8008e10 <__assert_func+0x30>)
 8008df2:	9100      	str	r1, [sp, #0]
 8008df4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008df8:	4906      	ldr	r1, [pc, #24]	; (8008e14 <__assert_func+0x34>)
 8008dfa:	462b      	mov	r3, r5
 8008dfc:	f000 fb4c 	bl	8009498 <fiprintf>
 8008e00:	f000 fb6c 	bl	80094dc <abort>
 8008e04:	4b04      	ldr	r3, [pc, #16]	; (8008e18 <__assert_func+0x38>)
 8008e06:	461c      	mov	r4, r3
 8008e08:	e7f3      	b.n	8008df2 <__assert_func+0x12>
 8008e0a:	bf00      	nop
 8008e0c:	2000011c 	.word	0x2000011c
 8008e10:	0800ca9b 	.word	0x0800ca9b
 8008e14:	0800caa8 	.word	0x0800caa8
 8008e18:	0800cad6 	.word	0x0800cad6

08008e1c <_free_r>:
 8008e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e1e:	2900      	cmp	r1, #0
 8008e20:	d044      	beq.n	8008eac <_free_r+0x90>
 8008e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e26:	9001      	str	r0, [sp, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e2e:	bfb8      	it	lt
 8008e30:	18e4      	addlt	r4, r4, r3
 8008e32:	f000 f8e7 	bl	8009004 <__malloc_lock>
 8008e36:	4a1e      	ldr	r2, [pc, #120]	; (8008eb0 <_free_r+0x94>)
 8008e38:	9801      	ldr	r0, [sp, #4]
 8008e3a:	6813      	ldr	r3, [r2, #0]
 8008e3c:	b933      	cbnz	r3, 8008e4c <_free_r+0x30>
 8008e3e:	6063      	str	r3, [r4, #4]
 8008e40:	6014      	str	r4, [r2, #0]
 8008e42:	b003      	add	sp, #12
 8008e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e48:	f000 b8e2 	b.w	8009010 <__malloc_unlock>
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	d908      	bls.n	8008e62 <_free_r+0x46>
 8008e50:	6825      	ldr	r5, [r4, #0]
 8008e52:	1961      	adds	r1, r4, r5
 8008e54:	428b      	cmp	r3, r1
 8008e56:	bf01      	itttt	eq
 8008e58:	6819      	ldreq	r1, [r3, #0]
 8008e5a:	685b      	ldreq	r3, [r3, #4]
 8008e5c:	1949      	addeq	r1, r1, r5
 8008e5e:	6021      	streq	r1, [r4, #0]
 8008e60:	e7ed      	b.n	8008e3e <_free_r+0x22>
 8008e62:	461a      	mov	r2, r3
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	b10b      	cbz	r3, 8008e6c <_free_r+0x50>
 8008e68:	42a3      	cmp	r3, r4
 8008e6a:	d9fa      	bls.n	8008e62 <_free_r+0x46>
 8008e6c:	6811      	ldr	r1, [r2, #0]
 8008e6e:	1855      	adds	r5, r2, r1
 8008e70:	42a5      	cmp	r5, r4
 8008e72:	d10b      	bne.n	8008e8c <_free_r+0x70>
 8008e74:	6824      	ldr	r4, [r4, #0]
 8008e76:	4421      	add	r1, r4
 8008e78:	1854      	adds	r4, r2, r1
 8008e7a:	42a3      	cmp	r3, r4
 8008e7c:	6011      	str	r1, [r2, #0]
 8008e7e:	d1e0      	bne.n	8008e42 <_free_r+0x26>
 8008e80:	681c      	ldr	r4, [r3, #0]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	6053      	str	r3, [r2, #4]
 8008e86:	440c      	add	r4, r1
 8008e88:	6014      	str	r4, [r2, #0]
 8008e8a:	e7da      	b.n	8008e42 <_free_r+0x26>
 8008e8c:	d902      	bls.n	8008e94 <_free_r+0x78>
 8008e8e:	230c      	movs	r3, #12
 8008e90:	6003      	str	r3, [r0, #0]
 8008e92:	e7d6      	b.n	8008e42 <_free_r+0x26>
 8008e94:	6825      	ldr	r5, [r4, #0]
 8008e96:	1961      	adds	r1, r4, r5
 8008e98:	428b      	cmp	r3, r1
 8008e9a:	bf04      	itt	eq
 8008e9c:	6819      	ldreq	r1, [r3, #0]
 8008e9e:	685b      	ldreq	r3, [r3, #4]
 8008ea0:	6063      	str	r3, [r4, #4]
 8008ea2:	bf04      	itt	eq
 8008ea4:	1949      	addeq	r1, r1, r5
 8008ea6:	6021      	streq	r1, [r4, #0]
 8008ea8:	6054      	str	r4, [r2, #4]
 8008eaa:	e7ca      	b.n	8008e42 <_free_r+0x26>
 8008eac:	b003      	add	sp, #12
 8008eae:	bd30      	pop	{r4, r5, pc}
 8008eb0:	200008a8 	.word	0x200008a8

08008eb4 <malloc>:
 8008eb4:	4b02      	ldr	r3, [pc, #8]	; (8008ec0 <malloc+0xc>)
 8008eb6:	4601      	mov	r1, r0
 8008eb8:	6818      	ldr	r0, [r3, #0]
 8008eba:	f000 b823 	b.w	8008f04 <_malloc_r>
 8008ebe:	bf00      	nop
 8008ec0:	2000011c 	.word	0x2000011c

08008ec4 <sbrk_aligned>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	4e0e      	ldr	r6, [pc, #56]	; (8008f00 <sbrk_aligned+0x3c>)
 8008ec8:	460c      	mov	r4, r1
 8008eca:	6831      	ldr	r1, [r6, #0]
 8008ecc:	4605      	mov	r5, r0
 8008ece:	b911      	cbnz	r1, 8008ed6 <sbrk_aligned+0x12>
 8008ed0:	f000 faf4 	bl	80094bc <_sbrk_r>
 8008ed4:	6030      	str	r0, [r6, #0]
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	4628      	mov	r0, r5
 8008eda:	f000 faef 	bl	80094bc <_sbrk_r>
 8008ede:	1c43      	adds	r3, r0, #1
 8008ee0:	d00a      	beq.n	8008ef8 <sbrk_aligned+0x34>
 8008ee2:	1cc4      	adds	r4, r0, #3
 8008ee4:	f024 0403 	bic.w	r4, r4, #3
 8008ee8:	42a0      	cmp	r0, r4
 8008eea:	d007      	beq.n	8008efc <sbrk_aligned+0x38>
 8008eec:	1a21      	subs	r1, r4, r0
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 fae4 	bl	80094bc <_sbrk_r>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d101      	bne.n	8008efc <sbrk_aligned+0x38>
 8008ef8:	f04f 34ff 	mov.w	r4, #4294967295
 8008efc:	4620      	mov	r0, r4
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	200008ac 	.word	0x200008ac

08008f04 <_malloc_r>:
 8008f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f08:	1ccd      	adds	r5, r1, #3
 8008f0a:	f025 0503 	bic.w	r5, r5, #3
 8008f0e:	3508      	adds	r5, #8
 8008f10:	2d0c      	cmp	r5, #12
 8008f12:	bf38      	it	cc
 8008f14:	250c      	movcc	r5, #12
 8008f16:	2d00      	cmp	r5, #0
 8008f18:	4607      	mov	r7, r0
 8008f1a:	db01      	blt.n	8008f20 <_malloc_r+0x1c>
 8008f1c:	42a9      	cmp	r1, r5
 8008f1e:	d905      	bls.n	8008f2c <_malloc_r+0x28>
 8008f20:	230c      	movs	r3, #12
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	2600      	movs	r6, #0
 8008f26:	4630      	mov	r0, r6
 8008f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009000 <_malloc_r+0xfc>
 8008f30:	f000 f868 	bl	8009004 <__malloc_lock>
 8008f34:	f8d8 3000 	ldr.w	r3, [r8]
 8008f38:	461c      	mov	r4, r3
 8008f3a:	bb5c      	cbnz	r4, 8008f94 <_malloc_r+0x90>
 8008f3c:	4629      	mov	r1, r5
 8008f3e:	4638      	mov	r0, r7
 8008f40:	f7ff ffc0 	bl	8008ec4 <sbrk_aligned>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	4604      	mov	r4, r0
 8008f48:	d155      	bne.n	8008ff6 <_malloc_r+0xf2>
 8008f4a:	f8d8 4000 	ldr.w	r4, [r8]
 8008f4e:	4626      	mov	r6, r4
 8008f50:	2e00      	cmp	r6, #0
 8008f52:	d145      	bne.n	8008fe0 <_malloc_r+0xdc>
 8008f54:	2c00      	cmp	r4, #0
 8008f56:	d048      	beq.n	8008fea <_malloc_r+0xe6>
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	eb04 0903 	add.w	r9, r4, r3
 8008f62:	f000 faab 	bl	80094bc <_sbrk_r>
 8008f66:	4581      	cmp	r9, r0
 8008f68:	d13f      	bne.n	8008fea <_malloc_r+0xe6>
 8008f6a:	6821      	ldr	r1, [r4, #0]
 8008f6c:	1a6d      	subs	r5, r5, r1
 8008f6e:	4629      	mov	r1, r5
 8008f70:	4638      	mov	r0, r7
 8008f72:	f7ff ffa7 	bl	8008ec4 <sbrk_aligned>
 8008f76:	3001      	adds	r0, #1
 8008f78:	d037      	beq.n	8008fea <_malloc_r+0xe6>
 8008f7a:	6823      	ldr	r3, [r4, #0]
 8008f7c:	442b      	add	r3, r5
 8008f7e:	6023      	str	r3, [r4, #0]
 8008f80:	f8d8 3000 	ldr.w	r3, [r8]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d038      	beq.n	8008ffa <_malloc_r+0xf6>
 8008f88:	685a      	ldr	r2, [r3, #4]
 8008f8a:	42a2      	cmp	r2, r4
 8008f8c:	d12b      	bne.n	8008fe6 <_malloc_r+0xe2>
 8008f8e:	2200      	movs	r2, #0
 8008f90:	605a      	str	r2, [r3, #4]
 8008f92:	e00f      	b.n	8008fb4 <_malloc_r+0xb0>
 8008f94:	6822      	ldr	r2, [r4, #0]
 8008f96:	1b52      	subs	r2, r2, r5
 8008f98:	d41f      	bmi.n	8008fda <_malloc_r+0xd6>
 8008f9a:	2a0b      	cmp	r2, #11
 8008f9c:	d917      	bls.n	8008fce <_malloc_r+0xca>
 8008f9e:	1961      	adds	r1, r4, r5
 8008fa0:	42a3      	cmp	r3, r4
 8008fa2:	6025      	str	r5, [r4, #0]
 8008fa4:	bf18      	it	ne
 8008fa6:	6059      	strne	r1, [r3, #4]
 8008fa8:	6863      	ldr	r3, [r4, #4]
 8008faa:	bf08      	it	eq
 8008fac:	f8c8 1000 	streq.w	r1, [r8]
 8008fb0:	5162      	str	r2, [r4, r5]
 8008fb2:	604b      	str	r3, [r1, #4]
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	f104 060b 	add.w	r6, r4, #11
 8008fba:	f000 f829 	bl	8009010 <__malloc_unlock>
 8008fbe:	f026 0607 	bic.w	r6, r6, #7
 8008fc2:	1d23      	adds	r3, r4, #4
 8008fc4:	1af2      	subs	r2, r6, r3
 8008fc6:	d0ae      	beq.n	8008f26 <_malloc_r+0x22>
 8008fc8:	1b9b      	subs	r3, r3, r6
 8008fca:	50a3      	str	r3, [r4, r2]
 8008fcc:	e7ab      	b.n	8008f26 <_malloc_r+0x22>
 8008fce:	42a3      	cmp	r3, r4
 8008fd0:	6862      	ldr	r2, [r4, #4]
 8008fd2:	d1dd      	bne.n	8008f90 <_malloc_r+0x8c>
 8008fd4:	f8c8 2000 	str.w	r2, [r8]
 8008fd8:	e7ec      	b.n	8008fb4 <_malloc_r+0xb0>
 8008fda:	4623      	mov	r3, r4
 8008fdc:	6864      	ldr	r4, [r4, #4]
 8008fde:	e7ac      	b.n	8008f3a <_malloc_r+0x36>
 8008fe0:	4634      	mov	r4, r6
 8008fe2:	6876      	ldr	r6, [r6, #4]
 8008fe4:	e7b4      	b.n	8008f50 <_malloc_r+0x4c>
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	e7cc      	b.n	8008f84 <_malloc_r+0x80>
 8008fea:	230c      	movs	r3, #12
 8008fec:	603b      	str	r3, [r7, #0]
 8008fee:	4638      	mov	r0, r7
 8008ff0:	f000 f80e 	bl	8009010 <__malloc_unlock>
 8008ff4:	e797      	b.n	8008f26 <_malloc_r+0x22>
 8008ff6:	6025      	str	r5, [r4, #0]
 8008ff8:	e7dc      	b.n	8008fb4 <_malloc_r+0xb0>
 8008ffa:	605b      	str	r3, [r3, #4]
 8008ffc:	deff      	udf	#255	; 0xff
 8008ffe:	bf00      	nop
 8009000:	200008a8 	.word	0x200008a8

08009004 <__malloc_lock>:
 8009004:	4801      	ldr	r0, [pc, #4]	; (800900c <__malloc_lock+0x8>)
 8009006:	f7ff bee8 	b.w	8008dda <__retarget_lock_acquire_recursive>
 800900a:	bf00      	nop
 800900c:	200008a4 	.word	0x200008a4

08009010 <__malloc_unlock>:
 8009010:	4801      	ldr	r0, [pc, #4]	; (8009018 <__malloc_unlock+0x8>)
 8009012:	f7ff bee3 	b.w	8008ddc <__retarget_lock_release_recursive>
 8009016:	bf00      	nop
 8009018:	200008a4 	.word	0x200008a4

0800901c <_printf_common>:
 800901c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009020:	4616      	mov	r6, r2
 8009022:	4699      	mov	r9, r3
 8009024:	688a      	ldr	r2, [r1, #8]
 8009026:	690b      	ldr	r3, [r1, #16]
 8009028:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800902c:	4293      	cmp	r3, r2
 800902e:	bfb8      	it	lt
 8009030:	4613      	movlt	r3, r2
 8009032:	6033      	str	r3, [r6, #0]
 8009034:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009038:	4607      	mov	r7, r0
 800903a:	460c      	mov	r4, r1
 800903c:	b10a      	cbz	r2, 8009042 <_printf_common+0x26>
 800903e:	3301      	adds	r3, #1
 8009040:	6033      	str	r3, [r6, #0]
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	0699      	lsls	r1, r3, #26
 8009046:	bf42      	ittt	mi
 8009048:	6833      	ldrmi	r3, [r6, #0]
 800904a:	3302      	addmi	r3, #2
 800904c:	6033      	strmi	r3, [r6, #0]
 800904e:	6825      	ldr	r5, [r4, #0]
 8009050:	f015 0506 	ands.w	r5, r5, #6
 8009054:	d106      	bne.n	8009064 <_printf_common+0x48>
 8009056:	f104 0a19 	add.w	sl, r4, #25
 800905a:	68e3      	ldr	r3, [r4, #12]
 800905c:	6832      	ldr	r2, [r6, #0]
 800905e:	1a9b      	subs	r3, r3, r2
 8009060:	42ab      	cmp	r3, r5
 8009062:	dc26      	bgt.n	80090b2 <_printf_common+0x96>
 8009064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009068:	1e13      	subs	r3, r2, #0
 800906a:	6822      	ldr	r2, [r4, #0]
 800906c:	bf18      	it	ne
 800906e:	2301      	movne	r3, #1
 8009070:	0692      	lsls	r2, r2, #26
 8009072:	d42b      	bmi.n	80090cc <_printf_common+0xb0>
 8009074:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009078:	4649      	mov	r1, r9
 800907a:	4638      	mov	r0, r7
 800907c:	47c0      	blx	r8
 800907e:	3001      	adds	r0, #1
 8009080:	d01e      	beq.n	80090c0 <_printf_common+0xa4>
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	6922      	ldr	r2, [r4, #16]
 8009086:	f003 0306 	and.w	r3, r3, #6
 800908a:	2b04      	cmp	r3, #4
 800908c:	bf02      	ittt	eq
 800908e:	68e5      	ldreq	r5, [r4, #12]
 8009090:	6833      	ldreq	r3, [r6, #0]
 8009092:	1aed      	subeq	r5, r5, r3
 8009094:	68a3      	ldr	r3, [r4, #8]
 8009096:	bf0c      	ite	eq
 8009098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800909c:	2500      	movne	r5, #0
 800909e:	4293      	cmp	r3, r2
 80090a0:	bfc4      	itt	gt
 80090a2:	1a9b      	subgt	r3, r3, r2
 80090a4:	18ed      	addgt	r5, r5, r3
 80090a6:	2600      	movs	r6, #0
 80090a8:	341a      	adds	r4, #26
 80090aa:	42b5      	cmp	r5, r6
 80090ac:	d11a      	bne.n	80090e4 <_printf_common+0xc8>
 80090ae:	2000      	movs	r0, #0
 80090b0:	e008      	b.n	80090c4 <_printf_common+0xa8>
 80090b2:	2301      	movs	r3, #1
 80090b4:	4652      	mov	r2, sl
 80090b6:	4649      	mov	r1, r9
 80090b8:	4638      	mov	r0, r7
 80090ba:	47c0      	blx	r8
 80090bc:	3001      	adds	r0, #1
 80090be:	d103      	bne.n	80090c8 <_printf_common+0xac>
 80090c0:	f04f 30ff 	mov.w	r0, #4294967295
 80090c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c8:	3501      	adds	r5, #1
 80090ca:	e7c6      	b.n	800905a <_printf_common+0x3e>
 80090cc:	18e1      	adds	r1, r4, r3
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	2030      	movs	r0, #48	; 0x30
 80090d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80090d6:	4422      	add	r2, r4
 80090d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80090dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80090e0:	3302      	adds	r3, #2
 80090e2:	e7c7      	b.n	8009074 <_printf_common+0x58>
 80090e4:	2301      	movs	r3, #1
 80090e6:	4622      	mov	r2, r4
 80090e8:	4649      	mov	r1, r9
 80090ea:	4638      	mov	r0, r7
 80090ec:	47c0      	blx	r8
 80090ee:	3001      	adds	r0, #1
 80090f0:	d0e6      	beq.n	80090c0 <_printf_common+0xa4>
 80090f2:	3601      	adds	r6, #1
 80090f4:	e7d9      	b.n	80090aa <_printf_common+0x8e>
	...

080090f8 <_printf_i>:
 80090f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090fc:	7e0f      	ldrb	r7, [r1, #24]
 80090fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009100:	2f78      	cmp	r7, #120	; 0x78
 8009102:	4691      	mov	r9, r2
 8009104:	4680      	mov	r8, r0
 8009106:	460c      	mov	r4, r1
 8009108:	469a      	mov	sl, r3
 800910a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800910e:	d807      	bhi.n	8009120 <_printf_i+0x28>
 8009110:	2f62      	cmp	r7, #98	; 0x62
 8009112:	d80a      	bhi.n	800912a <_printf_i+0x32>
 8009114:	2f00      	cmp	r7, #0
 8009116:	f000 80d4 	beq.w	80092c2 <_printf_i+0x1ca>
 800911a:	2f58      	cmp	r7, #88	; 0x58
 800911c:	f000 80c0 	beq.w	80092a0 <_printf_i+0x1a8>
 8009120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009124:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009128:	e03a      	b.n	80091a0 <_printf_i+0xa8>
 800912a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800912e:	2b15      	cmp	r3, #21
 8009130:	d8f6      	bhi.n	8009120 <_printf_i+0x28>
 8009132:	a101      	add	r1, pc, #4	; (adr r1, 8009138 <_printf_i+0x40>)
 8009134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009138:	08009191 	.word	0x08009191
 800913c:	080091a5 	.word	0x080091a5
 8009140:	08009121 	.word	0x08009121
 8009144:	08009121 	.word	0x08009121
 8009148:	08009121 	.word	0x08009121
 800914c:	08009121 	.word	0x08009121
 8009150:	080091a5 	.word	0x080091a5
 8009154:	08009121 	.word	0x08009121
 8009158:	08009121 	.word	0x08009121
 800915c:	08009121 	.word	0x08009121
 8009160:	08009121 	.word	0x08009121
 8009164:	080092a9 	.word	0x080092a9
 8009168:	080091d1 	.word	0x080091d1
 800916c:	08009263 	.word	0x08009263
 8009170:	08009121 	.word	0x08009121
 8009174:	08009121 	.word	0x08009121
 8009178:	080092cb 	.word	0x080092cb
 800917c:	08009121 	.word	0x08009121
 8009180:	080091d1 	.word	0x080091d1
 8009184:	08009121 	.word	0x08009121
 8009188:	08009121 	.word	0x08009121
 800918c:	0800926b 	.word	0x0800926b
 8009190:	682b      	ldr	r3, [r5, #0]
 8009192:	1d1a      	adds	r2, r3, #4
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	602a      	str	r2, [r5, #0]
 8009198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800919c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091a0:	2301      	movs	r3, #1
 80091a2:	e09f      	b.n	80092e4 <_printf_i+0x1ec>
 80091a4:	6820      	ldr	r0, [r4, #0]
 80091a6:	682b      	ldr	r3, [r5, #0]
 80091a8:	0607      	lsls	r7, r0, #24
 80091aa:	f103 0104 	add.w	r1, r3, #4
 80091ae:	6029      	str	r1, [r5, #0]
 80091b0:	d501      	bpl.n	80091b6 <_printf_i+0xbe>
 80091b2:	681e      	ldr	r6, [r3, #0]
 80091b4:	e003      	b.n	80091be <_printf_i+0xc6>
 80091b6:	0646      	lsls	r6, r0, #25
 80091b8:	d5fb      	bpl.n	80091b2 <_printf_i+0xba>
 80091ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80091be:	2e00      	cmp	r6, #0
 80091c0:	da03      	bge.n	80091ca <_printf_i+0xd2>
 80091c2:	232d      	movs	r3, #45	; 0x2d
 80091c4:	4276      	negs	r6, r6
 80091c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091ca:	485a      	ldr	r0, [pc, #360]	; (8009334 <_printf_i+0x23c>)
 80091cc:	230a      	movs	r3, #10
 80091ce:	e012      	b.n	80091f6 <_printf_i+0xfe>
 80091d0:	682b      	ldr	r3, [r5, #0]
 80091d2:	6820      	ldr	r0, [r4, #0]
 80091d4:	1d19      	adds	r1, r3, #4
 80091d6:	6029      	str	r1, [r5, #0]
 80091d8:	0605      	lsls	r5, r0, #24
 80091da:	d501      	bpl.n	80091e0 <_printf_i+0xe8>
 80091dc:	681e      	ldr	r6, [r3, #0]
 80091de:	e002      	b.n	80091e6 <_printf_i+0xee>
 80091e0:	0641      	lsls	r1, r0, #25
 80091e2:	d5fb      	bpl.n	80091dc <_printf_i+0xe4>
 80091e4:	881e      	ldrh	r6, [r3, #0]
 80091e6:	4853      	ldr	r0, [pc, #332]	; (8009334 <_printf_i+0x23c>)
 80091e8:	2f6f      	cmp	r7, #111	; 0x6f
 80091ea:	bf0c      	ite	eq
 80091ec:	2308      	moveq	r3, #8
 80091ee:	230a      	movne	r3, #10
 80091f0:	2100      	movs	r1, #0
 80091f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091f6:	6865      	ldr	r5, [r4, #4]
 80091f8:	60a5      	str	r5, [r4, #8]
 80091fa:	2d00      	cmp	r5, #0
 80091fc:	bfa2      	ittt	ge
 80091fe:	6821      	ldrge	r1, [r4, #0]
 8009200:	f021 0104 	bicge.w	r1, r1, #4
 8009204:	6021      	strge	r1, [r4, #0]
 8009206:	b90e      	cbnz	r6, 800920c <_printf_i+0x114>
 8009208:	2d00      	cmp	r5, #0
 800920a:	d04b      	beq.n	80092a4 <_printf_i+0x1ac>
 800920c:	4615      	mov	r5, r2
 800920e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009212:	fb03 6711 	mls	r7, r3, r1, r6
 8009216:	5dc7      	ldrb	r7, [r0, r7]
 8009218:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800921c:	4637      	mov	r7, r6
 800921e:	42bb      	cmp	r3, r7
 8009220:	460e      	mov	r6, r1
 8009222:	d9f4      	bls.n	800920e <_printf_i+0x116>
 8009224:	2b08      	cmp	r3, #8
 8009226:	d10b      	bne.n	8009240 <_printf_i+0x148>
 8009228:	6823      	ldr	r3, [r4, #0]
 800922a:	07de      	lsls	r6, r3, #31
 800922c:	d508      	bpl.n	8009240 <_printf_i+0x148>
 800922e:	6923      	ldr	r3, [r4, #16]
 8009230:	6861      	ldr	r1, [r4, #4]
 8009232:	4299      	cmp	r1, r3
 8009234:	bfde      	ittt	le
 8009236:	2330      	movle	r3, #48	; 0x30
 8009238:	f805 3c01 	strble.w	r3, [r5, #-1]
 800923c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009240:	1b52      	subs	r2, r2, r5
 8009242:	6122      	str	r2, [r4, #16]
 8009244:	f8cd a000 	str.w	sl, [sp]
 8009248:	464b      	mov	r3, r9
 800924a:	aa03      	add	r2, sp, #12
 800924c:	4621      	mov	r1, r4
 800924e:	4640      	mov	r0, r8
 8009250:	f7ff fee4 	bl	800901c <_printf_common>
 8009254:	3001      	adds	r0, #1
 8009256:	d14a      	bne.n	80092ee <_printf_i+0x1f6>
 8009258:	f04f 30ff 	mov.w	r0, #4294967295
 800925c:	b004      	add	sp, #16
 800925e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	f043 0320 	orr.w	r3, r3, #32
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	4833      	ldr	r0, [pc, #204]	; (8009338 <_printf_i+0x240>)
 800926c:	2778      	movs	r7, #120	; 0x78
 800926e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	6829      	ldr	r1, [r5, #0]
 8009276:	061f      	lsls	r7, r3, #24
 8009278:	f851 6b04 	ldr.w	r6, [r1], #4
 800927c:	d402      	bmi.n	8009284 <_printf_i+0x18c>
 800927e:	065f      	lsls	r7, r3, #25
 8009280:	bf48      	it	mi
 8009282:	b2b6      	uxthmi	r6, r6
 8009284:	07df      	lsls	r7, r3, #31
 8009286:	bf48      	it	mi
 8009288:	f043 0320 	orrmi.w	r3, r3, #32
 800928c:	6029      	str	r1, [r5, #0]
 800928e:	bf48      	it	mi
 8009290:	6023      	strmi	r3, [r4, #0]
 8009292:	b91e      	cbnz	r6, 800929c <_printf_i+0x1a4>
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	f023 0320 	bic.w	r3, r3, #32
 800929a:	6023      	str	r3, [r4, #0]
 800929c:	2310      	movs	r3, #16
 800929e:	e7a7      	b.n	80091f0 <_printf_i+0xf8>
 80092a0:	4824      	ldr	r0, [pc, #144]	; (8009334 <_printf_i+0x23c>)
 80092a2:	e7e4      	b.n	800926e <_printf_i+0x176>
 80092a4:	4615      	mov	r5, r2
 80092a6:	e7bd      	b.n	8009224 <_printf_i+0x12c>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	6826      	ldr	r6, [r4, #0]
 80092ac:	6961      	ldr	r1, [r4, #20]
 80092ae:	1d18      	adds	r0, r3, #4
 80092b0:	6028      	str	r0, [r5, #0]
 80092b2:	0635      	lsls	r5, r6, #24
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	d501      	bpl.n	80092bc <_printf_i+0x1c4>
 80092b8:	6019      	str	r1, [r3, #0]
 80092ba:	e002      	b.n	80092c2 <_printf_i+0x1ca>
 80092bc:	0670      	lsls	r0, r6, #25
 80092be:	d5fb      	bpl.n	80092b8 <_printf_i+0x1c0>
 80092c0:	8019      	strh	r1, [r3, #0]
 80092c2:	2300      	movs	r3, #0
 80092c4:	6123      	str	r3, [r4, #16]
 80092c6:	4615      	mov	r5, r2
 80092c8:	e7bc      	b.n	8009244 <_printf_i+0x14c>
 80092ca:	682b      	ldr	r3, [r5, #0]
 80092cc:	1d1a      	adds	r2, r3, #4
 80092ce:	602a      	str	r2, [r5, #0]
 80092d0:	681d      	ldr	r5, [r3, #0]
 80092d2:	6862      	ldr	r2, [r4, #4]
 80092d4:	2100      	movs	r1, #0
 80092d6:	4628      	mov	r0, r5
 80092d8:	f7f6 ff7a 	bl	80001d0 <memchr>
 80092dc:	b108      	cbz	r0, 80092e2 <_printf_i+0x1ea>
 80092de:	1b40      	subs	r0, r0, r5
 80092e0:	6060      	str	r0, [r4, #4]
 80092e2:	6863      	ldr	r3, [r4, #4]
 80092e4:	6123      	str	r3, [r4, #16]
 80092e6:	2300      	movs	r3, #0
 80092e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ec:	e7aa      	b.n	8009244 <_printf_i+0x14c>
 80092ee:	6923      	ldr	r3, [r4, #16]
 80092f0:	462a      	mov	r2, r5
 80092f2:	4649      	mov	r1, r9
 80092f4:	4640      	mov	r0, r8
 80092f6:	47d0      	blx	sl
 80092f8:	3001      	adds	r0, #1
 80092fa:	d0ad      	beq.n	8009258 <_printf_i+0x160>
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	079b      	lsls	r3, r3, #30
 8009300:	d413      	bmi.n	800932a <_printf_i+0x232>
 8009302:	68e0      	ldr	r0, [r4, #12]
 8009304:	9b03      	ldr	r3, [sp, #12]
 8009306:	4298      	cmp	r0, r3
 8009308:	bfb8      	it	lt
 800930a:	4618      	movlt	r0, r3
 800930c:	e7a6      	b.n	800925c <_printf_i+0x164>
 800930e:	2301      	movs	r3, #1
 8009310:	4632      	mov	r2, r6
 8009312:	4649      	mov	r1, r9
 8009314:	4640      	mov	r0, r8
 8009316:	47d0      	blx	sl
 8009318:	3001      	adds	r0, #1
 800931a:	d09d      	beq.n	8009258 <_printf_i+0x160>
 800931c:	3501      	adds	r5, #1
 800931e:	68e3      	ldr	r3, [r4, #12]
 8009320:	9903      	ldr	r1, [sp, #12]
 8009322:	1a5b      	subs	r3, r3, r1
 8009324:	42ab      	cmp	r3, r5
 8009326:	dcf2      	bgt.n	800930e <_printf_i+0x216>
 8009328:	e7eb      	b.n	8009302 <_printf_i+0x20a>
 800932a:	2500      	movs	r5, #0
 800932c:	f104 0619 	add.w	r6, r4, #25
 8009330:	e7f5      	b.n	800931e <_printf_i+0x226>
 8009332:	bf00      	nop
 8009334:	0800cad7 	.word	0x0800cad7
 8009338:	0800cae8 	.word	0x0800cae8

0800933c <__sflush_r>:
 800933c:	898a      	ldrh	r2, [r1, #12]
 800933e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009342:	4605      	mov	r5, r0
 8009344:	0710      	lsls	r0, r2, #28
 8009346:	460c      	mov	r4, r1
 8009348:	d458      	bmi.n	80093fc <__sflush_r+0xc0>
 800934a:	684b      	ldr	r3, [r1, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	dc05      	bgt.n	800935c <__sflush_r+0x20>
 8009350:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009352:	2b00      	cmp	r3, #0
 8009354:	dc02      	bgt.n	800935c <__sflush_r+0x20>
 8009356:	2000      	movs	r0, #0
 8009358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800935c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800935e:	2e00      	cmp	r6, #0
 8009360:	d0f9      	beq.n	8009356 <__sflush_r+0x1a>
 8009362:	2300      	movs	r3, #0
 8009364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009368:	682f      	ldr	r7, [r5, #0]
 800936a:	6a21      	ldr	r1, [r4, #32]
 800936c:	602b      	str	r3, [r5, #0]
 800936e:	d032      	beq.n	80093d6 <__sflush_r+0x9a>
 8009370:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009372:	89a3      	ldrh	r3, [r4, #12]
 8009374:	075a      	lsls	r2, r3, #29
 8009376:	d505      	bpl.n	8009384 <__sflush_r+0x48>
 8009378:	6863      	ldr	r3, [r4, #4]
 800937a:	1ac0      	subs	r0, r0, r3
 800937c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800937e:	b10b      	cbz	r3, 8009384 <__sflush_r+0x48>
 8009380:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009382:	1ac0      	subs	r0, r0, r3
 8009384:	2300      	movs	r3, #0
 8009386:	4602      	mov	r2, r0
 8009388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800938a:	6a21      	ldr	r1, [r4, #32]
 800938c:	4628      	mov	r0, r5
 800938e:	47b0      	blx	r6
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	d106      	bne.n	80093a4 <__sflush_r+0x68>
 8009396:	6829      	ldr	r1, [r5, #0]
 8009398:	291d      	cmp	r1, #29
 800939a:	d82b      	bhi.n	80093f4 <__sflush_r+0xb8>
 800939c:	4a29      	ldr	r2, [pc, #164]	; (8009444 <__sflush_r+0x108>)
 800939e:	410a      	asrs	r2, r1
 80093a0:	07d6      	lsls	r6, r2, #31
 80093a2:	d427      	bmi.n	80093f4 <__sflush_r+0xb8>
 80093a4:	2200      	movs	r2, #0
 80093a6:	6062      	str	r2, [r4, #4]
 80093a8:	04d9      	lsls	r1, r3, #19
 80093aa:	6922      	ldr	r2, [r4, #16]
 80093ac:	6022      	str	r2, [r4, #0]
 80093ae:	d504      	bpl.n	80093ba <__sflush_r+0x7e>
 80093b0:	1c42      	adds	r2, r0, #1
 80093b2:	d101      	bne.n	80093b8 <__sflush_r+0x7c>
 80093b4:	682b      	ldr	r3, [r5, #0]
 80093b6:	b903      	cbnz	r3, 80093ba <__sflush_r+0x7e>
 80093b8:	6560      	str	r0, [r4, #84]	; 0x54
 80093ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093bc:	602f      	str	r7, [r5, #0]
 80093be:	2900      	cmp	r1, #0
 80093c0:	d0c9      	beq.n	8009356 <__sflush_r+0x1a>
 80093c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093c6:	4299      	cmp	r1, r3
 80093c8:	d002      	beq.n	80093d0 <__sflush_r+0x94>
 80093ca:	4628      	mov	r0, r5
 80093cc:	f7ff fd26 	bl	8008e1c <_free_r>
 80093d0:	2000      	movs	r0, #0
 80093d2:	6360      	str	r0, [r4, #52]	; 0x34
 80093d4:	e7c0      	b.n	8009358 <__sflush_r+0x1c>
 80093d6:	2301      	movs	r3, #1
 80093d8:	4628      	mov	r0, r5
 80093da:	47b0      	blx	r6
 80093dc:	1c41      	adds	r1, r0, #1
 80093de:	d1c8      	bne.n	8009372 <__sflush_r+0x36>
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0c5      	beq.n	8009372 <__sflush_r+0x36>
 80093e6:	2b1d      	cmp	r3, #29
 80093e8:	d001      	beq.n	80093ee <__sflush_r+0xb2>
 80093ea:	2b16      	cmp	r3, #22
 80093ec:	d101      	bne.n	80093f2 <__sflush_r+0xb6>
 80093ee:	602f      	str	r7, [r5, #0]
 80093f0:	e7b1      	b.n	8009356 <__sflush_r+0x1a>
 80093f2:	89a3      	ldrh	r3, [r4, #12]
 80093f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093f8:	81a3      	strh	r3, [r4, #12]
 80093fa:	e7ad      	b.n	8009358 <__sflush_r+0x1c>
 80093fc:	690f      	ldr	r7, [r1, #16]
 80093fe:	2f00      	cmp	r7, #0
 8009400:	d0a9      	beq.n	8009356 <__sflush_r+0x1a>
 8009402:	0793      	lsls	r3, r2, #30
 8009404:	680e      	ldr	r6, [r1, #0]
 8009406:	bf08      	it	eq
 8009408:	694b      	ldreq	r3, [r1, #20]
 800940a:	600f      	str	r7, [r1, #0]
 800940c:	bf18      	it	ne
 800940e:	2300      	movne	r3, #0
 8009410:	eba6 0807 	sub.w	r8, r6, r7
 8009414:	608b      	str	r3, [r1, #8]
 8009416:	f1b8 0f00 	cmp.w	r8, #0
 800941a:	dd9c      	ble.n	8009356 <__sflush_r+0x1a>
 800941c:	6a21      	ldr	r1, [r4, #32]
 800941e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009420:	4643      	mov	r3, r8
 8009422:	463a      	mov	r2, r7
 8009424:	4628      	mov	r0, r5
 8009426:	47b0      	blx	r6
 8009428:	2800      	cmp	r0, #0
 800942a:	dc06      	bgt.n	800943a <__sflush_r+0xfe>
 800942c:	89a3      	ldrh	r3, [r4, #12]
 800942e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009432:	81a3      	strh	r3, [r4, #12]
 8009434:	f04f 30ff 	mov.w	r0, #4294967295
 8009438:	e78e      	b.n	8009358 <__sflush_r+0x1c>
 800943a:	4407      	add	r7, r0
 800943c:	eba8 0800 	sub.w	r8, r8, r0
 8009440:	e7e9      	b.n	8009416 <__sflush_r+0xda>
 8009442:	bf00      	nop
 8009444:	dfbffffe 	.word	0xdfbffffe

08009448 <_fflush_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	690b      	ldr	r3, [r1, #16]
 800944c:	4605      	mov	r5, r0
 800944e:	460c      	mov	r4, r1
 8009450:	b913      	cbnz	r3, 8009458 <_fflush_r+0x10>
 8009452:	2500      	movs	r5, #0
 8009454:	4628      	mov	r0, r5
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	b118      	cbz	r0, 8009462 <_fflush_r+0x1a>
 800945a:	6a03      	ldr	r3, [r0, #32]
 800945c:	b90b      	cbnz	r3, 8009462 <_fflush_r+0x1a>
 800945e:	f7ff fbc9 	bl	8008bf4 <__sinit>
 8009462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d0f3      	beq.n	8009452 <_fflush_r+0xa>
 800946a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800946c:	07d0      	lsls	r0, r2, #31
 800946e:	d404      	bmi.n	800947a <_fflush_r+0x32>
 8009470:	0599      	lsls	r1, r3, #22
 8009472:	d402      	bmi.n	800947a <_fflush_r+0x32>
 8009474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009476:	f7ff fcb0 	bl	8008dda <__retarget_lock_acquire_recursive>
 800947a:	4628      	mov	r0, r5
 800947c:	4621      	mov	r1, r4
 800947e:	f7ff ff5d 	bl	800933c <__sflush_r>
 8009482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009484:	07da      	lsls	r2, r3, #31
 8009486:	4605      	mov	r5, r0
 8009488:	d4e4      	bmi.n	8009454 <_fflush_r+0xc>
 800948a:	89a3      	ldrh	r3, [r4, #12]
 800948c:	059b      	lsls	r3, r3, #22
 800948e:	d4e1      	bmi.n	8009454 <_fflush_r+0xc>
 8009490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009492:	f7ff fca3 	bl	8008ddc <__retarget_lock_release_recursive>
 8009496:	e7dd      	b.n	8009454 <_fflush_r+0xc>

08009498 <fiprintf>:
 8009498:	b40e      	push	{r1, r2, r3}
 800949a:	b503      	push	{r0, r1, lr}
 800949c:	4601      	mov	r1, r0
 800949e:	ab03      	add	r3, sp, #12
 80094a0:	4805      	ldr	r0, [pc, #20]	; (80094b8 <fiprintf+0x20>)
 80094a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094a6:	6800      	ldr	r0, [r0, #0]
 80094a8:	9301      	str	r3, [sp, #4]
 80094aa:	f000 f847 	bl	800953c <_vfiprintf_r>
 80094ae:	b002      	add	sp, #8
 80094b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094b4:	b003      	add	sp, #12
 80094b6:	4770      	bx	lr
 80094b8:	2000011c 	.word	0x2000011c

080094bc <_sbrk_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4d06      	ldr	r5, [pc, #24]	; (80094d8 <_sbrk_r+0x1c>)
 80094c0:	2300      	movs	r3, #0
 80094c2:	4604      	mov	r4, r0
 80094c4:	4608      	mov	r0, r1
 80094c6:	602b      	str	r3, [r5, #0]
 80094c8:	f7fa f9ba 	bl	8003840 <_sbrk>
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	d102      	bne.n	80094d6 <_sbrk_r+0x1a>
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	b103      	cbz	r3, 80094d6 <_sbrk_r+0x1a>
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	bd38      	pop	{r3, r4, r5, pc}
 80094d8:	200008a0 	.word	0x200008a0

080094dc <abort>:
 80094dc:	b508      	push	{r3, lr}
 80094de:	2006      	movs	r0, #6
 80094e0:	f000 fa04 	bl	80098ec <raise>
 80094e4:	2001      	movs	r0, #1
 80094e6:	f7fa f933 	bl	8003750 <_exit>

080094ea <__sfputc_r>:
 80094ea:	6893      	ldr	r3, [r2, #8]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	b410      	push	{r4}
 80094f2:	6093      	str	r3, [r2, #8]
 80094f4:	da08      	bge.n	8009508 <__sfputc_r+0x1e>
 80094f6:	6994      	ldr	r4, [r2, #24]
 80094f8:	42a3      	cmp	r3, r4
 80094fa:	db01      	blt.n	8009500 <__sfputc_r+0x16>
 80094fc:	290a      	cmp	r1, #10
 80094fe:	d103      	bne.n	8009508 <__sfputc_r+0x1e>
 8009500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009504:	f000 b934 	b.w	8009770 <__swbuf_r>
 8009508:	6813      	ldr	r3, [r2, #0]
 800950a:	1c58      	adds	r0, r3, #1
 800950c:	6010      	str	r0, [r2, #0]
 800950e:	7019      	strb	r1, [r3, #0]
 8009510:	4608      	mov	r0, r1
 8009512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009516:	4770      	bx	lr

08009518 <__sfputs_r>:
 8009518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800951a:	4606      	mov	r6, r0
 800951c:	460f      	mov	r7, r1
 800951e:	4614      	mov	r4, r2
 8009520:	18d5      	adds	r5, r2, r3
 8009522:	42ac      	cmp	r4, r5
 8009524:	d101      	bne.n	800952a <__sfputs_r+0x12>
 8009526:	2000      	movs	r0, #0
 8009528:	e007      	b.n	800953a <__sfputs_r+0x22>
 800952a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800952e:	463a      	mov	r2, r7
 8009530:	4630      	mov	r0, r6
 8009532:	f7ff ffda 	bl	80094ea <__sfputc_r>
 8009536:	1c43      	adds	r3, r0, #1
 8009538:	d1f3      	bne.n	8009522 <__sfputs_r+0xa>
 800953a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800953c <_vfiprintf_r>:
 800953c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	460d      	mov	r5, r1
 8009542:	b09d      	sub	sp, #116	; 0x74
 8009544:	4614      	mov	r4, r2
 8009546:	4698      	mov	r8, r3
 8009548:	4606      	mov	r6, r0
 800954a:	b118      	cbz	r0, 8009554 <_vfiprintf_r+0x18>
 800954c:	6a03      	ldr	r3, [r0, #32]
 800954e:	b90b      	cbnz	r3, 8009554 <_vfiprintf_r+0x18>
 8009550:	f7ff fb50 	bl	8008bf4 <__sinit>
 8009554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009556:	07d9      	lsls	r1, r3, #31
 8009558:	d405      	bmi.n	8009566 <_vfiprintf_r+0x2a>
 800955a:	89ab      	ldrh	r3, [r5, #12]
 800955c:	059a      	lsls	r2, r3, #22
 800955e:	d402      	bmi.n	8009566 <_vfiprintf_r+0x2a>
 8009560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009562:	f7ff fc3a 	bl	8008dda <__retarget_lock_acquire_recursive>
 8009566:	89ab      	ldrh	r3, [r5, #12]
 8009568:	071b      	lsls	r3, r3, #28
 800956a:	d501      	bpl.n	8009570 <_vfiprintf_r+0x34>
 800956c:	692b      	ldr	r3, [r5, #16]
 800956e:	b99b      	cbnz	r3, 8009598 <_vfiprintf_r+0x5c>
 8009570:	4629      	mov	r1, r5
 8009572:	4630      	mov	r0, r6
 8009574:	f000 f93a 	bl	80097ec <__swsetup_r>
 8009578:	b170      	cbz	r0, 8009598 <_vfiprintf_r+0x5c>
 800957a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800957c:	07dc      	lsls	r4, r3, #31
 800957e:	d504      	bpl.n	800958a <_vfiprintf_r+0x4e>
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	b01d      	add	sp, #116	; 0x74
 8009586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958a:	89ab      	ldrh	r3, [r5, #12]
 800958c:	0598      	lsls	r0, r3, #22
 800958e:	d4f7      	bmi.n	8009580 <_vfiprintf_r+0x44>
 8009590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009592:	f7ff fc23 	bl	8008ddc <__retarget_lock_release_recursive>
 8009596:	e7f3      	b.n	8009580 <_vfiprintf_r+0x44>
 8009598:	2300      	movs	r3, #0
 800959a:	9309      	str	r3, [sp, #36]	; 0x24
 800959c:	2320      	movs	r3, #32
 800959e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80095a6:	2330      	movs	r3, #48	; 0x30
 80095a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800975c <_vfiprintf_r+0x220>
 80095ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095b0:	f04f 0901 	mov.w	r9, #1
 80095b4:	4623      	mov	r3, r4
 80095b6:	469a      	mov	sl, r3
 80095b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095bc:	b10a      	cbz	r2, 80095c2 <_vfiprintf_r+0x86>
 80095be:	2a25      	cmp	r2, #37	; 0x25
 80095c0:	d1f9      	bne.n	80095b6 <_vfiprintf_r+0x7a>
 80095c2:	ebba 0b04 	subs.w	fp, sl, r4
 80095c6:	d00b      	beq.n	80095e0 <_vfiprintf_r+0xa4>
 80095c8:	465b      	mov	r3, fp
 80095ca:	4622      	mov	r2, r4
 80095cc:	4629      	mov	r1, r5
 80095ce:	4630      	mov	r0, r6
 80095d0:	f7ff ffa2 	bl	8009518 <__sfputs_r>
 80095d4:	3001      	adds	r0, #1
 80095d6:	f000 80a9 	beq.w	800972c <_vfiprintf_r+0x1f0>
 80095da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095dc:	445a      	add	r2, fp
 80095de:	9209      	str	r2, [sp, #36]	; 0x24
 80095e0:	f89a 3000 	ldrb.w	r3, [sl]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	f000 80a1 	beq.w	800972c <_vfiprintf_r+0x1f0>
 80095ea:	2300      	movs	r3, #0
 80095ec:	f04f 32ff 	mov.w	r2, #4294967295
 80095f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095f4:	f10a 0a01 	add.w	sl, sl, #1
 80095f8:	9304      	str	r3, [sp, #16]
 80095fa:	9307      	str	r3, [sp, #28]
 80095fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009600:	931a      	str	r3, [sp, #104]	; 0x68
 8009602:	4654      	mov	r4, sl
 8009604:	2205      	movs	r2, #5
 8009606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800960a:	4854      	ldr	r0, [pc, #336]	; (800975c <_vfiprintf_r+0x220>)
 800960c:	f7f6 fde0 	bl	80001d0 <memchr>
 8009610:	9a04      	ldr	r2, [sp, #16]
 8009612:	b9d8      	cbnz	r0, 800964c <_vfiprintf_r+0x110>
 8009614:	06d1      	lsls	r1, r2, #27
 8009616:	bf44      	itt	mi
 8009618:	2320      	movmi	r3, #32
 800961a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800961e:	0713      	lsls	r3, r2, #28
 8009620:	bf44      	itt	mi
 8009622:	232b      	movmi	r3, #43	; 0x2b
 8009624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009628:	f89a 3000 	ldrb.w	r3, [sl]
 800962c:	2b2a      	cmp	r3, #42	; 0x2a
 800962e:	d015      	beq.n	800965c <_vfiprintf_r+0x120>
 8009630:	9a07      	ldr	r2, [sp, #28]
 8009632:	4654      	mov	r4, sl
 8009634:	2000      	movs	r0, #0
 8009636:	f04f 0c0a 	mov.w	ip, #10
 800963a:	4621      	mov	r1, r4
 800963c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009640:	3b30      	subs	r3, #48	; 0x30
 8009642:	2b09      	cmp	r3, #9
 8009644:	d94d      	bls.n	80096e2 <_vfiprintf_r+0x1a6>
 8009646:	b1b0      	cbz	r0, 8009676 <_vfiprintf_r+0x13a>
 8009648:	9207      	str	r2, [sp, #28]
 800964a:	e014      	b.n	8009676 <_vfiprintf_r+0x13a>
 800964c:	eba0 0308 	sub.w	r3, r0, r8
 8009650:	fa09 f303 	lsl.w	r3, r9, r3
 8009654:	4313      	orrs	r3, r2
 8009656:	9304      	str	r3, [sp, #16]
 8009658:	46a2      	mov	sl, r4
 800965a:	e7d2      	b.n	8009602 <_vfiprintf_r+0xc6>
 800965c:	9b03      	ldr	r3, [sp, #12]
 800965e:	1d19      	adds	r1, r3, #4
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	9103      	str	r1, [sp, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	bfbb      	ittet	lt
 8009668:	425b      	neglt	r3, r3
 800966a:	f042 0202 	orrlt.w	r2, r2, #2
 800966e:	9307      	strge	r3, [sp, #28]
 8009670:	9307      	strlt	r3, [sp, #28]
 8009672:	bfb8      	it	lt
 8009674:	9204      	strlt	r2, [sp, #16]
 8009676:	7823      	ldrb	r3, [r4, #0]
 8009678:	2b2e      	cmp	r3, #46	; 0x2e
 800967a:	d10c      	bne.n	8009696 <_vfiprintf_r+0x15a>
 800967c:	7863      	ldrb	r3, [r4, #1]
 800967e:	2b2a      	cmp	r3, #42	; 0x2a
 8009680:	d134      	bne.n	80096ec <_vfiprintf_r+0x1b0>
 8009682:	9b03      	ldr	r3, [sp, #12]
 8009684:	1d1a      	adds	r2, r3, #4
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	9203      	str	r2, [sp, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	bfb8      	it	lt
 800968e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009692:	3402      	adds	r4, #2
 8009694:	9305      	str	r3, [sp, #20]
 8009696:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800976c <_vfiprintf_r+0x230>
 800969a:	7821      	ldrb	r1, [r4, #0]
 800969c:	2203      	movs	r2, #3
 800969e:	4650      	mov	r0, sl
 80096a0:	f7f6 fd96 	bl	80001d0 <memchr>
 80096a4:	b138      	cbz	r0, 80096b6 <_vfiprintf_r+0x17a>
 80096a6:	9b04      	ldr	r3, [sp, #16]
 80096a8:	eba0 000a 	sub.w	r0, r0, sl
 80096ac:	2240      	movs	r2, #64	; 0x40
 80096ae:	4082      	lsls	r2, r0
 80096b0:	4313      	orrs	r3, r2
 80096b2:	3401      	adds	r4, #1
 80096b4:	9304      	str	r3, [sp, #16]
 80096b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ba:	4829      	ldr	r0, [pc, #164]	; (8009760 <_vfiprintf_r+0x224>)
 80096bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096c0:	2206      	movs	r2, #6
 80096c2:	f7f6 fd85 	bl	80001d0 <memchr>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d03f      	beq.n	800974a <_vfiprintf_r+0x20e>
 80096ca:	4b26      	ldr	r3, [pc, #152]	; (8009764 <_vfiprintf_r+0x228>)
 80096cc:	bb1b      	cbnz	r3, 8009716 <_vfiprintf_r+0x1da>
 80096ce:	9b03      	ldr	r3, [sp, #12]
 80096d0:	3307      	adds	r3, #7
 80096d2:	f023 0307 	bic.w	r3, r3, #7
 80096d6:	3308      	adds	r3, #8
 80096d8:	9303      	str	r3, [sp, #12]
 80096da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096dc:	443b      	add	r3, r7
 80096de:	9309      	str	r3, [sp, #36]	; 0x24
 80096e0:	e768      	b.n	80095b4 <_vfiprintf_r+0x78>
 80096e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80096e6:	460c      	mov	r4, r1
 80096e8:	2001      	movs	r0, #1
 80096ea:	e7a6      	b.n	800963a <_vfiprintf_r+0xfe>
 80096ec:	2300      	movs	r3, #0
 80096ee:	3401      	adds	r4, #1
 80096f0:	9305      	str	r3, [sp, #20]
 80096f2:	4619      	mov	r1, r3
 80096f4:	f04f 0c0a 	mov.w	ip, #10
 80096f8:	4620      	mov	r0, r4
 80096fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096fe:	3a30      	subs	r2, #48	; 0x30
 8009700:	2a09      	cmp	r2, #9
 8009702:	d903      	bls.n	800970c <_vfiprintf_r+0x1d0>
 8009704:	2b00      	cmp	r3, #0
 8009706:	d0c6      	beq.n	8009696 <_vfiprintf_r+0x15a>
 8009708:	9105      	str	r1, [sp, #20]
 800970a:	e7c4      	b.n	8009696 <_vfiprintf_r+0x15a>
 800970c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009710:	4604      	mov	r4, r0
 8009712:	2301      	movs	r3, #1
 8009714:	e7f0      	b.n	80096f8 <_vfiprintf_r+0x1bc>
 8009716:	ab03      	add	r3, sp, #12
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	462a      	mov	r2, r5
 800971c:	4b12      	ldr	r3, [pc, #72]	; (8009768 <_vfiprintf_r+0x22c>)
 800971e:	a904      	add	r1, sp, #16
 8009720:	4630      	mov	r0, r6
 8009722:	f3af 8000 	nop.w
 8009726:	4607      	mov	r7, r0
 8009728:	1c78      	adds	r0, r7, #1
 800972a:	d1d6      	bne.n	80096da <_vfiprintf_r+0x19e>
 800972c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800972e:	07d9      	lsls	r1, r3, #31
 8009730:	d405      	bmi.n	800973e <_vfiprintf_r+0x202>
 8009732:	89ab      	ldrh	r3, [r5, #12]
 8009734:	059a      	lsls	r2, r3, #22
 8009736:	d402      	bmi.n	800973e <_vfiprintf_r+0x202>
 8009738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800973a:	f7ff fb4f 	bl	8008ddc <__retarget_lock_release_recursive>
 800973e:	89ab      	ldrh	r3, [r5, #12]
 8009740:	065b      	lsls	r3, r3, #25
 8009742:	f53f af1d 	bmi.w	8009580 <_vfiprintf_r+0x44>
 8009746:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009748:	e71c      	b.n	8009584 <_vfiprintf_r+0x48>
 800974a:	ab03      	add	r3, sp, #12
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	462a      	mov	r2, r5
 8009750:	4b05      	ldr	r3, [pc, #20]	; (8009768 <_vfiprintf_r+0x22c>)
 8009752:	a904      	add	r1, sp, #16
 8009754:	4630      	mov	r0, r6
 8009756:	f7ff fccf 	bl	80090f8 <_printf_i>
 800975a:	e7e4      	b.n	8009726 <_vfiprintf_r+0x1ea>
 800975c:	0800caf9 	.word	0x0800caf9
 8009760:	0800cb03 	.word	0x0800cb03
 8009764:	00000000 	.word	0x00000000
 8009768:	08009519 	.word	0x08009519
 800976c:	0800caff 	.word	0x0800caff

08009770 <__swbuf_r>:
 8009770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009772:	460e      	mov	r6, r1
 8009774:	4614      	mov	r4, r2
 8009776:	4605      	mov	r5, r0
 8009778:	b118      	cbz	r0, 8009782 <__swbuf_r+0x12>
 800977a:	6a03      	ldr	r3, [r0, #32]
 800977c:	b90b      	cbnz	r3, 8009782 <__swbuf_r+0x12>
 800977e:	f7ff fa39 	bl	8008bf4 <__sinit>
 8009782:	69a3      	ldr	r3, [r4, #24]
 8009784:	60a3      	str	r3, [r4, #8]
 8009786:	89a3      	ldrh	r3, [r4, #12]
 8009788:	071a      	lsls	r2, r3, #28
 800978a:	d525      	bpl.n	80097d8 <__swbuf_r+0x68>
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	b31b      	cbz	r3, 80097d8 <__swbuf_r+0x68>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	6922      	ldr	r2, [r4, #16]
 8009794:	1a98      	subs	r0, r3, r2
 8009796:	6963      	ldr	r3, [r4, #20]
 8009798:	b2f6      	uxtb	r6, r6
 800979a:	4283      	cmp	r3, r0
 800979c:	4637      	mov	r7, r6
 800979e:	dc04      	bgt.n	80097aa <__swbuf_r+0x3a>
 80097a0:	4621      	mov	r1, r4
 80097a2:	4628      	mov	r0, r5
 80097a4:	f7ff fe50 	bl	8009448 <_fflush_r>
 80097a8:	b9e0      	cbnz	r0, 80097e4 <__swbuf_r+0x74>
 80097aa:	68a3      	ldr	r3, [r4, #8]
 80097ac:	3b01      	subs	r3, #1
 80097ae:	60a3      	str	r3, [r4, #8]
 80097b0:	6823      	ldr	r3, [r4, #0]
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	6022      	str	r2, [r4, #0]
 80097b6:	701e      	strb	r6, [r3, #0]
 80097b8:	6962      	ldr	r2, [r4, #20]
 80097ba:	1c43      	adds	r3, r0, #1
 80097bc:	429a      	cmp	r2, r3
 80097be:	d004      	beq.n	80097ca <__swbuf_r+0x5a>
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	07db      	lsls	r3, r3, #31
 80097c4:	d506      	bpl.n	80097d4 <__swbuf_r+0x64>
 80097c6:	2e0a      	cmp	r6, #10
 80097c8:	d104      	bne.n	80097d4 <__swbuf_r+0x64>
 80097ca:	4621      	mov	r1, r4
 80097cc:	4628      	mov	r0, r5
 80097ce:	f7ff fe3b 	bl	8009448 <_fflush_r>
 80097d2:	b938      	cbnz	r0, 80097e4 <__swbuf_r+0x74>
 80097d4:	4638      	mov	r0, r7
 80097d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d8:	4621      	mov	r1, r4
 80097da:	4628      	mov	r0, r5
 80097dc:	f000 f806 	bl	80097ec <__swsetup_r>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d0d5      	beq.n	8009790 <__swbuf_r+0x20>
 80097e4:	f04f 37ff 	mov.w	r7, #4294967295
 80097e8:	e7f4      	b.n	80097d4 <__swbuf_r+0x64>
	...

080097ec <__swsetup_r>:
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	4b2a      	ldr	r3, [pc, #168]	; (8009898 <__swsetup_r+0xac>)
 80097f0:	4605      	mov	r5, r0
 80097f2:	6818      	ldr	r0, [r3, #0]
 80097f4:	460c      	mov	r4, r1
 80097f6:	b118      	cbz	r0, 8009800 <__swsetup_r+0x14>
 80097f8:	6a03      	ldr	r3, [r0, #32]
 80097fa:	b90b      	cbnz	r3, 8009800 <__swsetup_r+0x14>
 80097fc:	f7ff f9fa 	bl	8008bf4 <__sinit>
 8009800:	89a3      	ldrh	r3, [r4, #12]
 8009802:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009806:	0718      	lsls	r0, r3, #28
 8009808:	d422      	bmi.n	8009850 <__swsetup_r+0x64>
 800980a:	06d9      	lsls	r1, r3, #27
 800980c:	d407      	bmi.n	800981e <__swsetup_r+0x32>
 800980e:	2309      	movs	r3, #9
 8009810:	602b      	str	r3, [r5, #0]
 8009812:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009816:	81a3      	strh	r3, [r4, #12]
 8009818:	f04f 30ff 	mov.w	r0, #4294967295
 800981c:	e034      	b.n	8009888 <__swsetup_r+0x9c>
 800981e:	0758      	lsls	r0, r3, #29
 8009820:	d512      	bpl.n	8009848 <__swsetup_r+0x5c>
 8009822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009824:	b141      	cbz	r1, 8009838 <__swsetup_r+0x4c>
 8009826:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800982a:	4299      	cmp	r1, r3
 800982c:	d002      	beq.n	8009834 <__swsetup_r+0x48>
 800982e:	4628      	mov	r0, r5
 8009830:	f7ff faf4 	bl	8008e1c <_free_r>
 8009834:	2300      	movs	r3, #0
 8009836:	6363      	str	r3, [r4, #52]	; 0x34
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800983e:	81a3      	strh	r3, [r4, #12]
 8009840:	2300      	movs	r3, #0
 8009842:	6063      	str	r3, [r4, #4]
 8009844:	6923      	ldr	r3, [r4, #16]
 8009846:	6023      	str	r3, [r4, #0]
 8009848:	89a3      	ldrh	r3, [r4, #12]
 800984a:	f043 0308 	orr.w	r3, r3, #8
 800984e:	81a3      	strh	r3, [r4, #12]
 8009850:	6923      	ldr	r3, [r4, #16]
 8009852:	b94b      	cbnz	r3, 8009868 <__swsetup_r+0x7c>
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800985a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800985e:	d003      	beq.n	8009868 <__swsetup_r+0x7c>
 8009860:	4621      	mov	r1, r4
 8009862:	4628      	mov	r0, r5
 8009864:	f000 f884 	bl	8009970 <__smakebuf_r>
 8009868:	89a0      	ldrh	r0, [r4, #12]
 800986a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800986e:	f010 0301 	ands.w	r3, r0, #1
 8009872:	d00a      	beq.n	800988a <__swsetup_r+0x9e>
 8009874:	2300      	movs	r3, #0
 8009876:	60a3      	str	r3, [r4, #8]
 8009878:	6963      	ldr	r3, [r4, #20]
 800987a:	425b      	negs	r3, r3
 800987c:	61a3      	str	r3, [r4, #24]
 800987e:	6923      	ldr	r3, [r4, #16]
 8009880:	b943      	cbnz	r3, 8009894 <__swsetup_r+0xa8>
 8009882:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009886:	d1c4      	bne.n	8009812 <__swsetup_r+0x26>
 8009888:	bd38      	pop	{r3, r4, r5, pc}
 800988a:	0781      	lsls	r1, r0, #30
 800988c:	bf58      	it	pl
 800988e:	6963      	ldrpl	r3, [r4, #20]
 8009890:	60a3      	str	r3, [r4, #8]
 8009892:	e7f4      	b.n	800987e <__swsetup_r+0x92>
 8009894:	2000      	movs	r0, #0
 8009896:	e7f7      	b.n	8009888 <__swsetup_r+0x9c>
 8009898:	2000011c 	.word	0x2000011c

0800989c <_raise_r>:
 800989c:	291f      	cmp	r1, #31
 800989e:	b538      	push	{r3, r4, r5, lr}
 80098a0:	4604      	mov	r4, r0
 80098a2:	460d      	mov	r5, r1
 80098a4:	d904      	bls.n	80098b0 <_raise_r+0x14>
 80098a6:	2316      	movs	r3, #22
 80098a8:	6003      	str	r3, [r0, #0]
 80098aa:	f04f 30ff 	mov.w	r0, #4294967295
 80098ae:	bd38      	pop	{r3, r4, r5, pc}
 80098b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80098b2:	b112      	cbz	r2, 80098ba <_raise_r+0x1e>
 80098b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098b8:	b94b      	cbnz	r3, 80098ce <_raise_r+0x32>
 80098ba:	4620      	mov	r0, r4
 80098bc:	f000 f830 	bl	8009920 <_getpid_r>
 80098c0:	462a      	mov	r2, r5
 80098c2:	4601      	mov	r1, r0
 80098c4:	4620      	mov	r0, r4
 80098c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098ca:	f000 b817 	b.w	80098fc <_kill_r>
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d00a      	beq.n	80098e8 <_raise_r+0x4c>
 80098d2:	1c59      	adds	r1, r3, #1
 80098d4:	d103      	bne.n	80098de <_raise_r+0x42>
 80098d6:	2316      	movs	r3, #22
 80098d8:	6003      	str	r3, [r0, #0]
 80098da:	2001      	movs	r0, #1
 80098dc:	e7e7      	b.n	80098ae <_raise_r+0x12>
 80098de:	2400      	movs	r4, #0
 80098e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098e4:	4628      	mov	r0, r5
 80098e6:	4798      	blx	r3
 80098e8:	2000      	movs	r0, #0
 80098ea:	e7e0      	b.n	80098ae <_raise_r+0x12>

080098ec <raise>:
 80098ec:	4b02      	ldr	r3, [pc, #8]	; (80098f8 <raise+0xc>)
 80098ee:	4601      	mov	r1, r0
 80098f0:	6818      	ldr	r0, [r3, #0]
 80098f2:	f7ff bfd3 	b.w	800989c <_raise_r>
 80098f6:	bf00      	nop
 80098f8:	2000011c 	.word	0x2000011c

080098fc <_kill_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	4d07      	ldr	r5, [pc, #28]	; (800991c <_kill_r+0x20>)
 8009900:	2300      	movs	r3, #0
 8009902:	4604      	mov	r4, r0
 8009904:	4608      	mov	r0, r1
 8009906:	4611      	mov	r1, r2
 8009908:	602b      	str	r3, [r5, #0]
 800990a:	f7f9 ff11 	bl	8003730 <_kill>
 800990e:	1c43      	adds	r3, r0, #1
 8009910:	d102      	bne.n	8009918 <_kill_r+0x1c>
 8009912:	682b      	ldr	r3, [r5, #0]
 8009914:	b103      	cbz	r3, 8009918 <_kill_r+0x1c>
 8009916:	6023      	str	r3, [r4, #0]
 8009918:	bd38      	pop	{r3, r4, r5, pc}
 800991a:	bf00      	nop
 800991c:	200008a0 	.word	0x200008a0

08009920 <_getpid_r>:
 8009920:	f7f9 befe 	b.w	8003720 <_getpid>

08009924 <__swhatbuf_r>:
 8009924:	b570      	push	{r4, r5, r6, lr}
 8009926:	460c      	mov	r4, r1
 8009928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992c:	2900      	cmp	r1, #0
 800992e:	b096      	sub	sp, #88	; 0x58
 8009930:	4615      	mov	r5, r2
 8009932:	461e      	mov	r6, r3
 8009934:	da0d      	bge.n	8009952 <__swhatbuf_r+0x2e>
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	f013 0f80 	tst.w	r3, #128	; 0x80
 800993c:	f04f 0100 	mov.w	r1, #0
 8009940:	bf0c      	ite	eq
 8009942:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009946:	2340      	movne	r3, #64	; 0x40
 8009948:	2000      	movs	r0, #0
 800994a:	6031      	str	r1, [r6, #0]
 800994c:	602b      	str	r3, [r5, #0]
 800994e:	b016      	add	sp, #88	; 0x58
 8009950:	bd70      	pop	{r4, r5, r6, pc}
 8009952:	466a      	mov	r2, sp
 8009954:	f000 f848 	bl	80099e8 <_fstat_r>
 8009958:	2800      	cmp	r0, #0
 800995a:	dbec      	blt.n	8009936 <__swhatbuf_r+0x12>
 800995c:	9901      	ldr	r1, [sp, #4]
 800995e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009962:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009966:	4259      	negs	r1, r3
 8009968:	4159      	adcs	r1, r3
 800996a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800996e:	e7eb      	b.n	8009948 <__swhatbuf_r+0x24>

08009970 <__smakebuf_r>:
 8009970:	898b      	ldrh	r3, [r1, #12]
 8009972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009974:	079d      	lsls	r5, r3, #30
 8009976:	4606      	mov	r6, r0
 8009978:	460c      	mov	r4, r1
 800997a:	d507      	bpl.n	800998c <__smakebuf_r+0x1c>
 800997c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	6123      	str	r3, [r4, #16]
 8009984:	2301      	movs	r3, #1
 8009986:	6163      	str	r3, [r4, #20]
 8009988:	b002      	add	sp, #8
 800998a:	bd70      	pop	{r4, r5, r6, pc}
 800998c:	ab01      	add	r3, sp, #4
 800998e:	466a      	mov	r2, sp
 8009990:	f7ff ffc8 	bl	8009924 <__swhatbuf_r>
 8009994:	9900      	ldr	r1, [sp, #0]
 8009996:	4605      	mov	r5, r0
 8009998:	4630      	mov	r0, r6
 800999a:	f7ff fab3 	bl	8008f04 <_malloc_r>
 800999e:	b948      	cbnz	r0, 80099b4 <__smakebuf_r+0x44>
 80099a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a4:	059a      	lsls	r2, r3, #22
 80099a6:	d4ef      	bmi.n	8009988 <__smakebuf_r+0x18>
 80099a8:	f023 0303 	bic.w	r3, r3, #3
 80099ac:	f043 0302 	orr.w	r3, r3, #2
 80099b0:	81a3      	strh	r3, [r4, #12]
 80099b2:	e7e3      	b.n	800997c <__smakebuf_r+0xc>
 80099b4:	89a3      	ldrh	r3, [r4, #12]
 80099b6:	6020      	str	r0, [r4, #0]
 80099b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099bc:	81a3      	strh	r3, [r4, #12]
 80099be:	9b00      	ldr	r3, [sp, #0]
 80099c0:	6163      	str	r3, [r4, #20]
 80099c2:	9b01      	ldr	r3, [sp, #4]
 80099c4:	6120      	str	r0, [r4, #16]
 80099c6:	b15b      	cbz	r3, 80099e0 <__smakebuf_r+0x70>
 80099c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099cc:	4630      	mov	r0, r6
 80099ce:	f000 f81d 	bl	8009a0c <_isatty_r>
 80099d2:	b128      	cbz	r0, 80099e0 <__smakebuf_r+0x70>
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	f023 0303 	bic.w	r3, r3, #3
 80099da:	f043 0301 	orr.w	r3, r3, #1
 80099de:	81a3      	strh	r3, [r4, #12]
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	431d      	orrs	r5, r3
 80099e4:	81a5      	strh	r5, [r4, #12]
 80099e6:	e7cf      	b.n	8009988 <__smakebuf_r+0x18>

080099e8 <_fstat_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4d07      	ldr	r5, [pc, #28]	; (8009a08 <_fstat_r+0x20>)
 80099ec:	2300      	movs	r3, #0
 80099ee:	4604      	mov	r4, r0
 80099f0:	4608      	mov	r0, r1
 80099f2:	4611      	mov	r1, r2
 80099f4:	602b      	str	r3, [r5, #0]
 80099f6:	f7f9 fefa 	bl	80037ee <_fstat>
 80099fa:	1c43      	adds	r3, r0, #1
 80099fc:	d102      	bne.n	8009a04 <_fstat_r+0x1c>
 80099fe:	682b      	ldr	r3, [r5, #0]
 8009a00:	b103      	cbz	r3, 8009a04 <_fstat_r+0x1c>
 8009a02:	6023      	str	r3, [r4, #0]
 8009a04:	bd38      	pop	{r3, r4, r5, pc}
 8009a06:	bf00      	nop
 8009a08:	200008a0 	.word	0x200008a0

08009a0c <_isatty_r>:
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	4d06      	ldr	r5, [pc, #24]	; (8009a28 <_isatty_r+0x1c>)
 8009a10:	2300      	movs	r3, #0
 8009a12:	4604      	mov	r4, r0
 8009a14:	4608      	mov	r0, r1
 8009a16:	602b      	str	r3, [r5, #0]
 8009a18:	f7f9 fef9 	bl	800380e <_isatty>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d102      	bne.n	8009a26 <_isatty_r+0x1a>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	b103      	cbz	r3, 8009a26 <_isatty_r+0x1a>
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
 8009a28:	200008a0 	.word	0x200008a0

08009a2c <_init>:
 8009a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2e:	bf00      	nop
 8009a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a32:	bc08      	pop	{r3}
 8009a34:	469e      	mov	lr, r3
 8009a36:	4770      	bx	lr

08009a38 <_fini>:
 8009a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3a:	bf00      	nop
 8009a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3e:	bc08      	pop	{r3}
 8009a40:	469e      	mov	lr, r3
 8009a42:	4770      	bx	lr
